Require Import ExtLib.Structures.Monads.
-----
Require Import ExtLib.Structures.Monoid.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Import MonadNotation.
-----
Local Open Scope monad_scope.
-----
Section except.
-----
Variable T : Type.
-----
Global Instance Monad_either : Monad (sum T) :=\n  { ret  := fun _ v => inr v\n  ; bind := fun _ _ c1 c2 => match c1 with\n                               | inl v => inl v\n                               | inr v => c2 v\n                             end\n  }.
-----
Global Instance Exception_either : MonadExc T (sum T) :=\n  { raise := fun _ v => inl v\n  ; catch := fun _ c h => match c with\n                            | inl v => h v\n                            | x => x\n                          end\n  }.
-----
Variable m : Type -> Type.
-----
Inductive eitherT A := mkEitherT { unEitherT : m (sum T A) }.
-----
Variable M : Monad m.
-----
Global Instance Monad_eitherT : Monad eitherT :=\n  { ret := fun _ x => mkEitherT (ret (inr x))\n  ; bind := fun _ _ c f => mkEitherT (\n      xM <- unEitherT c ;;\n      match xM with\n      | inl x => ret (inl x)\n      | inr x => unEitherT (f x)\n      end\n    )\n  }.
-----
Global Instance Exception_eitherT : MonadExc T eitherT :=\n  { raise := fun _ v => mkEitherT (ret (inl v))\n  ; catch := fun _ c h => mkEitherT (\n      xM <- unEitherT c ;;\n      match xM with\n        | inl x => unEitherT (h x)\n        | inr x => ret (inr x)\n      end\n    )\n  }.
-----
Global Instance MonadPlus_eitherT : MonadPlus eitherT :=\n  { mplus _A _B mA mB := mkEitherT (\n      x <- unEitherT mA ;;\n      match x with\n      | inl _ =>\n          y <- unEitherT mB ;;\n          match y with\n          | inl t => ret (inl t)\n          | inr b => ret (inr (inr b))\n          end\n      | inr a => ret (inr (inl a))\n      end\n    )\n  }.
-----
Global Instance MonadT_eitherT : MonadT eitherT m :=\n  { lift := fun _ c => mkEitherT (liftM ret c) }.
-----
Global Instance MonadState_eitherT {T} (MS : MonadState T m) : MonadState T eitherT :=\n  { get := lift get\n  ; put := fun v => lift (put v)\n  }.
-----
Global Instance MonadReader_eitherT {T} (MR : MonadReader T m) : MonadReader T eitherT :=\n  { ask := lift ask\n  ; local := fun _ f cmd => mkEitherT (local f (unEitherT cmd))\n  }.
-----
Global Instance MonadWriter_eitherT {T} (Mon : Monoid T) (MW : MonadWriter Mon m) : MonadWriter Mon eitherT :=\n  { tell := fun x => lift (tell x)\n  ; listen := fun _ c => mkEitherT (\n    x <- listen (unEitherT c) ;;\n    match x with\n      | (inl l, _) => ret (inl l)\n      | (inr a, t) => ret (inr (a, t))\n    end)\n  ; pass := fun _ c => mkEitherT (\n    x <- unEitherT c ;;\n    match x with\n      | inl s => ret (inl s)\n      | inr (a,f) => pass (ret (inr a, f))\n    end)\n  }.
-----
Global Instance MonadFix_eitherT (MF : MonadFix m) : MonadFix eitherT :=\n  { mfix := fun _ _ r v =>\n    mkEitherT (mfix (fun f x => unEitherT (r (fun x => mkEitherT (f x)) x)) v)\n  }.
-----
End except.
-----
