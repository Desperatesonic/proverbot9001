Require Export construction_lemmas.
-----
Definition weak_parallelogram (A B C D : Point) : Prop :=\n  A<>C /\ B<>D /\\n  exists O, mid_point O A C /\ mid_point O B D.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D,\n parallelogram A B C D -> weak_parallelogram A B C D.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), weak_parallelogram A B C D
+++++
Proof.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), weak_parallelogram A B C D
+++++
intros.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
weak_parallelogram A B C D
+++++
unfold weak_parallelogram.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
and (not (eq A C)) (and (not (eq B D)) (ex (fun O : Point => and (mid_point O A C) (mid_point O B D))))
+++++
repeat split.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
not (eq A C)
+++++
eauto with Geom.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
not (eq B D)
+++++
eauto with Geom.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
+++++
assert (~ parallel A C B D).
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
not (parallel A C B D)
+++++
apply diago_par_intersect.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
apply diago_par_intersect.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
parallelogram A B C D
+++++
auto.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).

*****
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
+++++
assert (T := inter_llex A C B D H0).
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).

*****
T : sig (fun Y : Point => and (Col Y A C) (Col Y B D))
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
+++++
elim T.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.

*****
T : sig (fun Y : Point => and (Col Y A C) (Col Y B D))
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
forall (x : Point) (_ : and (Col x A C) (Col x B D)), ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
+++++
intro O.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.

*****
O : Point
T : sig (fun Y : Point => and (Col Y A C) (Col Y B D))
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
forall _ : and (Col O A C) (Col O B D), ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
+++++
intros.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.

*****
p : and (Col O A C) (Col O B D)
O : Point
T : sig (fun Y : Point => and (Col Y A C) (Col Y B D))
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
+++++
clear T.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.

*****
p : and (Col O A C) (Col O B D)
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
+++++
decompose [and] p.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.

*****
H2 : Col O B D
H1 : Col O A C
p : and (Col O A C) (Col O B D)
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
+++++
clear p.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.

*****
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
+++++
assert (A ** O = O ** C).
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).

*****
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
eapply l1_24.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).
eapply l1_24.

*****
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
parallelogram A ?B C ?D
+++++
apply H.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).
eapply l1_24.

*****
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
Col A C O
+++++
Geometry.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).
eapply l1_24.

*****
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
Col B D O
+++++
Geometry.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).

*****
H3 : eq (DSeg A O) (DSeg O C)
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
+++++
assert (parallelogram B A D C).
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).
assert (parallelogram B A D C).

*****
H3 : eq (DSeg A O) (DSeg O C)
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
parallelogram B A D C
+++++
Geometry.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).
assert (parallelogram B A D C).

*****
H4 : parallelogram B A D C
H3 : eq (DSeg A O) (DSeg O C)
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
+++++
assert (B ** O = O ** D).
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).
assert (parallelogram B A D C).
assert (B ** O = O ** D).

*****
H4 : parallelogram B A D C
H3 : eq (DSeg A O) (DSeg O C)
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
eq (DSeg B O) (DSeg O D)
+++++
eapply l1_24.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).
assert (parallelogram B A D C).
assert (B ** O = O ** D).
eapply l1_24.

*****
H4 : parallelogram B A D C
H3 : eq (DSeg A O) (DSeg O C)
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
parallelogram B ?B D ?D
+++++
apply H4.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).
assert (parallelogram B A D C).
assert (B ** O = O ** D).
eapply l1_24.

*****
H4 : parallelogram B A D C
H3 : eq (DSeg A O) (DSeg O C)
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
Col B D O
+++++
Geometry.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).
assert (parallelogram B A D C).
assert (B ** O = O ** D).
eapply l1_24.

*****
H4 : parallelogram B A D C
H3 : eq (DSeg A O) (DSeg O C)
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
Col A C O
+++++
Geometry.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).
assert (parallelogram B A D C).
assert (B ** O = O ** D).

*****
H5 : eq (DSeg B O) (DSeg O D)
H4 : parallelogram B A D C
H3 : eq (DSeg A O) (DSeg O C)
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
+++++
exists O.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).
assert (parallelogram B A D C).
assert (B ** O = O ** D).
exists O.

*****
H5 : eq (DSeg B O) (DSeg O D)
H4 : parallelogram B A D C
H3 : eq (DSeg A O) (DSeg O C)
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
and (mid_point O A C) (mid_point O B D)
+++++
unfold mid_point.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).
assert (parallelogram B A D C).
assert (B ** O = O ** D).
exists O.
unfold mid_point.

*****
H5 : eq (DSeg B O) (DSeg O D)
H4 : parallelogram B A D C
H3 : eq (DSeg A O) (DSeg O C)
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
and (and (Col A C O) (eq (DSeg A O) (DSeg O C))) (and (Col B D O) (eq (DSeg B O) (DSeg O D)))
+++++
repeat split.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).
assert (parallelogram B A D C).
assert (B ** O = O ** D).
exists O.
unfold mid_point.
repeat split.

*****
H5 : eq (DSeg B O) (DSeg O D)
H4 : parallelogram B A D C
H3 : eq (DSeg A O) (DSeg O C)
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
Col A C O
+++++
Geometry.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).
assert (parallelogram B A D C).
assert (B ** O = O ** D).
exists O.
unfold mid_point.
repeat split.

*****
H5 : eq (DSeg B O) (DSeg O D)
H4 : parallelogram B A D C
H3 : eq (DSeg A O) (DSeg O C)
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
eq (DSeg A O) (DSeg O C)
+++++
Geometry.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).
assert (parallelogram B A D C).
assert (B ** O = O ** D).
exists O.
unfold mid_point.
repeat split.

*****
H5 : eq (DSeg B O) (DSeg O D)
H4 : parallelogram B A D C
H3 : eq (DSeg A O) (DSeg O C)
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
Col B D O
+++++
Geometry.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.
assert (~ parallel A C B D).
assert (T := inter_llex A C B D H0).
elim T.
intro O.
intros.
clear T.
decompose [and] p.
clear p.
assert (A ** O = O ** C).
assert (parallelogram B A D C).
assert (B ** O = O ** D).
exists O.
unfold mid_point.
repeat split.

*****
H5 : eq (DSeg B O) (DSeg O D)
H4 : parallelogram B A D C
H3 : eq (DSeg A O) (DSeg O C)
H2 : Col O B D
H1 : Col O A C
O : Point
H0 : not (parallel A C B D)
H : parallelogram A B C D
A,B,C,D : Point
*****
eq (DSeg B O) (DSeg O D)
+++++
Geometry.
-----
Lemma parallelogram_weak_parallelogram : forall A B C D, parallelogram A B C D -> weak_parallelogram A B C D.
Proof.
intros.
unfold weak_parallelogram.
repeat split.

*****

*****

+++++
Qed.
-----
Theorem weak_parallelogram_parallelogram : forall A B C D,\n~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.
-----
Theorem weak_parallelogram_parallelogram : forall A B C D, ~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.

*****

*****
forall (A B C D : Point) (_ : not (Col A B C)) (_ : weak_parallelogram A B C D), parallelogram A B C D
+++++
Proof with Geometry.
-----
Theorem weak_parallelogram_parallelogram : forall A B C D, ~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.
Proof with Geometry.

*****

*****
forall (A B C D : Point) (_ : not (Col A B C)) (_ : weak_parallelogram A B C D), parallelogram A B C D
+++++
intros.
-----
Theorem weak_parallelogram_parallelogram : forall A B C D, ~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.
Proof with Geometry.
intros.

*****
H0 : weak_parallelogram A B C D
H : not (Col A B C)
A,B,C,D : Point
*****
parallelogram A B C D
+++++
unfold weak_parallelogram in H0.
-----
Theorem weak_parallelogram_parallelogram : forall A B C D, ~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.
Proof with Geometry.
intros.
unfold weak_parallelogram in H0.

*****
H0 : and (not (eq A C))\n (and (not (eq B D))\n (ex (fun O : Point => and (mid_point O A C) (mid_point O B D))))
H : not (Col A B C)
A,B,C,D : Point
*****
parallelogram A B C D
+++++
DecompAndAll.
-----
Theorem weak_parallelogram_parallelogram : forall A B C D, ~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.
Proof with Geometry.
intros.
unfold weak_parallelogram in H0.
DecompAndAll.

*****
H4 : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
H3 : not (eq B D)
H1 : not (eq A C)
H : not (Col A B C)
A,B,C,D : Point
*****
parallelogram A B C D
+++++
DecompExAnd H4 X.
-----
Theorem weak_parallelogram_parallelogram : forall A B C D, ~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.
Proof with Geometry.
intros.
unfold weak_parallelogram in H0.
DecompAndAll.
DecompExAnd H4 X.

*****
H5 : mid_point X B D
H2 : mid_point X A C
X : Point
H3 : not (eq B D)
H1 : not (eq A C)
H : not (Col A B C)
A,B,C,D : Point
*****
parallelogram A B C D
+++++
unfold parallelogram.
-----
Theorem weak_parallelogram_parallelogram : forall A B C D, ~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.
Proof with Geometry.
intros.
unfold weak_parallelogram in H0.
DecompAndAll.
DecompExAnd H4 X.
unfold parallelogram.

*****
H5 : mid_point X B D
H2 : mid_point X A C
X : Point
H3 : not (eq B D)
H1 : not (eq A C)
H : not (Col A B C)
A,B,C,D : Point
*****
and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
+++++
assert (parallel A B C D).
-----
Theorem weak_parallelogram_parallelogram : forall A B C D, ~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.
Proof with Geometry.
intros.
unfold weak_parallelogram in H0.
DecompAndAll.
DecompExAnd H4 X.
unfold parallelogram.
assert (parallel A B C D).

*****
H5 : mid_point X B D
H2 : mid_point X A C
X : Point
H3 : not (eq B D)
H1 : not (eq A C)
H : not (Col A B C)
A,B,C,D : Point
*****
parallel A B C D
+++++
eapply diag_mid_point_parallel;eauto.
-----
Theorem weak_parallelogram_parallelogram : forall A B C D, ~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.
Proof with Geometry.
intros.
unfold weak_parallelogram in H0.
DecompAndAll.
DecompExAnd H4 X.
unfold parallelogram.
assert (parallel A B C D).
eapply diag_mid_point_parallel;eauto.

*****
H0 : parallel A B C D
H5 : mid_point X B D
H2 : mid_point X A C
X : Point
H3 : not (eq B D)
H1 : not (eq A C)
H : not (Col A B C)
A,B,C,D : Point
*****
and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
+++++
repeat split;try assumption.
-----
Theorem weak_parallelogram_parallelogram : forall A B C D, ~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.
Proof with Geometry.
intros.
unfold weak_parallelogram in H0.
DecompAndAll.
DecompExAnd H4 X.
unfold parallelogram.
assert (parallel A B C D).
eapply diag_mid_point_parallel;eauto.
repeat split;try assumption.

*****
H0 : parallel A B C D
H5 : mid_point X B D
H2 : mid_point X A C
X : Point
H3 : not (eq B D)
H1 : not (eq A C)
H : not (Col A B C)
A,B,C,D : Point
*****
parallel B C A D
+++++
cut (parallel C B A D).
-----
Theorem weak_parallelogram_parallelogram : forall A B C D, ~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.
Proof with Geometry.
intros.
unfold weak_parallelogram in H0.
DecompAndAll.
DecompExAnd H4 X.
unfold parallelogram.
assert (parallel A B C D).
eapply diag_mid_point_parallel;eauto.
repeat split;try assumption.
cut (parallel C B A D).

*****
H0 : parallel A B C D
H5 : mid_point X B D
H2 : mid_point X A C
X : Point
H3 : not (eq B D)
H1 : not (eq A C)
H : not (Col A B C)
A,B,C,D : Point
*****
forall _ : parallel C B A D, parallel B C A D
+++++
Geometry.
-----
Theorem weak_parallelogram_parallelogram : forall A B C D, ~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.
Proof with Geometry.
intros.
unfold weak_parallelogram in H0.
DecompAndAll.
DecompExAnd H4 X.
unfold parallelogram.
assert (parallel A B C D).
eapply diag_mid_point_parallel;eauto.
repeat split;try assumption.
cut (parallel C B A D).
Geometry.

*****
H0 : parallel A B C D
H5 : mid_point X B D
H2 : mid_point X A C
X : Point
H3 : not (eq B D)
H1 : not (eq A C)
H : not (Col A B C)
A,B,C,D : Point
*****
parallel C B A D
+++++
eapply diag_mid_point_parallel.
-----
Theorem weak_parallelogram_parallelogram : forall A B C D, ~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.
Proof with Geometry.
intros.
unfold weak_parallelogram in H0.
DecompAndAll.
DecompExAnd H4 X.
unfold parallelogram.
assert (parallel A B C D).
eapply diag_mid_point_parallel;eauto.
repeat split;try assumption.
cut (parallel C B A D).
Geometry.
eapply diag_mid_point_parallel.

*****
H0 : parallel A B C D
H5 : mid_point X B D
H2 : mid_point X A C
X : Point
H3 : not (eq B D)
H1 : not (eq A C)
H : not (Col A B C)
A,B,C,D : Point
*****
mid_point ?O C A
+++++
2:apply H5.
-----
Theorem weak_parallelogram_parallelogram : forall A B C D, ~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.
Proof with Geometry.
intros.
unfold weak_parallelogram in H0.
DecompAndAll.
DecompExAnd H4 X.
unfold parallelogram.
assert (parallel A B C D).
eapply diag_mid_point_parallel;eauto.
repeat split;try assumption.
cut (parallel C B A D).
Geometry.
eapply diag_mid_point_parallel.
2:apply H5.

*****
H0 : parallel A B C D
H5 : mid_point X B D
H2 : mid_point X A C
X : Point
H3 : not (eq B D)
H1 : not (eq A C)
H : not (Col A B C)
A,B,C,D : Point
*****
mid_point X C A
+++++
unfold mid_point in *;DecompAndAll;Geometry.
-----
Theorem weak_parallelogram_parallelogram : forall A B C D, ~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.
Proof with Geometry.
intros.
unfold weak_parallelogram in H0.
DecompAndAll.
DecompExAnd H4 X.
unfold parallelogram.
assert (parallel A B C D).
eapply diag_mid_point_parallel;eauto.
repeat split;try assumption.
cut (parallel C B A D).
Geometry.
eapply diag_mid_point_parallel.
2:apply H5.
unfold mid_point in *;DecompAndAll;Geometry.

*****

*****

+++++
Qed.
-----
Theorem l2_11a_strong :\n forall A B C D P Q : Point,\n weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.

*****

*****
forall (A B C D P Q : Point) (_ : weak_parallelogram A B C D), eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
Proof.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.

*****

*****
forall (A B C D P Q : Point) (_ : weak_parallelogram A B C D), eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
intros.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.

*****
H : weak_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
unfold weak_parallelogram in H.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_parallelogram in H.

*****
H : and (not (eq A C))\n (and (not (eq B D))\n (ex (fun O : Point => and (mid_point O A C) (mid_point O B D))))
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
DecompAndAll.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_parallelogram in H.
DecompAndAll.

*****
H3 : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
H2 : not (eq B D)
H0 : not (eq A C)
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
DecompExAnd H3 X.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_parallelogram in H.
DecompAndAll.
DecompExAnd H3 X.

*****
H4 : mid_point X B D
H1 : mid_point X A C
X : Point
H2 : not (eq B D)
H0 : not (eq A C)
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
unfold mid_point in *.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_parallelogram in H.
DecompAndAll.
DecompExAnd H3 X.
unfold mid_point in *.

*****
H4 : and (Col B D X) (eq (DSeg B X) (DSeg X D))
H1 : and (Col A C X) (eq (DSeg A X) (DSeg X C))
X : Point
H2 : not (eq B D)
H0 : not (eq A C)
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
DecompAndAll.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_parallelogram in H.
DecompAndAll.
DecompExAnd H3 X.
unfold mid_point in *.
DecompAndAll.

*****
H5 : eq (DSeg A X) (DSeg X C)
H4 : Col A C X
H3 : eq (DSeg B X) (DSeg X D)
H : Col B D X
X : Point
H2 : not (eq B D)
H0 : not (eq A C)
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
assert (S A P Q + S C P Q = 2 * S X P Q).
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_parallelogram in H.
DecompAndAll.
DecompExAnd H3 X.
unfold mid_point in *.
DecompAndAll.
assert (S A P Q + S C P Q = 2 * S X P Q).

*****
H5 : eq (DSeg A X) (DSeg X C)
H4 : Col A C X
H3 : eq (DSeg B X) (DSeg X D)
H : Col B D X
X : Point
H2 : not (eq B D)
H0 : not (eq A C)
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fmult (Fplus F1 F1) (S X P Q))
+++++
apply mid_point_equation.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_parallelogram in H.
DecompAndAll.
DecompExAnd H3 X.
unfold mid_point in *.
DecompAndAll.
assert (S A P Q + S C P Q = 2 * S X P Q).
apply mid_point_equation.

*****
H5 : eq (DSeg A X) (DSeg X C)
H4 : Col A C X
H3 : eq (DSeg B X) (DSeg X D)
H : Col B D X
X : Point
H2 : not (eq B D)
H0 : not (eq A C)
A,B,C,D,P,Q : Point
*****
Col X A C
+++++
Geometry.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_parallelogram in H.
DecompAndAll.
DecompExAnd H3 X.
unfold mid_point in *.
DecompAndAll.
assert (S A P Q + S C P Q = 2 * S X P Q).
apply mid_point_equation.

*****
H5 : eq (DSeg A X) (DSeg X C)
H4 : Col A C X
H3 : eq (DSeg B X) (DSeg X D)
H : Col B D X
X : Point
H2 : not (eq B D)
H0 : not (eq A C)
A,B,C,D,P,Q : Point
*****
not (eq A C)
+++++
Geometry.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_parallelogram in H.
DecompAndAll.
DecompExAnd H3 X.
unfold mid_point in *.
DecompAndAll.
assert (S A P Q + S C P Q = 2 * S X P Q).
apply mid_point_equation.

*****
H5 : eq (DSeg A X) (DSeg X C)
H4 : Col A C X
H3 : eq (DSeg B X) (DSeg X D)
H : Col B D X
X : Point
H2 : not (eq B D)
H0 : not (eq A C)
A,B,C,D,P,Q : Point
*****
eq (DSeg A X) (DSeg X C)
+++++
Geometry.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_parallelogram in H.
DecompAndAll.
DecompExAnd H3 X.
unfold mid_point in *.
DecompAndAll.
assert (S A P Q + S C P Q = 2 * S X P Q).

*****
H1 : eq (Fplus (S A P Q) (S C P Q)) (Fmult (Fplus F1 F1) (S X P Q))
H5 : eq (DSeg A X) (DSeg X C)
H4 : Col A C X
H3 : eq (DSeg B X) (DSeg X D)
H : Col B D X
X : Point
H2 : not (eq B D)
H0 : not (eq A C)
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
assert (S B P Q + S D P Q = 2 * S X P Q).
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_parallelogram in H.
DecompAndAll.
DecompExAnd H3 X.
unfold mid_point in *.
DecompAndAll.
assert (S A P Q + S C P Q = 2 * S X P Q).
assert (S B P Q + S D P Q = 2 * S X P Q).

*****
H1 : eq (Fplus (S A P Q) (S C P Q)) (Fmult (Fplus F1 F1) (S X P Q))
H5 : eq (DSeg A X) (DSeg X C)
H4 : Col A C X
H3 : eq (DSeg B X) (DSeg X D)
H : Col B D X
X : Point
H2 : not (eq B D)
H0 : not (eq A C)
A,B,C,D,P,Q : Point
*****
eq (Fplus (S B P Q) (S D P Q)) (Fmult (Fplus F1 F1) (S X P Q))
+++++
apply mid_point_equation.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_parallelogram in H.
DecompAndAll.
DecompExAnd H3 X.
unfold mid_point in *.
DecompAndAll.
assert (S A P Q + S C P Q = 2 * S X P Q).
assert (S B P Q + S D P Q = 2 * S X P Q).
apply mid_point_equation.

*****
H1 : eq (Fplus (S A P Q) (S C P Q)) (Fmult (Fplus F1 F1) (S X P Q))
H5 : eq (DSeg A X) (DSeg X C)
H4 : Col A C X
H3 : eq (DSeg B X) (DSeg X D)
H : Col B D X
X : Point
H2 : not (eq B D)
H0 : not (eq A C)
A,B,C,D,P,Q : Point
*****
Col X B D
+++++
Geometry.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_parallelogram in H.
DecompAndAll.
DecompExAnd H3 X.
unfold mid_point in *.
DecompAndAll.
assert (S A P Q + S C P Q = 2 * S X P Q).
assert (S B P Q + S D P Q = 2 * S X P Q).
apply mid_point_equation.

*****
H1 : eq (Fplus (S A P Q) (S C P Q)) (Fmult (Fplus F1 F1) (S X P Q))
H5 : eq (DSeg A X) (DSeg X C)
H4 : Col A C X
H3 : eq (DSeg B X) (DSeg X D)
H : Col B D X
X : Point
H2 : not (eq B D)
H0 : not (eq A C)
A,B,C,D,P,Q : Point
*****
not (eq B D)
+++++
Geometry.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_parallelogram in H.
DecompAndAll.
DecompExAnd H3 X.
unfold mid_point in *.
DecompAndAll.
assert (S A P Q + S C P Q = 2 * S X P Q).
assert (S B P Q + S D P Q = 2 * S X P Q).
apply mid_point_equation.

*****
H1 : eq (Fplus (S A P Q) (S C P Q)) (Fmult (Fplus F1 F1) (S X P Q))
H5 : eq (DSeg A X) (DSeg X C)
H4 : Col A C X
H3 : eq (DSeg B X) (DSeg X D)
H : Col B D X
X : Point
H2 : not (eq B D)
H0 : not (eq A C)
A,B,C,D,P,Q : Point
*****
eq (DSeg B X) (DSeg X D)
+++++
Geometry.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_parallelogram in H.
DecompAndAll.
DecompExAnd H3 X.
unfold mid_point in *.
DecompAndAll.
assert (S A P Q + S C P Q = 2 * S X P Q).
assert (S B P Q + S D P Q = 2 * S X P Q).

*****
H6 : eq (Fplus (S B P Q) (S D P Q)) (Fmult (Fplus F1 F1) (S X P Q))
H1 : eq (Fplus (S A P Q) (S C P Q)) (Fmult (Fplus F1 F1) (S X P Q))
H5 : eq (DSeg A X) (DSeg X C)
H4 : Col A C X
H3 : eq (DSeg B X) (DSeg X D)
H : Col B D X
X : Point
H2 : not (eq B D)
H0 : not (eq A C)
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
congruence.
-----
Theorem l2_11a_strong : forall A B C D P Q : Point, weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_parallelogram in H.
DecompAndAll.
DecompExAnd H3 X.
unfold mid_point in *.
DecompAndAll.
assert (S A P Q + S C P Q = 2 * S X P Q).

*****

*****

+++++
Qed.
-----
Theorem l2_11a :\n forall A B C D P Q : Point,\n parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
-----
Theorem l2_11a : forall A B C D P Q : Point, parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.

*****

*****
forall (A B C D P Q : Point) (_ : parallelogram A B C D), eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
Proof.
-----
Theorem l2_11a : forall A B C D P Q : Point, parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.

*****

*****
forall (A B C D P Q : Point) (_ : parallelogram A B C D), eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
intros.
-----
Theorem l2_11a : forall A B C D P Q : Point, parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.

*****
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
apply l2_11a_strong.
-----
Theorem l2_11a : forall A B C D P Q : Point, parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
apply l2_11a_strong.

*****
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
weak_parallelogram A B C D
+++++
apply parallelogram_weak_parallelogram.
-----
Theorem l2_11a : forall A B C D P Q : Point, parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
apply l2_11a_strong.
apply parallelogram_weak_parallelogram.

*****
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
parallelogram A B C D
+++++
assumption.
-----
Theorem l2_11a : forall A B C D P Q : Point, parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
apply l2_11a_strong.
apply parallelogram_weak_parallelogram.
assumption.

*****

*****

+++++
Qed.
-----
Definition weak_2_parallelogram (A B C D : Point) : Prop :=\n  (A=C <-> B=D) /\\n  exists O, mid_point O A C /\ mid_point O B D.
-----
Theorem l2_11a_strong_strong :\n forall A B C D P Q : Point,\n weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.

*****

*****
forall (A B C D P Q : Point) (_ : weak_2_parallelogram A B C D), eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
Proof.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.

*****

*****
forall (A B C D P Q : Point) (_ : weak_2_parallelogram A B C D), eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
intros.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.

*****
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
unfold weak_2_parallelogram in H.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.

*****
H : and (iff (eq A C) (eq B D))\n (ex (fun O : Point => and (mid_point O A C) (mid_point O B D)))
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
DecompAndAll.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.

*****
H1 : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
H0 : iff (eq A C) (eq B D)
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
cases_equality A C.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.

*****
H : eq A C
H1 : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
H0 : iff (eq A C) (eq B D)
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
subst A.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
subst A.

*****
H0 : iff (eq C C) (eq B D)
H1 : ex (fun O : Point => and (mid_point O C C) (mid_point O B D))
B,C,D,P,Q : Point
*****
eq (Fplus (S C P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
assert (B=D).
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
subst A.
assert (B=D).

*****
H0 : iff (eq C C) (eq B D)
H1 : ex (fun O : Point => and (mid_point O C C) (mid_point O B D))
B,C,D,P,Q : Point
*****
eq B D
+++++
elim H0.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
subst A.
assert (B=D).
elim H0.

*****
H0 : iff (eq C C) (eq B D)
H1 : ex (fun O : Point => and (mid_point O C C) (mid_point O B D))
B,C,D,P,Q : Point
*****
forall (_ : forall _ : eq C C, eq B D) (_ : forall _ : eq B D, eq C C), eq B D
+++++
intros.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
subst A.
assert (B=D).
elim H0.
intros.

*****
H2 : forall _ : eq B D, eq C C
H : forall _ : eq C C, eq B D
H0 : iff (eq C C) (eq B D)
H1 : ex (fun O : Point => and (mid_point O C C) (mid_point O B D))
B,C,D,P,Q : Point
*****
eq B D
+++++
apply H.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
subst A.
assert (B=D).
elim H0.
intros.
apply H.

*****
H2 : forall _ : eq B D, eq C C
H : forall _ : eq C C, eq B D
H0 : iff (eq C C) (eq B D)
H1 : ex (fun O : Point => and (mid_point O C C) (mid_point O B D))
B,C,D,P,Q : Point
*****
eq C C
+++++
auto.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
subst A.
assert (B=D).

*****
H : eq B D
H0 : iff (eq C C) (eq B D)
H1 : ex (fun O : Point => and (mid_point O C C) (mid_point O B D))
B,C,D,P,Q : Point
*****
eq (Fplus (S C P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
subst B.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
subst A.
assert (B=D).
subst B.

*****
H1 : ex (fun O : Point => and (mid_point O C C) (mid_point O D D))
H0 : iff (eq C C) (eq D D)
C,D,P,Q : Point
*****
eq (Fplus (S C P Q) (S C P Q)) (Fplus (S D P Q) (S D P Q))
+++++
DecompExAnd H1 X.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
subst A.
assert (B=D).
subst B.
DecompExAnd H1 X.

*****
H3 : mid_point X D D
H2 : mid_point X C C
X : Point
H0 : iff (eq C C) (eq D D)
C,D,P,Q : Point
*****
eq (Fplus (S C P Q) (S C P Q)) (Fplus (S D P Q) (S D P Q))
+++++
assert (X=C).
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
subst A.
assert (B=D).
subst B.
DecompExAnd H1 X.
assert (X=C).

*****
H3 : mid_point X D D
H2 : mid_point X C C
X : Point
H0 : iff (eq C C) (eq D D)
C,D,P,Q : Point
*****
eq X C
+++++
Geometry.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
subst A.
assert (B=D).
subst B.
DecompExAnd H1 X.
assert (X=C).

*****
H : eq X C
H3 : mid_point X D D
H2 : mid_point X C C
X : Point
H0 : iff (eq C C) (eq D D)
C,D,P,Q : Point
*****
eq (Fplus (S C P Q) (S C P Q)) (Fplus (S D P Q) (S D P Q))
+++++
subst X.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
subst A.
assert (B=D).
subst B.
DecompExAnd H1 X.
assert (X=C).
subst X.

*****
H2 : mid_point C C C
H3 : mid_point C D D
H0 : iff (eq C C) (eq D D)
C,D,P,Q : Point
*****
eq (Fplus (S C P Q) (S C P Q)) (Fplus (S D P Q) (S D P Q))
+++++
assert (C=D).
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
subst A.
assert (B=D).
subst B.
DecompExAnd H1 X.
assert (X=C).
subst X.
assert (C=D).

*****
H2 : mid_point C C C
H3 : mid_point C D D
H0 : iff (eq C C) (eq D D)
C,D,P,Q : Point
*****
eq C D
+++++
Geometry.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
subst A.
assert (B=D).
subst B.
DecompExAnd H1 X.
assert (X=C).
subst X.
assert (C=D).

*****
H : eq C D
H2 : mid_point C C C
H3 : mid_point C D D
H0 : iff (eq C C) (eq D D)
C,D,P,Q : Point
*****
eq (Fplus (S C P Q) (S C P Q)) (Fplus (S D P Q) (S D P Q))
+++++
subst C.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
subst A.
assert (B=D).
subst B.
DecompExAnd H1 X.
assert (X=C).
subst X.
assert (C=D).
subst C.

*****
H0 : iff (eq D D) (eq D D)
H2,H3 : mid_point D D D
D,P,Q : Point
*****
eq (Fplus (S D P Q) (S D P Q)) (Fplus (S D P Q) (S D P Q))
+++++
ring.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.

*****
H : not (eq A C)
H1 : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
H0 : iff (eq A C) (eq B D)
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
assert (B<>D).
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
assert (B<>D).

*****
H : not (eq A C)
H1 : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
H0 : iff (eq A C) (eq B D)
A,B,C,D,P,Q : Point
*****
not (eq B D)
+++++
tauto.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
assert (B<>D).

*****
H2 : not (eq B D)
H : not (eq A C)
H1 : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
H0 : iff (eq A C) (eq B D)
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
apply l2_11a_strong.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
assert (B<>D).
apply l2_11a_strong.

*****
H2 : not (eq B D)
H : not (eq A C)
H1 : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
H0 : iff (eq A C) (eq B D)
A,B,C,D,P,Q : Point
*****
weak_parallelogram A B C D
+++++
unfold weak_parallelogram.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.
assert (B<>D).
apply l2_11a_strong.
unfold weak_parallelogram.

*****
H2 : not (eq B D)
H : not (eq A C)
H1 : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
H0 : iff (eq A C) (eq B D)
A,B,C,D,P,Q : Point
*****
and (not (eq A C)) (and (not (eq B D)) (ex (fun O : Point => and (mid_point O A C) (mid_point O B D))))
+++++
intuition.
-----
Theorem l2_11a_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_2_parallelogram in H.
DecompAndAll.
cases_equality A C.

*****

*****

+++++
Qed.
-----
Definition  weak_3_parallelogram (A B C D : Point) : Prop :=\n  exists O, mid_point O A C /\ mid_point O B D.
-----
Lemma weak_para_1 : forall W S V U, \nweak_3_parallelogram W S V U -> weak_3_parallelogram U V S W.
-----
Lemma weak_para_1 : forall W S V U, weak_3_parallelogram W S V U -> weak_3_parallelogram U V S W.

*****

*****
forall (W S V U : Point) (_ : weak_3_parallelogram W S V U), weak_3_parallelogram U V S W
+++++
Proof.
-----
Lemma weak_para_1 : forall W S V U, weak_3_parallelogram W S V U -> weak_3_parallelogram U V S W.
Proof.

*****

*****
forall (W S V U : Point) (_ : weak_3_parallelogram W S V U), weak_3_parallelogram U V S W
+++++
intros.
-----
Lemma weak_para_1 : forall W S V U, weak_3_parallelogram W S V U -> weak_3_parallelogram U V S W.
Proof.
intros.

*****
H : weak_3_parallelogram W S V U
W,S,V,U : Point
*****
weak_3_parallelogram U V S W
+++++
unfold weak_3_parallelogram in *.
-----
Lemma weak_para_1 : forall W S V U, weak_3_parallelogram W S V U -> weak_3_parallelogram U V S W.
Proof.
intros.
unfold weak_3_parallelogram in *.

*****
H : ex (fun O : Point => and (mid_point O W V) (mid_point O S U))
W,S,V,U : Point
*****
ex (fun O : Point => and (mid_point O U S) (mid_point O V W))
+++++
decompose [ex and] H.
-----
Lemma weak_para_1 : forall W S V U, weak_3_parallelogram W S V U -> weak_3_parallelogram U V S W.
Proof.
intros.
unfold weak_3_parallelogram in *.
decompose [ex and] H.

*****
H2 : mid_point x S U
H1 : mid_point x W V
x : Point
H : ex (fun O : Point => and (mid_point O W V) (mid_point O S U))
W,S,V,U : Point
*****
ex (fun O : Point => and (mid_point O U S) (mid_point O V W))
+++++
exists x.
-----
Lemma weak_para_1 : forall W S V U, weak_3_parallelogram W S V U -> weak_3_parallelogram U V S W.
Proof.
intros.
unfold weak_3_parallelogram in *.
decompose [ex and] H.
exists x.

*****
H2 : mid_point x S U
H1 : mid_point x W V
x : Point
H : ex (fun O : Point => and (mid_point O W V) (mid_point O S U))
W,S,V,U : Point
*****
and (mid_point x U S) (mid_point x V W)
+++++
split.
-----
Lemma weak_para_1 : forall W S V U, weak_3_parallelogram W S V U -> weak_3_parallelogram U V S W.
Proof.
intros.
unfold weak_3_parallelogram in *.
decompose [ex and] H.
exists x.
split.

*****
H2 : mid_point x S U
H1 : mid_point x W V
x : Point
H : ex (fun O : Point => and (mid_point O W V) (mid_point O S U))
W,S,V,U : Point
*****
mid_point x U S
+++++
auto with Geom.
-----
Lemma weak_para_1 : forall W S V U, weak_3_parallelogram W S V U -> weak_3_parallelogram U V S W.
Proof.
intros.
unfold weak_3_parallelogram in *.
decompose [ex and] H.
exists x.
split.

*****
H2 : mid_point x S U
H1 : mid_point x W V
x : Point
H : ex (fun O : Point => and (mid_point O W V) (mid_point O S U))
W,S,V,U : Point
*****
mid_point x V W
+++++
auto with Geom.
-----
Lemma weak_para_1 : forall W S V U, weak_3_parallelogram W S V U -> weak_3_parallelogram U V S W.
Proof.
intros.
unfold weak_3_parallelogram in *.
decompose [ex and] H.
exists x.
split.

*****

*****

+++++
Qed.
-----
Hint Resolve weak_para_1 : Geom.
-----
Theorem l2_11a_strong_strong_strong_aux :\n forall A B C D P Q : Point, A=C ->\n weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.

*****

*****
forall (A B C D P Q : Point) (_ : eq A C) (_ : weak_3_parallelogram A B C D), eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
Proof.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.

*****

*****
forall (A B C D P Q : Point) (_ : eq A C) (_ : weak_3_parallelogram A B C D), eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
intros.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.

*****
H0 : weak_3_parallelogram A B C D
H : eq A C
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
unfold weak_3_parallelogram in H0.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.

*****
H0 : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
H : eq A C
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
cases_equality P Q.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.

*****
H1 : eq P Q
H0 : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
H : eq A C
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
subst P.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst P.

*****
H0 : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
H : eq A C
A,B,C,D,Q : Point
*****
eq (Fplus (S A Q Q) (S C Q Q)) (Fplus (S B Q Q) (S D Q Q))
+++++
basic_simpl.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst P.
basic_simpl.

*****
H0 : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
H : eq A C
A,B,C,D,Q : Point
*****
eq F0 F0
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.

*****
H1 : not (eq P Q)
H0 : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
H : eq A C
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
subst C.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.

*****
H1 : not (eq P Q)
H0 : ex (fun O : Point => and (mid_point O A A) (mid_point O B D))
A,B,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fplus (S B P Q) (S D P Q))
+++++
cases_col A P Q.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.

*****
H : Col A P Q
H1 : not (eq P Q)
H0 : ex (fun O : Point => and (mid_point O A A) (mid_point O B D))
A,B,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fplus (S B P Q) (S D P Q))
+++++
rewrite H.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.

*****
H : Col A P Q
H1 : not (eq P Q)
H0 : ex (fun O : Point => and (mid_point O A A) (mid_point O B D))
A,B,D,P,Q : Point
*****
eq (Fplus F0 F0) (Fplus (S B P Q) (S D P Q))
+++++
ring_simplify.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.

*****
H : Col A P Q
H1 : not (eq P Q)
H0 : ex (fun O : Point => and (mid_point O A A) (mid_point O B D))
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
DecompExAnd H0 X.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.

*****
H4 : mid_point X B D
H3 : mid_point X A A
X : Point
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
assert (X=A).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).

*****
H4 : mid_point X B D
H3 : mid_point X A A
X : Point
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq X A
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).

*****
H0 : eq X A
H4 : mid_point X B D
H3 : mid_point X A A
X : Point
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.

*****
H0 : eq X A
H4 : mid_point X B D
H3 : mid_point X A A
X : Point
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
subst X.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.

*****
H3 : mid_point A A A
H4 : mid_point A B D
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
clear H3.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.

*****
H4 : mid_point A B D
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
unfold mid_point in H4.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.

*****
H4 : and (Col B D A) (eq (DSeg B A) (DSeg A D))
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
DecompAndAll.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.

*****
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
cases_equality A D.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.

*****
H3 : eq A D
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
subst D.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
subst D.

*****
H0 : Col B A A
H2 : eq (DSeg B A) (DSeg A A)
H : Col A P Q
H1 : not (eq P Q)
A,B,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S A P Q))
+++++
basic_simpl.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
subst D.
basic_simpl.

*****
H0 : Col B A A
H2 : eq (DSeg B A) F0
H : Col A P Q
H1 : not (eq P Q)
A,B,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S A P Q))
+++++
assert (B=A).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
subst D.
basic_simpl.
assert (B=A).

*****
H0 : Col B A A
H2 : eq (DSeg B A) F0
H : Col A P Q
H1 : not (eq P Q)
A,B,P,Q : Point
*****
eq B A
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
subst D.
basic_simpl.
assert (B=A).

*****
H3 : eq B A
H0 : Col B A A
H2 : eq (DSeg B A) F0
H : Col A P Q
H1 : not (eq P Q)
A,B,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S A P Q))
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
subst D.
basic_simpl.
assert (B=A).
Geometry.

*****
H3 : eq B A
H0 : Col B A A
H2 : eq (DSeg B A) F0
H : Col A P Q
H1 : not (eq P Q)
A,B,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S A P Q))
+++++
subst B.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
subst D.
basic_simpl.
assert (B=A).
Geometry.
subst B.

*****
H2 : eq (DSeg A A) F0
H0 : Col A A A
H : Col A P Q
H1 : not (eq P Q)
A,P,Q : Point
*****
eq F0 (Fplus (S A P Q) (S A P Q))
+++++
rewrite H.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
subst D.
basic_simpl.
assert (B=A).
Geometry.
subst B.
rewrite H.

*****
H2 : eq (DSeg A A) F0
H0 : Col A A A
H : Col A P Q
H1 : not (eq P Q)
A,P,Q : Point
*****
eq F0 (Fplus F0 F0)
+++++
ring.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.

*****
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
cases_equality P D.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.

*****
H4 : eq P D
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
subst P.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
subst P.

*****
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq D Q)
H : Col A D Q
A,B,D,Q : Point
*****
eq F0 (Fplus (S B D Q) (S D D Q))
+++++
basic_simpl.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
subst P.
basic_simpl.

*****
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq D Q)
H : Col A D Q
A,B,D,Q : Point
*****
eq F0 (S B D Q)
+++++
assert (Col D B Q).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
subst P.
basic_simpl.
assert (Col D B Q).

*****
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq D Q)
H : Col A D Q
A,B,D,Q : Point
*****
Col D B Q
+++++
eapply col_trans_1 with (B:= A).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
subst P.
basic_simpl.
assert (Col D B Q).
eapply col_trans_1 with (B:= A).

*****
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq D Q)
H : Col A D Q
A,B,D,Q : Point
*****
not (eq D A)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
subst P.
basic_simpl.
assert (Col D B Q).
eapply col_trans_1 with (B:= A).

*****
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq D Q)
H : Col A D Q
A,B,D,Q : Point
*****
Col D A B
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
subst P.
basic_simpl.
assert (Col D B Q).
eapply col_trans_1 with (B:= A).

*****
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq D Q)
H : Col A D Q
A,B,D,Q : Point
*****
Col D A Q
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
subst P.
basic_simpl.
assert (Col D B Q).

*****
H4 : Col D B Q
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq D Q)
H : Col A D Q
A,B,D,Q : Point
*****
eq F0 (S B D Q)
+++++
assert (Col B D Q).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
subst P.
basic_simpl.
assert (Col D B Q).
assert (Col B D Q).

*****
H4 : Col D B Q
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq D Q)
H : Col A D Q
A,B,D,Q : Point
*****
Col B D Q
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
subst P.
basic_simpl.
assert (Col D B Q).
assert (Col B D Q).

*****
H5 : Col B D Q
H4 : Col D B Q
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq D Q)
H : Col A D Q
A,B,D,Q : Point
*****
eq F0 (S B D Q)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.

*****
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
cases_col D P Q.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.

*****
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
rewrite H5.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.

*****
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) F0)
+++++
ring_simplify.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.

*****
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (S B P Q)
+++++
assert (Col P A D).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).

*****
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col P A D
+++++
eapply col_trans_1 with (B:=Q).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
eapply col_trans_1 with (B:=Q).

*****
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (eq P Q)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
eapply col_trans_1 with (B:=Q).

*****
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col P Q A
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
eapply col_trans_1 with (B:=Q).

*****
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col P Q D
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).

*****
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (S B P Q)
+++++
assert (Col A B P).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).

*****
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col A B P
+++++
eapply col_trans_1 with (B:=D).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).
eapply col_trans_1 with (B:=D).

*****
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (eq A D)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).
eapply col_trans_1 with (B:=D).

*****
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col A D B
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).
eapply col_trans_1 with (B:=D).

*****
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col A D P
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).

*****
H7 : Col A B P
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (S B P Q)
+++++
assert (Col D B P).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).
assert (Col D B P).

*****
H7 : Col A B P
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col D B P
+++++
eapply col_trans_1 with (B:=A).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).
assert (Col D B P).
eapply col_trans_1 with (B:=A).

*****
H7 : Col A B P
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (eq D A)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).
assert (Col D B P).
eapply col_trans_1 with (B:=A).

*****
H7 : Col A B P
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col D A B
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).
assert (Col D B P).
eapply col_trans_1 with (B:=A).

*****
H7 : Col A B P
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col D A P
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).
assert (Col D B P).

*****
H8 : Col D B P
H7 : Col A B P
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (S B P Q)
+++++
assert (Col P B Q).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).
assert (Col D B P).
assert (Col P B Q).

*****
H8 : Col D B P
H7 : Col A B P
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col P B Q
+++++
eapply col_trans_1 with (B:=D).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).
assert (Col D B P).
assert (Col P B Q).
eapply col_trans_1 with (B:=D).

*****
H8 : Col D B P
H7 : Col A B P
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (eq P D)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).
assert (Col D B P).
assert (Col P B Q).
eapply col_trans_1 with (B:=D).

*****
H8 : Col D B P
H7 : Col A B P
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col P D B
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).
assert (Col D B P).
assert (Col P B Q).
eapply col_trans_1 with (B:=D).

*****
H8 : Col D B P
H7 : Col A B P
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col P D Q
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).
assert (Col D B P).
assert (Col P B Q).

*****
H9 : Col P B Q
H8 : Col D B P
H7 : Col A B P
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (S B P Q)
+++++
assert (Col B P Q).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).
assert (Col D B P).
assert (Col P B Q).
assert (Col B P Q).

*****
H9 : Col P B Q
H8 : Col D B P
H7 : Col A B P
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col B P Q
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
rewrite H5.
ring_simplify.
assert (Col P A D).
assert (Col A B P).
assert (Col D B P).
assert (Col P B Q).
assert (Col B P Q).

*****
H10 : Col B P Q
H9 : Col P B Q
H8 : Col D B P
H7 : Col A B P
H6 : Col P A D
H5 : Col D P Q
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (S B P Q)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.

*****
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
assert (A<>B).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).

*****
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (eq A B)
+++++
unfold not.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
unfold not.

*****
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
forall _ : eq A B, False
+++++
intro.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
unfold not.
intro.

*****
H6 : eq A B
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
False
+++++
subst A.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
unfold not.
intro.
subst A.

*****
H5 : not (Col D P Q)
H4 : not (eq P D)
H : Col B P Q
H0 : Col B D B
H2 : eq (DSeg B B) (DSeg B D)
H3 : not (eq B D)
H1 : not (eq P Q)
B,D,P,Q : Point
*****
False
+++++
basic_simpl.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
unfold not.
intro.
subst A.
basic_simpl.

*****
H5 : not (Col D P Q)
H4 : not (eq P D)
H : Col B P Q
H0 : Col B D B
H2 : eq F0 (DSeg B D)
H3 : not (eq B D)
H1 : not (eq P Q)
B,D,P,Q : Point
*****
False
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).

*****
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
cases_equality P A.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.

*****
H7 : eq P A
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
subst P.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.

*****
H6 : not (eq A B)
H4 : not (eq A D)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
H : Col A A Q
A,B,D,Q : Point
*****
eq F0 (Fplus (S B A Q) (S D A Q))
+++++
clear H H4.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.

*****
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
eq F0 (Fplus (S B A Q) (S D A Q))
+++++
assert (A ** B / A ** D = S Q A B / S Q A D).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).

*****
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg A D)) (Fdiv (S Q A B) (S Q A D))
+++++
apply A6.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).
apply A6.

*****
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
not (eq A D)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).
apply A6.

*****
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
not (Col Q A D)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).
apply A6.

*****
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
Col A B D
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).

*****
H : eq (Fdiv (DSeg A B) (DSeg A D)) (Fdiv (S Q A B) (S Q A D))
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
eq F0 (Fplus (S B A Q) (S D A Q))
+++++
rewrite <- H2 in H.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).
rewrite <- H2 in H.

*****
H : eq (Fdiv (DSeg A B) (DSeg B A)) (Fdiv (S Q A B) (S Q A D))
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
eq F0 (Fplus (S B A Q) (S D A Q))
+++++
replace (A**B/B**A) with (- (1)) in H.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).
rewrite <- H2 in H.
replace (A**B/B**A) with (- (1)) in H.

*****
H : eq (Fopp F1) (Fdiv (S Q A B) (S Q A D))
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
eq F0 (Fplus (S B A Q) (S D A Q))
+++++
IsoleVar (S Q A B) H.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).
rewrite <- H2 in H.
replace (A**B/B**A) with (- (1)) in H.
IsoleVar (S Q A B) H.

*****
H : eq (S Q A B) (Fmult (S Q A D) (Fopp F1))
H4 : not (eq (S Q A D) F0)
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
eq F0 (Fplus (S B A Q) (S D A Q))
+++++
replace (S B A Q) with (- S Q A B).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).
rewrite <- H2 in H.
replace (A**B/B**A) with (- (1)) in H.
IsoleVar (S Q A B) H.
replace (S B A Q) with (- S Q A B).

*****
H : eq (S Q A B) (Fmult (S Q A D) (Fopp F1))
H4 : not (eq (S Q A D) F0)
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
eq F0 (Fplus (Fopp (S Q A B)) (S D A Q))
+++++
rewrite H.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).
rewrite <- H2 in H.
replace (A**B/B**A) with (- (1)) in H.
IsoleVar (S Q A B) H.
replace (S B A Q) with (- S Q A B).
rewrite H.

*****
H : eq (S Q A B) (Fmult (S Q A D) (Fopp F1))
H4 : not (eq (S Q A D) F0)
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
eq F0 (Fplus (Fopp (Fmult (S Q A D) (Fopp F1))) (S D A Q))
+++++
uniformize_signed_areas.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).
rewrite <- H2 in H.
replace (A**B/B**A) with (- (1)) in H.
IsoleVar (S Q A B) H.
replace (S B A Q) with (- S Q A B).
rewrite H.
uniformize_signed_areas.

*****
H : eq (S Q A B) (Fmult (S Q A D) (Fopp F1))
H4 : not (eq (S Q A D) F0)
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
eq F0 (Fplus (Fopp (Fmult (S Q A D) (Fopp F1))) (Fopp (S Q A D)))
+++++
ring.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).
rewrite <- H2 in H.
replace (A**B/B**A) with (- (1)) in H.
IsoleVar (S Q A B) H.
replace (S B A Q) with (- S Q A B).

*****
H : eq (S Q A B) (Fmult (S Q A D) (Fopp F1))
H4 : not (eq (S Q A D) F0)
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
eq (Fopp (S Q A B)) (S B A Q)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).
rewrite <- H2 in H.
replace (A**B/B**A) with (- (1)) in H.
IsoleVar (S Q A B) H.

*****
H : eq (Fopp F1) (Fdiv (S Q A B) (S Q A D))
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
not (eq (S Q A D) F0)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).
rewrite <- H2 in H.
replace (A**B/B**A) with (- (1)) in H.

*****
H : eq (Fdiv (DSeg A B) (DSeg B A)) (Fdiv (S Q A B) (S Q A D))
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
eq (Fopp F1) (Fdiv (DSeg A B) (DSeg B A))
+++++
replace (A**B) with (- B**A).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).
rewrite <- H2 in H.
replace (A**B/B**A) with (- (1)) in H.
replace (A**B) with (- B**A).

*****
H : eq (Fdiv (DSeg A B) (DSeg B A)) (Fdiv (S Q A B) (S Q A D))
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
eq (Fopp F1) (Fdiv (Fopp (DSeg B A)) (DSeg B A))
+++++
field.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).
rewrite <- H2 in H.
replace (A**B/B**A) with (- (1)) in H.
replace (A**B) with (- B**A).
field.

*****
H : eq (Fdiv (DSeg A B) (DSeg B A)) (Fdiv (S Q A B) (S Q A D))
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
not (eq (DSeg B A) F0)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).
rewrite <- H2 in H.
replace (A**B/B**A) with (- (1)) in H.
replace (A**B) with (- B**A).

*****
H : eq (Fdiv (DSeg A B) (DSeg B A)) (Fdiv (S Q A B) (S Q A D))
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
eq (Fopp (DSeg B A)) (DSeg A B)
+++++
symmetry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
subst P.
clear H H4.
assert (A ** B / A ** D = S Q A B / S Q A D).
rewrite <- H2 in H.
replace (A**B/B**A) with (- (1)) in H.
replace (A**B) with (- B**A).
symmetry.

*****
H : eq (Fdiv (DSeg A B) (DSeg B A)) (Fdiv (S Q A B) (S Q A D))
H6 : not (eq A B)
H5 : not (Col D A Q)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H1 : not (eq A Q)
A,B,D,Q : Point
*****
eq (DSeg A B) (Fopp (DSeg B A))
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.

*****
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
assert (B ** A / D ** A = S B P Q / S D P Q).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).

*****
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (Fdiv (DSeg B A) (DSeg D A)) (Fdiv (S B P Q) (S D P Q))
+++++
apply co_side.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
apply co_side.

*****
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (Col D P Q)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
apply co_side.

*****
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (eq D A)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
apply co_side.

*****
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col P Q A
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
apply co_side.

*****
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col B D A
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).

*****
H8 : eq (Fdiv (DSeg B A) (DSeg D A)) (Fdiv (S B P Q) (S D P Q))
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
rewrite H2 in H8.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.

*****
H8 : eq (Fdiv (DSeg A D) (DSeg D A)) (Fdiv (S B P Q) (S D P Q))
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
replace (A**D/D**A) with (-(1)) in H8.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.

*****
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (S D P Q))
+++++
RewriteVar (S D P Q) H8.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.

*****
H8 : eq (S D P Q) (Fdiv (S B P Q) (Fopp F1))
H10 : not (eq (Fopp F1) F0)
H9 : not (eq (Fdiv (S B P Q) (Fopp F1)) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq F0 (Fplus (S B P Q) (Fdiv (S B P Q) (Fopp F1)))
+++++
field.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
field.

*****
H8 : eq (S D P Q) (Fdiv (S B P Q) (Fopp F1))
H10 : not (eq (Fopp F1) F0)
H9 : not (eq (Fdiv (S B P Q) (Fopp F1)) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (eq (Fopp F1) F0)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.

*****
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (eq (Fdiv (S B P Q) (S D P Q)) F0)
+++++
eapply nonzerodiv.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.

*****
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (eq (S B P Q) F0)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.

*****
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (eq (S B P Q) F0)
+++++
unfold not.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.

*****
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
forall _ : eq (S B P Q) F0, False
+++++
intro.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.

*****
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
False
+++++
assert (Col B P Q).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).

*****
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col B P Q
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).

*****
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
False
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).
Geometry.

*****
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
False
+++++
assert (Col P A B).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).
Geometry.
assert (Col P A B).

*****
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col P A B
+++++
eapply col_trans_1 with (B:=Q).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).
Geometry.
assert (Col P A B).
eapply col_trans_1 with (B:=Q).

*****
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (eq P Q)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).
Geometry.
assert (Col P A B).
eapply col_trans_1 with (B:=Q).

*****
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col P Q A
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).
Geometry.
assert (Col P A B).
eapply col_trans_1 with (B:=Q).

*****
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col P Q B
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).
Geometry.
assert (Col P A B).

*****
H12 : Col P A B
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
False
+++++
assert (Col A P D).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).
Geometry.
assert (Col P A B).
assert (Col A P D).

*****
H12 : Col P A B
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col A P D
+++++
eapply col_trans_1 with (B:=B).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).
Geometry.
assert (Col P A B).
assert (Col A P D).
eapply col_trans_1 with (B:=B).

*****
H12 : Col P A B
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (eq A B)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).
Geometry.
assert (Col P A B).
assert (Col A P D).
eapply col_trans_1 with (B:=B).

*****
H12 : Col P A B
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col A B P
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).
Geometry.
assert (Col P A B).
assert (Col A P D).
eapply col_trans_1 with (B:=B).

*****
H12 : Col P A B
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col A B D
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).
Geometry.
assert (Col P A B).
assert (Col A P D).

*****
H13 : Col A P D
H12 : Col P A B
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
False
+++++
assert (Col P Q D).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).
Geometry.
assert (Col P A B).
assert (Col A P D).
assert (Col P Q D).

*****
H13 : Col A P D
H12 : Col P A B
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col P Q D
+++++
eapply col_trans_1 with (B:=A).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).
Geometry.
assert (Col P A B).
assert (Col A P D).
assert (Col P Q D).
eapply col_trans_1 with (B:=A).

*****
H13 : Col A P D
H12 : Col P A B
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (eq P A)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).
Geometry.
assert (Col P A B).
assert (Col A P D).
assert (Col P Q D).
eapply col_trans_1 with (B:=A).

*****
H13 : Col A P D
H12 : Col P A B
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col P A Q
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).
Geometry.
assert (Col P A B).
assert (Col A P D).
assert (Col P Q D).
eapply col_trans_1 with (B:=A).

*****
H13 : Col A P D
H12 : Col P A B
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col P A D
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.
Geometry.
unfold not.
intro.
assert (Col B P Q).
Geometry.
assert (Col P A B).
assert (Col A P D).
assert (Col P Q D).

*****
H14 : Col P Q D
H13 : Col A P D
H12 : Col P A B
H11 : Col B P Q
H10 : eq (S B P Q) F0
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
False
+++++
intuition.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
RewriteVar (S D P Q) H8.
eapply nonzerodiv.

*****
H8 : eq (Fopp F1) (Fdiv (S B P Q) (S D P Q))
H9 : not (eq (S D P Q) F0)
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (eq (S D P Q) F0)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.

*****
H8 : eq (Fdiv (DSeg A D) (DSeg D A)) (Fdiv (S B P Q) (S D P Q))
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (Fopp F1) (Fdiv (DSeg A D) (DSeg D A))
+++++
replace (A**D) with (- D**A).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
replace (A**D) with (- D**A).

*****
H8 : eq (Fdiv (DSeg A D) (DSeg D A)) (Fdiv (S B P Q) (S D P Q))
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (Fopp F1) (Fdiv (Fopp (DSeg D A)) (DSeg D A))
+++++
field.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
replace (A**D) with (- D**A).
field.

*****
H8 : eq (Fdiv (DSeg A D) (DSeg D A)) (Fdiv (S B P Q) (S D P Q))
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (eq (DSeg D A) F0)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
replace (A**D) with (- D**A).

*****
H8 : eq (Fdiv (DSeg A D) (DSeg D A)) (Fdiv (S B P Q) (S D P Q))
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (Fopp (DSeg D A)) (DSeg A D)
+++++
symmetry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
rewrite H.
ring_simplify.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality A D.
cases_equality P D.
cases_col D P Q.
assert (A<>B).
cases_equality P A.
assert (B ** A / D ** A = S B P Q / S D P Q).
rewrite H2 in H8.
replace (A**D/D**A) with (-(1)) in H8.
replace (A**D) with (- D**A).
symmetry.

*****
H8 : eq (Fdiv (DSeg A D) (DSeg D A)) (Fdiv (S B P Q) (S D P Q))
H7 : not (eq P A)
H6 : not (eq A B)
H5 : not (Col D P Q)
H4 : not (eq P D)
H3 : not (eq A D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : Col A P Q
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (DSeg A D) (Fopp (DSeg D A))
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.

*****
H : not (Col A P Q)
H1 : not (eq P Q)
H0 : ex (fun O : Point => and (mid_point O A A) (mid_point O B D))
A,B,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fplus (S B P Q) (S D P Q))
+++++
DecompExAnd H0 X.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.

*****
H4 : mid_point X B D
H3 : mid_point X A A
X : Point
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fplus (S B P Q) (S D P Q))
+++++
assert (X=A).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).

*****
H4 : mid_point X B D
H3 : mid_point X A A
X : Point
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq X A
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).

*****
H0 : eq X A
H4 : mid_point X B D
H3 : mid_point X A A
X : Point
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fplus (S B P Q) (S D P Q))
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.

*****
H0 : eq X A
H4 : mid_point X B D
H3 : mid_point X A A
X : Point
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fplus (S B P Q) (S D P Q))
+++++
subst X.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.

*****
H3 : mid_point A A A
H4 : mid_point A B D
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fplus (S B P Q) (S D P Q))
+++++
clear H3.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.

*****
H4 : mid_point A B D
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fplus (S B P Q) (S D P Q))
+++++
unfold mid_point in H4.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.

*****
H4 : and (Col B D A) (eq (DSeg B A) (DSeg A D))
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fplus (S B P Q) (S D P Q))
+++++
DecompAndAll.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.

*****
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fplus (S B P Q) (S D P Q))
+++++
cases_equality B D.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.

*****
H3 : eq B D
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fplus (S B P Q) (S D P Q))
+++++
subst D.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
subst D.

*****
H0 : Col B B A
H2 : eq (DSeg B A) (DSeg A B)
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fplus (S B P Q) (S B P Q))
+++++
assert (A=B).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
subst D.
assert (A=B).

*****
H0 : Col B B A
H2 : eq (DSeg B A) (DSeg A B)
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,P,Q : Point
*****
eq A B
+++++
replace (A**B) with (- B**A) in H2.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
subst D.
assert (A=B).
replace (A**B) with (- B**A) in H2.

*****
H0 : Col B B A
H2 : eq (DSeg B A) (Fopp (DSeg B A))
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,P,Q : Point
*****
eq A B
+++++
assert (B**A=0).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
subst D.
assert (A=B).
replace (A**B) with (- B**A) in H2.
assert (B**A=0).

*****
H0 : Col B B A
H2 : eq (DSeg B A) (Fopp (DSeg B A))
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,P,Q : Point
*****
eq (DSeg B A) F0
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
subst D.
assert (A=B).
replace (A**B) with (- B**A) in H2.
assert (B**A=0).

*****
H3 : eq (DSeg B A) F0
H0 : Col B B A
H2 : eq (DSeg B A) (Fopp (DSeg B A))
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,P,Q : Point
*****
eq A B
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
subst D.
assert (A=B).
replace (A**B) with (- B**A) in H2.
assert (B**A=0).
Geometry.

*****
H3 : eq (DSeg B A) F0
H0 : Col B B A
H2 : eq (DSeg B A) (Fopp (DSeg B A))
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,P,Q : Point
*****
eq A B
+++++
symmetry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
subst D.
assert (A=B).
replace (A**B) with (- B**A) in H2.
assert (B**A=0).
Geometry.
symmetry.

*****
H3 : eq (DSeg B A) F0
H0 : Col B B A
H2 : eq (DSeg B A) (Fopp (DSeg B A))
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,P,Q : Point
*****
eq B A
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
subst D.
assert (A=B).
replace (A**B) with (- B**A) in H2.

*****
H0 : Col B B A
H2 : eq (DSeg B A) (DSeg A B)
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,P,Q : Point
*****
eq (Fopp (DSeg B A)) (DSeg A B)
+++++
symmetry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
subst D.
assert (A=B).
replace (A**B) with (- B**A) in H2.
symmetry.

*****
H0 : Col B B A
H2 : eq (DSeg B A) (DSeg A B)
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,P,Q : Point
*****
eq (DSeg A B) (Fopp (DSeg B A))
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
subst D.
assert (A=B).

*****
H3 : eq A B
H0 : Col B B A
H2 : eq (DSeg B A) (DSeg A B)
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fplus (S B P Q) (S B P Q))
+++++
subst B.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
subst D.
assert (A=B).
subst B.

*****
H2 : eq (DSeg A A) (DSeg A A)
H0 : Col A A A
H : not (Col A P Q)
H1 : not (eq P Q)
A,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fplus (S A P Q) (S A P Q))
+++++
auto.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.

*****
H3 : not (eq B D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fplus (S B P Q) (S D P Q))
+++++
assert (S B P Q + S D P Q = 2 * S A P Q).
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
assert (S B P Q + S D P Q = 2 * S A P Q).

*****
H3 : not (eq B D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (Fplus (S B P Q) (S D P Q)) (Fmult (Fplus F1 F1) (S A P Q))
+++++
apply mid_point_equation.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
assert (S B P Q + S D P Q = 2 * S A P Q).
apply mid_point_equation.

*****
H3 : not (eq B D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
Col A B D
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
assert (S B P Q + S D P Q = 2 * S A P Q).
apply mid_point_equation.

*****
H3 : not (eq B D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
not (eq B D)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
assert (S B P Q + S D P Q = 2 * S A P Q).
apply mid_point_equation.

*****
H3 : not (eq B D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (DSeg B A) (DSeg A D)
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
assert (S B P Q + S D P Q = 2 * S A P Q).

*****
H4 : eq (Fplus (S B P Q) (S D P Q)) (Fmult (Fplus F1 F1) (S A P Q))
H3 : not (eq B D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fplus (S B P Q) (S D P Q))
+++++
rewrite H4.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.
subst C.
cases_col A P Q.
DecompExAnd H0 X.
assert (X=A).
Geometry.
subst X.
clear H3.
unfold mid_point in H4.
DecompAndAll.
cases_equality B D.
assert (S B P Q + S D P Q = 2 * S A P Q).
rewrite H4.

*****
H4 : eq (Fplus (S B P Q) (S D P Q)) (Fmult (Fplus F1 F1) (S A P Q))
H3 : not (eq B D)
H2 : eq (DSeg B A) (DSeg A D)
H0 : Col B D A
H : not (Col A P Q)
H1 : not (eq P Q)
A,B,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S A P Q)) (Fmult (Fplus F1 F1) (S A P Q))
+++++
ring.
-----
Theorem l2_11a_strong_strong_strong_aux : forall A B C D P Q : Point, A=C -> weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
unfold weak_3_parallelogram in H0.
cases_equality P Q.

*****

*****

+++++
Qed.
-----
Theorem l2_11a_strong_strong_strong :\n forall A B C D P Q : Point, \n weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.

*****

*****
forall (A B C D P Q : Point) (_ : weak_3_parallelogram A B C D), eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
Proof.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.

*****

*****
forall (A B C D P Q : Point) (_ : weak_3_parallelogram A B C D), eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
intros.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.

*****
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
cases_equality A C.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
cases_equality A C.

*****
H0 : eq A C
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
apply l2_11a_strong_strong_strong_aux.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
cases_equality A C.
apply l2_11a_strong_strong_strong_aux.

*****
H0 : eq A C
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq A C
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
cases_equality A C.
apply l2_11a_strong_strong_strong_aux.

*****
H0 : eq A C
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
weak_3_parallelogram A B C D
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
cases_equality A C.

*****
H0 : not (eq A C)
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
cases_equality B D.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
cases_equality A C.
cases_equality B D.

*****
H1 : eq B D
H0 : not (eq A C)
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
symmetry.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
cases_equality A C.
cases_equality B D.
symmetry.

*****
H1 : eq B D
H0 : not (eq A C)
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S B P Q) (S D P Q)) (Fplus (S A P Q) (S C P Q))
+++++
apply l2_11a_strong_strong_strong_aux.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
cases_equality A C.
cases_equality B D.
symmetry.
apply l2_11a_strong_strong_strong_aux.

*****
H1 : eq B D
H0 : not (eq A C)
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq B D
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
cases_equality A C.
cases_equality B D.
symmetry.
apply l2_11a_strong_strong_strong_aux.

*****
H1 : eq B D
H0 : not (eq A C)
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
weak_3_parallelogram B A D C
+++++
Geometry.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
cases_equality A C.
cases_equality B D.
symmetry.
apply l2_11a_strong_strong_strong_aux.
Geometry.

*****
H1 : eq B D
H0 : not (eq A C)
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
weak_3_parallelogram B A D C
+++++
unfold weak_3_parallelogram in *.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
cases_equality A C.
cases_equality B D.
symmetry.
apply l2_11a_strong_strong_strong_aux.
Geometry.
unfold weak_3_parallelogram in *.

*****
H1 : eq B D
H0 : not (eq A C)
H : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
A,B,C,D,P,Q : Point
*****
ex (fun O : Point => and (mid_point O B D) (mid_point O A C))
+++++
DecompExAnd H X.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
cases_equality A C.
cases_equality B D.
symmetry.
apply l2_11a_strong_strong_strong_aux.
Geometry.
unfold weak_3_parallelogram in *.
DecompExAnd H X.

*****
H4 : mid_point X B D
H3 : mid_point X A C
X : Point
H1 : eq B D
H0 : not (eq A C)
A,B,C,D,P,Q : Point
*****
ex (fun O : Point => and (mid_point O B D) (mid_point O A C))
+++++
exists X.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
cases_equality A C.
cases_equality B D.
symmetry.
apply l2_11a_strong_strong_strong_aux.
Geometry.
unfold weak_3_parallelogram in *.
DecompExAnd H X.
exists X.

*****
H4 : mid_point X B D
H3 : mid_point X A C
X : Point
H1 : eq B D
H0 : not (eq A C)
A,B,C,D,P,Q : Point
*****
and (mid_point X B D) (mid_point X A C)
+++++
intuition.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
cases_equality A C.
cases_equality B D.

*****
H1 : not (eq B D)
H0 : not (eq A C)
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
+++++
apply l2_11a_strong.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
cases_equality A C.
cases_equality B D.
apply l2_11a_strong.

*****
H1 : not (eq B D)
H0 : not (eq A C)
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
weak_parallelogram A B C D
+++++
unfold weak_parallelogram.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
cases_equality A C.
cases_equality B D.
apply l2_11a_strong.
unfold weak_parallelogram.

*****
H1 : not (eq B D)
H0 : not (eq A C)
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
and (not (eq A C)) (and (not (eq B D)) (ex (fun O : Point => and (mid_point O A C) (mid_point O B D))))
+++++
intuition.
-----
Theorem l2_11a_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
Proof.
intros.
cases_equality A C.

*****

*****

+++++
Qed.
-----
Theorem l2_11b :\n forall A B C D P Q : Point, parallelogram A B C D -> \n S4 P A Q B = S4 P D Q C.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.

*****

*****
forall (A B C D P Q : Point) (_ : parallelogram A B C D), eq (S4 P A Q B) (S4 P D Q C)
+++++
Proof.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.

*****

*****
forall (A B C D P Q : Point) (_ : parallelogram A B C D), eq (S4 P A Q B) (S4 P D Q C)
+++++
intros.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.

*****
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (S4 P A Q B) (S4 P D Q C)
+++++
unfold S4 in |- *.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.

*****
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
assert (S P A Q = - S A P Q).
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).

*****
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (S P A Q) (Fopp (S A P Q))
+++++
Geometry.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).

*****
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
Geometry.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.

*****
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
assert (S P Q B = S B P Q).
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).

*****
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (S P Q B) (S B P Q)
+++++
Geometry.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).

*****
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
Geometry.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.

*****
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
assert (S P D Q = - S D P Q).
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).

*****
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (S P D Q) (Fopp (S D P Q))
+++++
Geometry.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).

*****
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
Geometry.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.

*****
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
assert (S P Q C = S C P Q).
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).

*****
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (S P Q C) (S C P Q)
+++++
Geometry.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
Geometry.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
rewrite H0.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
rewrite H1.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S B P Q)) (Fplus (S P D Q) (S P Q C))
+++++
rewrite H2.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S B P Q)) (Fplus (Fopp (S D P Q)) (S P Q C))
+++++
rewrite H3.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.
rewrite H3.

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S B P Q)) (Fplus (Fopp (S D P Q)) (S C P Q))
+++++
assert (T := l2_11a A B C D P Q H).
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.
rewrite H3.
assert (T := l2_11a A B C D P Q H).

*****
T : eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S B P Q)) (Fplus (Fopp (S D P Q)) (S C P Q))
+++++
Geometry.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.
rewrite H3.
assert (T := l2_11a A B C D P Q H).
Geometry.

*****
T : eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S B P Q)) (Fplus (Fopp (S D P Q)) (S C P Q))
+++++
RewriteVar (S A P Q) T.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.
rewrite H3.
assert (T := l2_11a A B C D P Q H).
Geometry.
RewriteVar (S A P Q) T.

*****
T : eq (S A P Q) (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q))
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q)))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q))) (S B P Q)) (Fplus (Fopp (S D P Q)) (S C P Q))
+++++
Geometry.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.
rewrite H3.
assert (T := l2_11a A B C D P Q H).
Geometry.
RewriteVar (S A P Q) T.
Geometry.

*****
T : eq (S A P Q) (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q))
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q)))
H : parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q))) (S B P Q)) (Fplus (Fopp (S D P Q)) (S C P Q))
+++++
ring.
-----
Theorem l2_11b : forall A B C D P Q : Point, parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).

*****

*****

+++++
Qed.
-----
Theorem l2_11b_strong_strong : \n  forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.

*****

*****
forall (A B C D P Q : Point) (_ : weak_2_parallelogram A B C D), eq (S4 P A Q B) (S4 P D Q C)
+++++
Proof.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.

*****

*****
forall (A B C D P Q : Point) (_ : weak_2_parallelogram A B C D), eq (S4 P A Q B) (S4 P D Q C)
+++++
intros.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.

*****
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (S4 P A Q B) (S4 P D Q C)
+++++
unfold S4 in |- *.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.

*****
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
assert (S P A Q = - S A P Q).
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).

*****
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (S P A Q) (Fopp (S A P Q))
+++++
Geometry.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).

*****
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
Geometry.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.

*****
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
assert (S P Q B = S B P Q).
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).

*****
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (S P Q B) (S B P Q)
+++++
Geometry.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).

*****
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
Geometry.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.

*****
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
assert (S P D Q = - S D P Q).
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).

*****
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (S P D Q) (Fopp (S D P Q))
+++++
Geometry.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).

*****
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
Geometry.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.

*****
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
assert (S P Q C = S C P Q).
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).

*****
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (S P Q C) (S C P Q)
+++++
Geometry.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
Geometry.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
rewrite H0.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
rewrite H1.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S B P Q)) (Fplus (S P D Q) (S P Q C))
+++++
rewrite H2.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S B P Q)) (Fplus (Fopp (S D P Q)) (S P Q C))
+++++
rewrite H3.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.
rewrite H3.

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S B P Q)) (Fplus (Fopp (S D P Q)) (S C P Q))
+++++
assert (T := l2_11a_strong_strong A B C D P Q H).
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.
rewrite H3.
assert (T := l2_11a_strong_strong A B C D P Q H).

*****
T : eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S B P Q)) (Fplus (Fopp (S D P Q)) (S C P Q))
+++++
Geometry.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.
rewrite H3.
assert (T := l2_11a_strong_strong A B C D P Q H).
Geometry.

*****
T : eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S B P Q)) (Fplus (Fopp (S D P Q)) (S C P Q))
+++++
RewriteVar (S A P Q) T.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.
rewrite H3.
assert (T := l2_11a_strong_strong A B C D P Q H).
Geometry.
RewriteVar (S A P Q) T.

*****
T : eq (S A P Q) (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q))
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q)))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q))) (S B P Q)) (Fplus (Fopp (S D P Q)) (S C P Q))
+++++
Geometry.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.
rewrite H3.
assert (T := l2_11a_strong_strong A B C D P Q H).
Geometry.
RewriteVar (S A P Q) T.
Geometry.

*****
T : eq (S A P Q) (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q))
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q)))
H : weak_2_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q))) (S B P Q)) (Fplus (Fopp (S D P Q)) (S C P Q))
+++++
ring.
-----
Theorem l2_11b_strong_strong : forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).

*****

*****

+++++
Qed.
-----
Theorem l2_11b_strong_strong_strong : \n  forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.

*****

*****
forall (A B C D P Q : Point) (_ : weak_3_parallelogram A B C D), eq (S4 P A Q B) (S4 P D Q C)
+++++
Proof.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.

*****

*****
forall (A B C D P Q : Point) (_ : weak_3_parallelogram A B C D), eq (S4 P A Q B) (S4 P D Q C)
+++++
intros.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.

*****
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (S4 P A Q B) (S4 P D Q C)
+++++
unfold S4 in |- *.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.

*****
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
assert (S P A Q = - S A P Q).
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).

*****
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (S P A Q) (Fopp (S A P Q))
+++++
Geometry.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).

*****
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
Geometry.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.

*****
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
assert (S P Q B = S B P Q).
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).

*****
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (S P Q B) (S B P Q)
+++++
Geometry.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).

*****
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
Geometry.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.

*****
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
assert (S P D Q = - S D P Q).
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).

*****
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (S P D Q) (Fopp (S D P Q))
+++++
Geometry.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).

*****
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
Geometry.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.

*****
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
assert (S P Q C = S C P Q).
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).

*****
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (S P Q C) (S C P Q)
+++++
Geometry.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
Geometry.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (S P A Q) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
rewrite H0.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S P Q B)) (Fplus (S P D Q) (S P Q C))
+++++
rewrite H1.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S B P Q)) (Fplus (S P D Q) (S P Q C))
+++++
rewrite H2.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S B P Q)) (Fplus (Fopp (S D P Q)) (S P Q C))
+++++
rewrite H3.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.
rewrite H3.

*****
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S B P Q)) (Fplus (Fopp (S D P Q)) (S C P Q))
+++++
assert (T := l2_11a_strong_strong_strong A B C D P Q H).
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.
rewrite H3.
assert (T := l2_11a_strong_strong_strong A B C D P Q H).

*****
T : eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S B P Q)) (Fplus (Fopp (S D P Q)) (S C P Q))
+++++
Geometry.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.
rewrite H3.
assert (T := l2_11a_strong_strong_strong A B C D P Q H).
Geometry.

*****
T : eq (Fplus (S A P Q) (S C P Q)) (Fplus (S B P Q) (S D P Q))
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (S A P Q))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (S A P Q)) (S B P Q)) (Fplus (Fopp (S D P Q)) (S C P Q))
+++++
RewriteVar (S A P Q) T.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.
rewrite H3.
assert (T := l2_11a_strong_strong_strong A B C D P Q H).
Geometry.
RewriteVar (S A P Q) T.

*****
T : eq (S A P Q) (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q))
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q)))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q))) (S B P Q)) (Fplus (Fopp (S D P Q)) (S C P Q))
+++++
Geometry.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).
Geometry.
assert (S P Q B = S B P Q).
Geometry.
assert (S P D Q = - S D P Q).
Geometry.
assert (S P Q C = S C P Q).
Geometry.
rewrite H0.
rewrite H1.
rewrite H2.
rewrite H3.
assert (T := l2_11a_strong_strong_strong A B C D P Q H).
Geometry.
RewriteVar (S A P Q) T.
Geometry.

*****
T : eq (S A P Q) (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q))
H3 : eq (S P Q C) (S C P Q)
H2 : eq (S P D Q) (Fopp (S D P Q))
H1 : eq (S P Q B) (S B P Q)
H0 : eq (S P A Q) (Fopp (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q)))
H : weak_3_parallelogram A B C D
A,B,C,D,P,Q : Point
*****
eq (Fplus (Fopp (Fminus (Fplus (S B P Q) (S D P Q)) (S C P Q))) (S B P Q)) (Fplus (Fopp (S D P Q)) (S C P Q))
+++++
ring.
-----
Theorem l2_11b_strong_strong_strong : forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.
Proof.
intros.
unfold S4 in |- *.
assert (S P A Q = - S A P Q).

*****

*****

+++++
Qed.
-----
Theorem l2_12a :\n forall A B C D P : Point,\n parallelogram A B C D -> \n S P A B = S P D C - S A D C.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.

*****

*****
forall (A B C D P : Point) (_ : parallelogram A B C D), eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
Proof.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.

*****

*****
forall (A B C D P : Point) (_ : parallelogram A B C D), eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
intros.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.

*****
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
assert (S B D C = S A D C).
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).

*****
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S B D C) (S A D C)
+++++
assert (S A D C + S C D C = S B D C + S D D C).
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S A D C + S C D C = S B D C + S D D C).

*****
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fplus (S A D C) (S C D C)) (Fplus (S B D C) (S D D C))
+++++
apply l2_11a.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S A D C + S C D C = S B D C + S D D C).
apply l2_11a.

*****
H : parallelogram A B C D
A,B,C,D,P : Point
*****
parallelogram A B C D
+++++
Geometry.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S A D C + S C D C = S B D C + S D D C).

*****
H0 : eq (Fplus (S A D C) (S C D C)) (Fplus (S B D C) (S D D C))
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S B D C) (S A D C)
+++++
basic_simpl.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S A D C + S C D C = S B D C + S D D C).
basic_simpl.

*****
H0 : eq (S A D C) (S B D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S B D C) (S A D C)
+++++
Geometry.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).

*****
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
assert (S4 D B C P = S D B C + S D C P).
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).

*****
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S4 D B C P) (Fplus (S D B C) (S D C P))
+++++
Geometry.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).

*****
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
Geometry.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.

*****
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
assert (S4 D B C P = S P D C - S A D C).
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).

*****
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S4 D B C P) (Fminus (S P D C) (S A D C))
+++++
rewrite H1.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
rewrite H1.

*****
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fplus (S D B C) (S D C P)) (Fminus (S P D C) (S A D C))
+++++
uniformize_signed_areas.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
rewrite H1.
uniformize_signed_areas.

*****
H1 : eq (S4 D B C P) (Fplus (Fopp (S B D C)) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fplus (Fopp (S B D C)) (S D C P)) (Fminus (S D C P) (S A D C))
+++++
rewrite H0.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
rewrite H1.
uniformize_signed_areas.
rewrite H0.

*****
H1 : eq (S4 D B C P) (Fplus (Fopp (S B D C)) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fplus (Fopp (S A D C)) (S D C P)) (Fminus (S D C P) (S A D C))
+++++
ring.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).

*****
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
assert (S P A B = S P D B - S P C B).
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).

*****
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D B) (S P C B))
+++++
assert (S A B P + S C B P = S D B P + S B B P).
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).

*****
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fplus (S A B P) (S C B P)) (Fplus (S D B P) (S B B P))
+++++
apply l2_11a.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).
apply l2_11a.

*****
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
parallelogram A D C B
+++++
Geometry.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).

*****
H3 : eq (Fplus (S A B P) (S C B P)) (Fplus (S D B P) (S B B P))
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D B) (S P C B))
+++++
basic_simpl.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).
basic_simpl.

*****
H3 : eq (Fplus (S A B P) (S C B P)) (S D B P)
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D B) (S P C B))
+++++
uniformize_signed_areas.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).
basic_simpl.
uniformize_signed_areas.

*****
H3 : eq (Fplus (S A B P) (S C B P)) (S D B P)
H2 : eq (S4 D B C P) (Fminus (S D C P) (S A D C))
H1 : eq (S4 D B C P) (Fplus (Fopp (S B D C)) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S A B P) (Fminus (S D B P) (S C B P))
+++++
rewrite <- H3.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).
basic_simpl.
uniformize_signed_areas.
rewrite <- H3.

*****
H3 : eq (Fplus (S A B P) (S C B P)) (S D B P)
H2 : eq (S4 D B C P) (Fminus (S D C P) (S A D C))
H1 : eq (S4 D B C P) (Fplus (Fopp (S B D C)) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S A B P) (Fminus (Fplus (S A B P) (S C B P)) (S C B P))
+++++
ring.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).

*****
H3 : eq (S P A B) (Fminus (S P D B) (S P C B))
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
rewrite H3.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
rewrite H3.

*****
H3 : eq (S P A B) (Fminus (S P D B) (S P C B))
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fminus (S P D B) (S P C B)) (Fminus (S P D C) (S A D C))
+++++
assert (S4 D B C P = S D B P - S C B P).
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
rewrite H3.
assert (S4 D B C P = S D B P - S C B P).

*****
H3 : eq (S P A B) (Fminus (S P D B) (S P C B))
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S4 D B C P) (Fminus (S D B P) (S C B P))
+++++
Geometry.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
rewrite H3.
assert (S4 D B C P = S D B P - S C B P).

*****
H4 : eq (S4 D B C P) (Fminus (S D B P) (S C B P))
H3 : eq (S P A B) (Fminus (S P D B) (S P C B))
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fminus (S P D B) (S P C B)) (Fminus (S P D C) (S A D C))
+++++
Geometry.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
rewrite H3.
assert (S4 D B C P = S D B P - S C B P).
Geometry.

*****
H4 : eq (S4 D B C P) (Fminus (S D B P) (S C B P))
H3 : eq (S P A B) (Fminus (S P D B) (S P C B))
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fminus (S P D B) (S P C B)) (Fminus (S P D C) (S A D C))
+++++
uniformize_signed_areas.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
rewrite H3.
assert (S4 D B C P = S D B P - S C B P).
Geometry.
uniformize_signed_areas.

*****
H4 : eq (S4 D B C P) (Fminus (S P D B) (S P C B))
H3 : eq (S P A B) (Fminus (S P D B) (S P C B))
H2 : eq (S4 D B C P) (Fminus (S D C P) (S A D C))
H1 : eq (S4 D B C P) (Fplus (Fopp (S B D C)) (S D C P))
H0 : eq (S B D C) (S A D C)
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fminus (S P D B) (S P C B)) (Fminus (S D C P) (S A D C))
+++++
congruence.
-----
Theorem l2_12a : forall A B C D P : Point, parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).

*****

*****

+++++
Qed.
-----
Theorem l2_12a_strong_3 :\n forall A B C D P : Point,\n weak_3_parallelogram A B C D -> \n S P A B = S P D C - S A D C.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.

*****

*****
forall (A B C D P : Point) (_ : weak_3_parallelogram A B C D), eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
Proof.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.

*****

*****
forall (A B C D P : Point) (_ : weak_3_parallelogram A B C D), eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
intros.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.

*****
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
assert (S B D C = S A D C).
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).

*****
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S B D C) (S A D C)
+++++
assert (S A D C + S C D C = S B D C + S D D C).
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S A D C + S C D C = S B D C + S D D C).

*****
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fplus (S A D C) (S C D C)) (Fplus (S B D C) (S D D C))
+++++
apply l2_11a_strong_strong_strong.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S A D C + S C D C = S B D C + S D D C).
apply l2_11a_strong_strong_strong.

*****
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
weak_3_parallelogram A B C D
+++++
Geometry.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S A D C + S C D C = S B D C + S D D C).

*****
H0 : eq (Fplus (S A D C) (S C D C)) (Fplus (S B D C) (S D D C))
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S B D C) (S A D C)
+++++
basic_simpl.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S A D C + S C D C = S B D C + S D D C).
basic_simpl.

*****
H0 : eq (S A D C) (S B D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S B D C) (S A D C)
+++++
Geometry.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).

*****
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
assert (S4 D B C P = S D B C + S D C P).
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).

*****
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S4 D B C P) (Fplus (S D B C) (S D C P))
+++++
Geometry.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).

*****
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
Geometry.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.

*****
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
assert (S4 D B C P = S P D C - S A D C).
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).

*****
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S4 D B C P) (Fminus (S P D C) (S A D C))
+++++
rewrite H1.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
rewrite H1.

*****
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fplus (S D B C) (S D C P)) (Fminus (S P D C) (S A D C))
+++++
uniformize_signed_areas.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
rewrite H1.
uniformize_signed_areas.

*****
H1 : eq (S4 D B C P) (Fplus (Fopp (S B D C)) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fplus (Fopp (S B D C)) (S D C P)) (Fminus (S D C P) (S A D C))
+++++
rewrite H0.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
rewrite H1.
uniformize_signed_areas.
rewrite H0.

*****
H1 : eq (S4 D B C P) (Fplus (Fopp (S B D C)) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fplus (Fopp (S A D C)) (S D C P)) (Fminus (S D C P) (S A D C))
+++++
ring.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).

*****
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
assert (S P A B = S P D B - S P C B).
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).

*****
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D B) (S P C B))
+++++
assert (S A B P + S C B P = S D B P + S B B P).
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).

*****
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fplus (S A B P) (S C B P)) (Fplus (S D B P) (S B B P))
+++++
apply l2_11a_strong_strong_strong.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).
apply l2_11a_strong_strong_strong.

*****
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
weak_3_parallelogram A D C B
+++++
Geometry.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).
apply l2_11a_strong_strong_strong.
Geometry.

*****
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
weak_3_parallelogram A D C B
+++++
unfold weak_3_parallelogram in *.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).
apply l2_11a_strong_strong_strong.
Geometry.
unfold weak_3_parallelogram in *.

*****
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
A,B,C,D,P : Point
*****
ex (fun O : Point => and (mid_point O A C) (mid_point O D B))
+++++
DecompExAnd H Z.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).
apply l2_11a_strong_strong_strong.
Geometry.
unfold weak_3_parallelogram in *.
DecompExAnd H Z.

*****
H5 : mid_point Z B D
H4 : mid_point Z A C
Z : Point
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
A,B,C,D,P : Point
*****
ex (fun O : Point => and (mid_point O A C) (mid_point O D B))
+++++
exists Z.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).
apply l2_11a_strong_strong_strong.
Geometry.
unfold weak_3_parallelogram in *.
DecompExAnd H Z.
exists Z.

*****
H5 : mid_point Z B D
H4 : mid_point Z A C
Z : Point
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
A,B,C,D,P : Point
*****
and (mid_point Z A C) (mid_point Z D B)
+++++
split.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).
apply l2_11a_strong_strong_strong.
Geometry.
unfold weak_3_parallelogram in *.
DecompExAnd H Z.
exists Z.
split.

*****
H5 : mid_point Z B D
H4 : mid_point Z A C
Z : Point
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
A,B,C,D,P : Point
*****
mid_point Z A C
+++++
Geometry.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).
apply l2_11a_strong_strong_strong.
Geometry.
unfold weak_3_parallelogram in *.
DecompExAnd H Z.
exists Z.
split.

*****
H5 : mid_point Z B D
H4 : mid_point Z A C
Z : Point
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
A,B,C,D,P : Point
*****
mid_point Z D B
+++++
Geometry.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).

*****
H3 : eq (Fplus (S A B P) (S C B P)) (Fplus (S D B P) (S B B P))
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D B) (S P C B))
+++++
basic_simpl.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).
basic_simpl.

*****
H3 : eq (Fplus (S A B P) (S C B P)) (S D B P)
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D B) (S P C B))
+++++
uniformize_signed_areas.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).
basic_simpl.
uniformize_signed_areas.

*****
H3 : eq (Fplus (S A B P) (S C B P)) (S D B P)
H2 : eq (S4 D B C P) (Fminus (S D C P) (S A D C))
H1 : eq (S4 D B C P) (Fplus (Fopp (S B D C)) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S A B P) (Fminus (S D B P) (S C B P))
+++++
rewrite <- H3.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
assert (S A B P + S C B P = S D B P + S B B P).
basic_simpl.
uniformize_signed_areas.
rewrite <- H3.

*****
H3 : eq (Fplus (S A B P) (S C B P)) (S D B P)
H2 : eq (S4 D B C P) (Fminus (S D C P) (S A D C))
H1 : eq (S4 D B C P) (Fplus (Fopp (S B D C)) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S A B P) (Fminus (Fplus (S A B P) (S C B P)) (S C B P))
+++++
ring.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).

*****
H3 : eq (S P A B) (Fminus (S P D B) (S P C B))
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
rewrite H3.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
rewrite H3.

*****
H3 : eq (S P A B) (Fminus (S P D B) (S P C B))
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fminus (S P D B) (S P C B)) (Fminus (S P D C) (S A D C))
+++++
assert (S4 D B C P = S D B P - S C B P).
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
rewrite H3.
assert (S4 D B C P = S D B P - S C B P).

*****
H3 : eq (S P A B) (Fminus (S P D B) (S P C B))
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S4 D B C P) (Fminus (S D B P) (S C B P))
+++++
Geometry.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
rewrite H3.
assert (S4 D B C P = S D B P - S C B P).

*****
H4 : eq (S4 D B C P) (Fminus (S D B P) (S C B P))
H3 : eq (S P A B) (Fminus (S P D B) (S P C B))
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fminus (S P D B) (S P C B)) (Fminus (S P D C) (S A D C))
+++++
Geometry.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
rewrite H3.
assert (S4 D B C P = S D B P - S C B P).
Geometry.

*****
H4 : eq (S4 D B C P) (Fminus (S D B P) (S C B P))
H3 : eq (S P A B) (Fminus (S P D B) (S P C B))
H2 : eq (S4 D B C P) (Fminus (S P D C) (S A D C))
H1 : eq (S4 D B C P) (Fplus (S D B C) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fminus (S P D B) (S P C B)) (Fminus (S P D C) (S A D C))
+++++
uniformize_signed_areas.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).
assert (S4 D B C P = S D B C + S D C P).
Geometry.
assert (S4 D B C P = S P D C - S A D C).
assert (S P A B = S P D B - S P C B).
rewrite H3.
assert (S4 D B C P = S D B P - S C B P).
Geometry.
uniformize_signed_areas.

*****
H4 : eq (S4 D B C P) (Fminus (S P D B) (S P C B))
H3 : eq (S P A B) (Fminus (S P D B) (S P C B))
H2 : eq (S4 D B C P) (Fminus (S D C P) (S A D C))
H1 : eq (S4 D B C P) (Fplus (Fopp (S B D C)) (S D C P))
H0 : eq (S B D C) (S A D C)
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fminus (S P D B) (S P C B)) (Fminus (S D C P) (S A D C))
+++++
congruence.
-----
Theorem l2_12a_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S P D C - S A D C.
Proof.
intros.
assert (S B D C = S A D C).

*****

*****

+++++
Qed.
-----
Theorem l2_12b :\n forall A B C D P : Point, parallelogram A B C D -> \n  S P A B = S4 P D A C.
-----
Theorem l2_12b : forall A B C D P : Point, parallelogram A B C D -> S P A B = S4 P D A C.

*****

*****
forall (A B C D P : Point) (_ : parallelogram A B C D), eq (S P A B) (S4 P D A C)
+++++
Proof.
-----
Theorem l2_12b : forall A B C D P : Point, parallelogram A B C D -> S P A B = S4 P D A C.
Proof.

*****

*****
forall (A B C D P : Point) (_ : parallelogram A B C D), eq (S P A B) (S4 P D A C)
+++++
intros.
-----
Theorem l2_12b : forall A B C D P : Point, parallelogram A B C D -> S P A B = S4 P D A C.
Proof.
intros.

*****
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (S4 P D A C)
+++++
replace (S4 P D A C) with (S P D C - S A D C).
-----
Theorem l2_12b : forall A B C D P : Point, parallelogram A B C D -> S P A B = S4 P D A C.
Proof.
intros.
replace (S4 P D A C) with (S P D C - S A D C).

*****
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
Geometry.
-----
Theorem l2_12b : forall A B C D P : Point, parallelogram A B C D -> S P A B = S4 P D A C.
Proof.
intros.
replace (S4 P D A C) with (S P D C - S A D C).
Geometry.

*****
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
apply l2_12a.
-----
Theorem l2_12b : forall A B C D P : Point, parallelogram A B C D -> S P A B = S4 P D A C.
Proof.
intros.
replace (S4 P D A C) with (S P D C - S A D C).
Geometry.
apply l2_12a.

*****
H : parallelogram A B C D
A,B,C,D,P : Point
*****
parallelogram A B C D
+++++
Geometry.
-----
Theorem l2_12b : forall A B C D P : Point, parallelogram A B C D -> S P A B = S4 P D A C.
Proof.
intros.
replace (S4 P D A C) with (S P D C - S A D C).

*****
H : parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fminus (S P D C) (S A D C)) (S4 P D A C)
+++++
Geometry.
-----
Theorem l2_12b : forall A B C D P : Point, parallelogram A B C D -> S P A B = S4 P D A C.
Proof.
intros.
replace (S4 P D A C) with (S P D C - S A D C).

*****

*****

+++++
Qed.
-----
Theorem l2_12b_strong_3 :\n forall A B C D P : Point, weak_3_parallelogram A B C D -> \n  S P A B = S4 P D A C.
-----
Theorem l2_12b_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S4 P D A C.

*****

*****
forall (A B C D P : Point) (_ : weak_3_parallelogram A B C D), eq (S P A B) (S4 P D A C)
+++++
Proof.
-----
Theorem l2_12b_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S4 P D A C.
Proof.

*****

*****
forall (A B C D P : Point) (_ : weak_3_parallelogram A B C D), eq (S P A B) (S4 P D A C)
+++++
intros.
-----
Theorem l2_12b_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S4 P D A C.
Proof.
intros.

*****
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (S4 P D A C)
+++++
replace (S4 P D A C) with (S P D C - S A D C).
-----
Theorem l2_12b_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S4 P D A C.
Proof.
intros.
replace (S4 P D A C) with (S P D C - S A D C).

*****
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
Geometry.
-----
Theorem l2_12b_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S4 P D A C.
Proof.
intros.
replace (S4 P D A C) with (S P D C - S A D C).
Geometry.

*****
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (S P A B) (Fminus (S P D C) (S A D C))
+++++
apply l2_12a_strong_3.
-----
Theorem l2_12b_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S4 P D A C.
Proof.
intros.
replace (S4 P D A C) with (S P D C - S A D C).
Geometry.
apply l2_12a_strong_3.

*****
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
weak_3_parallelogram A B C D
+++++
Geometry.
-----
Theorem l2_12b_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S4 P D A C.
Proof.
intros.
replace (S4 P D A C) with (S P D C - S A D C).

*****
H : weak_3_parallelogram A B C D
A,B,C,D,P : Point
*****
eq (Fminus (S P D C) (S A D C)) (S4 P D A C)
+++++
Geometry.
-----
Theorem l2_12b_strong_3 : forall A B C D P : Point, weak_3_parallelogram A B C D -> S P A B = S4 P D A C.
Proof.
intros.
replace (S4 P D A C) with (S P D C - S A D C).

*****

*****

+++++
Qed.
-----
Theorem pascalian_ax :\n forall A B C P Q R : Point,\n Col A B C -> Col P Q R -> \n parallel A Q R B -> parallel B P Q C -> \n parallel A P R C.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.

*****

*****
forall (A B C P Q R : Point) (_ : Col A B C) (_ : Col P Q R) (_ : parallel A Q R B) (_ : parallel B P Q C), parallel A P R C
+++++
Proof.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.

*****

*****
forall (A B C P Q R : Point) (_ : Col A B C) (_ : Col P Q R) (_ : parallel A Q R B) (_ : parallel B P Q C), parallel A P R C
+++++
unfold parallel in |- *.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.

*****

*****
forall (A B C P Q R : Point) (_ : Col A B C) (_ : Col P Q R) (_ : eq (S4 A R Q B) F0) (_ : eq (S4 B Q P C) F0), eq (S4 A R P C) F0
+++++
unfold S4 in |- *.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.

*****

*****
forall (A B C P Q R : Point) (_ : Col A B C) (_ : Col P Q R) (_ : eq (Fplus (S A R Q) (S A Q B)) F0) (_ : eq (Fplus (S B Q P) (S B P C)) F0), eq (Fplus (S A R P) (S A P C)) F0
+++++
intros.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.

*****
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H1 : eq (Fplus (S A R Q) (S A Q B)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
assert (S R A P = S R A Q + S R Q P + S Q A P).
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).

*****
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H1 : eq (Fplus (S A R Q) (S A Q B)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (S R A P) (Fplus (Fplus (S R A Q) (S R Q P)) (S Q A P))
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).

*****
H3 : eq (S R A P) (Fplus (Fplus (S R A Q) (S R Q P)) (S Q A P))
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H1 : eq (Fplus (S A R Q) (S A Q B)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.

*****
H3 : eq (S R A P) (Fplus (Fplus (S R A Q) (S R Q P)) (S Q A P))
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H1 : eq (Fplus (S A R Q) (S A Q B)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
assert (Col R Q P).
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).

*****
H3 : eq (S R A P) (Fplus (Fplus (S R A Q) (S R Q P)) (S Q A P))
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H1 : eq (Fplus (S A R Q) (S A Q B)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
Col R Q P
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).

*****
H4 : Col R Q P
H3 : eq (S R A P) (Fplus (Fplus (S R A Q) (S R Q P)) (S Q A P))
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H1 : eq (Fplus (S A R Q) (S A Q B)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.

*****
H4 : Col R Q P
H3 : eq (S R A P) (Fplus (Fplus (S R A Q) (S R Q P)) (S Q A P))
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H1 : eq (Fplus (S A R Q) (S A Q B)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
rewrite H4 in H3.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.

*****
H4 : Col R Q P
H3 : eq (S R A P) (Fplus (Fplus (S R A Q) F0) (S Q A P))
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H1 : eq (Fplus (S A R Q) (S A Q B)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
NormalizeRing H3.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.

*****
H3 : eq (S R A P) (Fplus (S R A Q) (S Q A P))
H4 : Col R Q P
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H1 : eq (Fplus (S A R Q) (S A Q B)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.

*****
H3 : eq (S R A P) (Fplus (S R A Q) (S Q A P))
H4 : Col R Q P
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H1 : eq (Fplus (S A R Q) (S A Q B)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
assert (S A R Q = - S R A Q).
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).

*****
H3 : eq (S R A P) (Fplus (S R A Q) (S Q A P))
H4 : Col R Q P
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H1 : eq (Fplus (S A R Q) (S A Q B)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (S A R Q) (Fopp (S R A Q))
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).

*****
H5 : eq (S A R Q) (Fopp (S R A Q))
H3 : eq (S R A P) (Fplus (S R A Q) (S Q A P))
H4 : Col R Q P
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H1 : eq (Fplus (S A R Q) (S A Q B)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.

*****
H5 : eq (S A R Q) (Fopp (S R A Q))
H3 : eq (S R A P) (Fplus (S R A Q) (S Q A P))
H4 : Col R Q P
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H1 : eq (Fplus (S A R Q) (S A Q B)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
rewrite H5 in H1.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.

*****
H5 : eq (S A R Q) (Fopp (S R A Q))
H3 : eq (S R A P) (Fplus (S R A Q) (S Q A P))
H4 : Col R Q P
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H1 : eq (Fplus (Fopp (S R A Q)) (S A Q B)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
RewriteVar (S R A Q) H1.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.

*****
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.

*****
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
assert (S4 B A P Q = S B A P + S B P Q).
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).

*****
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (S4 B A P Q) (Fplus (S B A P) (S B P Q))
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).

*****
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P Q))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.

*****
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P Q))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
assert (S B P Q = - S B Q P).
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).

*****
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P Q))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (S B P Q) (Fopp (S B Q P))
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).

*****
H7 : eq (S B P Q) (Fopp (S B Q P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P Q))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.

*****
H7 : eq (S B P Q) (Fopp (S B Q P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P Q))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
rewrite H7 in H6.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.

*****
H7 : eq (S B P Q) (Fopp (S B Q P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (Fopp (S B Q P)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H2 : eq (Fplus (S B Q P) (S B P C)) F0
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
RewriteVar (S B Q P) H2.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.

*****
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (Fopp (Fopp (S B P C))))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.

*****
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (Fopp (Fopp (S B P C))))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
NormalizeRing H6.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.

*****
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P C))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.

*****
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P C))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
assert (S C A P = S C A B + S C B P + S B A P).
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).

*****
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P C))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (S C A P) (Fplus (Fplus (S C A B) (S C B P)) (S B A P))
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).

*****
H8 : eq (S C A P) (Fplus (Fplus (S C A B) (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P C))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.

*****
H8 : eq (S C A P) (Fplus (Fplus (S C A B) (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P C))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
assert (Col C A B).
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).

*****
H8 : eq (S C A P) (Fplus (Fplus (S C A B) (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P C))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
Col C A B
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).

*****
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus (S C A B) (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P C))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.

*****
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus (S C A B) (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P C))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
rewrite H9 in H8.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.

*****
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P C))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.

*****
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P C))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
assert (S C B P = S B P C).
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).

*****
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P C))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (S C B P) (S B P C)
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).

*****
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P C))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.

*****
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S B P C))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
rewrite <- H10 in H6.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.

*****
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.

*****
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
assert (S4 B A P Q = S C A P).
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).

*****
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (S4 B A P Q) (S C A P)
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.

*****
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (S4 B A P Q) (S C A P)
+++++
rewrite H8.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
rewrite H8.

*****
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (S4 B A P Q) (Fplus (Fplus F0 (S C B P)) (S B A P))
+++++
rewrite H6.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
rewrite H8.
rewrite H6.

*****
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S B A P) (S C B P)) (Fplus (Fplus F0 (S C B P)) (S B A P))
+++++
ring_simplify.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
rewrite H8.
rewrite H6.
ring_simplify.

*****
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S B A P) (S C B P)) (Fplus (S B A P) (S C B P))
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).

*****
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.

*****
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
cut (S A Q B + S Q A P = S4 B A P Q).
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).

*****
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
forall _ : eq (Fplus (S A Q B) (S Q A P)) (S4 B A P Q), eq (Fplus (S A R P) (S A P C)) F0
+++++
intro.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
intro.

*****
H12 : eq (Fplus (S A Q B) (S Q A P)) (S4 B A P Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
rewrite H12 in H3.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
intro.
rewrite H12 in H3.

*****
H12 : eq (Fplus (S A Q B) (S Q A P)) (S4 B A P Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (S4 B A P Q)
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
rewrite H11 in H3.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
intro.
rewrite H12 in H3.
rewrite H11 in H3.

*****
H12 : eq (Fplus (S A Q B) (S Q A P)) (S4 B A P Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (S C A P)
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
assert (S A P C = S C A P).
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
intro.
rewrite H12 in H3.
rewrite H11 in H3.
assert (S A P C = S C A P).

*****
H12 : eq (Fplus (S A Q B) (S Q A P)) (S4 B A P Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (S C A P)
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (S A P C) (S C A P)
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
intro.
rewrite H12 in H3.
rewrite H11 in H3.
assert (S A P C = S C A P).

*****
H13 : eq (S A P C) (S C A P)
H12 : eq (Fplus (S A Q B) (S Q A P)) (S4 B A P Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (S C A P)
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
intro.
rewrite H12 in H3.
rewrite H11 in H3.
assert (S A P C = S C A P).
Geometry.

*****
H13 : eq (S A P C) (S C A P)
H12 : eq (Fplus (S A Q B) (S Q A P)) (S4 B A P Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (S C A P)
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S A P C)) F0
+++++
rewrite H13.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
intro.
rewrite H12 in H3.
rewrite H11 in H3.
assert (S A P C = S C A P).
Geometry.
rewrite H13.

*****
H13 : eq (S A P C) (S C A P)
H12 : eq (Fplus (S A Q B) (S Q A P)) (S4 B A P Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (S C A P)
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S C A P)) F0
+++++
rewrite <- H3.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
intro.
rewrite H12 in H3.
rewrite H11 in H3.
assert (S A P C = S C A P).
Geometry.
rewrite H13.
rewrite <- H3.

*****
H13 : eq (S A P C) (S C A P)
H12 : eq (Fplus (S A Q B) (S Q A P)) (S4 B A P Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (S C A P)
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S R A P)) F0
+++++
assert (S A R P = - S R A P).
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
intro.
rewrite H12 in H3.
rewrite H11 in H3.
assert (S A P C = S C A P).
Geometry.
rewrite H13.
rewrite <- H3.
assert (S A R P = - S R A P).

*****
H13 : eq (S A P C) (S C A P)
H12 : eq (Fplus (S A Q B) (S Q A P)) (S4 B A P Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (S C A P)
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (S A R P) (Fopp (S R A P))
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
intro.
rewrite H12 in H3.
rewrite H11 in H3.
assert (S A P C = S C A P).
Geometry.
rewrite H13.
rewrite <- H3.
assert (S A R P = - S R A P).

*****
H14 : eq (S A R P) (Fopp (S R A P))
H13 : eq (S A P C) (S C A P)
H12 : eq (Fplus (S A Q B) (S Q A P)) (S4 B A P Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (S C A P)
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S R A P)) F0
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
intro.
rewrite H12 in H3.
rewrite H11 in H3.
assert (S A P C = S C A P).
Geometry.
rewrite H13.
rewrite <- H3.
assert (S A R P = - S R A P).
Geometry.

*****
H14 : eq (S A R P) (Fopp (S R A P))
H13 : eq (S A P C) (S C A P)
H12 : eq (Fplus (S A Q B) (S Q A P)) (S4 B A P Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (S C A P)
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A R P) (S R A P)) F0
+++++
rewrite H14.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
intro.
rewrite H12 in H3.
rewrite H11 in H3.
assert (S A P C = S C A P).
Geometry.
rewrite H13.
rewrite <- H3.
assert (S A R P = - S R A P).
Geometry.
rewrite H14.

*****
H14 : eq (S A R P) (Fopp (S R A P))
H13 : eq (S A P C) (S C A P)
H12 : eq (Fplus (S A Q B) (S Q A P)) (S4 B A P Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (S C A P)
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (Fopp (S R A P)) (S R A P)) F0
+++++
ring.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).

*****
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A Q B) (S Q A P)) (S4 B A P Q)
+++++
assert (S A Q B = S B A Q).
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
assert (S A Q B = S B A Q).

*****
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (S A Q B) (S B A Q)
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
assert (S A Q B = S B A Q).

*****
H12 : eq (S A Q B) (S B A Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A Q B) (S Q A P)) (S4 B A P Q)
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
assert (S A Q B = S B A Q).
Geometry.

*****
H12 : eq (S A Q B) (S B A Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S A Q B) (S Q A P)) (S4 B A P Q)
+++++
rewrite H12.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
assert (S A Q B = S B A Q).
Geometry.
rewrite H12.

*****
H12 : eq (S A Q B) (S B A Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S B A Q) (S Q A P)) (S4 B A P Q)
+++++
assert (S4 B A P Q = S B A Q - S P A Q).
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
assert (S A Q B = S B A Q).
Geometry.
rewrite H12.
assert (S4 B A P Q = S B A Q - S P A Q).

*****
H12 : eq (S A Q B) (S B A Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (S4 B A P Q) (Fminus (S B A Q) (S P A Q))
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
assert (S A Q B = S B A Q).
Geometry.
rewrite H12.
assert (S4 B A P Q = S B A Q - S P A Q).

*****
H13 : eq (S4 B A P Q) (Fminus (S B A Q) (S P A Q))
H12 : eq (S A Q B) (S B A Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S B A Q) (S Q A P)) (S4 B A P Q)
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
assert (S A Q B = S B A Q).
Geometry.
rewrite H12.
assert (S4 B A P Q = S B A Q - S P A Q).
Geometry.

*****
H13 : eq (S4 B A P Q) (Fminus (S B A Q) (S P A Q))
H12 : eq (S A Q B) (S B A Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S B A Q) (S Q A P)) (S4 B A P Q)
+++++
rewrite H13.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
assert (S A Q B = S B A Q).
Geometry.
rewrite H12.
assert (S4 B A P Q = S B A Q - S P A Q).
Geometry.
rewrite H13.

*****
H13 : eq (S4 B A P Q) (Fminus (S B A Q) (S P A Q))
H12 : eq (S A Q B) (S B A Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S B A Q) (S Q A P)) (Fminus (S B A Q) (S P A Q))
+++++
assert (S Q A P = - S P A Q).
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
assert (S A Q B = S B A Q).
Geometry.
rewrite H12.
assert (S4 B A P Q = S B A Q - S P A Q).
Geometry.
rewrite H13.
assert (S Q A P = - S P A Q).

*****
H13 : eq (S4 B A P Q) (Fminus (S B A Q) (S P A Q))
H12 : eq (S A Q B) (S B A Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (S Q A P) (Fopp (S P A Q))
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
assert (S A Q B = S B A Q).
Geometry.
rewrite H12.
assert (S4 B A P Q = S B A Q - S P A Q).
Geometry.
rewrite H13.
assert (S Q A P = - S P A Q).

*****
H14 : eq (S Q A P) (Fopp (S P A Q))
H13 : eq (S4 B A P Q) (Fminus (S B A Q) (S P A Q))
H12 : eq (S A Q B) (S B A Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S B A Q) (S Q A P)) (Fminus (S B A Q) (S P A Q))
+++++
Geometry.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
assert (S A Q B = S B A Q).
Geometry.
rewrite H12.
assert (S4 B A P Q = S B A Q - S P A Q).
Geometry.
rewrite H13.
assert (S Q A P = - S P A Q).
Geometry.

*****
H14 : eq (S Q A P) (Fopp (S P A Q))
H13 : eq (S4 B A P Q) (Fminus (S B A Q) (S P A Q))
H12 : eq (S A Q B) (S B A Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S B A Q) (S Q A P)) (Fminus (S B A Q) (S P A Q))
+++++
rewrite H14.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).
Geometry.
assert (Col R Q P).
Geometry.
rewrite H4 in H3.
NormalizeRing H3.
Geometry.
assert (S A R Q = - S R A Q).
Geometry.
rewrite H5 in H1.
RewriteVar (S R A Q) H1.
Geometry.
assert (S4 B A P Q = S B A P + S B P Q).
Geometry.
assert (S B P Q = - S B Q P).
Geometry.
rewrite H7 in H6.
RewriteVar (S B Q P) H2.
Geometry.
NormalizeRing H6.
Geometry.
assert (S C A P = S C A B + S C B P + S B A P).
Geometry.
assert (Col C A B).
Geometry.
rewrite H9 in H8.
Geometry.
assert (S C B P = S B P C).
Geometry.
rewrite <- H10 in H6.
Geometry.
assert (S4 B A P Q = S C A P).
Geometry.
cut (S A Q B + S Q A P = S4 B A P Q).
assert (S A Q B = S B A Q).
Geometry.
rewrite H12.
assert (S4 B A P Q = S B A Q - S P A Q).
Geometry.
rewrite H13.
assert (S Q A P = - S P A Q).
Geometry.
rewrite H14.

*****
H14 : eq (S Q A P) (Fopp (S P A Q))
H13 : eq (S4 B A P Q) (Fminus (S B A Q) (S P A Q))
H12 : eq (S A Q B) (S B A Q)
H11 : eq (S4 B A P Q) (S C A P)
H10 : eq (S C B P) (S B P C)
H9 : Col C A B
H8 : eq (S C A P) (Fplus (Fplus F0 (S C B P)) (S B A P))
H6 : eq (S4 B A P Q) (Fplus (S B A P) (S C B P))
H2 : eq (S B Q P) (Fopp (S B P C))
H7 : eq (S B P Q) (Fopp (Fopp (S B P C)))
H1 : eq (S R A Q) (S A Q B)
H5 : eq (S A R Q) (Fopp (S A Q B))
H3 : eq (S R A P) (Fplus (S A Q B) (S Q A P))
H4 : Col R Q P
H0 : Col P Q R
H : Col A B C
A,B,C,P,Q,R : Point
*****
eq (Fplus (S B A Q) (Fopp (S P A Q))) (Fminus (S B A Q) (S P A Q))
+++++
ring.
-----
Theorem pascalian_ax : forall A B C P Q R : Point, Col A B C -> Col P Q R -> parallel A Q R B -> parallel B P Q C -> parallel A P R C.
Proof.
unfold parallel in |- *.
unfold S4 in |- *.
intros.
assert (S R A P = S R A Q + S R Q P + S Q A P).

*****

*****

+++++
Qed.
-----
Theorem l1_25_aux :\n forall A B C X Y Z : Point,\n ~ Col Z B Y ->\n ~ Col C B Y ->\n Col A B C ->\n Col X Y Z ->\n parallel A X B Y ->\n parallel B Y C Z -> \n B <> C -> Z <> Y -> \n A ** B / C ** B = X ** Y / Z ** Y.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.

*****

*****
forall (A B C X Y Z : Point) (_ : not (Col Z B Y)) (_ : not (Col C B Y)) (_ : Col A B C) (_ : Col X Y Z) (_ : parallel A X B Y) (_ : parallel B Y C Z) (_ : not (eq B C)) (_ : not (eq Z Y)), eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
Proof.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.

*****

*****
forall (A B C X Y Z : Point) (_ : not (Col Z B Y)) (_ : not (Col C B Y)) (_ : Col A B C) (_ : Col X Y Z) (_ : parallel A X B Y) (_ : parallel B Y C Z) (_ : not (eq B C)) (_ : not (eq Z Y)), eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
intros.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.

*****
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
assert (S C B Y = S Z B Y).
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).

*****
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S C B Y) (S Z B Y)
+++++
unfold parallel in H4.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
unfold parallel in H4.

*****
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : eq (S4 B C Y Z) F0
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S C B Y) (S Z B Y)
+++++
unfold S4 in H4.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
unfold parallel in H4.
unfold S4 in H4.

*****
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : eq (Fplus (S B C Y) (S B Y Z)) F0
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S C B Y) (S Z B Y)
+++++
assert (S B C Y = - S C B Y).
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
unfold parallel in H4.
unfold S4 in H4.
assert (S B C Y = - S C B Y).

*****
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : eq (Fplus (S B C Y) (S B Y Z)) F0
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S B C Y) (Fopp (S C B Y))
+++++
Geometry.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
unfold parallel in H4.
unfold S4 in H4.
assert (S B C Y = - S C B Y).

*****
H7 : eq (S B C Y) (Fopp (S C B Y))
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : eq (Fplus (S B C Y) (S B Y Z)) F0
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S C B Y) (S Z B Y)
+++++
Geometry.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
unfold parallel in H4.
unfold S4 in H4.
assert (S B C Y = - S C B Y).
Geometry.

*****
H7 : eq (S B C Y) (Fopp (S C B Y))
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : eq (Fplus (S B C Y) (S B Y Z)) F0
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S C B Y) (S Z B Y)
+++++
rewrite H7 in H4.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
unfold parallel in H4.
unfold S4 in H4.
assert (S B C Y = - S C B Y).
Geometry.
rewrite H7 in H4.

*****
H7 : eq (S B C Y) (Fopp (S C B Y))
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : eq (Fplus (Fopp (S C B Y)) (S B Y Z)) F0
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S C B Y) (S Z B Y)
+++++
RewriteVar (S C B Y) H4.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
unfold parallel in H4.
unfold S4 in H4.
assert (S B C Y = - S C B Y).
Geometry.
rewrite H7 in H4.
RewriteVar (S C B Y) H4.

*****
H4 : eq (S C B Y) (S B Y Z)
H7 : eq (S B C Y) (Fopp (S B Y Z))
H6 : not (eq Z Y)
H5 : not (eq B C)
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S B Y Z) (S Z B Y)
+++++
Geometry.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).

*****
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
assert (S A B Y = S X B Y).
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).

*****
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S A B Y) (S X B Y)
+++++
Geometry.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.

*****
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S A B Y) (S X B Y)
+++++
assert (parallel B Y A X).
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (parallel B Y A X).

*****
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
parallel B Y A X
+++++
Geometry.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (parallel B Y A X).

*****
H8 : parallel B Y A X
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S A B Y) (S X B Y)
+++++
Geometry.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (parallel B Y A X).
Geometry.

*****
H8 : parallel B Y A X
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S A B Y) (S X B Y)
+++++
unfold parallel in H8.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (parallel B Y A X).
Geometry.
unfold parallel in H8.

*****
H8 : eq (S4 B A Y X) F0
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S A B Y) (S X B Y)
+++++
unfold S4 in H8.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (parallel B Y A X).
Geometry.
unfold parallel in H8.
unfold S4 in H8.

*****
H8 : eq (Fplus (S B A Y) (S B Y X)) F0
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S A B Y) (S X B Y)
+++++
assert (S B A Y = - S A B Y).
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (parallel B Y A X).
Geometry.
unfold parallel in H8.
unfold S4 in H8.
assert (S B A Y = - S A B Y).

*****
H8 : eq (Fplus (S B A Y) (S B Y X)) F0
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S B A Y) (Fopp (S A B Y))
+++++
Geometry.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (parallel B Y A X).
Geometry.
unfold parallel in H8.
unfold S4 in H8.
assert (S B A Y = - S A B Y).

*****
H9 : eq (S B A Y) (Fopp (S A B Y))
H8 : eq (Fplus (S B A Y) (S B Y X)) F0
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S A B Y) (S X B Y)
+++++
Geometry.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (parallel B Y A X).
Geometry.
unfold parallel in H8.
unfold S4 in H8.
assert (S B A Y = - S A B Y).
Geometry.

*****
H9 : eq (S B A Y) (Fopp (S A B Y))
H8 : eq (Fplus (S B A Y) (S B Y X)) F0
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S A B Y) (S X B Y)
+++++
assert (S B Y X = S X B Y).
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (parallel B Y A X).
Geometry.
unfold parallel in H8.
unfold S4 in H8.
assert (S B A Y = - S A B Y).
Geometry.
assert (S B Y X = S X B Y).

*****
H9 : eq (S B A Y) (Fopp (S A B Y))
H8 : eq (Fplus (S B A Y) (S B Y X)) F0
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S B Y X) (S X B Y)
+++++
Geometry.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (parallel B Y A X).
Geometry.
unfold parallel in H8.
unfold S4 in H8.
assert (S B A Y = - S A B Y).
Geometry.
assert (S B Y X = S X B Y).

*****
H10 : eq (S B Y X) (S X B Y)
H9 : eq (S B A Y) (Fopp (S A B Y))
H8 : eq (Fplus (S B A Y) (S B Y X)) F0
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S A B Y) (S X B Y)
+++++
Geometry.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (parallel B Y A X).
Geometry.
unfold parallel in H8.
unfold S4 in H8.
assert (S B A Y = - S A B Y).
Geometry.
assert (S B Y X = S X B Y).
Geometry.

*****
H10 : eq (S B Y X) (S X B Y)
H9 : eq (S B A Y) (Fopp (S A B Y))
H8 : eq (Fplus (S B A Y) (S B Y X)) F0
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S A B Y) (S X B Y)
+++++
rewrite H9 in H8.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (parallel B Y A X).
Geometry.
unfold parallel in H8.
unfold S4 in H8.
assert (S B A Y = - S A B Y).
Geometry.
assert (S B Y X = S X B Y).
Geometry.
rewrite H9 in H8.

*****
H10 : eq (S B Y X) (S X B Y)
H9 : eq (S B A Y) (Fopp (S A B Y))
H8 : eq (Fplus (Fopp (S A B Y)) (S B Y X)) F0
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S A B Y) (S X B Y)
+++++
rewrite H10 in H8.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (parallel B Y A X).
Geometry.
unfold parallel in H8.
unfold S4 in H8.
assert (S B A Y = - S A B Y).
Geometry.
assert (S B Y X = S X B Y).
Geometry.
rewrite H9 in H8.
rewrite H10 in H8.

*****
H10 : eq (S B Y X) (S X B Y)
H9 : eq (S B A Y) (Fopp (S A B Y))
H8 : eq (Fplus (Fopp (S A B Y)) (S X B Y)) F0
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S A B Y) (S X B Y)
+++++
RewriteVar (S A B Y) H8.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (parallel B Y A X).
Geometry.
unfold parallel in H8.
unfold S4 in H8.
assert (S B A Y = - S A B Y).
Geometry.
assert (S B Y X = S X B Y).
Geometry.
rewrite H9 in H8.
rewrite H10 in H8.
RewriteVar (S A B Y) H8.

*****
H8 : eq (S A B Y) (S X B Y)
H10 : eq (S B Y X) (S X B Y)
H9 : eq (S B A Y) (Fopp (S X B Y))
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (S X B Y) (S X B Y)
+++++
Geometry.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).

*****
H8 : eq (S A B Y) (S X B Y)
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
Geometry.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.

*****
H8 : eq (S A B Y) (S X B Y)
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
assert (A ** B / C ** B = S A B Y / S C B Y).
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (A ** B / C ** B = S A B Y / S C B Y).

*****
H8 : eq (S A B Y) (S X B Y)
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (S A B Y) (S C B Y))
+++++
Geometry.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (A ** B / C ** B = S A B Y / S C B Y).

*****
H9 : eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (S A B Y) (S C B Y))
H8 : eq (S A B Y) (S X B Y)
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
Geometry.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (A ** B / C ** B = S A B Y / S C B Y).
Geometry.

*****
H9 : eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (S A B Y) (S C B Y))
H8 : eq (S A B Y) (S X B Y)
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
assert (X ** Y / Z ** Y = S X B Y / S Z B Y).
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (A ** B / C ** B = S A B Y / S C B Y).
Geometry.
assert (X ** Y / Z ** Y = S X B Y / S Z B Y).

*****
H9 : eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (S A B Y) (S C B Y))
H8 : eq (S A B Y) (S X B Y)
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg X Y) (DSeg Z Y)) (Fdiv (S X B Y) (S Z B Y))
+++++
Geometry.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (A ** B / C ** B = S A B Y / S C B Y).
Geometry.
assert (X ** Y / Z ** Y = S X B Y / S Z B Y).

*****
H10 : eq (Fdiv (DSeg X Y) (DSeg Z Y)) (Fdiv (S X B Y) (S Z B Y))
H9 : eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (S A B Y) (S C B Y))
H8 : eq (S A B Y) (S X B Y)
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
Geometry.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).
assert (S A B Y = S X B Y).
Geometry.
assert (A ** B / C ** B = S A B Y / S C B Y).
Geometry.
assert (X ** Y / Z ** Y = S X B Y / S Z B Y).
Geometry.

*****
H10 : eq (Fdiv (DSeg X Y) (DSeg Z Y)) (Fdiv (S X B Y) (S Z B Y))
H9 : eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (S A B Y) (S C B Y))
H8 : eq (S A B Y) (S X B Y)
H7 : eq (S C B Y) (S Z B Y)
H6 : not (eq Z Y)
H5 : not (eq B C)
H4 : parallel B Y C Z
H3 : parallel A X B Y
H2 : Col X Y Z
H1 : Col A B C
H0 : not (Col C B Y)
H : not (Col Z B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
congruence.
-----
Theorem l1_25_aux : forall A B C X Y Z : Point, ~ Col Z B Y -> ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> B <> C -> Z <> Y -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (S C B Y = S Z B Y).

*****

*****

+++++
Qed.
-----
Theorem l1_25 :\n forall A B C X Y Z : Point,\n ~ Col C B Y ->\n Col A B C ->\n Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> \n A ** B / C ** B = X ** Y / Z ** Y.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.

*****

*****
forall (A B C X Y Z : Point) (_ : not (Col C B Y)) (_ : Col A B C) (_ : Col X Y Z) (_ : parallel A X B Y) (_ : parallel B Y C Z), eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
Proof.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.

*****

*****
forall (A B C X Y Z : Point) (_ : not (Col C B Y)) (_ : Col A B C) (_ : Col X Y Z) (_ : parallel A X B Y) (_ : parallel B Y C Z), eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
intros.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.

*****
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
assert (~ Col Z B Y).
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).

*****
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
not (Col Z B Y)
+++++
unfold not in |- *.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
unfold not in |- *.

*****
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
forall _ : Col Z B Y, False
+++++
intro.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
unfold not in |- *.
intro.

*****
H4 : Col Z B Y
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
False
+++++
unfold parallel in H3.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
unfold not in |- *.
intro.
unfold parallel in H3.

*****
H4 : Col Z B Y
H3 : eq (S4 B C Y Z) F0
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
False
+++++
unfold S4 in H3.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
unfold not in |- *.
intro.
unfold parallel in H3.
unfold S4 in H3.

*****
H4 : Col Z B Y
H3 : eq (Fplus (S B C Y) (S B Y Z)) F0
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
False
+++++
assert (Col B Y Z).
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
unfold not in |- *.
intro.
unfold parallel in H3.
unfold S4 in H3.
assert (Col B Y Z).

*****
H4 : Col Z B Y
H3 : eq (Fplus (S B C Y) (S B Y Z)) F0
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
Col B Y Z
+++++
Geometry.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
unfold not in |- *.
intro.
unfold parallel in H3.
unfold S4 in H3.
assert (Col B Y Z).

*****
H5 : Col B Y Z
H4 : Col Z B Y
H3 : eq (Fplus (S B C Y) (S B Y Z)) F0
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
False
+++++
Geometry.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
unfold not in |- *.
intro.
unfold parallel in H3.
unfold S4 in H3.
assert (Col B Y Z).
Geometry.

*****
H5 : Col B Y Z
H4 : Col Z B Y
H3 : eq (Fplus (S B C Y) (S B Y Z)) F0
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
False
+++++
rewrite H5 in H3.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
unfold not in |- *.
intro.
unfold parallel in H3.
unfold S4 in H3.
assert (Col B Y Z).
Geometry.
rewrite H5 in H3.

*****
H5 : Col B Y Z
H4 : Col Z B Y
H3 : eq (Fplus (S B C Y) F0) F0
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
False
+++++
NormalizeRing H3.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
unfold not in |- *.
intro.
unfold parallel in H3.
unfold S4 in H3.
assert (Col B Y Z).
Geometry.
rewrite H5 in H3.
NormalizeRing H3.

*****
H3 : eq (S B C Y) F0
H5 : Col B Y Z
H4 : Col Z B Y
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
False
+++++
Geometry.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).

*****
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
assert (C <> B).
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
assert (C <> B).

*****
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
not (eq C B)
+++++
eauto with Geom.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
assert (C <> B).

*****
H5 : not (eq C B)
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
eauto with Geom.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
assert (C <> B).
eauto with Geom.

*****
H5 : not (eq C B)
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
Geometry.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
assert (C <> B).
eauto with Geom.
Geometry.

*****
H5 : not (eq C B)
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
assert (Z <> Y).
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
assert (C <> B).
eauto with Geom.
Geometry.
assert (Z <> Y).

*****
H5 : not (eq C B)
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
not (eq Z Y)
+++++
eauto with Geom.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
assert (C <> B).
eauto with Geom.
Geometry.
assert (Z <> Y).

*****
H6 : not (eq Z Y)
H5 : not (eq C B)
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
eauto with Geom.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
assert (C <> B).
eauto with Geom.
Geometry.
assert (Z <> Y).
eauto with Geom.

*****
H6 : not (eq Z Y)
H5 : not (eq C B)
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
Geometry.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
assert (C <> B).
eauto with Geom.
Geometry.
assert (Z <> Y).
eauto with Geom.
Geometry.

*****
H6 : not (eq Z Y)
H5 : not (eq C B)
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
eq (Fdiv (DSeg A B) (DSeg C B)) (Fdiv (DSeg X Y) (DSeg Z Y))
+++++
apply l1_25_aux.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
assert (C <> B).
eauto with Geom.
Geometry.
assert (Z <> Y).
eauto with Geom.
Geometry.
apply l1_25_aux.

*****
H6 : not (eq Z Y)
H5 : not (eq C B)
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
not (Col Z B Y)
+++++
Geometry.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
assert (C <> B).
eauto with Geom.
Geometry.
assert (Z <> Y).
eauto with Geom.
Geometry.
apply l1_25_aux.

*****
H6 : not (eq Z Y)
H5 : not (eq C B)
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
not (Col C B Y)
+++++
Geometry.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
assert (C <> B).
eauto with Geom.
Geometry.
assert (Z <> Y).
eauto with Geom.
Geometry.
apply l1_25_aux.

*****
H6 : not (eq Z Y)
H5 : not (eq C B)
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
Col A B C
+++++
Geometry.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
assert (C <> B).
eauto with Geom.
Geometry.
assert (Z <> Y).
eauto with Geom.
Geometry.
apply l1_25_aux.

*****
H6 : not (eq Z Y)
H5 : not (eq C B)
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
Col X Y Z
+++++
Geometry.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
assert (C <> B).
eauto with Geom.
Geometry.
assert (Z <> Y).
eauto with Geom.
Geometry.
apply l1_25_aux.

*****
H6 : not (eq Z Y)
H5 : not (eq C B)
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
parallel A X B Y
+++++
Geometry.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
assert (C <> B).
eauto with Geom.
Geometry.
assert (Z <> Y).
eauto with Geom.
Geometry.
apply l1_25_aux.

*****
H6 : not (eq Z Y)
H5 : not (eq C B)
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
parallel B Y C Z
+++++
Geometry.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
assert (C <> B).
eauto with Geom.
Geometry.
assert (Z <> Y).
eauto with Geom.
Geometry.
apply l1_25_aux.

*****
H6 : not (eq Z Y)
H5 : not (eq C B)
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
not (eq B C)
+++++
Geometry.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).
assert (C <> B).
eauto with Geom.
Geometry.
assert (Z <> Y).
eauto with Geom.
Geometry.
apply l1_25_aux.

*****
H6 : not (eq Z Y)
H5 : not (eq C B)
H4 : not (Col Z B Y)
H3 : parallel B Y C Z
H2 : parallel A X B Y
H1 : Col X Y Z
H0 : Col A B C
H : not (Col C B Y)
A,B,C,X,Y,Z : Point
*****
not (eq Z Y)
+++++
Geometry.
-----
Theorem l1_25 : forall A B C X Y Z : Point, ~ Col C B Y -> Col A B C -> Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> A ** B / C ** B = X ** Y / Z ** Y.
Proof.
intros.
assert (~ Col Z B Y).

*****

*****

+++++
Qed.
-----
Theorem thales :\n forall S B C Z Y : Point,\n ~ Col C B Y ->\n Col S B C ->\n Col S Y Z ->\n parallel Y B Z C-> Z <> Y -> \n S ** B / C ** B = S ** Y / Z ** Y.
-----
Theorem thales : forall S B C Z Y : Point, ~ Col C B Y -> Col S B C -> Col S Y Z -> parallel Y B Z C-> Z <> Y -> S ** B / C ** B = S ** Y / Z ** Y.

*****

*****
forall (S B C Z Y : Point) (_ : not (Col C B Y)) (_ : Col S B C) (_ : Col S Y Z) (_ : parallel Y B Z C) (_ : not (eq Z Y)), eq (Fdiv (DSeg S B) (DSeg C B)) (Fdiv (DSeg S Y) (DSeg Z Y))
+++++
Proof.
-----
Theorem thales : forall S B C Z Y : Point, ~ Col C B Y -> Col S B C -> Col S Y Z -> parallel Y B Z C-> Z <> Y -> S ** B / C ** B = S ** Y / Z ** Y.
Proof.

*****

*****
forall (S B C Z Y : Point) (_ : not (Col C B Y)) (_ : Col S B C) (_ : Col S Y Z) (_ : parallel Y B Z C) (_ : not (eq Z Y)), eq (Fdiv (DSeg S B) (DSeg C B)) (Fdiv (DSeg S Y) (DSeg Z Y))
+++++
intros.
-----
Theorem thales : forall S B C Z Y : Point, ~ Col C B Y -> Col S B C -> Col S Y Z -> parallel Y B Z C-> Z <> Y -> S ** B / C ** B = S ** Y / Z ** Y.
Proof.
intros.

*****
H3 : not (eq Z Y)
H2 : parallel Y B Z C
H1 : Col S Y Z
H0 : Col S B C
H : not (Col C B Y)
S,B,C,Z,Y : Point
*****
eq (Fdiv (DSeg S B) (DSeg C B)) (Fdiv (DSeg S Y) (DSeg Z Y))
+++++
apply l1_25.
-----
Theorem thales : forall S B C Z Y : Point, ~ Col C B Y -> Col S B C -> Col S Y Z -> parallel Y B Z C-> Z <> Y -> S ** B / C ** B = S ** Y / Z ** Y.
Proof.
intros.
apply l1_25.

*****
H3 : not (eq Z Y)
H2 : parallel Y B Z C
H1 : Col S Y Z
H0 : Col S B C
H : not (Col C B Y)
S,B,C,Z,Y : Point
*****
not (Col C B Y)
+++++
Geometry.
-----
Theorem thales : forall S B C Z Y : Point, ~ Col C B Y -> Col S B C -> Col S Y Z -> parallel Y B Z C-> Z <> Y -> S ** B / C ** B = S ** Y / Z ** Y.
Proof.
intros.
apply l1_25.

*****
H3 : not (eq Z Y)
H2 : parallel Y B Z C
H1 : Col S Y Z
H0 : Col S B C
H : not (Col C B Y)
S,B,C,Z,Y : Point
*****
Col S B C
+++++
Geometry.
-----
Theorem thales : forall S B C Z Y : Point, ~ Col C B Y -> Col S B C -> Col S Y Z -> parallel Y B Z C-> Z <> Y -> S ** B / C ** B = S ** Y / Z ** Y.
Proof.
intros.
apply l1_25.

*****
H3 : not (eq Z Y)
H2 : parallel Y B Z C
H1 : Col S Y Z
H0 : Col S B C
H : not (Col C B Y)
S,B,C,Z,Y : Point
*****
Col S Y Z
+++++
Geometry.
-----
Theorem thales : forall S B C Z Y : Point, ~ Col C B Y -> Col S B C -> Col S Y Z -> parallel Y B Z C-> Z <> Y -> S ** B / C ** B = S ** Y / Z ** Y.
Proof.
intros.
apply l1_25.

*****
H3 : not (eq Z Y)
H2 : parallel Y B Z C
H1 : Col S Y Z
H0 : Col S B C
H : not (Col C B Y)
S,B,C,Z,Y : Point
*****
parallel S S B Y
+++++
Geometry.
-----
Theorem thales : forall S B C Z Y : Point, ~ Col C B Y -> Col S B C -> Col S Y Z -> parallel Y B Z C-> Z <> Y -> S ** B / C ** B = S ** Y / Z ** Y.
Proof.
intros.
apply l1_25.

*****
H3 : not (eq Z Y)
H2 : parallel Y B Z C
H1 : Col S Y Z
H0 : Col S B C
H : not (Col C B Y)
S,B,C,Z,Y : Point
*****
parallel B Y C Z
+++++
Geometry.
-----
Theorem thales : forall S B C Z Y : Point, ~ Col C B Y -> Col S B C -> Col S Y Z -> parallel Y B Z C-> Z <> Y -> S ** B / C ** B = S ** Y / Z ** Y.
Proof.
intros.
apply l1_25.

*****

*****

+++++
Qed.
-----
Theorem thales_2 :\n forall S A B A' B' : Point,\n ~ Col S A A' ->\n Col S A B ->\n Col S A' B' ->\n parallel A A' B B' -> \n S ** B / S**A  = S ** B' / S**A'.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.

*****

*****
forall (S A B A' B' : Point) (_ : not (Col S A A')) (_ : Col S A B) (_ : Col S A' B') (_ : parallel A A' B B'), eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
Proof.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.

*****

*****
forall (S A B A' B' : Point) (_ : not (Col S A A')) (_ : Col S A B) (_ : Col S A' B') (_ : parallel A A' B B'), eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
intros.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.

*****
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
cases_equality B' A'.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.

*****
H3 : eq B' A'
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
subst.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.

*****
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S A') (DSeg S A'))
+++++
assert (S<>A').
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').

*****
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
not (eq S A')
+++++
intro.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
intro.

*****
H3 : eq S A'
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
False
+++++
subst.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
intro.
subst.

*****
H1 : Col A' A' A'
H2 : parallel A A' B A'
H : not (Col A' A A')
H0 : Col A' A B
A,B,A' : Point
*****
False
+++++
intuition.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').

*****
H3 : not (eq S A')
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S A') (DSeg S A'))
+++++
replace (S ** A' / S ** A') with 1.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.

*****
H3 : not (eq S A')
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) F1
+++++
cases_equality A B.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.

*****
H4 : eq A B
H3 : not (eq S A')
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) F1
+++++
subst.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
subst.

*****
H3 : not (eq S A')
H1 : Col S A' A'
H : not (Col S B A')
H0 : Col S B B
H2 : parallel B A' B A'
S,B,A' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S B)) F1
+++++
field.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
subst.
field.

*****
H3 : not (eq S A')
H1 : Col S A' A'
H : not (Col S B A')
H0 : Col S B B
H2 : parallel B A' B A'
S,B,A' : Point
*****
not (eq (DSeg S B) F0)
+++++
intro.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
subst.
field.
intro.

*****
H4 : eq (DSeg S B) F0
H3 : not (eq S A')
H1 : Col S A' A'
H : not (Col S B A')
H0 : Col S B B
H2 : parallel B A' B A'
S,B,A' : Point
*****
False
+++++
assert (S=B).
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
subst.
field.
intro.
assert (S=B).

*****
H4 : eq (DSeg S B) F0
H3 : not (eq S A')
H1 : Col S A' A'
H : not (Col S B A')
H0 : Col S B B
H2 : parallel B A' B A'
S,B,A' : Point
*****
eq S B
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
subst.
field.
intro.
assert (S=B).

*****
H5 : eq S B
H4 : eq (DSeg S B) F0
H3 : not (eq S A')
H1 : Col S A' A'
H : not (Col S B A')
H0 : Col S B B
H2 : parallel B A' B A'
S,B,A' : Point
*****
False
+++++
subst.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
subst.
field.
intro.
assert (S=B).
subst.

*****
H0 : Col B B B
H : not (Col B B A')
H1 : Col B A' A'
H3 : not (eq B A')
H4 : eq (DSeg B B) F0
H2 : parallel B A' B A'
B,A' : Point
*****
False
+++++
intuition.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.

*****
H4 : not (eq A B)
H3 : not (eq S A')
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) F1
+++++
assert (Col A A' S).
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
assert (Col A A' S).

*****
H4 : not (eq A B)
H3 : not (eq S A')
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
Col A A' S
+++++
apply (col_trans_1 A B A' S).
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
assert (Col A A' S).
apply (col_trans_1 A B A' S).

*****
H4 : not (eq A B)
H3 : not (eq S A')
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
not (eq A B)
+++++
assumption.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
assert (Col A A' S).
apply (col_trans_1 A B A' S).

*****
H4 : not (eq A B)
H3 : not (eq S A')
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
Col A B A'
+++++
unfold parallel in *.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
assert (Col A A' S).
apply (col_trans_1 A B A' S).
unfold parallel in *.

*****
H4 : not (eq A B)
H3 : not (eq S A')
H1 : Col S A' A'
H2 : eq (S4 A B A' A') F0
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
Col A B A'
+++++
unfold S4 in *.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
assert (Col A A' S).
apply (col_trans_1 A B A' S).
unfold parallel in *.
unfold S4 in *.

*****
H4 : not (eq A B)
H3 : not (eq S A')
H1 : Col S A' A'
H2 : eq\n (Fplus (chou_gao_zhang_axioms.S A B A')\n (chou_gao_zhang_axioms.S A A' A')) F0
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
Col A B A'
+++++
basic_simpl.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
assert (Col A A' S).
apply (col_trans_1 A B A' S).
unfold parallel in *.
unfold S4 in *.
basic_simpl.

*****
H4 : not (eq A B)
H3 : not (eq S A')
H1 : Col S A' A'
H2 : eq (chou_gao_zhang_axioms.S A B A') F0
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
Col A B A'
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
assert (Col A A' S).
apply (col_trans_1 A B A' S).

*****
H4 : not (eq A B)
H3 : not (eq S A')
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
Col A B S
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
assert (Col A A' S).

*****
H5 : Col A A' S
H4 : not (eq A B)
H3 : not (eq S A')
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) F1
+++++
assert (Col S A A').
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
assert (Col A A' S).
assert (Col S A A').

*****
H5 : Col A A' S
H4 : not (eq A B)
H3 : not (eq S A')
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
Col S A A'
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
assert (Col A A' S).
assert (Col S A A').

*****
H6 : Col S A A'
H5 : Col A A' S
H4 : not (eq A B)
H3 : not (eq S A')
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) F1
+++++
idtac.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
cases_equality A B.
assert (Col A A' S).
assert (Col S A A').
idtac.

*****
H6 : Col S A A'
H5 : Col A A' S
H4 : not (eq A B)
H3 : not (eq S A')
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) F1
+++++
intuition.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.

*****
H3 : not (eq S A')
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
eq F1 (Fdiv (DSeg S A') (DSeg S A'))
+++++
field.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
subst.
assert (S<>A').
replace (S ** A' / S ** A') with 1.
field.

*****
H3 : not (eq S A')
H1 : Col S A' A'
H2 : parallel A A' B A'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A' : Point
*****
not (eq (DSeg S A') F0)
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.

*****
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
assert (S<>A).
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).

*****
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
not (eq S A)
+++++
intro.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
intro.

*****
H4 : eq S A
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
False
+++++
subst.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
intro.
subst.

*****
H3 : not (eq B' A')
H2 : parallel A A' B B'
H : not (Col A A A')
H0 : Col A A B
H1 : Col A A' B'
A,B,A',B' : Point
*****
False
+++++
intuition.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).

*****
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
assert (S<>A').
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').

*****
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
not (eq S A')
+++++
intro.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
intro.

*****
H5 : eq S A'
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
False
+++++
subst.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
intro.
subst.

*****
H4 : not (eq A' A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H : not (Col A' A A')
H0 : Col A' A B
H1 : Col A' A' B'
A,B,A',B' : Point
*****
False
+++++
intuition.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').

*****
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
cases_equality A B.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.

*****
H6 : eq A B
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
subst.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.

*****
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : parallel B A' B B'
H1 : Col S A' B'
H : not (Col S B A')
H0 : Col S B B
S,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S B)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
replace (S ** B / S ** B) with 1.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.

*****
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : parallel B A' B B'
H1 : Col S A' B'
H : not (Col S B A')
H0 : Col S B B
S,B,A',B' : Point
*****
eq F1 (Fdiv (DSeg S B') (DSeg S A'))
+++++
clear H0.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.
clear H0.

*****
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : parallel B A' B B'
H1 : Col S A' B'
H : not (Col S B A')
S,B,A',B' : Point
*****
eq F1 (Fdiv (DSeg S B') (DSeg S A'))
+++++
assert (Col A' B' B).
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.
clear H0.
assert (Col A' B' B).

*****
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : parallel B A' B B'
H1 : Col S A' B'
H : not (Col S B A')
S,B,A',B' : Point
*****
Col A' B' B
+++++
unfold parallel in *.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.
clear H0.
assert (Col A' B' B).
unfold parallel in *.

*****
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : eq (S4 B B A' B') F0
H1 : Col S A' B'
H : not (Col S B A')
S,B,A',B' : Point
*****
Col A' B' B
+++++
unfold S4 in *.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.
clear H0.
assert (Col A' B' B).
unfold parallel in *.
unfold S4 in *.

*****
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : eq\n (Fplus (chou_gao_zhang_axioms.S B B A')\n (chou_gao_zhang_axioms.S B A' B')) F0
H1 : Col S A' B'
H : not (Col S B A')
S,B,A',B' : Point
*****
Col A' B' B
+++++
basic_simpl.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.
clear H0.
assert (Col A' B' B).
unfold parallel in *.
unfold S4 in *.
basic_simpl.

*****
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : eq (chou_gao_zhang_axioms.S B A' B') F0
H1 : Col S A' B'
H : not (Col S B A')
S,B,A',B' : Point
*****
Col A' B' B
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.
clear H0.
assert (Col A' B' B).

*****
H0 : Col A' B' B
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : parallel B A' B B'
H1 : Col S A' B'
H : not (Col S B A')
S,B,A',B' : Point
*****
eq F1 (Fdiv (DSeg S B') (DSeg S A'))
+++++
assert (Col A' S B).
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.
clear H0.
assert (Col A' B' B).
assert (Col A' S B).

*****
H0 : Col A' B' B
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : parallel B A' B B'
H1 : Col S A' B'
H : not (Col S B A')
S,B,A',B' : Point
*****
Col A' S B
+++++
apply (col_trans_1 A' B' S B).
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.
clear H0.
assert (Col A' B' B).
assert (Col A' S B).
apply (col_trans_1 A' B' S B).

*****
H0 : Col A' B' B
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : parallel B A' B B'
H1 : Col S A' B'
H : not (Col S B A')
S,B,A',B' : Point
*****
not (eq A' B')
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.
clear H0.
assert (Col A' B' B).
assert (Col A' S B).
apply (col_trans_1 A' B' S B).

*****
H0 : Col A' B' B
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : parallel B A' B B'
H1 : Col S A' B'
H : not (Col S B A')
S,B,A',B' : Point
*****
Col A' B' S
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.
clear H0.
assert (Col A' B' B).
assert (Col A' S B).
apply (col_trans_1 A' B' S B).

*****
H0 : Col A' B' B
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : parallel B A' B B'
H1 : Col S A' B'
H : not (Col S B A')
S,B,A',B' : Point
*****
Col A' B' B
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.
clear H0.
assert (Col A' B' B).
assert (Col A' S B).

*****
H6 : Col A' S B
H0 : Col A' B' B
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : parallel B A' B B'
H1 : Col S A' B'
H : not (Col S B A')
S,B,A',B' : Point
*****
eq F1 (Fdiv (DSeg S B') (DSeg S A'))
+++++
assert (Col S B A').
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.
clear H0.
assert (Col A' B' B).
assert (Col A' S B).
assert (Col S B A').

*****
H6 : Col A' S B
H0 : Col A' B' B
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : parallel B A' B B'
H1 : Col S A' B'
H : not (Col S B A')
S,B,A',B' : Point
*****
Col S B A'
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.
clear H0.
assert (Col A' B' B).
assert (Col A' S B).
assert (Col S B A').

*****
H7 : Col S B A'
H6 : Col A' S B
H0 : Col A' B' B
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : parallel B A' B B'
H1 : Col S A' B'
H : not (Col S B A')
S,B,A',B' : Point
*****
eq F1 (Fdiv (DSeg S B') (DSeg S A'))
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.
clear H0.
assert (Col A' B' B).
assert (Col A' S B).
assert (Col S B A').
auto with Geom.

*****
H7 : Col S B A'
H6 : Col A' S B
H0 : Col A' B' B
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : parallel B A' B B'
H1 : Col S A' B'
H : not (Col S B A')
S,B,A',B' : Point
*****
eq F1 (Fdiv (DSeg S B') (DSeg S A'))
+++++
intuition.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.

*****
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : parallel B A' B B'
H1 : Col S A' B'
H : not (Col S B A')
H0 : Col S B B
S,B,A',B' : Point
*****
eq F1 (Fdiv (DSeg S B) (DSeg S B))
+++++
field.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
subst.
replace (S ** B / S ** B) with 1.
field.

*****
H5 : not (eq S A')
H4 : not (eq S B)
H3 : not (eq B' A')
H2 : parallel B A' B B'
H1 : Col S A' B'
H : not (Col S B A')
H0 : Col S B B
S,B,A',B' : Point
*****
not (eq (DSeg S B) F0)
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.

*****
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
assert (S ** A / B ** A = S ** A' / B' ** A').
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').

*****
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
+++++
apply (thales S A B B' A').
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
apply (thales S A B B' A').

*****
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
not (Col B A A')
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
apply (thales S A B B' A').
auto with Geom.

*****
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
not (Col B A A')
+++++
intro.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
apply (thales S A B B' A').
auto with Geom.
intro.

*****
H7 : Col B A A'
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
False
+++++
assert (Col A A' S).
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
apply (thales S A B B' A').
auto with Geom.
intro.
assert (Col A A' S).

*****
H7 : Col B A A'
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
Col A A' S
+++++
apply (col_trans_1 A B A' S).
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
apply (thales S A B B' A').
auto with Geom.
intro.
assert (Col A A' S).
apply (col_trans_1 A B A' S).

*****
H7 : Col B A A'
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
not (eq A B)
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
apply (thales S A B B' A').
auto with Geom.
intro.
assert (Col A A' S).
apply (col_trans_1 A B A' S).

*****
H7 : Col B A A'
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
Col A B A'
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
apply (thales S A B B' A').
auto with Geom.
intro.
assert (Col A A' S).
apply (col_trans_1 A B A' S).

*****
H7 : Col B A A'
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
Col A B S
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
apply (thales S A B B' A').
auto with Geom.
intro.
assert (Col A A' S).

*****
H8 : Col A A' S
H7 : Col B A A'
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
False
+++++
intuition.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
apply (thales S A B B' A').

*****
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
Col S A B
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
apply (thales S A B B' A').

*****
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
Col S A' B'
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
apply (thales S A B B' A').

*****
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
parallel A' A B' B
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
apply (thales S A B B' A').

*****
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
not (eq B' A')
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').

*****
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
assert (B**A/S**A= B'**A' / S**A').
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').

*****
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
+++++
assert (S ** A / B ** A * B**A = S** A' / B' ** A' * B**A).
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert (S ** A / B ** A * B**A = S** A' / B' ** A' * B**A).

*****
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fmult (Fdiv (DSeg S A) (DSeg B A)) (DSeg B A)) (Fmult (Fdiv (DSeg S A') (DSeg B' A')) (DSeg B A))
+++++
rewrite H7.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert (S ** A / B ** A * B**A = S** A' / B' ** A' * B**A).
rewrite H7.

*****
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fmult (Fdiv (DSeg S A') (DSeg B' A')) (DSeg B A)) (Fmult (Fdiv (DSeg S A') (DSeg B' A')) (DSeg B A))
+++++
auto.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert (S ** A / B ** A * B**A = S** A' / B' ** A' * B**A).

*****
H8 : eq (Fmult (Fdiv (DSeg S A) (DSeg B A)) (DSeg B A))\n (Fmult (Fdiv (DSeg S A') (DSeg B' A')) (DSeg B A))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
+++++
replace (S ** A / B ** A * B ** A) with (S**A) in H8.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert (S ** A / B ** A * B**A = S** A' / B' ** A' * B**A).
replace (S ** A / B ** A * B ** A) with (S**A) in H8.

*****
H8 : eq (DSeg S A) (Fmult (Fdiv (DSeg S A') (DSeg B' A')) (DSeg B A))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
+++++
field_simplify_eq.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert (S ** A / B ** A * B**A = S** A' / B' ** A' * B**A).
replace (S ** A / B ** A * B ** A) with (S**A) in H8.
field_simplify_eq.

*****
H8 : eq (DSeg S A) (Fmult (Fdiv (DSeg S A') (DSeg B' A')) (DSeg B A))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fmult (DSeg B A) (DSeg S A')) (Fmult (DSeg S A) (DSeg B' A'))
+++++
rewrite H8.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert (S ** A / B ** A * B**A = S** A' / B' ** A' * B**A).
replace (S ** A / B ** A * B ** A) with (S**A) in H8.
field_simplify_eq.
rewrite H8.

*****
H8 : eq (DSeg S A) (Fmult (Fdiv (DSeg S A') (DSeg B' A')) (DSeg B A))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fmult (DSeg B A) (DSeg S A')) (Fmult (Fmult (Fdiv (DSeg S A') (DSeg B' A')) (DSeg B A)) (DSeg B' A'))
+++++
field.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert (S ** A / B ** A * B**A = S** A' / B' ** A' * B**A).
replace (S ** A / B ** A * B ** A) with (S**A) in H8.
field_simplify_eq.
rewrite H8.
field.

*****
H8 : eq (DSeg S A) (Fmult (Fdiv (DSeg S A') (DSeg B' A')) (DSeg B A))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
not (eq (DSeg B' A') F0)
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert (S ** A / B ** A * B**A = S** A' / B' ** A' * B**A).
replace (S ** A / B ** A * B ** A) with (S**A) in H8.
field_simplify_eq.

*****
H8 : eq (DSeg S A) (Fmult (Fdiv (DSeg S A') (DSeg B' A')) (DSeg B A))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
and (not (eq (DSeg S A') F0)) (not (eq (DSeg S A) F0))
+++++
split.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert (S ** A / B ** A * B**A = S** A' / B' ** A' * B**A).
replace (S ** A / B ** A * B ** A) with (S**A) in H8.
field_simplify_eq.
split.

*****
H8 : eq (DSeg S A) (Fmult (Fdiv (DSeg S A') (DSeg B' A')) (DSeg B A))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
not (eq (DSeg S A') F0)
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert (S ** A / B ** A * B**A = S** A' / B' ** A' * B**A).
replace (S ** A / B ** A * B ** A) with (S**A) in H8.
field_simplify_eq.
split.

*****
H8 : eq (DSeg S A) (Fmult (Fdiv (DSeg S A') (DSeg B' A')) (DSeg B A))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
not (eq (DSeg S A) F0)
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert (S ** A / B ** A * B**A = S** A' / B' ** A' * B**A).
replace (S ** A / B ** A * B ** A) with (S**A) in H8.

*****
H8 : eq (Fmult (Fdiv (DSeg S A) (DSeg B A)) (DSeg B A))\n (Fmult (Fdiv (DSeg S A') (DSeg B' A')) (DSeg B A))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (DSeg S A) (Fmult (Fdiv (DSeg S A) (DSeg B A)) (DSeg B A))
+++++
field.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert (S ** A / B ** A * B**A = S** A' / B' ** A' * B**A).
replace (S ** A / B ** A * B ** A) with (S**A) in H8.
field.

*****
H8 : eq (Fmult (Fdiv (DSeg S A) (DSeg B A)) (DSeg B A))\n (Fmult (Fdiv (DSeg S A') (DSeg B' A')) (DSeg B A))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
not (eq (DSeg B A) F0)
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').

*****
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
assert ( A**B / S ** A = A'**B' / S ** A').
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').

*****
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
+++++
uniformize_dir_seg.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
uniformize_dir_seg.

*****
H8 : eq (Fdiv (Fopp (DSeg A B)) (DSeg S A))\n (Fdiv (Fopp (DSeg A' B')) (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (Fopp (DSeg A B)))\n (Fdiv (DSeg S A') (Fopp (DSeg A' B')))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
+++++
IsoleVar (A**B) H8.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
uniformize_dir_seg.
IsoleVar (A**B) H8.

*****
H8 : eq (DSeg A B)\n (Fopp (Fmult (DSeg S A) (Fdiv (Fopp (DSeg A' B')) (DSeg S A'))))
H9 : not (eq (DSeg S A) F0)
H7 : eq (Fdiv (DSeg S A) (Fopp (DSeg A B)))\n (Fdiv (DSeg S A') (Fopp (DSeg A' B')))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
+++++
rewrite H8.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
uniformize_dir_seg.
IsoleVar (A**B) H8.
rewrite H8.

*****
H8 : eq (DSeg A B)\n (Fopp (Fmult (DSeg S A) (Fdiv (Fopp (DSeg A' B')) (DSeg S A'))))
H9 : not (eq (DSeg S A) F0)
H7 : eq (Fdiv (DSeg S A) (Fopp (DSeg A B)))\n (Fdiv (DSeg S A') (Fopp (DSeg A' B')))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (Fopp (Fmult (DSeg S A) (Fdiv (Fopp (DSeg A' B')) (DSeg S A')))) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
+++++
field.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
uniformize_dir_seg.
IsoleVar (A**B) H8.
rewrite H8.
field.

*****
H8 : eq (DSeg A B)\n (Fopp (Fmult (DSeg S A) (Fdiv (Fopp (DSeg A' B')) (DSeg S A'))))
H9 : not (eq (DSeg S A) F0)
H7 : eq (Fdiv (DSeg S A) (Fopp (DSeg A B)))\n (Fdiv (DSeg S A') (Fopp (DSeg A' B')))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
and (not (eq (DSeg S A') F0)) (not (eq (DSeg S A) F0))
+++++
split.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
uniformize_dir_seg.
IsoleVar (A**B) H8.
rewrite H8.
field.
split.

*****
H8 : eq (DSeg A B)\n (Fopp (Fmult (DSeg S A) (Fdiv (Fopp (DSeg A' B')) (DSeg S A'))))
H9 : not (eq (DSeg S A) F0)
H7 : eq (Fdiv (DSeg S A) (Fopp (DSeg A B)))\n (Fdiv (DSeg S A') (Fopp (DSeg A' B')))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
not (eq (DSeg S A') F0)
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
uniformize_dir_seg.
IsoleVar (A**B) H8.
rewrite H8.
field.
split.

*****
H8 : eq (DSeg A B)\n (Fopp (Fmult (DSeg S A) (Fdiv (Fopp (DSeg A' B')) (DSeg S A'))))
H9 : not (eq (DSeg S A) F0)
H7 : eq (Fdiv (DSeg S A) (Fopp (DSeg A B)))\n (Fdiv (DSeg S A') (Fopp (DSeg A' B')))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
not (eq (DSeg S A) F0)
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
uniformize_dir_seg.
IsoleVar (A**B) H8.

*****
H8 : eq (Fdiv (Fopp (DSeg A B)) (DSeg S A))\n (Fdiv (Fopp (DSeg A' B')) (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (Fopp (DSeg A B)))\n (Fdiv (DSeg S A') (Fopp (DSeg A' B')))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
not (eq (DSeg S A) F0)
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').

*****
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').

*****
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fplus F1 (Fdiv (DSeg A B) (DSeg S A))) (Fplus F1 (Fdiv (DSeg A' B') (DSeg S A')))
+++++
rewrite H9.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').
rewrite H9.

*****
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fplus F1 (Fdiv (DSeg A' B') (DSeg S A'))) (Fplus F1 (Fdiv (DSeg A' B') (DSeg S A')))
+++++
auto.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').

*****
H10 : eq (Fplus F1 (Fdiv (DSeg A B) (DSeg S A)))\n (Fplus F1 (Fdiv (DSeg A' B') (DSeg S A')))
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
replace (1 + A ** B / S ** A) with ((S**A + A**B) / S**A) in H10.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').
replace (1 + A ** B / S ** A) with ((S**A + A**B) / S**A) in H10.

*****
H10 : eq (Fdiv (Fplus (DSeg S A) (DSeg A B)) (DSeg S A))\n (Fplus F1 (Fdiv (DSeg A' B') (DSeg S A')))
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
replace (1 + A' ** B' / S ** A') with ((S**A' + A'**B') / S**A') in H10.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').
replace (1 + A ** B / S ** A) with ((S**A + A**B) / S**A) in H10.
replace (1 + A' ** B' / S ** A') with ((S**A' + A'**B') / S**A') in H10.

*****
H10 : eq (Fdiv (Fplus (DSeg S A) (DSeg A B)) (DSeg S A))\n (Fdiv (Fplus (DSeg S A') (DSeg A' B')) (DSeg S A'))
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
assert (S**A + A**B=S**B).
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').
replace (1 + A ** B / S ** A) with ((S**A + A**B) / S**A) in H10.
replace (1 + A' ** B' / S ** A') with ((S**A' + A'**B') / S**A') in H10.
assert (S**A + A**B=S**B).

*****
H10 : eq (Fdiv (Fplus (DSeg S A) (DSeg A B)) (DSeg S A))\n (Fdiv (Fplus (DSeg S A') (DSeg A' B')) (DSeg S A'))
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fplus (DSeg S A) (DSeg A B)) (DSeg S B)
+++++
apply chasles.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').
replace (1 + A ** B / S ** A) with ((S**A + A**B) / S**A) in H10.
replace (1 + A' ** B' / S ** A') with ((S**A' + A'**B') / S**A') in H10.
assert (S**A + A**B=S**B).
apply chasles.

*****
H10 : eq (Fdiv (Fplus (DSeg S A) (DSeg A B)) (DSeg S A))\n (Fdiv (Fplus (DSeg S A') (DSeg A' B')) (DSeg S A'))
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
Col S A B
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').
replace (1 + A ** B / S ** A) with ((S**A + A**B) / S**A) in H10.
replace (1 + A' ** B' / S ** A') with ((S**A' + A'**B') / S**A') in H10.
assert (S**A + A**B=S**B).

*****
H11 : eq (Fplus (DSeg S A) (DSeg A B)) (DSeg S B)
H10 : eq (Fdiv (Fplus (DSeg S A) (DSeg A B)) (DSeg S A))\n (Fdiv (Fplus (DSeg S A') (DSeg A' B')) (DSeg S A'))
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
assert (S**A' + A'**B'=S**B').
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').
replace (1 + A ** B / S ** A) with ((S**A + A**B) / S**A) in H10.
replace (1 + A' ** B' / S ** A') with ((S**A' + A'**B') / S**A') in H10.
assert (S**A + A**B=S**B).
assert (S**A' + A'**B'=S**B').

*****
H11 : eq (Fplus (DSeg S A) (DSeg A B)) (DSeg S B)
H10 : eq (Fdiv (Fplus (DSeg S A) (DSeg A B)) (DSeg S A))\n (Fdiv (Fplus (DSeg S A') (DSeg A' B')) (DSeg S A'))
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fplus (DSeg S A') (DSeg A' B')) (DSeg S B')
+++++
apply chasles.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').
replace (1 + A ** B / S ** A) with ((S**A + A**B) / S**A) in H10.
replace (1 + A' ** B' / S ** A') with ((S**A' + A'**B') / S**A') in H10.
assert (S**A + A**B=S**B).
assert (S**A' + A'**B'=S**B').
apply chasles.

*****
H11 : eq (Fplus (DSeg S A) (DSeg A B)) (DSeg S B)
H10 : eq (Fdiv (Fplus (DSeg S A) (DSeg A B)) (DSeg S A))\n (Fdiv (Fplus (DSeg S A') (DSeg A' B')) (DSeg S A'))
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
Col S A' B'
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').
replace (1 + A ** B / S ** A) with ((S**A + A**B) / S**A) in H10.
replace (1 + A' ** B' / S ** A') with ((S**A' + A'**B') / S**A') in H10.
assert (S**A + A**B=S**B).
assert (S**A' + A'**B'=S**B').

*****
H12 : eq (Fplus (DSeg S A') (DSeg A' B')) (DSeg S B')
H11 : eq (Fplus (DSeg S A) (DSeg A B)) (DSeg S B)
H10 : eq (Fdiv (Fplus (DSeg S A) (DSeg A B)) (DSeg S A))\n (Fdiv (Fplus (DSeg S A') (DSeg A' B')) (DSeg S A'))
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
rewrite H11 in H10.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').
replace (1 + A ** B / S ** A) with ((S**A + A**B) / S**A) in H10.
replace (1 + A' ** B' / S ** A') with ((S**A' + A'**B') / S**A') in H10.
assert (S**A + A**B=S**B).
assert (S**A' + A'**B'=S**B').
rewrite H11 in H10.

*****
H12 : eq (Fplus (DSeg S A') (DSeg A' B')) (DSeg S B')
H11 : eq (Fplus (DSeg S A) (DSeg A B)) (DSeg S B)
H10 : eq (Fdiv (DSeg S B) (DSeg S A))\n (Fdiv (Fplus (DSeg S A') (DSeg A' B')) (DSeg S A'))
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
rewrite H12 in H10.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').
replace (1 + A ** B / S ** A) with ((S**A + A**B) / S**A) in H10.
replace (1 + A' ** B' / S ** A') with ((S**A' + A'**B') / S**A') in H10.
assert (S**A + A**B=S**B).
assert (S**A' + A'**B'=S**B').
rewrite H11 in H10.
rewrite H12 in H10.

*****
H12 : eq (Fplus (DSeg S A') (DSeg A' B')) (DSeg S B')
H11 : eq (Fplus (DSeg S A) (DSeg A B)) (DSeg S B)
H10 : eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (DSeg S B) (DSeg S A)) (Fdiv (DSeg S B') (DSeg S A'))
+++++
assumption.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').
replace (1 + A ** B / S ** A) with ((S**A + A**B) / S**A) in H10.
replace (1 + A' ** B' / S ** A') with ((S**A' + A'**B') / S**A') in H10.

*****
H10 : eq (Fdiv (Fplus (DSeg S A) (DSeg A B)) (DSeg S A))\n (Fplus F1 (Fdiv (DSeg A' B') (DSeg S A')))
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (Fplus (DSeg S A') (DSeg A' B')) (DSeg S A')) (Fplus F1 (Fdiv (DSeg A' B') (DSeg S A')))
+++++
field.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').
replace (1 + A ** B / S ** A) with ((S**A + A**B) / S**A) in H10.
replace (1 + A' ** B' / S ** A') with ((S**A' + A'**B') / S**A') in H10.
field.

*****
H10 : eq (Fdiv (Fplus (DSeg S A) (DSeg A B)) (DSeg S A))\n (Fplus F1 (Fdiv (DSeg A' B') (DSeg S A')))
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
not (eq (DSeg S A') F0)
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').
replace (1 + A ** B / S ** A) with ((S**A + A**B) / S**A) in H10.

*****
H10 : eq (Fplus F1 (Fdiv (DSeg A B) (DSeg S A)))\n (Fplus F1 (Fdiv (DSeg A' B') (DSeg S A')))
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
eq (Fdiv (Fplus (DSeg S A) (DSeg A B)) (DSeg S A)) (Fplus F1 (Fdiv (DSeg A B) (DSeg S A)))
+++++
field.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.
assert (S<>A).
assert (S<>A').
cases_equality A B.
assert (S ** A / B ** A = S ** A' / B' ** A').
assert (B**A/S**A= B'**A' / S**A').
assert ( A**B / S ** A = A'**B' / S ** A').
assert (1+ A ** B / S ** A = 1+ A' ** B' / S ** A').
replace (1 + A ** B / S ** A) with ((S**A + A**B) / S**A) in H10.
field.

*****
H10 : eq (Fplus F1 (Fdiv (DSeg A B) (DSeg S A)))\n (Fplus F1 (Fdiv (DSeg A' B') (DSeg S A')))
H9 : eq (Fdiv (DSeg A B) (DSeg S A)) (Fdiv (DSeg A' B') (DSeg S A'))
H8 : eq (Fdiv (DSeg B A) (DSeg S A)) (Fdiv (DSeg B' A') (DSeg S A'))
H7 : eq (Fdiv (DSeg S A) (DSeg B A)) (Fdiv (DSeg S A') (DSeg B' A'))
H6 : not (eq A B)
H5 : not (eq S A')
H4 : not (eq S A)
H3 : not (eq B' A')
H2 : parallel A A' B B'
H1 : Col S A' B'
H0 : Col S A B
H : not (Col S A A')
S,A,B,A',B' : Point
*****
not (eq (DSeg S A) F0)
+++++
auto with Geom.
-----
Theorem thales_2 : forall S A B A' B' : Point, ~ Col S A A' -> Col S A B -> Col S A' B' -> parallel A A' B B' -> S ** B / S**A = S ** B' / S**A'.
Proof.
intros.
cases_equality B' A'.

*****

*****

+++++
Qed.
-----
Theorem on_line_dex_spec :\n forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\ P ** Y = C ** D}.
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.

*****

*****
forall (P Q C D : Point) (_ : not (eq P Q)), sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
+++++
Proof.
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.
Proof.

*****

*****
forall (P Q C D : Point) (_ : not (eq P Q)), sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
+++++
intros.
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.
Proof.
intros.

*****
H : not (eq P Q)
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
+++++
assert (T := on_line_dex P Q (C ** D / P ** Q)).
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.
Proof.
intros.
assert (T := on_line_dex P Q (C ** D / P ** Q)).

*****
T : forall _ : not (eq P Q),\nsig\n (fun Y : Point =>\n and (Col Y P Q)\n (eq (DSeg P Y) (Fmult (Fdiv (DSeg C D) (DSeg P Q)) (DSeg P Q))))
H : not (eq P Q)
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
+++++
elim T.
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.
Proof.
intros.
assert (T := on_line_dex P Q (C ** D / P ** Q)).
elim T.

*****
T : forall _ : not (eq P Q),\nsig\n (fun Y : Point =>\n and (Col Y P Q)\n (eq (DSeg P Y) (Fmult (Fdiv (DSeg C D) (DSeg P Q)) (DSeg P Q))))
H : not (eq P Q)
P,Q,C,D : Point
*****
forall (x : Point) (_ : and (Col x P Q) (eq (DSeg P x) (Fmult (Fdiv (DSeg C D) (DSeg P Q)) (DSeg P Q)))), sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
+++++
intros.
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.
Proof.
intros.
assert (T := on_line_dex P Q (C ** D / P ** Q)).
elim T.
intros.

*****
p : and (Col x P Q)\n (eq (DSeg P x) (Fmult (Fdiv (DSeg C D) (DSeg P Q)) (DSeg P Q)))
x : Point
T : forall _ : not (eq P Q),\nsig\n (fun Y : Point =>\n and (Col Y P Q)\n (eq (DSeg P Y) (Fmult (Fdiv (DSeg C D) (DSeg P Q)) (DSeg P Q))))
H : not (eq P Q)
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
+++++
clear T.
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.
Proof.
intros.
assert (T := on_line_dex P Q (C ** D / P ** Q)).
elim T.
intros.
clear T.

*****
p : and (Col x P Q)\n (eq (DSeg P x) (Fmult (Fdiv (DSeg C D) (DSeg P Q)) (DSeg P Q)))
x : Point
H : not (eq P Q)
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
+++++
decompose [and] p.
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.
Proof.
intros.
assert (T := on_line_dex P Q (C ** D / P ** Q)).
elim T.
intros.
clear T.
decompose [and] p.

*****
H1 : eq (DSeg P x) (Fmult (Fdiv (DSeg C D) (DSeg P Q)) (DSeg P Q))
H0 : Col x P Q
p : and (Col x P Q)\n (eq (DSeg P x) (Fmult (Fdiv (DSeg C D) (DSeg P Q)) (DSeg P Q)))
x : Point
H : not (eq P Q)
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
+++++
clear p.
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.
Proof.
intros.
assert (T := on_line_dex P Q (C ** D / P ** Q)).
elim T.
intros.
clear T.
decompose [and] p.
clear p.

*****
H1 : eq (DSeg P x) (Fmult (Fdiv (DSeg C D) (DSeg P Q)) (DSeg P Q))
H0 : Col x P Q
x : Point
H : not (eq P Q)
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
+++++
exists x.
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.
Proof.
intros.
assert (T := on_line_dex P Q (C ** D / P ** Q)).
elim T.
intros.
clear T.
decompose [and] p.
clear p.
exists x.

*****
H1 : eq (DSeg P x) (Fmult (Fdiv (DSeg C D) (DSeg P Q)) (DSeg P Q))
H0 : Col x P Q
x : Point
H : not (eq P Q)
P,Q,C,D : Point
*****
and (Col x P Q) (eq (DSeg P x) (DSeg C D))
+++++
intuition.
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.
Proof.
intros.
assert (T := on_line_dex P Q (C ** D / P ** Q)).
elim T.
intros.
clear T.
decompose [and] p.
clear p.
exists x.
intuition.

*****
H1 : eq (DSeg P x) (Fmult (Fdiv (DSeg C D) (DSeg P Q)) (DSeg P Q))
H0 : Col x P Q
x : Point
H : forall _ : eq P Q, False
P,Q,C,D : Point
*****
eq (DSeg P x) (DSeg C D)
+++++
rewrite H1.
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.
Proof.
intros.
assert (T := on_line_dex P Q (C ** D / P ** Q)).
elim T.
intros.
clear T.
decompose [and] p.
clear p.
exists x.
intuition.
rewrite H1.

*****
H1 : eq (DSeg P x) (Fmult (Fdiv (DSeg C D) (DSeg P Q)) (DSeg P Q))
H0 : Col x P Q
x : Point
H : forall _ : eq P Q, False
P,Q,C,D : Point
*****
eq (Fmult (Fdiv (DSeg C D) (DSeg P Q)) (DSeg P Q)) (DSeg C D)
+++++
field.
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.
Proof.
intros.
assert (T := on_line_dex P Q (C ** D / P ** Q)).
elim T.
intros.
clear T.
decompose [and] p.
clear p.
exists x.
intuition.
rewrite H1.
field.

*****
H1 : eq (DSeg P x) (Fmult (Fdiv (DSeg C D) (DSeg P Q)) (DSeg P Q))
H0 : Col x P Q
x : Point
H : forall _ : eq P Q, False
P,Q,C,D : Point
*****
not (eq (DSeg P Q) F0)
+++++
Geometry.
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.
Proof.
intros.
assert (T := on_line_dex P Q (C ** D / P ** Q)).
elim T.

*****
T : forall _ : not (eq P Q),\nsig\n (fun Y : Point =>\n and (Col Y P Q)\n (eq (DSeg P Y) (Fmult (Fdiv (DSeg C D) (DSeg P Q)) (DSeg P Q))))
H : not (eq P Q)
P,Q,C,D : Point
*****
not (eq P Q)
+++++
intros.
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.
Proof.
intros.
assert (T := on_line_dex P Q (C ** D / P ** Q)).
elim T.
intros.

*****
T : forall _ : not (eq P Q),\nsig\n (fun Y : Point =>\n and (Col Y P Q)\n (eq (DSeg P Y) (Fmult (Fdiv (DSeg C D) (DSeg P Q)) (DSeg P Q))))
H : not (eq P Q)
P,Q,C,D : Point
*****
not (eq P Q)
+++++
clear T.
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.
Proof.
intros.
assert (T := on_line_dex P Q (C ** D / P ** Q)).
elim T.
intros.
clear T.

*****
H : not (eq P Q)
P,Q,C,D : Point
*****
not (eq P Q)
+++++
trivial.
-----
Theorem on_line_dex_spec : forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D}.
Proof.
intros.
assert (T := on_line_dex P Q (C ** D / P ** Q)).
elim T.

*****

*****

+++++
Qed.
-----
Lemma diff_not_col_par_not_col : forall A B P Q,\n A<>B ->\n ~ Col A Q P ->\n parallel A B P Q ->\n ~ Col A B P.
-----
Lemma diff_not_col_par_not_col : forall A B P Q, A<>B -> ~ Col A Q P -> parallel A B P Q -> ~ Col A B P.

*****

*****
forall (A B P Q : Point) (_ : not (eq A B)) (_ : not (Col A Q P)) (_ : parallel A B P Q), not (Col A B P)
+++++
Proof.
-----
Lemma diff_not_col_par_not_col : forall A B P Q, A<>B -> ~ Col A Q P -> parallel A B P Q -> ~ Col A B P.
Proof.

*****

*****
forall (A B P Q : Point) (_ : not (eq A B)) (_ : not (Col A Q P)) (_ : parallel A B P Q), not (Col A B P)
+++++
intros.
-----
Lemma diff_not_col_par_not_col : forall A B P Q, A<>B -> ~ Col A Q P -> parallel A B P Q -> ~ Col A B P.
Proof.
intros.

*****
H1 : parallel A B P Q
H0 : not (Col A Q P)
H : not (eq A B)
A,B,P,Q : Point
*****
not (Col A B P)
+++++
unfold not.
-----
Lemma diff_not_col_par_not_col : forall A B P Q, A<>B -> ~ Col A Q P -> parallel A B P Q -> ~ Col A B P.
Proof.
intros.
unfold not.

*****
H1 : parallel A B P Q
H0 : not (Col A Q P)
H : not (eq A B)
A,B,P,Q : Point
*****
forall _ : Col A B P, False
+++++
intro.
-----
Lemma diff_not_col_par_not_col : forall A B P Q, A<>B -> ~ Col A Q P -> parallel A B P Q -> ~ Col A B P.
Proof.
intros.
unfold not.
intro.

*****
H2 : Col A B P
H1 : parallel A B P Q
H0 : not (Col A Q P)
H : not (eq A B)
A,B,P,Q : Point
*****
False
+++++
assert (Col A B Q).
-----
Lemma diff_not_col_par_not_col : forall A B P Q, A<>B -> ~ Col A Q P -> parallel A B P Q -> ~ Col A B P.
Proof.
intros.
unfold not.
intro.
assert (Col A B Q).

*****
H2 : Col A B P
H1 : parallel A B P Q
H0 : not (Col A Q P)
H : not (eq A B)
A,B,P,Q : Point
*****
Col A B Q
+++++
eapply par_col_col_1.
-----
Lemma diff_not_col_par_not_col : forall A B P Q, A<>B -> ~ Col A Q P -> parallel A B P Q -> ~ Col A B P.
Proof.
intros.
unfold not.
intro.
assert (Col A B Q).
eapply par_col_col_1.

*****
H2 : Col A B P
H1 : parallel A B P Q
H0 : not (Col A Q P)
H : not (eq A B)
A,B,P,Q : Point
*****
parallel A B ?C Q
+++++
eauto.
-----
Lemma diff_not_col_par_not_col : forall A B P Q, A<>B -> ~ Col A Q P -> parallel A B P Q -> ~ Col A B P.
Proof.
intros.
unfold not.
intro.
assert (Col A B Q).
eapply par_col_col_1.

*****
H2 : Col A B P
H1 : parallel A B P Q
H0 : not (Col A Q P)
H : not (eq A B)
A,B,P,Q : Point
*****
Col A B P
+++++
eauto.
-----
Lemma diff_not_col_par_not_col : forall A B P Q, A<>B -> ~ Col A Q P -> parallel A B P Q -> ~ Col A B P.
Proof.
intros.
unfold not.
intro.
assert (Col A B Q).

*****
H3 : Col A B Q
H2 : Col A B P
H1 : parallel A B P Q
H0 : not (Col A Q P)
H : not (eq A B)
A,B,P,Q : Point
*****
False
+++++
assert (Col A P Q).
-----
Lemma diff_not_col_par_not_col : forall A B P Q, A<>B -> ~ Col A Q P -> parallel A B P Q -> ~ Col A B P.
Proof.
intros.
unfold not.
intro.
assert (Col A B Q).
assert (Col A P Q).

*****
H3 : Col A B Q
H2 : Col A B P
H1 : parallel A B P Q
H0 : not (Col A Q P)
H : not (eq A B)
A,B,P,Q : Point
*****
Col A P Q
+++++
eapply col_trans_1;apply H || auto.
-----
Lemma diff_not_col_par_not_col : forall A B P Q, A<>B -> ~ Col A Q P -> parallel A B P Q -> ~ Col A B P.
Proof.
intros.
unfold not.
intro.
assert (Col A B Q).
assert (Col A P Q).

*****
H4 : Col A P Q
H3 : Col A B Q
H2 : Col A B P
H1 : parallel A B P Q
H0 : not (Col A Q P)
H : not (eq A B)
A,B,P,Q : Point
*****
False
+++++
intuition.
-----
Lemma diff_not_col_par_not_col : forall A B P Q, A<>B -> ~ Col A Q P -> parallel A B P Q -> ~ Col A B P.
Proof.
intros.
unfold not.
intro.
assert (Col A B Q).

*****

*****

+++++
Qed.
-----
Lemma two_sides_par_eq_parallelogram : \n  forall A B C D, \n  parallel A B C D ->\n  ~ Col A B C ->\n  A**B=D**C ->\n  parallelogram A B C D.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D) (_ : not (Col A B C)) (_ : eq (DSeg A B) (DSeg D C)), parallelogram A B C D
+++++
Proof.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallel A B C D) (_ : not (Col A B C)) (_ : eq (DSeg A B) (DSeg D C)), parallelogram A B C D
+++++
intros.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.

*****
H1 : eq (DSeg A B) (DSeg D C)
H0 : not (Col A B C)
H : parallel A B C D
A,B,C,D : Point
*****
parallelogram A B C D
+++++
unfold parallelogram.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.
unfold parallelogram.

*****
H1 : eq (DSeg A B) (DSeg D C)
H0 : not (Col A B C)
H : parallel A B C D
A,B,C,D : Point
*****
and (parallel A B C D) (and (parallel B C A D) (not (Col A B C)))
+++++
repeat split.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.
unfold parallelogram.
repeat split.

*****
H1 : eq (DSeg A B) (DSeg D C)
H0 : not (Col A B C)
H : parallel A B C D
A,B,C,D : Point
*****
parallel A B C D
+++++
try assumption.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.
unfold parallelogram.
repeat split.

*****
H1 : eq (DSeg A B) (DSeg D C)
H0 : not (Col A B C)
H : parallel A B C D
A,B,C,D : Point
*****
parallel B C A D
+++++
try assumption.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.
unfold parallelogram.
repeat split.
try assumption.

*****
H1 : eq (DSeg A B) (DSeg D C)
H0 : not (Col A B C)
H : parallel A B C D
A,B,C,D : Point
*****
parallel B C A D
+++++
cut (parallel C B A D).
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.
unfold parallelogram.
repeat split.
try assumption.
cut (parallel C B A D).

*****
H1 : eq (DSeg A B) (DSeg D C)
H0 : not (Col A B C)
H : parallel A B C D
A,B,C,D : Point
*****
forall _ : parallel C B A D, parallel B C A D
+++++
Geometry.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.
unfold parallelogram.
repeat split.
try assumption.
cut (parallel C B A D).

*****
H1 : eq (DSeg A B) (DSeg D C)
H0 : not (Col A B C)
H : parallel A B C D
A,B,C,D : Point
*****
parallel C B A D
+++++
apply parallel_side_eq_parallel.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.
unfold parallelogram.
repeat split.
try assumption.
cut (parallel C B A D).
apply parallel_side_eq_parallel.

*****
H1 : eq (DSeg A B) (DSeg D C)
H0 : not (Col A B C)
H : parallel A B C D
A,B,C,D : Point
*****
parallel A B D C
+++++
Geometry.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.
unfold parallelogram.
repeat split.
try assumption.
cut (parallel C B A D).
apply parallel_side_eq_parallel.

*****
H1 : eq (DSeg A B) (DSeg D C)
H0 : not (Col A B C)
H : parallel A B C D
A,B,C,D : Point
*****
eq (DSeg A B) (DSeg D C)
+++++
Geometry.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.
unfold parallelogram.
repeat split.
try assumption.
cut (parallel C B A D).
apply parallel_side_eq_parallel.

*****
H1 : eq (DSeg A B) (DSeg D C)
H0 : not (Col A B C)
H : parallel A B C D
A,B,C,D : Point
*****
not (eq D C)
+++++
Geometry.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.
unfold parallelogram.
repeat split.
try assumption.
cut (parallel C B A D).
apply parallel_side_eq_parallel.
Geometry.

*****
H1 : eq (DSeg A B) (DSeg D C)
H0 : not (Col A B C)
H : parallel A B C D
A,B,C,D : Point
*****
not (eq D C)
+++++
assert (A<>B).
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.
unfold parallelogram.
repeat split.
try assumption.
cut (parallel C B A D).
apply parallel_side_eq_parallel.
Geometry.
assert (A<>B).

*****
H1 : eq (DSeg A B) (DSeg D C)
H0 : not (Col A B C)
H : parallel A B C D
A,B,C,D : Point
*****
not (eq A B)
+++++
eauto with Geom.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.
unfold parallelogram.
repeat split.
try assumption.
cut (parallel C B A D).
apply parallel_side_eq_parallel.
Geometry.
assert (A<>B).

*****
H2 : not (eq A B)
H1 : eq (DSeg A B) (DSeg D C)
H0 : not (Col A B C)
H : parallel A B C D
A,B,C,D : Point
*****
not (eq D C)
+++++
eapply eq_diff_diff.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.
unfold parallelogram.
repeat split.
try assumption.
cut (parallel C B A D).
apply parallel_side_eq_parallel.
Geometry.
assert (A<>B).
eapply eq_diff_diff.

*****
H2 : not (eq A B)
H1 : eq (DSeg A B) (DSeg D C)
H0 : not (Col A B C)
H : parallel A B C D
A,B,C,D : Point
*****
not (eq ?A ?B)
+++++
eauto.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.
unfold parallelogram.
repeat split.
try assumption.
cut (parallel C B A D).
apply parallel_side_eq_parallel.
Geometry.
assert (A<>B).
eapply eq_diff_diff.

*****
H2 : not (eq A B)
H1 : eq (DSeg A B) (DSeg D C)
H0 : not (Col A B C)
H : parallel A B C D
A,B,C,D : Point
*****
eq (DSeg A B) (DSeg D C)
+++++
eauto.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.
unfold parallelogram.
repeat split.

*****
H1 : eq (DSeg A B) (DSeg D C)
H0 : not (Col A B C)
H : parallel A B C D
A,B,C,D : Point
*****
not (Col A B C)
+++++
try assumption.
-----
Lemma two_sides_par_eq_parallelogram : forall A B C D, parallel A B C D -> ~ Col A B C -> A**B=D**C -> parallelogram A B C D.
Proof.
intros.
unfold parallelogram.
repeat split.

*****

*****

+++++
Qed.
-----
Lemma parallel_side_eq_weak_para :   forall P Q C D,\n  parallel P Q C D ->\n  C <> D -> P <> D -> Q<> C ->\n  P ** Q = C ** D -> \n  weak_parallelogram P Q D C.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.

*****

*****
forall (P Q C D : Point) (_ : parallel P Q C D) (_ : not (eq C D)) (_ : not (eq P D)) (_ : not (eq Q C)) (_ : eq (DSeg P Q) (DSeg C D)), weak_parallelogram P Q D C
+++++
Proof with Geometry.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.

*****

*****
forall (P Q C D : Point) (_ : parallel P Q C D) (_ : not (eq C D)) (_ : not (eq P D)) (_ : not (eq Q C)) (_ : eq (DSeg P Q) (DSeg C D)), weak_parallelogram P Q D C
+++++
intros.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.

*****
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_parallelogram P Q D C
+++++
cases_col P Q D.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.

*****
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_parallelogram P Q D C
+++++
unfold weak_parallelogram.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.

*****
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
and (not (eq P D)) (and (not (eq Q C)) (ex (fun O : Point => and (mid_point O P D) (mid_point O Q C))))
+++++
repeat split...
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...

*****
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun O : Point => and (mid_point O P D) (mid_point O Q C))
+++++
assert ({O :Point | mid_point O P D}).
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).

*****
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
sig (fun O : Point => mid_point O P D)
+++++
apply mid_point_ex.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.

*****
H5 : sig (fun O : Point => mid_point O P D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun O : Point => and (mid_point O P D) (mid_point O Q C))
+++++
elim H5; intro X;intros;clear H5.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.

*****
p : mid_point X P D
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun O : Point => and (mid_point O P D) (mid_point O Q C))
+++++
exists X;split...
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...

*****
p : mid_point X P D
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
mid_point X Q C
+++++
unfold mid_point in *.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.

*****
p : and (Col P D X) (eq (DSeg P X) (DSeg X D))
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
and (Col Q C X) (eq (DSeg Q X) (DSeg X C))
+++++
DecompAndAll.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.

*****
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
and (Col Q C X) (eq (DSeg Q X) (DSeg X C))
+++++
assert (Col P Q C).
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).

*****
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col P Q C
+++++
eapply par_col_col_1;eauto...
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...

*****
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
and (Col Q C X) (eq (DSeg Q X) (DSeg X C))
+++++
assert (Col P X Q).
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).

*****
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col P X Q
+++++
eapply col_trans_1 with (B:=D)...
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...

*****
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
and (Col Q C X) (eq (DSeg Q X) (DSeg X C))
+++++
assert (Col D X Q).
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).

*****
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col D X Q
+++++
eapply col_trans_1 with (B:=P)...
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...

*****
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
and (Col Q C X) (eq (DSeg Q X) (DSeg X C))
+++++
split.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.

*****
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col Q C X
+++++
eapply col_trans_1 with (B:=P)...
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...

*****
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq Q P)
+++++
eauto with Geom.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.

*****
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg Q X) (DSeg X C)
+++++
cases_equality X Q.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.

*****
H10 : eq X Q
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg Q X) (DSeg X C)
+++++
subst X.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.

*****
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q C
H5 : Col P D Q
H6 : eq (DSeg P Q) (DSeg Q D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg Q Q) (DSeg Q C)
+++++
rewrite H3 in H6.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.

*****
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q C
H5 : Col P D Q
H6 : eq (DSeg C D) (DSeg Q D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg Q Q) (DSeg Q C)
+++++
assert (C=Q).
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).

*****
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q C
H5 : Col P D Q
H6 : eq (DSeg C D) (DSeg Q D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq C Q
+++++
apply (A2bgen D Q C Q 1).
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).

*****
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q C
H5 : Col P D Q
H6 : eq (DSeg C D) (DSeg Q D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col D Q C
+++++
cut (Col Q D C).
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).

*****
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q C
H5 : Col P D Q
H6 : eq (DSeg C D) (DSeg Q D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : Col Q D C, Col D Q C
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.

*****
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q C
H5 : Col P D Q
H6 : eq (DSeg C D) (DSeg Q D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col Q D C
+++++
eapply col_trans_1 with (B:=P)...
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...

*****
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q C
H5 : Col P D Q
H6 : eq (DSeg C D) (DSeg Q D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq Q P)
+++++
eauto with Geom.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.

*****
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q C
H5 : Col P D Q
H6 : eq (DSeg C D) (DSeg Q D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg D C) (Fmult F1 (DSeg D Q))
+++++
replace (D ** C) with (- C**D).
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).

*****
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q C
H5 : Col P D Q
H6 : eq (DSeg C D) (DSeg Q D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (Fopp (DSeg C D)) (Fmult F1 (DSeg D Q))
+++++
2:symmetry;Geometry.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.

*****
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q C
H5 : Col P D Q
H6 : eq (DSeg C D) (DSeg Q D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (Fopp (DSeg C D)) (Fmult F1 (DSeg D Q))
+++++
rewrite H6.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.

*****
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q C
H5 : Col P D Q
H6 : eq (DSeg C D) (DSeg Q D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (Fopp (DSeg Q D)) (Fmult F1 (DSeg D Q))
+++++
ring_simplify (1*D**Q).
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).

*****
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q C
H5 : Col P D Q
H6 : eq (DSeg C D) (DSeg Q D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (Fopp (DSeg Q D)) (DSeg D Q)
+++++
symmetry.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.

*****
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q C
H5 : Col P D Q
H6 : eq (DSeg C D) (DSeg Q D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg D Q) (Fopp (DSeg Q D))
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.

*****
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q C
H5 : Col P D Q
H6 : eq (DSeg C D) (DSeg Q D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col D Q Q
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.

*****
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q C
H5 : Col P D Q
H6 : eq (DSeg C D) (DSeg Q D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg D Q) (Fmult F1 (DSeg D Q))
+++++
ring.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.

*****
H10 : eq C Q
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q C
H5 : Col P D Q
H6 : eq (DSeg C D) (DSeg Q D)
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg Q Q) (DSeg Q C)
+++++
subst C.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.

*****
H8 : Col P Q Q
H9 : Col D Q Q
H7 : Col P Q Q
H5 : Col P D Q
H6 : eq (DSeg Q D) (DSeg Q D)
H4 : Col P Q D
H2 : not (eq Q Q)
H3 : eq (DSeg P Q) (DSeg Q D)
H1 : not (eq P D)
H : parallel P Q Q D
H0 : not (eq Q D)
P,Q,D : Point
*****
eq (DSeg Q Q) (DSeg Q Q)
+++++
intuition.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.

*****
H10 : not (eq X Q)
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg Q X) (DSeg X C)
+++++
assert (P**X + X**Q = P**Q)...
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...

*****
H11 : eq (Fplus (DSeg P X) (DSeg X Q)) (DSeg P Q)
H10 : not (eq X Q)
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg Q X) (DSeg X C)
+++++
rewrite H3 in H11.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.

*****
H11 : eq (Fplus (DSeg P X) (DSeg X Q)) (DSeg C D)
H10 : not (eq X Q)
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg Q X) (DSeg X C)
+++++
IsoleVar (X**Q) H11.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.

*****
H11 : eq (DSeg X Q) (Fminus (DSeg C D) (DSeg P X))
H10 : not (eq X Q)
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg Q X) (DSeg X C)
+++++
suppose (Col X C D).
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.
suppose (Col X C D).

*****
H12 : Col X C D
H11 : eq (DSeg X Q) (Fminus (DSeg C D) (DSeg P X))
H10 : not (eq X Q)
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg Q X) (DSeg X C)
+++++
assert (C**X+ X**D=C**D)...
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.
suppose (Col X C D).
assert (C**X+ X**D=C**D)...

*****
H13 : eq (Fplus (DSeg C X) (DSeg X D)) (DSeg C D)
H12 : Col X C D
H11 : eq (DSeg X Q) (Fminus (DSeg C D) (DSeg P X))
H10 : not (eq X Q)
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg Q X) (DSeg X C)
+++++
rewrite <- H13 in H11.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.
suppose (Col X C D).
assert (C**X+ X**D=C**D)...
rewrite <- H13 in H11.

*****
H13 : eq (Fplus (DSeg C X) (DSeg X D)) (DSeg C D)
H12 : Col X C D
H11 : eq (DSeg X Q) (Fminus (Fplus (DSeg C X) (DSeg X D)) (DSeg P X))
H10 : not (eq X Q)
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg Q X) (DSeg X C)
+++++
rewrite <- H6 in H11.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.
suppose (Col X C D).
assert (C**X+ X**D=C**D)...
rewrite <- H13 in H11.
rewrite <- H6 in H11.

*****
H13 : eq (Fplus (DSeg C X) (DSeg X D)) (DSeg C D)
H12 : Col X C D
H11 : eq (DSeg X Q) (Fminus (Fplus (DSeg C X) (DSeg P X)) (DSeg P X))
H10 : not (eq X Q)
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg Q X) (DSeg X C)
+++++
NormalizeRing H11.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.
suppose (Col X C D).
assert (C**X+ X**D=C**D)...
rewrite <- H13 in H11.
rewrite <- H6 in H11.
NormalizeRing H11.

*****
H11 : eq (DSeg X Q) (DSeg C X)
H13 : eq (Fplus (DSeg C X) (DSeg X D)) (DSeg C D)
H12 : Col X C D
H10 : not (eq X Q)
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg Q X) (DSeg X C)
+++++
replace (Q**X) with (- X**Q).
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.
suppose (Col X C D).
assert (C**X+ X**D=C**D)...
rewrite <- H13 in H11.
rewrite <- H6 in H11.
NormalizeRing H11.
replace (Q**X) with (- X**Q).

*****
H11 : eq (DSeg X Q) (DSeg C X)
H13 : eq (Fplus (DSeg C X) (DSeg X D)) (DSeg C D)
H12 : Col X C D
H10 : not (eq X Q)
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (Fopp (DSeg X Q)) (DSeg X C)
+++++
2:symmetry...
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.
suppose (Col X C D).
assert (C**X+ X**D=C**D)...
rewrite <- H13 in H11.
rewrite <- H6 in H11.
NormalizeRing H11.
replace (Q**X) with (- X**Q).
2:symmetry...

*****
H11 : eq (DSeg X Q) (DSeg C X)
H13 : eq (Fplus (DSeg C X) (DSeg X D)) (DSeg C D)
H12 : Col X C D
H10 : not (eq X Q)
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (Fopp (DSeg X Q)) (DSeg X C)
+++++
rewrite H11.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.
suppose (Col X C D).
assert (C**X+ X**D=C**D)...
rewrite <- H13 in H11.
rewrite <- H6 in H11.
NormalizeRing H11.
replace (Q**X) with (- X**Q).
2:symmetry...
rewrite H11.

*****
H11 : eq (DSeg X Q) (DSeg C X)
H13 : eq (Fplus (DSeg C X) (DSeg X D)) (DSeg C D)
H12 : Col X C D
H10 : not (eq X Q)
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (Fopp (DSeg C X)) (DSeg X C)
+++++
symmetry...
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.
suppose (Col X C D).
assert (C**X+ X**D=C**D)...
rewrite <- H13 in H11.
rewrite <- H6 in H11.
NormalizeRing H11.
replace (Q**X) with (- X**Q).
2:symmetry...
rewrite H11.
symmetry...

*****
H11 : eq (DSeg X Q) (Fminus (DSeg C D) (DSeg P X))
H10 : not (eq X Q)
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col X C D
+++++
assert (Col Q C X).
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.
suppose (Col X C D).
assert (C**X+ X**D=C**D)...
rewrite <- H13 in H11.
rewrite <- H6 in H11.
NormalizeRing H11.
replace (Q**X) with (- X**Q).
2:symmetry...
rewrite H11.
symmetry...
assert (Col Q C X).

*****
H11 : eq (DSeg X Q) (Fminus (DSeg C D) (DSeg P X))
H10 : not (eq X Q)
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col Q C X
+++++
eapply col_trans_1 with (B:=P)...
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.
suppose (Col X C D).
assert (C**X+ X**D=C**D)...
rewrite <- H13 in H11.
rewrite <- H6 in H11.
NormalizeRing H11.
replace (Q**X) with (- X**Q).
2:symmetry...
rewrite H11.
symmetry...
assert (Col Q C X).
eapply col_trans_1 with (B:=P)...

*****
H11 : eq (DSeg X Q) (Fminus (DSeg C D) (DSeg P X))
H10 : not (eq X Q)
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq Q P)
+++++
eauto with Geom.
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.
suppose (Col X C D).
assert (C**X+ X**D=C**D)...
rewrite <- H13 in H11.
rewrite <- H6 in H11.
NormalizeRing H11.
replace (Q**X) with (- X**Q).
2:symmetry...
rewrite H11.
symmetry...
assert (Col Q C X).
eapply col_trans_1 with (B:=P)...
eauto with Geom.

*****
H12 : Col Q C X
H11 : eq (DSeg X Q) (Fminus (DSeg C D) (DSeg P X))
H10 : not (eq X Q)
H9 : Col D X Q
H8 : Col P X Q
H7 : Col P Q C
H6 : eq (DSeg P X) (DSeg X D)
H5 : Col P D X
X : Point
H4 : Col P Q D
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col X C D
+++++
eapply col_trans_1 with (B:=Q)...
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.
suppose (Col X C D).
assert (C**X+ X**D=C**D)...
rewrite <- H13 in H11.
rewrite <- H6 in H11.
NormalizeRing H11.
replace (Q**X) with (- X**Q).
2:symmetry...
rewrite H11.
symmetry...
assert (Col Q C X).
eapply col_trans_1 with (B:=P)...
eauto with Geom.
eapply col_trans_1 with (B:=Q)...

*****
H4 : not (Col P Q D)
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_parallelogram P Q D C
+++++
assert (parallelogram P Q D C).
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.
suppose (Col X C D).
assert (C**X+ X**D=C**D)...
rewrite <- H13 in H11.
rewrite <- H6 in H11.
NormalizeRing H11.
replace (Q**X) with (- X**Q).
2:symmetry...
rewrite H11.
symmetry...
assert (Col Q C X).
eapply col_trans_1 with (B:=P)...
eauto with Geom.
eapply col_trans_1 with (B:=Q)...
assert (parallelogram P Q D C).

*****
H4 : not (Col P Q D)
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallelogram P Q D C
+++++
apply two_sides_par_eq_parallelogram...
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.
suppose (Col X C D).
assert (C**X+ X**D=C**D)...
rewrite <- H13 in H11.
rewrite <- H6 in H11.
NormalizeRing H11.
replace (Q**X) with (- X**Q).
2:symmetry...
rewrite H11.
symmetry...
assert (Col Q C X).
eapply col_trans_1 with (B:=P)...
eauto with Geom.
eapply col_trans_1 with (B:=Q)...
assert (parallelogram P Q D C).
apply two_sides_par_eq_parallelogram...

*****
H5 : parallelogram P Q D C
H4 : not (Col P Q D)
H3 : eq (DSeg P Q) (DSeg C D)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_parallelogram P Q D C
+++++
apply parallelogram_weak_parallelogram...
-----
Lemma parallel_side_eq_weak_para : forall P Q C D, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P ** Q = C ** D -> weak_parallelogram P Q D C.
Proof with Geometry.
intros.
cases_col P Q D.
unfold weak_parallelogram.
repeat split...
assert ({O :Point | mid_point O P D}).
apply mid_point_ex.
elim H5; intro X;intros;clear H5.
exists X;split...
unfold mid_point in *.
DecompAndAll.
assert (Col P Q C).
eapply par_col_col_1;eauto...
assert (Col P X Q).
eapply col_trans_1 with (B:=D)...
assert (Col D X Q).
eapply col_trans_1 with (B:=P)...
split.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
cases_equality X Q.
subst X.
rewrite H3 in H6.
assert (C=Q).
apply (A2bgen D Q C Q 1).
cut (Col Q D C).
Geometry.
eapply col_trans_1 with (B:=P)...
eauto with Geom.
replace (D ** C) with (- C**D).
2:symmetry;Geometry.
rewrite H6.
ring_simplify (1*D**Q).
symmetry.
Geometry.
Geometry.
ring.
subst C.
intuition.
assert (P**X + X**Q = P**Q)...
rewrite H3 in H11.
IsoleVar (X**Q) H11.
suppose (Col X C D).
assert (C**X+ X**D=C**D)...
rewrite <- H13 in H11.
rewrite <- H6 in H11.
NormalizeRing H11.
replace (Q**X) with (- X**Q).
2:symmetry...
rewrite H11.
symmetry...
assert (Col Q C X).
eapply col_trans_1 with (B:=P)...
eauto with Geom.
eapply col_trans_1 with (B:=Q)...
assert (parallelogram P Q D C).
apply two_sides_par_eq_parallelogram...
apply parallelogram_weak_parallelogram...

*****

*****

+++++
Qed.
-----
Lemma weak_parallelogram_weak_2_parallelogram :\n forall A B C D, weak_parallelogram A B C D -> \n weak_2_parallelogram A B  C D.
-----
Lemma weak_parallelogram_weak_2_parallelogram : forall A B C D, weak_parallelogram A B C D -> weak_2_parallelogram A B C D.

*****

*****
forall (A B C D : Point) (_ : weak_parallelogram A B C D), weak_2_parallelogram A B C D
+++++
Proof.
-----
Lemma weak_parallelogram_weak_2_parallelogram : forall A B C D, weak_parallelogram A B C D -> weak_2_parallelogram A B C D.
Proof.

*****

*****
forall (A B C D : Point) (_ : weak_parallelogram A B C D), weak_2_parallelogram A B C D
+++++
unfold weak_2_parallelogram.
-----
Lemma weak_parallelogram_weak_2_parallelogram : forall A B C D, weak_parallelogram A B C D -> weak_2_parallelogram A B C D.
Proof.
unfold weak_2_parallelogram.

*****

*****
forall (A B C D : Point) (_ : weak_parallelogram A B C D), and (iff (eq A C) (eq B D)) (ex (fun O : Point => and (mid_point O A C) (mid_point O B D)))
+++++
unfold weak_parallelogram.
-----
Lemma weak_parallelogram_weak_2_parallelogram : forall A B C D, weak_parallelogram A B C D -> weak_2_parallelogram A B C D.
Proof.
unfold weak_2_parallelogram.
unfold weak_parallelogram.

*****

*****
forall (A B C D : Point) (_ : and (not (eq A C)) (and (not (eq B D)) (ex (fun O : Point => and (mid_point O A C) (mid_point O B D))))), and (iff (eq A C) (eq B D)) (ex (fun O : Point => and (mid_point O A C) (mid_point O B D)))
+++++
intros.
-----
Lemma weak_parallelogram_weak_2_parallelogram : forall A B C D, weak_parallelogram A B C D -> weak_2_parallelogram A B C D.
Proof.
unfold weak_2_parallelogram.
unfold weak_parallelogram.
intros.

*****
H : and (not (eq A C))\n (and (not (eq B D))\n (ex (fun O : Point => and (mid_point O A C) (mid_point O B D))))
A,B,C,D : Point
*****
and (iff (eq A C) (eq B D)) (ex (fun O : Point => and (mid_point O A C) (mid_point O B D)))
+++++
intuition.
-----
Lemma weak_parallelogram_weak_2_parallelogram : forall A B C D, weak_parallelogram A B C D -> weak_2_parallelogram A B C D.
Proof.
unfold weak_2_parallelogram.
unfold weak_parallelogram.
intros.
intuition.

*****

*****

+++++
Qed.
-----
Lemma weak_2_parallelogram_weak_3_parallelogram :\n forall A B C D, weak_2_parallelogram A B C D -> \n weak_3_parallelogram A B  C D.
-----
Lemma weak_2_parallelogram_weak_3_parallelogram : forall A B C D, weak_2_parallelogram A B C D -> weak_3_parallelogram A B C D.

*****

*****
forall (A B C D : Point) (_ : weak_2_parallelogram A B C D), weak_3_parallelogram A B C D
+++++
Proof.
-----
Lemma weak_2_parallelogram_weak_3_parallelogram : forall A B C D, weak_2_parallelogram A B C D -> weak_3_parallelogram A B C D.
Proof.

*****

*****
forall (A B C D : Point) (_ : weak_2_parallelogram A B C D), weak_3_parallelogram A B C D
+++++
unfold weak_2_parallelogram.
-----
Lemma weak_2_parallelogram_weak_3_parallelogram : forall A B C D, weak_2_parallelogram A B C D -> weak_3_parallelogram A B C D.
Proof.
unfold weak_2_parallelogram.

*****

*****
forall (A B C D : Point) (_ : and (iff (eq A C) (eq B D)) (ex (fun O : Point => and (mid_point O A C) (mid_point O B D)))), weak_3_parallelogram A B C D
+++++
unfold weak_3_parallelogram.
-----
Lemma weak_2_parallelogram_weak_3_parallelogram : forall A B C D, weak_2_parallelogram A B C D -> weak_3_parallelogram A B C D.
Proof.
unfold weak_2_parallelogram.
unfold weak_3_parallelogram.

*****

*****
forall (A B C D : Point) (_ : and (iff (eq A C) (eq B D)) (ex (fun O : Point => and (mid_point O A C) (mid_point O B D)))), ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
+++++
intros.
-----
Lemma weak_2_parallelogram_weak_3_parallelogram : forall A B C D, weak_2_parallelogram A B C D -> weak_3_parallelogram A B C D.
Proof.
unfold weak_2_parallelogram.
unfold weak_3_parallelogram.
intros.

*****
H : and (iff (eq A C) (eq B D))\n (ex (fun O : Point => and (mid_point O A C) (mid_point O B D)))
A,B,C,D : Point
*****
ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
+++++
intuition.
-----
Lemma weak_2_parallelogram_weak_3_parallelogram : forall A B C D, weak_2_parallelogram A B C D -> weak_3_parallelogram A B C D.
Proof.
unfold weak_2_parallelogram.
unfold weak_3_parallelogram.
intros.
intuition.

*****

*****

+++++
Qed.
-----
Lemma weak_parallelogram_weak_3_parallelogram :\nforall A B C D, weak_parallelogram A B C D -> \n weak_3_parallelogram A B  C D.
-----
Lemma weak_parallelogram_weak_3_parallelogram : forall A B C D, weak_parallelogram A B C D -> weak_3_parallelogram A B C D.

*****

*****
forall (A B C D : Point) (_ : weak_parallelogram A B C D), weak_3_parallelogram A B C D
+++++
Proof.
-----
Lemma weak_parallelogram_weak_3_parallelogram : forall A B C D, weak_parallelogram A B C D -> weak_3_parallelogram A B C D.
Proof.

*****

*****
forall (A B C D : Point) (_ : weak_parallelogram A B C D), weak_3_parallelogram A B C D
+++++
intros.
-----
Lemma weak_parallelogram_weak_3_parallelogram : forall A B C D, weak_parallelogram A B C D -> weak_3_parallelogram A B C D.
Proof.
intros.

*****
H : weak_parallelogram A B C D
A,B,C,D : Point
*****
weak_3_parallelogram A B C D
+++++
apply weak_2_parallelogram_weak_3_parallelogram.
-----
Lemma weak_parallelogram_weak_3_parallelogram : forall A B C D, weak_parallelogram A B C D -> weak_3_parallelogram A B C D.
Proof.
intros.
apply weak_2_parallelogram_weak_3_parallelogram.

*****
H : weak_parallelogram A B C D
A,B,C,D : Point
*****
weak_2_parallelogram A B C D
+++++
apply weak_parallelogram_weak_2_parallelogram.
-----
Lemma weak_parallelogram_weak_3_parallelogram : forall A B C D, weak_parallelogram A B C D -> weak_3_parallelogram A B C D.
Proof.
intros.
apply weak_2_parallelogram_weak_3_parallelogram.
apply weak_parallelogram_weak_2_parallelogram.

*****
H : weak_parallelogram A B C D
A,B,C,D : Point
*****
weak_parallelogram A B C D
+++++
assumption.
-----
Lemma weak_parallelogram_weak_3_parallelogram : forall A B C D, weak_parallelogram A B C D -> weak_3_parallelogram A B C D.
Proof.
intros.
apply weak_2_parallelogram_weak_3_parallelogram.
apply weak_parallelogram_weak_2_parallelogram.
assumption.

*****

*****

+++++
Qed.
-----
Lemma parallelogram_weak_3_parallelogram :\n  forall A B C D, parallelogram A B C D -> \n  weak_3_parallelogram A B  C D.
-----
Lemma parallelogram_weak_3_parallelogram : forall A B C D, parallelogram A B C D -> weak_3_parallelogram A B C D.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), weak_3_parallelogram A B C D
+++++
Proof.
-----
Lemma parallelogram_weak_3_parallelogram : forall A B C D, parallelogram A B C D -> weak_3_parallelogram A B C D.
Proof.

*****

*****
forall (A B C D : Point) (_ : parallelogram A B C D), weak_3_parallelogram A B C D
+++++
intros.
-----
Lemma parallelogram_weak_3_parallelogram : forall A B C D, parallelogram A B C D -> weak_3_parallelogram A B C D.
Proof.
intros.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
weak_3_parallelogram A B C D
+++++
apply weak_parallelogram_weak_3_parallelogram.
-----
Lemma parallelogram_weak_3_parallelogram : forall A B C D, parallelogram A B C D -> weak_3_parallelogram A B C D.
Proof.
intros.
apply weak_parallelogram_weak_3_parallelogram.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
weak_parallelogram A B C D
+++++
apply parallelogram_weak_parallelogram.
-----
Lemma parallelogram_weak_3_parallelogram : forall A B C D, parallelogram A B C D -> weak_3_parallelogram A B C D.
Proof.
intros.
apply weak_parallelogram_weak_3_parallelogram.
apply parallelogram_weak_parallelogram.

*****
H : parallelogram A B C D
A,B,C,D : Point
*****
parallelogram A B C D
+++++
assumption.
-----
Lemma parallelogram_weak_3_parallelogram : forall A B C D, parallelogram A B C D -> weak_3_parallelogram A B C D.
Proof.
intros.
apply weak_parallelogram_weak_3_parallelogram.
apply parallelogram_weak_parallelogram.
assumption.

*****

*****

+++++
Qed.
-----
Lemma parallel_side_eq_weak_weak_para :   forall P Q C D,\n  parallel P Q C D ->\n  (P = D <-> Q = C) ->\n  P ** Q = C ** D -> \n  weak_2_parallelogram P Q D C.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.

*****

*****
forall (P Q C D : Point) (_ : parallel P Q C D) (_ : iff (eq P D) (eq Q C)) (_ : eq (DSeg P Q) (DSeg C D)), weak_2_parallelogram P Q D C
+++++
Proof.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.

*****

*****
forall (P Q C D : Point) (_ : parallel P Q C D) (_ : iff (eq P D) (eq Q C)) (_ : eq (DSeg P Q) (DSeg C D)), weak_2_parallelogram P Q D C
+++++
intros.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.

*****
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_2_parallelogram P Q D C
+++++
cases_equality C D.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.

*****
H2 : eq C D
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_2_parallelogram P Q D C
+++++
subst C.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
subst C.

*****
H : parallel P Q D D
H0 : iff (eq P D) (eq Q D)
H1 : eq (DSeg P Q) (DSeg D D)
P,Q,D : Point
*****
weak_2_parallelogram P Q D D
+++++
assert (P=Q).
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
subst C.
assert (P=Q).

*****
H : parallel P Q D D
H0 : iff (eq P D) (eq Q D)
H1 : eq (DSeg P Q) (DSeg D D)
P,Q,D : Point
*****
eq P Q
+++++
basic_simpl.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
subst C.
assert (P=Q).
basic_simpl.

*****
H : parallel P Q D D
H0 : iff (eq P D) (eq Q D)
H1 : eq (DSeg P Q) F0
P,Q,D : Point
*****
eq P Q
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
subst C.
assert (P=Q).

*****
H2 : eq P Q
H : parallel P Q D D
H0 : iff (eq P D) (eq Q D)
H1 : eq (DSeg P Q) (DSeg D D)
P,Q,D : Point
*****
weak_2_parallelogram P Q D D
+++++
subst Q.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
subst C.
assert (P=Q).
subst Q.

*****
H1 : eq (DSeg P P) (DSeg D D)
H0 : iff (eq P D) (eq P D)
H : parallel P P D D
P,D : Point
*****
weak_2_parallelogram P P D D
+++++
unfold weak_2_parallelogram.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
subst C.
assert (P=Q).
subst Q.
unfold weak_2_parallelogram.

*****
H1 : eq (DSeg P P) (DSeg D D)
H0 : iff (eq P D) (eq P D)
H : parallel P P D D
P,D : Point
*****
and (iff (eq P D) (eq P D)) (ex (fun O : Point => and (mid_point O P D) (mid_point O P D)))
+++++
intuition.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
subst C.
assert (P=Q).
subst Q.
unfold weak_2_parallelogram.
intuition.

*****
H2,H3 : forall _ : eq P D, eq P D
H1 : eq (DSeg P P) (DSeg D D)
H : parallel P P D D
P,D : Point
*****
ex (fun O : Point => and (mid_point O P D) (mid_point O P D))
+++++
assert ({O :Point | mid_point O P D}).
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
subst C.
assert (P=Q).
subst Q.
unfold weak_2_parallelogram.
intuition.
assert ({O :Point | mid_point O P D}).

*****
H2,H3 : forall _ : eq P D, eq P D
H1 : eq (DSeg P P) (DSeg D D)
H : parallel P P D D
P,D : Point
*****
sig (fun O : Point => mid_point O P D)
+++++
apply mid_point_ex.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
subst C.
assert (P=Q).
subst Q.
unfold weak_2_parallelogram.
intuition.
assert ({O :Point | mid_point O P D}).

*****
H0 : sig (fun O : Point => mid_point O P D)
H2,H3 : forall _ : eq P D, eq P D
H1 : eq (DSeg P P) (DSeg D D)
H : parallel P P D D
P,D : Point
*****
ex (fun O : Point => and (mid_point O P D) (mid_point O P D))
+++++
DecompEx H0 X.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
subst C.
assert (P=Q).
subst Q.
unfold weak_2_parallelogram.
intuition.
assert ({O :Point | mid_point O P D}).
DecompEx H0 X.

*****
p : mid_point X P D
X : Point
H2,H3 : forall _ : eq P D, eq P D
H1 : eq (DSeg P P) (DSeg D D)
H : parallel P P D D
P,D : Point
*****
ex (fun O : Point => and (mid_point O P D) (mid_point O P D))
+++++
exists X.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
subst C.
assert (P=Q).
subst Q.
unfold weak_2_parallelogram.
intuition.
assert ({O :Point | mid_point O P D}).
DecompEx H0 X.
exists X.

*****
p : mid_point X P D
X : Point
H2,H3 : forall _ : eq P D, eq P D
H1 : eq (DSeg P P) (DSeg D D)
H : parallel P P D D
P,D : Point
*****
and (mid_point X P D) (mid_point X P D)
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.

*****
H2 : not (eq C D)
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_2_parallelogram P Q D C
+++++
cases_equality P D.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.

*****
H3 : eq P D
H2 : not (eq C D)
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_2_parallelogram P Q D C
+++++
subst P.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
subst P.

*****
H2 : not (eq C D)
H : parallel D Q C D
H0 : iff (eq D D) (eq Q C)
H1 : eq (DSeg D Q) (DSeg C D)
Q,C,D : Point
*****
weak_2_parallelogram D Q D C
+++++
assert (Q=C).
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
subst P.
assert (Q=C).

*****
H2 : not (eq C D)
H : parallel D Q C D
H0 : iff (eq D D) (eq Q C)
H1 : eq (DSeg D Q) (DSeg C D)
Q,C,D : Point
*****
eq Q C
+++++
intuition.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
subst P.
assert (Q=C).

*****
H3 : eq Q C
H2 : not (eq C D)
H : parallel D Q C D
H0 : iff (eq D D) (eq Q C)
H1 : eq (DSeg D Q) (DSeg C D)
Q,C,D : Point
*****
weak_2_parallelogram D Q D C
+++++
intuition.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
subst P.
assert (Q=C).
intuition.

*****
H5 : eq Q C
H0 : eq D D
H3 : eq Q C
H2 : forall _ : eq C D, False
H : parallel D Q C D
H1 : eq (DSeg D Q) (DSeg C D)
Q,C,D : Point
*****
weak_2_parallelogram D Q D C
+++++
subst Q.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
subst P.
assert (Q=C).
intuition.
subst Q.

*****
H5 : eq C C
H0 : eq D D
H2 : forall _ : eq C D, False
H1 : eq (DSeg D C) (DSeg C D)
H : parallel D C C D
C,D : Point
*****
weak_2_parallelogram D C D C
+++++
clear H0 H5.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
subst P.
assert (Q=C).
intuition.
subst Q.
clear H0 H5.

*****
H2 : forall _ : eq C D, False
H1 : eq (DSeg D C) (DSeg C D)
H : parallel D C C D
C,D : Point
*****
weak_2_parallelogram D C D C
+++++
replace (D**C) with (-C**D) in H1.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
subst P.
assert (Q=C).
intuition.
subst Q.
clear H0 H5.
replace (D**C) with (-C**D) in H1.

*****
H2 : forall _ : eq C D, False
H1 : eq (Fopp (DSeg C D)) (DSeg C D)
H : parallel D C C D
C,D : Point
*****
weak_2_parallelogram D C D C
+++++
assert (C**D=0).
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
subst P.
assert (Q=C).
intuition.
subst Q.
clear H0 H5.
replace (D**C) with (-C**D) in H1.
assert (C**D=0).

*****
H2 : forall _ : eq C D, False
H1 : eq (Fopp (DSeg C D)) (DSeg C D)
H : parallel D C C D
C,D : Point
*****
eq (DSeg C D) F0
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
subst P.
assert (Q=C).
intuition.
subst Q.
clear H0 H5.
replace (D**C) with (-C**D) in H1.
assert (C**D=0).

*****
H0 : eq (DSeg C D) F0
H2 : forall _ : eq C D, False
H1 : eq (Fopp (DSeg C D)) (DSeg C D)
H : parallel D C C D
C,D : Point
*****
weak_2_parallelogram D C D C
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
subst P.
assert (Q=C).
intuition.
subst Q.
clear H0 H5.
replace (D**C) with (-C**D) in H1.
assert (C**D=0).
Geometry.

*****
H0 : eq (DSeg C D) F0
H2 : forall _ : eq C D, False
H1 : eq (Fopp (DSeg C D)) (DSeg C D)
H : parallel D C C D
C,D : Point
*****
weak_2_parallelogram D C D C
+++++
assert (C=D).
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
subst P.
assert (Q=C).
intuition.
subst Q.
clear H0 H5.
replace (D**C) with (-C**D) in H1.
assert (C**D=0).
Geometry.
assert (C=D).

*****
H0 : eq (DSeg C D) F0
H2 : forall _ : eq C D, False
H1 : eq (Fopp (DSeg C D)) (DSeg C D)
H : parallel D C C D
C,D : Point
*****
eq C D
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
subst P.
assert (Q=C).
intuition.
subst Q.
clear H0 H5.
replace (D**C) with (-C**D) in H1.
assert (C**D=0).
Geometry.
assert (C=D).

*****
H3 : eq C D
H0 : eq (DSeg C D) F0
H2 : forall _ : eq C D, False
H1 : eq (Fopp (DSeg C D)) (DSeg C D)
H : parallel D C C D
C,D : Point
*****
weak_2_parallelogram D C D C
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
subst P.
assert (Q=C).
intuition.
subst Q.
clear H0 H5.
replace (D**C) with (-C**D) in H1.
assert (C**D=0).
Geometry.
assert (C=D).
Geometry.

*****
H3 : eq C D
H0 : eq (DSeg C D) F0
H2 : forall _ : eq C D, False
H1 : eq (Fopp (DSeg C D)) (DSeg C D)
H : parallel D C C D
C,D : Point
*****
weak_2_parallelogram D C D C
+++++
intuition.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
subst P.
assert (Q=C).
intuition.
subst Q.
clear H0 H5.
replace (D**C) with (-C**D) in H1.

*****
H2 : forall _ : eq C D, False
H1 : eq (DSeg D C) (DSeg C D)
H : parallel D C C D
C,D : Point
*****
eq (Fopp (DSeg C D)) (DSeg D C)
+++++
symmetry.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
subst P.
assert (Q=C).
intuition.
subst Q.
clear H0 H5.
replace (D**C) with (-C**D) in H1.
symmetry.

*****
H2 : forall _ : eq C D, False
H1 : eq (DSeg D C) (DSeg C D)
H : parallel D C C D
C,D : Point
*****
eq (DSeg D C) (Fopp (DSeg C D))
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.

*****
H3 : not (eq P D)
H2 : not (eq C D)
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_2_parallelogram P Q D C
+++++
assert (Q<>C).
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).

*****
H3 : not (eq P D)
H2 : not (eq C D)
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq Q C)
+++++
unfold not.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).
unfold not.

*****
H3 : not (eq P D)
H2 : not (eq C D)
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : eq Q C, False
+++++
intro.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).
unfold not.
intro.

*****
H4 : eq Q C
H3 : not (eq P D)
H2 : not (eq C D)
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
False
+++++
subst Q.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).
unfold not.
intro.
subst Q.

*****
H3 : not (eq P D)
H2 : not (eq C D)
H : parallel P C C D
H0 : iff (eq P D) (eq C C)
H1 : eq (DSeg P C) (DSeg C D)
P,C,D : Point
*****
False
+++++
elim H0.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).
unfold not.
intro.
subst Q.
elim H0.

*****
H3 : not (eq P D)
H2 : not (eq C D)
H : parallel P C C D
H0 : iff (eq P D) (eq C C)
H1 : eq (DSeg P C) (DSeg C D)
P,C,D : Point
*****
forall (_ : forall _ : eq P D, eq C C) (_ : forall _ : eq C C, eq P D), False
+++++
intros.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).
unfold not.
intro.
subst Q.
elim H0.
intros.

*****
H5 : forall _ : eq C C, eq P D
H4 : forall _ : eq P D, eq C C
H3 : not (eq P D)
H2 : not (eq C D)
H : parallel P C C D
H0 : iff (eq P D) (eq C C)
H1 : eq (DSeg P C) (DSeg C D)
P,C,D : Point
*****
False
+++++
assert (P=D).
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).
unfold not.
intro.
subst Q.
elim H0.
intros.
assert (P=D).

*****
H5 : forall _ : eq C C, eq P D
H4 : forall _ : eq P D, eq C C
H3 : not (eq P D)
H2 : not (eq C D)
H : parallel P C C D
H0 : iff (eq P D) (eq C C)
H1 : eq (DSeg P C) (DSeg C D)
P,C,D : Point
*****
eq P D
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).
unfold not.
intro.
subst Q.
elim H0.
intros.
assert (P=D).

*****
H6 : eq P D
H5 : forall _ : eq C C, eq P D
H4 : forall _ : eq P D, eq C C
H3 : not (eq P D)
H2 : not (eq C D)
H : parallel P C C D
H0 : iff (eq P D) (eq C C)
H1 : eq (DSeg P C) (DSeg C D)
P,C,D : Point
*****
False
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).

*****
H4 : not (eq Q C)
H3 : not (eq P D)
H2 : not (eq C D)
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_2_parallelogram P Q D C
+++++
assert (weak_parallelogram P Q D C).
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).
assert (weak_parallelogram P Q D C).

*****
H4 : not (eq Q C)
H3 : not (eq P D)
H2 : not (eq C D)
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_parallelogram P Q D C
+++++
apply parallel_side_eq_weak_para.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).
assert (weak_parallelogram P Q D C).
apply parallel_side_eq_weak_para.

*****
H4 : not (eq Q C)
H3 : not (eq P D)
H2 : not (eq C D)
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel P Q C D
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).
assert (weak_parallelogram P Q D C).
apply parallel_side_eq_weak_para.

*****
H4 : not (eq Q C)
H3 : not (eq P D)
H2 : not (eq C D)
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq C D)
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).
assert (weak_parallelogram P Q D C).
apply parallel_side_eq_weak_para.

*****
H4 : not (eq Q C)
H3 : not (eq P D)
H2 : not (eq C D)
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq P D)
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).
assert (weak_parallelogram P Q D C).
apply parallel_side_eq_weak_para.

*****
H4 : not (eq Q C)
H3 : not (eq P D)
H2 : not (eq C D)
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq Q C)
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).
assert (weak_parallelogram P Q D C).
apply parallel_side_eq_weak_para.

*****
H4 : not (eq Q C)
H3 : not (eq P D)
H2 : not (eq C D)
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg P Q) (DSeg C D)
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).
assert (weak_parallelogram P Q D C).

*****
H5 : weak_parallelogram P Q D C
H4 : not (eq Q C)
H3 : not (eq P D)
H2 : not (eq C D)
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_2_parallelogram P Q D C
+++++
apply weak_parallelogram_weak_2_parallelogram.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.
cases_equality P D.
assert (Q<>C).
assert (weak_parallelogram P Q D C).
apply weak_parallelogram_weak_2_parallelogram.

*****
H5 : weak_parallelogram P Q D C
H4 : not (eq Q C)
H3 : not (eq P D)
H2 : not (eq C D)
H1 : eq (DSeg P Q) (DSeg C D)
H0 : iff (eq P D) (eq Q C)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_parallelogram P Q D C
+++++
auto.
-----
Lemma parallel_side_eq_weak_weak_para : forall P Q C D, parallel P Q C D -> (P = D <-> Q = C) -> P ** Q = C ** D -> weak_2_parallelogram P Q D C.
Proof.
intros.
cases_equality C D.

*****

*****

+++++
Qed.
-----
Lemma parallel_side_eq_weak_weak_weak_para :   forall P Q C D,\n  parallel P Q C D ->\n  P ** Q = C ** D -> \n  weak_3_parallelogram P Q D C.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.

*****

*****
forall (P Q C D : Point) (_ : parallel P Q C D) (_ : eq (DSeg P Q) (DSeg C D)), weak_3_parallelogram P Q D C
+++++
Proof.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.

*****

*****
forall (P Q C D : Point) (_ : parallel P Q C D) (_ : eq (DSeg P Q) (DSeg C D)), weak_3_parallelogram P Q D C
+++++
intros.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.

*****
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_3_parallelogram P Q D C
+++++
cases_equality P D.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.

*****
H1 : eq P D
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_3_parallelogram P Q D C
+++++
cases_equality Q C.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.

*****
H2 : eq Q C
H1 : eq P D
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_3_parallelogram P Q D C
+++++
cut (weak_2_parallelogram P Q D C).
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
cut (weak_2_parallelogram P Q D C).

*****
H2 : eq Q C
H1 : eq P D
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : weak_2_parallelogram P Q D C, weak_3_parallelogram P Q D C
+++++
apply weak_2_parallelogram_weak_3_parallelogram.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
cut (weak_2_parallelogram P Q D C).

*****
H2 : eq Q C
H1 : eq P D
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_2_parallelogram P Q D C
+++++
apply parallel_side_eq_weak_weak_para.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
cut (weak_2_parallelogram P Q D C).
apply parallel_side_eq_weak_weak_para.

*****
H2 : eq Q C
H1 : eq P D
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel P Q C D
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
cut (weak_2_parallelogram P Q D C).
apply parallel_side_eq_weak_weak_para.

*****
H2 : eq Q C
H1 : eq P D
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
iff (eq P D) (eq Q C)
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
cut (weak_2_parallelogram P Q D C).
apply parallel_side_eq_weak_weak_para.
Geometry.

*****
H2 : eq Q C
H1 : eq P D
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
iff (eq P D) (eq Q C)
+++++
intuition.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
cut (weak_2_parallelogram P Q D C).
apply parallel_side_eq_weak_weak_para.

*****
H2 : eq Q C
H1 : eq P D
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg P Q) (DSeg C D)
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.

*****
H2 : not (eq Q C)
H1 : eq P D
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_3_parallelogram P Q D C
+++++
subst P.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
subst P.

*****
H2 : not (eq Q C)
H : parallel D Q C D
H0 : eq (DSeg D Q) (DSeg C D)
Q,C,D : Point
*****
weak_3_parallelogram D Q D C
+++++
unfold weak_3_parallelogram.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
subst P.
unfold weak_3_parallelogram.

*****
H2 : not (eq Q C)
H : parallel D Q C D
H0 : eq (DSeg D Q) (DSeg C D)
Q,C,D : Point
*****
ex (fun O : Point => and (mid_point O D D) (mid_point O Q C))
+++++
exists D.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
subst P.
unfold weak_3_parallelogram.
exists D.

*****
H2 : not (eq Q C)
H : parallel D Q C D
H0 : eq (DSeg D Q) (DSeg C D)
Q,C,D : Point
*****
and (mid_point D D D) (mid_point D Q C)
+++++
unfold mid_point.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
subst P.
unfold weak_3_parallelogram.
exists D.
unfold mid_point.

*****
H2 : not (eq Q C)
H : parallel D Q C D
H0 : eq (DSeg D Q) (DSeg C D)
Q,C,D : Point
*****
and (and (Col D D D) (eq (DSeg D D) (DSeg D D))) (and (Col Q C D) (eq (DSeg Q D) (DSeg D C)))
+++++
intuition.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
subst P.
unfold weak_3_parallelogram.
exists D.
unfold mid_point.
intuition.

*****
H2 : forall _ : eq Q C, False
H : parallel D Q C D
H0 : eq (DSeg D Q) (DSeg C D)
Q,C,D : Point
*****
Col Q C D
+++++
unfold parallel in H.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
subst P.
unfold weak_3_parallelogram.
exists D.
unfold mid_point.
intuition.
unfold parallel in H.

*****
H2 : forall _ : eq Q C, False
H : eq (S4 D C Q D) F0
H0 : eq (DSeg D Q) (DSeg C D)
Q,C,D : Point
*****
Col Q C D
+++++
unfold S4 in H.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
subst P.
unfold weak_3_parallelogram.
exists D.
unfold mid_point.
intuition.
unfold parallel in H.
unfold S4 in H.

*****
H2 : forall _ : eq Q C, False
H : eq (Fplus (S D C Q) (S D Q D)) F0
H0 : eq (DSeg D Q) (DSeg C D)
Q,C,D : Point
*****
Col Q C D
+++++
basic_simpl.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
subst P.
unfold weak_3_parallelogram.
exists D.
unfold mid_point.
intuition.
unfold parallel in H.
unfold S4 in H.
basic_simpl.

*****
H2 : forall _ : eq Q C, False
H : eq (S D C Q) F0
H0 : eq (DSeg D Q) (DSeg C D)
Q,C,D : Point
*****
Col Q C D
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.

*****
H1 : not (eq P D)
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_3_parallelogram P Q D C
+++++
cases_equality Q C.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.

*****
H2 : eq Q C
H1 : not (eq P D)
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_3_parallelogram P Q D C
+++++
subst Q.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
subst Q.

*****
H1 : not (eq P D)
H : parallel P C C D
H0 : eq (DSeg P C) (DSeg C D)
P,C,D : Point
*****
weak_3_parallelogram P C D C
+++++
unfold weak_3_parallelogram.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
subst Q.
unfold weak_3_parallelogram.

*****
H1 : not (eq P D)
H : parallel P C C D
H0 : eq (DSeg P C) (DSeg C D)
P,C,D : Point
*****
ex (fun O : Point => and (mid_point O P D) (mid_point O C C))
+++++
exists C.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
subst Q.
unfold weak_3_parallelogram.
exists C.

*****
H1 : not (eq P D)
H : parallel P C C D
H0 : eq (DSeg P C) (DSeg C D)
P,C,D : Point
*****
and (mid_point C P D) (mid_point C C C)
+++++
unfold mid_point.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
subst Q.
unfold weak_3_parallelogram.
exists C.
unfold mid_point.

*****
H1 : not (eq P D)
H : parallel P C C D
H0 : eq (DSeg P C) (DSeg C D)
P,C,D : Point
*****
and (and (Col P D C) (eq (DSeg P C) (DSeg C D))) (and (Col C C C) (eq (DSeg C C) (DSeg C C)))
+++++
intuition.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
subst Q.
unfold weak_3_parallelogram.
exists C.
unfold mid_point.
intuition.

*****
H1 : forall _ : eq P D, False
H : parallel P C C D
H0 : eq (DSeg P C) (DSeg C D)
P,C,D : Point
*****
Col P D C
+++++
unfold parallel in H.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
subst Q.
unfold weak_3_parallelogram.
exists C.
unfold mid_point.
intuition.
unfold parallel in H.

*****
H1 : forall _ : eq P D, False
H : eq (S4 P C C D) F0
H0 : eq (DSeg P C) (DSeg C D)
P,C,D : Point
*****
Col P D C
+++++
unfold S4 in H.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
subst Q.
unfold weak_3_parallelogram.
exists C.
unfold mid_point.
intuition.
unfold parallel in H.
unfold S4 in H.

*****
H1 : forall _ : eq P D, False
H : eq (Fplus (S P C C) (S P C D)) F0
H0 : eq (DSeg P C) (DSeg C D)
P,C,D : Point
*****
Col P D C
+++++
basic_simpl.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
subst Q.
unfold weak_3_parallelogram.
exists C.
unfold mid_point.
intuition.
unfold parallel in H.
unfold S4 in H.
basic_simpl.

*****
H1 : forall _ : eq P D, False
H : eq (S P C D) F0
H0 : eq (DSeg P C) (DSeg C D)
P,C,D : Point
*****
Col P D C
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.

*****
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_3_parallelogram P Q D C
+++++
cut (weak_2_parallelogram P Q D C).
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
cut (weak_2_parallelogram P Q D C).

*****
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : weak_2_parallelogram P Q D C, weak_3_parallelogram P Q D C
+++++
apply weak_2_parallelogram_weak_3_parallelogram.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
cut (weak_2_parallelogram P Q D C).

*****
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_2_parallelogram P Q D C
+++++
apply parallel_side_eq_weak_weak_para.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
cut (weak_2_parallelogram P Q D C).
apply parallel_side_eq_weak_weak_para.

*****
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel P Q C D
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
cut (weak_2_parallelogram P Q D C).
apply parallel_side_eq_weak_weak_para.

*****
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
iff (eq P D) (eq Q C)
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
cut (weak_2_parallelogram P Q D C).
apply parallel_side_eq_weak_weak_para.
Geometry.

*****
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
iff (eq P D) (eq Q C)
+++++
intuition.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.
cases_equality Q C.
cut (weak_2_parallelogram P Q D C).
apply parallel_side_eq_weak_weak_para.

*****
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : eq (DSeg P Q) (DSeg C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg P Q) (DSeg C D)
+++++
Geometry.
-----
Lemma parallel_side_eq_weak_weak_weak_para : forall P Q C D, parallel P Q C D -> P ** Q = C ** D -> weak_3_parallelogram P Q D C.
Proof.
intros.
cases_equality P D.

*****

*****

+++++
Qed.
-----
Lemma on_line_dex_spec_strong_f :\n   forall P Q C D : Point,\n   parallel P Q C D -> P<>Q -> \n    exists Y : Point, Col Y P Q /\ P ** Y = C ** D /\ weak_3_parallelogram P Y D C.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.

*****

*****
forall (P Q C D : Point) (_ : parallel P Q C D) (_ : not (eq P Q)), ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_3_parallelogram P Y D C)))
+++++
Proof.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.

*****

*****
forall (P Q C D : Point) (_ : parallel P Q C D) (_ : not (eq P Q)), ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_3_parallelogram P Y D C)))
+++++
intros.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.

*****
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_3_parallelogram P Y D C)))
+++++
assert (Th := (on_line_dex_spec P Q C D H0)).
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).

*****
Th : sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_3_parallelogram P Y D C)))
+++++
elim Th.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.

*****
Th : sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall (x : Point) (_ : and (Col x P Q) (eq (DSeg P x) (DSeg C D))), ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_3_parallelogram P Y D C)))
+++++
intro Y.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.

*****
Y : Point
Th : sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)), ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_3_parallelogram P Y D C)))
+++++
intros.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.

*****
p : and (Col Y P Q) (eq (DSeg P Y) (DSeg C D))
Y : Point
Th : sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_3_parallelogram P Y D C)))
+++++
clear Th.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.

*****
p : and (Col Y P Q) (eq (DSeg P Y) (DSeg C D))
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_3_parallelogram P Y D C)))
+++++
decompose [and] p.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.

*****
H2 : eq (DSeg P Y) (DSeg C D)
H1 : Col Y P Q
p : and (Col Y P Q) (eq (DSeg P Y) (DSeg C D))
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_3_parallelogram P Y D C)))
+++++
clear p.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.

*****
H2 : eq (DSeg P Y) (DSeg C D)
H1 : Col Y P Q
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_3_parallelogram P Y D C)))
+++++
exists Y.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.

*****
H2 : eq (DSeg P Y) (DSeg C D)
H1 : Col Y P Q
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_3_parallelogram P Y D C))
+++++
repeat split.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
repeat split.

*****
H2 : eq (DSeg P Y) (DSeg C D)
H1 : Col Y P Q
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col Y P Q
+++++
try assumption.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
repeat split.

*****
H2 : eq (DSeg P Y) (DSeg C D)
H1 : Col Y P Q
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg P Y) (DSeg C D)
+++++
try assumption.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
repeat split.

*****
H2 : eq (DSeg P Y) (DSeg C D)
H1 : Col Y P Q
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_3_parallelogram P Y D C
+++++
try assumption.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
repeat split.
try assumption.

*****
H2 : eq (DSeg P Y) (DSeg C D)
H1 : Col Y P Q
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_3_parallelogram P Y D C
+++++
apply parallel_side_eq_weak_weak_weak_para.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
repeat split.
try assumption.
apply parallel_side_eq_weak_weak_weak_para.

*****
H2 : eq (DSeg P Y) (DSeg C D)
H1 : Col Y P Q
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel P Y C D
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
repeat split.
try assumption.
apply parallel_side_eq_weak_weak_weak_para.
Geometry.

*****
H2 : eq (DSeg P Y) (DSeg C D)
H1 : Col Y P Q
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel P Y C D
+++++
cut (parallel C D P Y).
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
repeat split.
try assumption.
apply parallel_side_eq_weak_weak_weak_para.
Geometry.
cut (parallel C D P Y).

*****
H2 : eq (DSeg P Y) (DSeg C D)
H1 : Col Y P Q
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : parallel C D P Y, parallel P Y C D
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
repeat split.
try assumption.
apply parallel_side_eq_weak_weak_weak_para.
Geometry.
cut (parallel C D P Y).

*****
H2 : eq (DSeg P Y) (DSeg C D)
H1 : Col Y P Q
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel C D P Y
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
repeat split.
try assumption.
apply parallel_side_eq_weak_weak_weak_para.
Geometry.
cut (parallel C D P Y).
Geometry.

*****
H2 : eq (DSeg P Y) (DSeg C D)
H1 : Col Y P Q
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel C D P Y
+++++
eapply col_par_par.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
repeat split.
try assumption.
apply parallel_side_eq_weak_weak_weak_para.
Geometry.
cut (parallel C D P Y).
Geometry.
eapply col_par_par.

*****
H2 : eq (DSeg P Y) (DSeg C D)
H1 : Col Y P Q
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq P ?D)
+++++
apply H0.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
repeat split.
try assumption.
apply parallel_side_eq_weak_weak_weak_para.
Geometry.
cut (parallel C D P Y).
Geometry.
eapply col_par_par.

*****
H2 : eq (DSeg P Y) (DSeg C D)
H1 : Col Y P Q
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel C D P Q
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
repeat split.
try assumption.
apply parallel_side_eq_weak_weak_weak_para.
Geometry.
cut (parallel C D P Y).
Geometry.
eapply col_par_par.

*****
H2 : eq (DSeg P Y) (DSeg C D)
H1 : Col Y P Q
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col P Q Y
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
repeat split.
try assumption.
apply parallel_side_eq_weak_weak_weak_para.

*****
H2 : eq (DSeg P Y) (DSeg C D)
H1 : Col Y P Q
Y : Point
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg P Y) (DSeg C D)
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_f : forall P Q C D : Point, parallel P Q C D -> P<>Q -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_3_parallelogram P Y D C.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
repeat split.

*****

*****

+++++
Qed.
-----
Lemma on_line_dex_spec_strong_ter :\n   forall P Q C D : Point,\n   parallel P Q C D -> P<>Q -> \n   (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) ->\n    exists Y : Point, Col Y P Q /\ P ** Y = C ** D /\ weak_2_parallelogram P Y D C.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.

*****

*****
forall (P Q C D : Point) (_ : parallel P Q C D) (_ : not (eq P Q)) (_ : forall _ : eq P D, eq C D) (_ : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))), ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C)))
+++++
Proof.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.

*****

*****
forall (P Q C D : Point) (_ : parallel P Q C D) (_ : not (eq P Q)) (_ : forall _ : eq P D, eq C D) (_ : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))), ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C)))
+++++
intros.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.

*****
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C)))
+++++
assert (P<>D).
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).

*****
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq P D)
+++++
unfold not.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
unfold not.

*****
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : eq P D, False
+++++
intro.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
unfold not.
intro.

*****
H3 : eq P D
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
False
+++++
subst P.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
unfold not.
intro.
subst P.

*****
H : parallel D Q C D
H0 : not (eq D Q)
H1 : forall _ : eq D D, eq C D
H2 : forall _ : Col C D Q, not (eq (DSeg D C) (DSeg C D))
Q,C,D : Point
*****
False
+++++
assert (C=D).
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
unfold not.
intro.
subst P.
assert (C=D).

*****
H : parallel D Q C D
H0 : not (eq D Q)
H1 : forall _ : eq D D, eq C D
H2 : forall _ : Col C D Q, not (eq (DSeg D C) (DSeg C D))
Q,C,D : Point
*****
eq C D
+++++
intuition.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
unfold not.
intro.
subst P.
assert (C=D).

*****
H3 : eq C D
H : parallel D Q C D
H0 : not (eq D Q)
H1 : forall _ : eq D D, eq C D
H2 : forall _ : Col C D Q, not (eq (DSeg D C) (DSeg C D))
Q,C,D : Point
*****
False
+++++
subst D.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
unfold not.
intro.
subst P.
assert (C=D).
subst D.

*****
H2 : forall _ : Col C C Q, not (eq (DSeg C C) (DSeg C C))
H1 : forall _ : eq C C, eq C C
H0 : not (eq C Q)
H : parallel C Q C C
Q,C : Point
*****
False
+++++
assert (C**C<>C**C).
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
unfold not.
intro.
subst P.
assert (C=D).
subst D.
assert (C**C<>C**C).

*****
H2 : forall _ : Col C C Q, not (eq (DSeg C C) (DSeg C C))
H1 : forall _ : eq C C, eq C C
H0 : not (eq C Q)
H : parallel C Q C C
Q,C : Point
*****
not (eq (DSeg C C) (DSeg C C))
+++++
intuition.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
unfold not.
intro.
subst P.
assert (C=D).
subst D.
assert (C**C<>C**C).

*****
H3 : not (eq (DSeg C C) (DSeg C C))
H2 : forall _ : Col C C Q, not (eq (DSeg C C) (DSeg C C))
H1 : forall _ : eq C C, eq C C
H0 : not (eq C Q)
H : parallel C Q C C
Q,C : Point
*****
False
+++++
intuition.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).

*****
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C)))
+++++
assert (Th := (on_line_dex_spec P Q C D H0)).
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).

*****
Th : sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C)))
+++++
elim Th.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.

*****
Th : sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall (x : Point) (_ : and (Col x P Q) (eq (DSeg P x) (DSeg C D))), ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C)))
+++++
intro Y.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.

*****
Y : Point
Th : sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)), ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C)))
+++++
intros.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.

*****
p : and (Col Y P Q) (eq (DSeg P Y) (DSeg C D))
Y : Point
Th : sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C)))
+++++
clear Th.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.

*****
p : and (Col Y P Q) (eq (DSeg P Y) (DSeg C D))
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C)))
+++++
decompose [and] p.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.

*****
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
p : and (Col Y P Q) (eq (DSeg P Y) (DSeg C D))
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C)))
+++++
clear p.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.

*****
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C)))
+++++
cases_equality Y C.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.

*****
H6 : eq Y C
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C)))
+++++
subst Y.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
subst Y.

*****
H4 : Col C P Q
H5 : eq (DSeg P C) (DSeg C D)
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C)))
+++++
intuition.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
ex (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C)))
+++++
exists Y.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C))
+++++
split.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col Y P Q
+++++
try assumption.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C)
+++++
try assumption.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
and (eq (DSeg P Y) (DSeg C D)) (weak_2_parallelogram P Y D C)
+++++
split.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg P Y) (DSeg C D)
+++++
try assumption.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_2_parallelogram P Y D C
+++++
try assumption.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.
try assumption.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_2_parallelogram P Y D C
+++++
apply parallel_side_eq_weak_weak_para.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.
try assumption.
apply parallel_side_eq_weak_weak_para.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel P Y C D
+++++
cut (parallel C D P Y).
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.
try assumption.
apply parallel_side_eq_weak_weak_para.
cut (parallel C D P Y).

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : parallel C D P Y, parallel P Y C D
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.
try assumption.
apply parallel_side_eq_weak_weak_para.
cut (parallel C D P Y).

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel C D P Y
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.
try assumption.
apply parallel_side_eq_weak_weak_para.
cut (parallel C D P Y).
Geometry.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel C D P Y
+++++
eapply col_par_par.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.
try assumption.
apply parallel_side_eq_weak_weak_para.
cut (parallel C D P Y).
Geometry.
eapply col_par_par.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq P ?D)
+++++
apply H0.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.
try assumption.
apply parallel_side_eq_weak_weak_para.
cut (parallel C D P Y).
Geometry.
eapply col_par_par.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel C D P Q
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.
try assumption.
apply parallel_side_eq_weak_weak_para.
cut (parallel C D P Y).
Geometry.
eapply col_par_par.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col P Q Y
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.
try assumption.
apply parallel_side_eq_weak_weak_para.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
iff (eq P D) (eq Y C)
+++++
split.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.
try assumption.
apply parallel_side_eq_weak_weak_para.
split.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : eq P D, eq Y C
+++++
intro.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.
try assumption.
apply parallel_side_eq_weak_weak_para.
split.
intro.

*****
H7 : eq P D
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq Y C
+++++
intuition.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.
try assumption.
apply parallel_side_eq_weak_weak_para.
split.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : eq Y C, eq P D
+++++
intro.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.
try assumption.
apply parallel_side_eq_weak_weak_para.
split.
intro.

*****
H7 : eq Y C
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq P D
+++++
subst Y.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.
try assumption.
apply parallel_side_eq_weak_weak_para.
split.
intro.
subst Y.

*****
H4 : Col C P Q
H5 : eq (DSeg P C) (DSeg C D)
H6 : not (eq C C)
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq P D
+++++
intuition.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).
assert (Th := (on_line_dex_spec P Q C D H0)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
cases_equality Y C.
exists Y.
split.
try assumption.
split.
try assumption.
apply parallel_side_eq_weak_weak_para.

*****
H6 : not (eq Y C)
H5 : eq (DSeg P Y) (DSeg C D)
H4 : Col Y P Q
Y : Point
H3 : not (eq P D)
H2 : forall _ : Col C P Q, not (eq (DSeg P C) (DSeg C D))
H1 : forall _ : eq P D, eq C D
H0 : not (eq P Q)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg P Y) (DSeg C D)
+++++
auto.
-----
Lemma on_line_dex_spec_strong_ter : forall P Q C D : Point, parallel P Q C D -> P<>Q -> (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) -> exists Y : Point, Col Y P Q /\\ P ** Y = C ** D /\\ weak_2_parallelogram P Y D C.
Proof.
intros.
assert (P<>D).

*****

*****

+++++
Qed.
-----
Lemma on_line_dex_spec_strong_bis :\n    forall P Q C D : Point,\n    parallel P Q C D ->\n    C <> D ->\n    P <> D -> \n    Q<> C ->\n    P <> Q-> \n     (parallel P C C D -> P**C <> C**D) ->\n    {Y : Point | Col Y P Q /\ P ** Y = C ** D /\ weak_parallelogram P Y D C}.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.

*****

*****
forall (P Q C D : Point) (_ : parallel P Q C D) (_ : not (eq C D)) (_ : not (eq P D)) (_ : not (eq Q C)) (_ : not (eq P Q)) (_ : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))), sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_parallelogram P Y D C)))
+++++
Proof.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.

*****

*****
forall (P Q C D : Point) (_ : parallel P Q C D) (_ : not (eq C D)) (_ : not (eq P D)) (_ : not (eq Q C)) (_ : not (eq P Q)) (_ : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))), sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_parallelogram P Y D C)))
+++++
intros.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.

*****
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_parallelogram P Y D C)))
+++++
assert (Th := (on_line_dex_spec P Q C D H3)).
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).

*****
Th : sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_parallelogram P Y D C)))
+++++
elim Th.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.

*****
Th : sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall (x : Point) (_ : and (Col x P Q) (eq (DSeg P x) (DSeg C D))), sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_parallelogram P Y D C)))
+++++
intro Y.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.

*****
Y : Point
Th : sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)), sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_parallelogram P Y D C)))
+++++
intros.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.

*****
p : and (Col Y P Q) (eq (DSeg P Y) (DSeg C D))
Y : Point
Th : sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_parallelogram P Y D C)))
+++++
clear Th.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.

*****
p : and (Col Y P Q) (eq (DSeg P Y) (DSeg C D))
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_parallelogram P Y D C)))
+++++
decompose [and] p.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
p : and (Col Y P Q) (eq (DSeg P Y) (DSeg C D))
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_parallelogram P Y D C)))
+++++
clear p.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_parallelogram P Y D C)))
+++++
exists Y.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (weak_parallelogram P Y D C))
+++++
split.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col Y P Q
+++++
assumption.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
and (eq (DSeg P Y) (DSeg C D)) (weak_parallelogram P Y D C)
+++++
split.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg P Y) (DSeg C D)
+++++
assumption.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
weak_parallelogram P Y D C
+++++
apply parallel_side_eq_weak_para.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel P Y C D
+++++
try assumption.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel P Y C D
+++++
cut (parallel C D P Y).
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
cut (parallel C D P Y).

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : parallel C D P Y, parallel P Y C D
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
cut (parallel C D P Y).

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel C D P Y
+++++
eapply col_par_par.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
cut (parallel C D P Y).
eapply col_par_par.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq P ?D)
+++++
eauto.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
cut (parallel C D P Y).
eapply col_par_par.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel C D P Q
+++++
eauto.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
cut (parallel C D P Y).
eapply col_par_par.
eauto.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel C D P Q
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
cut (parallel C D P Y).
eapply col_par_par.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col P Q Y
+++++
eauto.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
cut (parallel C D P Y).
eapply col_par_par.
eauto.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col P Q Y
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq C D)
+++++
try assumption.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq P D)
+++++
try assumption.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq Y C)
+++++
try assumption.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq Y C)
+++++
unfold not.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : eq Y C, False
+++++
intro.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.

*****
H7 : eq Y C
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
False
+++++
subst Y.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.

*****
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
False
+++++
assert (Col P Q D).
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).

*****
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col P Q D
+++++
eapply par_col_col_1.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).
eapply par_col_col_1.

*****
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel P Q ?C D
+++++
apply H.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).
eapply par_col_col_1.

*****
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col P Q C
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).

*****
H7 : Col P Q D
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
False
+++++
assert (Col P C D).
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).
assert (Col P C D).

*****
H7 : Col P Q D
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col P C D
+++++
eapply col_trans_1 with (B:=Q).
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).
assert (Col P C D).
eapply col_trans_1 with (B:=Q).

*****
H7 : Col P Q D
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq P Q)
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).
assert (Col P C D).
eapply col_trans_1 with (B:=Q).

*****
H7 : Col P Q D
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col P Q C
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).
assert (Col P C D).
eapply col_trans_1 with (B:=Q).

*****
H7 : Col P Q D
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col P Q D
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).
assert (Col P C D).

*****
H8 : Col P C D
H7 : Col P Q D
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
False
+++++
assert (parallel P C C D).
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).
assert (Col P C D).
assert (parallel P C C D).

*****
H8 : Col P C D
H7 : Col P Q D
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel P C C D
+++++
unfold parallel.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).
assert (Col P C D).
assert (parallel P C C D).
unfold parallel.

*****
H8 : Col P C D
H7 : Col P Q D
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (S4 P C C D) F0
+++++
unfold S4.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).
assert (Col P C D).
assert (parallel P C C D).
unfold parallel.
unfold S4.

*****
H8 : Col P C D
H7 : Col P Q D
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (Fplus (S P C C) (S P C D)) F0
+++++
basic_simpl.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).
assert (Col P C D).
assert (parallel P C C D).
unfold parallel.
unfold S4.
basic_simpl.

*****
H8 : Col P C D
H7 : Col P Q D
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (S P C D) F0
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).
assert (Col P C D).
assert (parallel P C C D).

*****
H9 : parallel P C C D
H8 : Col P C D
H7 : Col P Q D
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
False
+++++
assert ( P ** C <> C ** D).
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).
assert (Col P C D).
assert (parallel P C C D).
assert ( P ** C <> C ** D).

*****
H9 : parallel P C C D
H8 : Col P C D
H7 : Col P Q D
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq (DSeg P C) (DSeg C D))
+++++
apply H4.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).
assert (Col P C D).
assert (parallel P C C D).
assert ( P ** C <> C ** D).
apply H4.

*****
H9 : parallel P C C D
H8 : Col P C D
H7 : Col P Q D
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel P C C D
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.
try assumption.
unfold not.
intro.
subst Y.
assert (Col P Q D).
assert (Col P C D).
assert (parallel P C C D).
assert ( P ** C <> C ** D).

*****
H10 : not (eq (DSeg P C) (DSeg C D))
H9 : parallel P C C D
H8 : Col P C D
H7 : Col P Q D
H5 : Col C P Q
H6 : eq (DSeg P C) (DSeg C D)
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
False
+++++
intuition.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply parallel_side_eq_weak_para.

*****
H6 : eq (DSeg P Y) (DSeg C D)
H5 : Col Y P Q
Y : Point
H4 : forall _ : parallel P C C D, not (eq (DSeg P C) (DSeg C D))
H3 : not (eq P Q)
H2 : not (eq Q C)
H1 : not (eq P D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg P Y) (DSeg C D)
+++++
try assumption.
-----
Lemma on_line_dex_spec_strong_bis : forall P Q C D : Point, parallel P Q C D -> C <> D -> P <> D -> Q<> C -> P <> Q-> (parallel P C C D -> P**C <> C**D) -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ weak_parallelogram P Y D C}.
Proof.
intros.
assert (Th := (on_line_dex_spec P Q C D H3)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.

*****

*****

+++++
Qed.
-----
Lemma on_line_dex_spec_strong :\n    forall P Q C D : Point,\n    parallel P Q C D ->\n    C <> D ->\n    ~ Col P Q D ->\n    {Y : Point | Col Y P Q /\ P ** Y = C ** D /\ parallelogram P Y D C}.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.

*****

*****
forall (P Q C D : Point) (_ : parallel P Q C D) (_ : not (eq C D)) (_ : not (Col P Q D)), sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (parallelogram P Y D C)))
+++++
Proof.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.

*****

*****
forall (P Q C D : Point) (_ : parallel P Q C D) (_ : not (eq C D)) (_ : not (Col P Q D)), sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (parallelogram P Y D C)))
+++++
intros.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.

*****
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (parallelogram P Y D C)))
+++++
assert (P<>Q).
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).

*****
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq P Q)
+++++
eauto with Geom.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).

*****
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (parallelogram P Y D C)))
+++++
assert (Th := (on_line_dex_spec P Q C D H2)).
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).

*****
Th : sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (parallelogram P Y D C)))
+++++
elim Th.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.

*****
Th : sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall (x : Point) (_ : and (Col x P Q) (eq (DSeg P x) (DSeg C D))), sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (parallelogram P Y D C)))
+++++
intro Y.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.

*****
Y : Point
Th : sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)), sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (parallelogram P Y D C)))
+++++
intros.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.

*****
p : and (Col Y P Q) (eq (DSeg P Y) (DSeg C D))
Y : Point
Th : sig (fun Y : Point => and (Col Y P Q) (eq (DSeg P Y) (DSeg C D)))
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (parallelogram P Y D C)))
+++++
clear Th.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.

*****
p : and (Col Y P Q) (eq (DSeg P Y) (DSeg C D))
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (parallelogram P Y D C)))
+++++
decompose [and] p.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.

*****
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
p : and (Col Y P Q) (eq (DSeg P Y) (DSeg C D))
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (parallelogram P Y D C)))
+++++
clear p.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.

*****
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
sig (fun Y : Point => and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (parallelogram P Y D C)))
+++++
exists Y.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.

*****
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
and (Col Y P Q) (and (eq (DSeg P Y) (DSeg C D)) (parallelogram P Y D C))
+++++
split.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.

*****
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col Y P Q
+++++
assumption.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.

*****
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
and (eq (DSeg P Y) (DSeg C D)) (parallelogram P Y D C)
+++++
split.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.

*****
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg P Y) (DSeg C D)
+++++
assumption.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.

*****
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallelogram P Y D C
+++++
apply two_sides_par_eq_parallelogram.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.

*****
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel P Y D C
+++++
cut (parallel C D P Y).
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.
cut (parallel C D P Y).

*****
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : parallel C D P Y, parallel P Y D C
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.
cut (parallel C D P Y).

*****
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel C D P Y
+++++
apply (col_par_par C D P Q Y).
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.
cut (parallel C D P Y).
apply (col_par_par C D P Q Y).

*****
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq P Q)
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.
cut (parallel C D P Y).
apply (col_par_par C D P Q Y).

*****
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
parallel C D P Q
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.
cut (parallel C D P Y).
apply (col_par_par C D P Q Y).

*****
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col P Q Y
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.

*****
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (Col P Y D)
+++++
unfold not.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.
unfold not.

*****
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
forall _ : Col P Y D, False
+++++
intro.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.
unfold not.
intro.

*****
H5 : Col P Y D
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
False
+++++
assert (Col P Y Q).
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.
unfold not.
intro.
assert (Col P Y Q).

*****
H5 : Col P Y D
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col P Y Q
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.
unfold not.
intro.
assert (Col P Y Q).

*****
H6 : Col P Y Q
H5 : Col P Y D
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
False
+++++
Geometry.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.
unfold not.
intro.
assert (Col P Y Q).
Geometry.

*****
H6 : Col P Y Q
H5 : Col P Y D
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
False
+++++
assert (P<>Y).
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.
unfold not.
intro.
assert (Col P Y Q).
Geometry.
assert (P<>Y).

*****
H6 : Col P Y Q
H5 : Col P Y D
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq P Y)
+++++
eapply eq_diff_diff.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.
unfold not.
intro.
assert (Col P Y Q).
Geometry.
assert (P<>Y).
eapply eq_diff_diff.

*****
H6 : Col P Y Q
H5 : Col P Y D
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
not (eq ?A ?B)
+++++
apply H0.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.
unfold not.
intro.
assert (Col P Y Q).
Geometry.
assert (P<>Y).
eapply eq_diff_diff.

*****
H6 : Col P Y Q
H5 : Col P Y D
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg C D) (DSeg P Y)
+++++
auto.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.
unfold not.
intro.
assert (Col P Y Q).
Geometry.
assert (P<>Y).

*****
H7 : not (eq P Y)
H6 : Col P Y Q
H5 : Col P Y D
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
False
+++++
assert (Col P Q D).
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.
unfold not.
intro.
assert (Col P Y Q).
Geometry.
assert (P<>Y).
assert (Col P Q D).

*****
H7 : not (eq P Y)
H6 : Col P Y Q
H5 : Col P Y D
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
Col P Q D
+++++
eapply col_trans_1; apply H7 || auto.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.
unfold not.
intro.
assert (Col P Y Q).
Geometry.
assert (P<>Y).
assert (Col P Q D).

*****
H8 : Col P Q D
H7 : not (eq P Y)
H6 : Col P Y Q
H5 : Col P Y D
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
False
+++++
intuition.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).
assert (Th := (on_line_dex_spec P Q C D H2)).
elim Th.
intro Y.
intros.
clear Th.
decompose [and] p.
clear p.
exists Y.
split.
split.
apply two_sides_par_eq_parallelogram.

*****
H4 : eq (DSeg P Y) (DSeg C D)
H3 : Col Y P Q
Y : Point
H2 : not (eq P Q)
H1 : not (Col P Q D)
H0 : not (eq C D)
H : parallel P Q C D
P,Q,C,D : Point
*****
eq (DSeg P Y) (DSeg C D)
+++++
assumption.
-----
Lemma on_line_dex_spec_strong : forall P Q C D : Point, parallel P Q C D -> C <> D -> ~ Col P Q D -> {Y : Point | Col Y P Q /\\ P ** Y = C ** D /\\ parallelogram P Y D C}.
Proof.
intros.
assert (P<>Q).

*****

*****

+++++
Qed.
-----
Theorem l2_15 :\n  forall A B P Q : Point,\n  parallel P Q A B -> ~ Col A Q P -> \n  A ** B / P ** Q = S P A B / S A Q P.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.

*****

*****
forall (A B P Q : Point) (_ : parallel P Q A B) (_ : not (Col A Q P)), eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
Proof.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.

*****

*****
forall (A B P Q : Point) (_ : parallel P Q A B) (_ : not (Col A Q P)), eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
intros.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.

*****
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
cases_equality A B.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.

*****
H1 : eq A B
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
assert (A ** B = 0).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (A ** B = 0).

*****
H1 : eq A B
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (DSeg A B) F0
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (A ** B = 0).

*****
H2 : eq (DSeg A B) F0
H1 : eq A B
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (A ** B = 0).
Geometry.

*****
H2 : eq (DSeg A B) F0
H1 : eq A B
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
assert (S P A B = 0).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (A ** B = 0).
Geometry.
assert (S P A B = 0).

*****
H2 : eq (DSeg A B) F0
H1 : eq A B
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P A B) F0
+++++
rewrite H1.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (A ** B = 0).
Geometry.
assert (S P A B = 0).
rewrite H1.

*****
H2 : eq (DSeg A B) F0
H1 : eq A B
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P B B) F0
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (A ** B = 0).
Geometry.
assert (S P A B = 0).

*****
H3 : eq (S P A B) F0
H2 : eq (DSeg A B) F0
H1 : eq A B
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
assert (P <> Q).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (A ** B = 0).
Geometry.
assert (S P A B = 0).
assert (P <> Q).

*****
H3 : eq (S P A B) F0
H2 : eq (DSeg A B) F0
H1 : eq A B
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
not (eq P Q)
+++++
eauto with Geom.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (A ** B = 0).
Geometry.
assert (S P A B = 0).
assert (P <> Q).

*****
H4 : not (eq P Q)
H3 : eq (S P A B) F0
H2 : eq (DSeg A B) F0
H1 : eq A B
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
eauto with Geom.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (A ** B = 0).
Geometry.
assert (S P A B = 0).
assert (P <> Q).
eauto with Geom.

*****
H4 : not (eq P Q)
H3 : eq (S P A B) F0
H2 : eq (DSeg A B) F0
H1 : eq A B
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (A ** B = 0).
Geometry.
assert (S P A B = 0).
assert (P <> Q).
eauto with Geom.
Geometry.

*****
H4 : not (eq P Q)
H3 : eq (S P A B) F0
H2 : eq (DSeg A B) F0
H1 : eq A B
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
rewrite H2.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (A ** B = 0).
Geometry.
assert (S P A B = 0).
assert (P <> Q).
eauto with Geom.
Geometry.
rewrite H2.

*****
H4 : not (eq P Q)
H3 : eq (S P A B) F0
H2 : eq (DSeg A B) F0
H1 : eq A B
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv F0 (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
rewrite H3.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (A ** B = 0).
Geometry.
assert (S P A B = 0).
assert (P <> Q).
eauto with Geom.
Geometry.
rewrite H2.
rewrite H3.

*****
H4 : not (eq P Q)
H3 : eq (S P A B) F0
H2 : eq (DSeg A B) F0
H1 : eq A B
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv F0 (DSeg P Q)) (Fdiv F0 (S A Q P))
+++++
field.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (A ** B = 0).
Geometry.
assert (S P A B = 0).
assert (P <> Q).
eauto with Geom.
Geometry.
rewrite H2.
rewrite H3.
field.

*****
H4 : not (eq P Q)
H3 : eq (S P A B) F0
H2 : eq (DSeg A B) F0
H1 : eq A B
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
and (not (eq (S A Q P) F0)) (not (eq (DSeg P Q) F0))
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.

*****
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
assert (parallel A B P Q).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).

*****
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
parallel A B P Q
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).

*****
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.

*****
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
assert (T: P<>Q).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).

*****
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
not (eq P Q)
+++++
eauto with Geom.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).

*****
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
assert (U: ~ Col A B Q).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).

*****
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
not (Col A B Q)
+++++
eapply diff_not_col_par_not_col with (Q:=P).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
eapply diff_not_col_par_not_col with (Q:=P).

*****
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
not (eq A B)
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
eapply diff_not_col_par_not_col with (Q:=P).

*****
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
not (Col A P Q)
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
eapply diff_not_col_par_not_col with (Q:=P).

*****
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
parallel A B Q P
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).

*****
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).

*****
Th : sig\n (fun Y : Point =>\n and (Col Y A B)\n (and (eq (DSeg A Y) (DSeg P Q)) (parallelogram A Y Q P)))
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.

*****
Th : sig\n (fun Y : Point =>\n and (Col Y A B)\n (and (eq (DSeg A Y) (DSeg P Q)) (parallelogram A Y Q P)))
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
elim Th.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.

*****
Th : sig\n (fun Y : Point =>\n and (Col Y A B)\n (and (eq (DSeg A Y) (DSeg P Q)) (parallelogram A Y Q P)))
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
forall (x : Point) (_ : and (Col x A B) (and (eq (DSeg A x) (DSeg P Q)) (parallelogram A x Q P))), eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
intro R.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.

*****
R : Point
Th : sig\n (fun Y : Point =>\n and (Col Y A B)\n (and (eq (DSeg A Y) (DSeg P Q)) (parallelogram A Y Q P)))
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
forall _ : and (Col R A B) (and (eq (DSeg A R) (DSeg P Q)) (parallelogram A R Q P)), eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
intros.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.

*****
p : and (Col R A B)\n (and (eq (DSeg A R) (DSeg P Q)) (parallelogram A R Q P))
R : Point
Th : sig\n (fun Y : Point =>\n and (Col Y A B)\n (and (eq (DSeg A Y) (DSeg P Q)) (parallelogram A Y Q P)))
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
clear Th.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.

*****
p : and (Col R A B)\n (and (eq (DSeg A R) (DSeg P Q)) (parallelogram A R Q P))
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.

*****
p : and (Col R A B)\n (and (eq (DSeg A R) (DSeg P Q)) (parallelogram A R Q P))
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
decompose [and] p.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.

*****
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
p : and (Col R A B)\n (and (eq (DSeg A R) (DSeg P Q)) (parallelogram A R Q P))
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
clear p.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.

*****
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.

*****
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg P Q)) (Fdiv (S P A B) (S A Q P))
+++++
rewrite <- H5.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.

*****
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S A Q P))
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.

*****
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S A Q P))
+++++
assert (A <> R).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).

*****
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
not (eq A R)
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.

*****
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
not (eq A R)
+++++
unfold not in |- *.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
unfold not in |- *.

*****
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
forall _ : eq A R, False
+++++
intro.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
unfold not in |- *.
intro.

*****
H4 : eq A R
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
False
+++++
assert (A ** R = 0).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
unfold not in |- *.
intro.
assert (A ** R = 0).

*****
H4 : eq A R
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (DSeg A R) F0
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
unfold not in |- *.
intro.
assert (A ** R = 0).

*****
H7 : eq (DSeg A R) F0
H4 : eq A R
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
False
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
unfold not in |- *.
intro.
assert (A ** R = 0).
Geometry.

*****
H7 : eq (DSeg A R) F0
H4 : eq A R
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
False
+++++
rewrite H7 in H5.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
unfold not in |- *.
intro.
assert (A ** R = 0).
Geometry.
rewrite H7 in H5.

*****
H7 : eq (DSeg A R) F0
H4 : eq A R
H6 : parallelogram A R Q P
H5 : eq F0 (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
False
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).

*****
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S A Q P))
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.

*****
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S A Q P))
+++++
suppose (~ Col P A R).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).

*****
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S A Q P))
+++++
assert (A ** B / A ** R = S P A B / S P A R).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).

*****
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).

*****
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S A Q P))
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.

*****
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S A Q P))
+++++
rewrite H8.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.

*****
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (S P A B) (S P A R)) (Fdiv (S P A B) (S A Q P))
+++++
assert (S P A R = S A Q P).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).

*****
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P A R) (S A Q P)
+++++
assert (S A P A + S Q P A = S R P A + S P P A).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).

*****
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fplus (S A P A) (S Q P A)) (Fplus (S R P A) (S P P A))
+++++
apply l2_11a.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
apply l2_11a.

*****
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
parallelogram A R Q P
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).

*****
H9 : eq (Fplus (S A P A) (S Q P A)) (Fplus (S R P A) (S P P A))
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P A R) (S A Q P)
+++++
assert (S A P A = 0).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).

*****
H9 : eq (Fplus (S A P A) (S Q P A)) (Fplus (S R P A) (S P P A))
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S A P A) F0
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).

*****
H10 : eq (S A P A) F0
H9 : eq (Fplus (S A P A) (S Q P A)) (Fplus (S R P A) (S P P A))
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P A R) (S A Q P)
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).
Geometry.

*****
H10 : eq (S A P A) F0
H9 : eq (Fplus (S A P A) (S Q P A)) (Fplus (S R P A) (S P P A))
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P A R) (S A Q P)
+++++
assert (S P P A = 0).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).
Geometry.
assert (S P P A = 0).

*****
H10 : eq (S A P A) F0
H9 : eq (Fplus (S A P A) (S Q P A)) (Fplus (S R P A) (S P P A))
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P P A) F0
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).
Geometry.
assert (S P P A = 0).

*****
H11 : eq (S P P A) F0
H10 : eq (S A P A) F0
H9 : eq (Fplus (S A P A) (S Q P A)) (Fplus (S R P A) (S P P A))
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P A R) (S A Q P)
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).
Geometry.
assert (S P P A = 0).
Geometry.

*****
H11 : eq (S P P A) F0
H10 : eq (S A P A) F0
H9 : eq (Fplus (S A P A) (S Q P A)) (Fplus (S R P A) (S P P A))
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P A R) (S A Q P)
+++++
rewrite H10 in H9.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).
Geometry.
assert (S P P A = 0).
Geometry.
rewrite H10 in H9.

*****
H11 : eq (S P P A) F0
H10 : eq (S A P A) F0
H9 : eq (Fplus F0 (S Q P A)) (Fplus (S R P A) (S P P A))
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P A R) (S A Q P)
+++++
rewrite H11 in H9.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).
Geometry.
assert (S P P A = 0).
Geometry.
rewrite H10 in H9.
rewrite H11 in H9.

*****
H11 : eq (S P P A) F0
H10 : eq (S A P A) F0
H9 : eq (Fplus F0 (S Q P A)) (Fplus (S R P A) F0)
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P A R) (S A Q P)
+++++
assert (S A Q P = S Q P A).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).
Geometry.
assert (S P P A = 0).
Geometry.
rewrite H10 in H9.
rewrite H11 in H9.
assert (S A Q P = S Q P A).

*****
H11 : eq (S P P A) F0
H10 : eq (S A P A) F0
H9 : eq (Fplus F0 (S Q P A)) (Fplus (S R P A) F0)
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S A Q P) (S Q P A)
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).
Geometry.
assert (S P P A = 0).
Geometry.
rewrite H10 in H9.
rewrite H11 in H9.
assert (S A Q P = S Q P A).

*****
H12 : eq (S A Q P) (S Q P A)
H11 : eq (S P P A) F0
H10 : eq (S A P A) F0
H9 : eq (Fplus F0 (S Q P A)) (Fplus (S R P A) F0)
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P A R) (S A Q P)
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).
Geometry.
assert (S P P A = 0).
Geometry.
rewrite H10 in H9.
rewrite H11 in H9.
assert (S A Q P = S Q P A).
Geometry.

*****
H12 : eq (S A Q P) (S Q P A)
H11 : eq (S P P A) F0
H10 : eq (S A P A) F0
H9 : eq (Fplus F0 (S Q P A)) (Fplus (S R P A) F0)
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P A R) (S A Q P)
+++++
assert (S P A R = S R P A).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).
Geometry.
assert (S P P A = 0).
Geometry.
rewrite H10 in H9.
rewrite H11 in H9.
assert (S A Q P = S Q P A).
Geometry.
assert (S P A R = S R P A).

*****
H12 : eq (S A Q P) (S Q P A)
H11 : eq (S P P A) F0
H10 : eq (S A P A) F0
H9 : eq (Fplus F0 (S Q P A)) (Fplus (S R P A) F0)
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P A R) (S R P A)
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).
Geometry.
assert (S P P A = 0).
Geometry.
rewrite H10 in H9.
rewrite H11 in H9.
assert (S A Q P = S Q P A).
Geometry.
assert (S P A R = S R P A).

*****
H13 : eq (S P A R) (S R P A)
H12 : eq (S A Q P) (S Q P A)
H11 : eq (S P P A) F0
H10 : eq (S A P A) F0
H9 : eq (Fplus F0 (S Q P A)) (Fplus (S R P A) F0)
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P A R) (S A Q P)
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).
Geometry.
assert (S P P A = 0).
Geometry.
rewrite H10 in H9.
rewrite H11 in H9.
assert (S A Q P = S Q P A).
Geometry.
assert (S P A R = S R P A).
Geometry.

*****
H13 : eq (S P A R) (S R P A)
H12 : eq (S A Q P) (S Q P A)
H11 : eq (S P P A) F0
H10 : eq (S A P A) F0
H9 : eq (Fplus F0 (S Q P A)) (Fplus (S R P A) F0)
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P A R) (S A Q P)
+++++
rewrite H12.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).
Geometry.
assert (S P P A = 0).
Geometry.
rewrite H10 in H9.
rewrite H11 in H9.
assert (S A Q P = S Q P A).
Geometry.
assert (S P A R = S R P A).
Geometry.
rewrite H12.

*****
H13 : eq (S P A R) (S R P A)
H12 : eq (S A Q P) (S Q P A)
H11 : eq (S P P A) F0
H10 : eq (S A P A) F0
H9 : eq (Fplus F0 (S Q P A)) (Fplus (S R P A) F0)
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S P A R) (S Q P A)
+++++
rewrite H13.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).
Geometry.
assert (S P P A = 0).
Geometry.
rewrite H10 in H9.
rewrite H11 in H9.
assert (S A Q P = S Q P A).
Geometry.
assert (S P A R = S R P A).
Geometry.
rewrite H12.
rewrite H13.

*****
H13 : eq (S P A R) (S R P A)
H12 : eq (S A Q P) (S Q P A)
H11 : eq (S P P A) F0
H10 : eq (S A P A) F0
H9 : eq (Fplus F0 (S Q P A)) (Fplus (S R P A) F0)
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S R P A) (S Q P A)
+++++
NormalizeRing H9.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
assert (S A P A + S Q P A = S R P A + S P P A).
assert (S A P A = 0).
Geometry.
assert (S P P A = 0).
Geometry.
rewrite H10 in H9.
rewrite H11 in H9.
assert (S A Q P = S Q P A).
Geometry.
assert (S P A R = S R P A).
Geometry.
rewrite H12.
rewrite H13.
NormalizeRing H9.

*****
H9 : eq (S Q P A) (S R P A)
H13 : eq (S P A R) (S R P A)
H12 : eq (S A Q P) (S Q P A)
H11 : eq (S P P A) F0
H10 : eq (S A P A) F0
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (S R P A) (S Q P A)
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).

*****
H9 : eq (S P A R) (S A Q P)
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (S P A B) (S P A R)) (Fdiv (S P A B) (S A Q P))
+++++
rewrite H9.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
assert (A ** B / A ** R = S P A B / S P A R).
Geometry.
rewrite H8.
assert (S P A R = S A Q P).
rewrite H9.

*****
H9 : eq (S P A R) (S A Q P)
H8 : eq (Fdiv (DSeg A B) (DSeg A R)) (Fdiv (S P A B) (S P A R))
H7 : not (Col P A R)
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
eq (Fdiv (S P A B) (S A Q P)) (Fdiv (S P A B) (S A Q P))
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).

*****
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : parallel A B P Q
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
not (Col P A R)
+++++
unfold parallel in H2.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.

*****
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (S4 A P B Q) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
not (Col P A R)
+++++
unfold S4 in H2.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.

*****
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
not (Col P A R)
+++++
unfold not in |- *.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.

*****
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
forall _ : Col P A R, False
+++++
intro.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.

*****
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
False
+++++
assert (Col R A P).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).

*****
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
Col R A P
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).

*****
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
False
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.

*****
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
False
+++++
assert (Col R B P).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).

*****
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
Col R B P
+++++
apply col_1.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
apply col_1.

*****
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
Col B R P
+++++
apply col_1.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
apply col_1.
apply col_1.

*****
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
Col R B P
+++++
apply col_2.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
apply col_1.
apply col_1.
apply col_2.

*****
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
Col R P B
+++++
eapply col_trans_1.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
apply col_1.
apply col_1.
apply col_2.
eapply col_trans_1.

*****
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
not (eq R ?B)
+++++
eapply sym_not_eq.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
apply col_1.
apply col_1.
apply col_2.
eapply col_trans_1.
eapply sym_not_eq.

*****
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
not (eq ?B R)
+++++
eexact H4.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
apply col_1.
apply col_1.
apply col_2.
eapply col_trans_1.

*****
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
Col R A P
+++++
auto.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
apply col_1.
apply col_1.
apply col_2.
eapply col_trans_1.

*****
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
Col R A B
+++++
auto.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).

*****
H9 : Col R B P
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
False
+++++
assert (Col A B P).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
assert (Col A B P).

*****
H9 : Col R B P
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
Col A B P
+++++
apply col_2.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
assert (Col A B P).
apply col_2.

*****
H9 : Col R B P
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
Col A P B
+++++
eapply col_trans_1.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
assert (Col A B P).
apply col_2.
eapply col_trans_1.

*****
H9 : Col R B P
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
not (eq A ?B)
+++++
eexact H4.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
assert (Col A B P).
apply col_2.
eapply col_trans_1.

*****
H9 : Col R B P
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
Col A R P
+++++
apply col_1.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
assert (Col A B P).
apply col_2.
eapply col_trans_1.
apply col_1.

*****
H9 : Col R B P
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
Col R A P
+++++
eexact H8.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
assert (Col A B P).
apply col_2.
eapply col_trans_1.

*****
H9 : Col R B P
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
Col A R B
+++++
apply col_1.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
assert (Col A B P).
apply col_2.
eapply col_trans_1.
apply col_1.

*****
H9 : Col R B P
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
Col R A B
+++++
eexact H3.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
assert (Col A B P).

*****
H10 : Col A B P
H9 : Col R B P
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
False
+++++
assert (Col A P B).
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
assert (Col A B P).
assert (Col A P B).

*****
H10 : Col A B P
H9 : Col R B P
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
Col A P B
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
assert (Col A B P).
assert (Col A P B).

*****
H11 : Col A P B
H10 : Col A B P
H9 : Col R B P
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
False
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
assert (Col A B P).
assert (Col A P B).
Geometry.

*****
H11 : Col A P B
H10 : Col A B P
H9 : Col R B P
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus (S A P B) (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
False
+++++
rewrite H11 in H2.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
assert (Col A B P).
assert (Col A P B).
Geometry.
rewrite H11 in H2.

*****
H11 : Col A P B
H10 : Col A B P
H9 : Col R B P
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H2 : eq (Fplus F0 (S A B Q)) F0
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
False
+++++
NormalizeRing H2.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.
assert (parallel A B P Q).
Geometry.
assert (T: P<>Q).
assert (U: ~ Col A B Q).
assert (Th := on_line_dex_spec_strong A B P Q H2 T U).
Geometry.
elim Th.
intro R.
intros.
clear Th.
Geometry.
decompose [and] p.
clear p.
Geometry.
rewrite <- H5.
Geometry.
assert (A <> R).
Geometry.
suppose (~ Col P A R).
unfold parallel in H2.
unfold S4 in H2.
unfold not in |- *.
intro.
assert (Col R A P).
Geometry.
assert (Col R B P).
assert (Col A B P).
assert (Col A P B).
Geometry.
rewrite H11 in H2.
NormalizeRing H2.

*****
H2 : eq (S A B Q) F0
H11 : Col A P B
H10 : Col A B P
H9 : Col R B P
H8 : Col R A P
H7 : Col P A R
H4 : not (eq A R)
H6 : parallelogram A R Q P
H5 : eq (DSeg A R) (DSeg P Q)
H3 : Col R A B
R : Point
U : not (Col A B Q)
T : not (eq P Q)
H1 : not (eq A B)
H0 : not (Col A Q P)
H : parallel P Q A B
A,B,P,Q : Point
*****
False
+++++
Geometry.
-----
Theorem l2_15 : forall A B P Q : Point, parallel P Q A B -> ~ Col A Q P -> A ** B / P ** Q = S P A B / S A Q P.
Proof.
intros.
cases_equality A B.

*****

*****

+++++
Qed.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_1 : \n  forall A B C D, \n  weak_3_parallelogram A B C D -> \n  weak_3_parallelogram B C D A.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_1 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram B C D A.

*****

*****
forall (A B C D : Point) (_ : weak_3_parallelogram A B C D), weak_3_parallelogram B C D A
+++++
Proof.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_1 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram B C D A.
Proof.

*****

*****
forall (A B C D : Point) (_ : weak_3_parallelogram A B C D), weak_3_parallelogram B C D A
+++++
intros.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_1 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram B C D A.
Proof.
intros.

*****
H : weak_3_parallelogram A B C D
A,B,C,D : Point
*****
weak_3_parallelogram B C D A
+++++
unfold weak_3_parallelogram in *.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_1 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram B C D A.
Proof.
intros.
unfold weak_3_parallelogram in *.

*****
H : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
A,B,C,D : Point
*****
ex (fun O : Point => and (mid_point O B D) (mid_point O C A))
+++++
DecompExAnd H X.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_1 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram B C D A.
Proof.
intros.
unfold weak_3_parallelogram in *.
DecompExAnd H X.

*****
H2 : mid_point X B D
H1 : mid_point X A C
A,B,C,D,X : Point
*****
ex (fun O : Point => and (mid_point O B D) (mid_point O C A))
+++++
exists X.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_1 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram B C D A.
Proof.
intros.
unfold weak_3_parallelogram in *.
DecompExAnd H X.
exists X.

*****
H2 : mid_point X B D
H1 : mid_point X A C
A,B,C,D,X : Point
*****
and (mid_point X B D) (mid_point X C A)
+++++
Geometry.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_1 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram B C D A.
Proof.
intros.
unfold weak_3_parallelogram in *.
DecompExAnd H X.
exists X.
Geometry.

*****

*****

+++++
Qed.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_2 : \n  forall A B C D, \n  weak_3_parallelogram A B C D -> \n  weak_3_parallelogram C D A B.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_2 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram C D A B.

*****

*****
forall (A B C D : Point) (_ : weak_3_parallelogram A B C D), weak_3_parallelogram C D A B
+++++
Proof.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_2 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram C D A B.
Proof.

*****

*****
forall (A B C D : Point) (_ : weak_3_parallelogram A B C D), weak_3_parallelogram C D A B
+++++
intros.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_2 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram C D A B.
Proof.
intros.

*****
H : weak_3_parallelogram A B C D
A,B,C,D : Point
*****
weak_3_parallelogram C D A B
+++++
unfold weak_3_parallelogram in *.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_2 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram C D A B.
Proof.
intros.
unfold weak_3_parallelogram in *.

*****
H : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
A,B,C,D : Point
*****
ex (fun O : Point => and (mid_point O C A) (mid_point O D B))
+++++
DecompExAnd H X.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_2 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram C D A B.
Proof.
intros.
unfold weak_3_parallelogram in *.
DecompExAnd H X.

*****
H2 : mid_point X B D
H1 : mid_point X A C
A,B,C,D,X : Point
*****
ex (fun O : Point => and (mid_point O C A) (mid_point O D B))
+++++
exists X.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_2 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram C D A B.
Proof.
intros.
unfold weak_3_parallelogram in *.
DecompExAnd H X.
exists X.

*****
H2 : mid_point X B D
H1 : mid_point X A C
A,B,C,D,X : Point
*****
and (mid_point X C A) (mid_point X D B)
+++++
Geometry.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_2 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram C D A B.
Proof.
intros.
unfold weak_3_parallelogram in *.
DecompExAnd H X.
exists X.
Geometry.

*****

*****

+++++
Qed.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_3 : \n  forall A B C D, \n  weak_3_parallelogram A B C D -> \n  weak_3_parallelogram D A B C.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_3 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram D A B C.

*****

*****
forall (A B C D : Point) (_ : weak_3_parallelogram A B C D), weak_3_parallelogram D A B C
+++++
Proof.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_3 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram D A B C.
Proof.

*****

*****
forall (A B C D : Point) (_ : weak_3_parallelogram A B C D), weak_3_parallelogram D A B C
+++++
intros.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_3 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram D A B C.
Proof.
intros.

*****
H : weak_3_parallelogram A B C D
A,B,C,D : Point
*****
weak_3_parallelogram D A B C
+++++
unfold weak_3_parallelogram in *.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_3 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram D A B C.
Proof.
intros.
unfold weak_3_parallelogram in *.

*****
H : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
A,B,C,D : Point
*****
ex (fun O : Point => and (mid_point O D B) (mid_point O A C))
+++++
DecompExAnd H X.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_3 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram D A B C.
Proof.
intros.
unfold weak_3_parallelogram in *.
DecompExAnd H X.

*****
H2 : mid_point X B D
H1 : mid_point X A C
A,B,C,D,X : Point
*****
ex (fun O : Point => and (mid_point O D B) (mid_point O A C))
+++++
exists X.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_3 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram D A B C.
Proof.
intros.
unfold weak_3_parallelogram in *.
DecompExAnd H X.
exists X.

*****
H2 : mid_point X B D
H1 : mid_point X A C
A,B,C,D,X : Point
*****
and (mid_point X D B) (mid_point X A C)
+++++
Geometry.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_3 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram D A B C.
Proof.
intros.
unfold weak_3_parallelogram in *.
DecompExAnd H X.
exists X.
Geometry.

*****

*****

+++++
Qed.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_4 : \n  forall A B C D, \n  weak_3_parallelogram A B C D -> \n  weak_3_parallelogram D C B A.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_4 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram D C B A.

*****

*****
forall (A B C D : Point) (_ : weak_3_parallelogram A B C D), weak_3_parallelogram D C B A
+++++
Proof.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_4 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram D C B A.
Proof.

*****

*****
forall (A B C D : Point) (_ : weak_3_parallelogram A B C D), weak_3_parallelogram D C B A
+++++
intros.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_4 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram D C B A.
Proof.
intros.

*****
H : weak_3_parallelogram A B C D
A,B,C,D : Point
*****
weak_3_parallelogram D C B A
+++++
unfold weak_3_parallelogram in *.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_4 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram D C B A.
Proof.
intros.
unfold weak_3_parallelogram in *.

*****
H : ex (fun O : Point => and (mid_point O A C) (mid_point O B D))
A,B,C,D : Point
*****
ex (fun O : Point => and (mid_point O D B) (mid_point O C A))
+++++
DecompExAnd H X.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_4 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram D C B A.
Proof.
intros.
unfold weak_3_parallelogram in *.
DecompExAnd H X.

*****
H2 : mid_point X B D
H1 : mid_point X A C
A,B,C,D,X : Point
*****
ex (fun O : Point => and (mid_point O D B) (mid_point O C A))
+++++
exists X.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_4 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram D C B A.
Proof.
intros.
unfold weak_3_parallelogram in *.
DecompExAnd H X.
exists X.

*****
H2 : mid_point X B D
H1 : mid_point X A C
A,B,C,D,X : Point
*****
and (mid_point X D B) (mid_point X C A)
+++++
Geometry.
-----
Lemma weak_3_parallelogram_weak_3_parallelogram_4 : forall A B C D, weak_3_parallelogram A B C D -> weak_3_parallelogram D C B A.
Proof.
intros.
unfold weak_3_parallelogram in *.
DecompExAnd H X.
exists X.
Geometry.

*****

*****

+++++
Qed.
-----
Hint Resolve \nweak_3_parallelogram_weak_3_parallelogram_1\nweak_3_parallelogram_weak_3_parallelogram_2\nweak_3_parallelogram_weak_3_parallelogram_3 \nweak_3_parallelogram_weak_3_parallelogram_4\n: Geom.
-----
