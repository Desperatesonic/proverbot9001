Require Export GeoCoq.Tarski_dev.Ch12_parallel.
-----
Require Export GeoCoq.Tarski_dev.Annexes.perp_bisect.
-----
Section Triangles.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Section ABC.
-----
Variable A B C : Tpoint.
-----
Definition isosceles A B C :=\n Cong A B B C.
-----
Lemma isosceles_sym :\n  isosceles A B C ->\n  isosceles C B A.
-----
Lemma isosceles_sym : isosceles A B C -> isosceles C B A.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : isosceles A B C, isosceles C B A
+++++
Proof.
-----
Lemma isosceles_sym : isosceles A B C -> isosceles C B A.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : isosceles A B C, isosceles C B A
+++++
unfold isosceles.
-----
Lemma isosceles_sym : isosceles A B C -> isosceles C B A.
Proof.
unfold isosceles.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Cong A B B C, Cong C B B A
+++++
intros.
-----
Lemma isosceles_sym : isosceles A B C -> isosceles C B A.
Proof.
unfold isosceles.
intros.

*****
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C B B A
+++++
Cong.
-----
Lemma isosceles_sym : isosceles A B C -> isosceles C B A.
Proof.
unfold isosceles.
intros.
Cong.

*****

*****

+++++
Qed.
-----
Lemma isosceles_conga :\n  A<>C -> A<>B ->\n  isosceles A B C ->\n  CongA C A B A C B.
-----
Lemma isosceles_conga : A<>C -> A<>B -> isosceles A B C -> CongA C A B A C B.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : not (eq A C)) (_ : not (eq A B)) (_ : isosceles A B C), CongA C A B A C B
+++++
Proof.
-----
Lemma isosceles_conga : A<>C -> A<>B -> isosceles A B C -> CongA C A B A C B.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : not (eq A C)) (_ : not (eq A B)) (_ : isosceles A B C), CongA C A B A C B
+++++
intros.
-----
Lemma isosceles_conga : A<>C -> A<>B -> isosceles A B C -> CongA C A B A C B.
Proof.
intros.

*****
H1 : isosceles A B C
H0 : not (eq A B)
H : not (eq A C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA C A B A C B
+++++
apply cong3_conga.
-----
Lemma isosceles_conga : A<>C -> A<>B -> isosceles A B C -> CongA C A B A C B.
Proof.
intros.
apply cong3_conga.

*****
H1 : isosceles A B C
H0 : not (eq A B)
H : not (eq A C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C A)
+++++
auto.
-----
Lemma isosceles_conga : A<>C -> A<>B -> isosceles A B C -> CongA C A B A C B.
Proof.
intros.
apply cong3_conga.

*****
H1 : isosceles A B C
H0 : not (eq A B)
H : not (eq A C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
auto.
-----
Lemma isosceles_conga : A<>C -> A<>B -> isosceles A B C -> CongA C A B A C B.
Proof.
intros.
apply cong3_conga.

*****
H1 : isosceles A B C
H0 : not (eq A B)
H : not (eq A C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong_3 C A B A C B
+++++
unfold Cong_3.
-----
Lemma isosceles_conga : A<>C -> A<>B -> isosceles A B C -> CongA C A B A C B.
Proof.
intros.
apply cong3_conga.
unfold Cong_3.

*****
H1 : isosceles A B C
H0 : not (eq A B)
H : not (eq A C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong C A A C) (and (Cong C B A B) (Cong A B C B))
+++++
unfold isosceles in H.
-----
Lemma isosceles_conga : A<>C -> A<>B -> isosceles A B C -> CongA C A B A C B.
Proof.
intros.
apply cong3_conga.
unfold Cong_3.
unfold isosceles in H.

*****
H1 : isosceles A B C
H0 : not (eq A B)
H : not (eq A C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong C A A C) (and (Cong C B A B) (Cong A B C B))
+++++
repeat split.
-----
Lemma isosceles_conga : A<>C -> A<>B -> isosceles A B C -> CongA C A B A C B.
Proof.
intros.
apply cong3_conga.
unfold Cong_3.
unfold isosceles in H.
repeat split.

*****
H1 : isosceles A B C
H0 : not (eq A B)
H : not (eq A C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C A A C
+++++
Cong.
-----
Lemma isosceles_conga : A<>C -> A<>B -> isosceles A B C -> CongA C A B A C B.
Proof.
intros.
apply cong3_conga.
unfold Cong_3.
unfold isosceles in H.
repeat split.

*****
H1 : isosceles A B C
H0 : not (eq A B)
H : not (eq A C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C B A B
+++++
Cong.
-----
Lemma isosceles_conga : A<>C -> A<>B -> isosceles A B C -> CongA C A B A C B.
Proof.
intros.
apply cong3_conga.
unfold Cong_3.
unfold isosceles in H.
repeat split.

*****
H1 : isosceles A B C
H0 : not (eq A B)
H : not (eq A C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A B C B
+++++
Cong.
-----
Lemma isosceles_conga : A<>C -> A<>B -> isosceles A B C -> CongA C A B A C B.
Proof.
intros.
apply cong3_conga.

*****

*****

+++++
Qed.
-----
Lemma conga_isosceles :\n ~ Col A B C ->\n CongA C A B A C B ->\n isosceles A B C.
-----
Lemma conga_isosceles : ~ Col A B C -> CongA C A B A C B -> isosceles A B C.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : not (Col A B C)) (_ : CongA C A B A C B), isosceles A B C
+++++
Proof.
-----
Lemma conga_isosceles : ~ Col A B C -> CongA C A B A C B -> isosceles A B C.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : not (Col A B C)) (_ : CongA C A B A C B), isosceles A B C
+++++
intros.
-----
Lemma conga_isosceles : ~ Col A B C -> CongA C A B A C B -> isosceles A B C.
Proof.
intros.

*****
H0 : CongA C A B A C B
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
isosceles A B C
+++++
assert (Cong B A B C).
-----
Lemma conga_isosceles : ~ Col A B C -> CongA C A B A C B -> isosceles A B C.
Proof.
intros.
assert (Cong B A B C).

*****
H0 : CongA C A B A C B
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B A B C
+++++
apply l11_44_1_b.
-----
Lemma conga_isosceles : ~ Col A B C -> CongA C A B A C B -> isosceles A B C.
Proof.
intros.
assert (Cong B A B C).
apply l11_44_1_b.

*****
H0 : CongA C A B A C B
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
finish.
-----
Lemma conga_isosceles : ~ Col A B C -> CongA C A B A C B -> isosceles A B C.
Proof.
intros.
assert (Cong B A B C).
apply l11_44_1_b.

*****
H0 : CongA C A B A C B
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA B A C B C A
+++++
finish.
-----
Lemma conga_isosceles : ~ Col A B C -> CongA C A B A C B -> isosceles A B C.
Proof.
intros.
assert (Cong B A B C).

*****
H1 : Cong B A B C
H0 : CongA C A B A C B
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
isosceles A B C
+++++
idtac.
-----
Lemma conga_isosceles : ~ Col A B C -> CongA C A B A C B -> isosceles A B C.
Proof.
intros.
assert (Cong B A B C).
idtac.

*****
H1 : Cong B A B C
H0 : CongA C A B A C B
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
isosceles A B C
+++++
unfold isosceles.
-----
Lemma conga_isosceles : ~ Col A B C -> CongA C A B A C B -> isosceles A B C.
Proof.
intros.
assert (Cong B A B C).
idtac.
unfold isosceles.

*****
H1 : Cong B A B C
H0 : CongA C A B A C B
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A B B C
+++++
Cong.
-----
Lemma conga_isosceles : ~ Col A B C -> CongA C A B A C B -> isosceles A B C.
Proof.
intros.
assert (Cong B A B C).

*****

*****

+++++
Qed.
-----
Lemma isosceles_foot__midpoint_conga :\n forall H,\n isosceles A B C ->\n Col H A C -> \n Perp H B A C ->\n ~ Col A B C /\ A<>H /\ C<>H /\ Midpoint H A C /\ CongA H B A H B C.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (H : Tpoint) (_ : isosceles A B C) (_ : Col H A C) (_ : Perp H B A C), and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
Proof.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (H : Tpoint) (_ : isosceles A B C) (_ : Col H A C) (_ : Perp H B A C), and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
intros.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.

*****
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
assert_diffs.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.

*****
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
assert (~ Col A B C).
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).

*****
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
intro.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
intro.

*****
H3 : Col A B C
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply perp_not_col2 in H2.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
intro.
apply perp_not_col2 in H2.

*****
H3 : Col A B C
H5 : not (eq A C)
H4 : not (eq H B)
H2 : or (not (Col H B A)) (not (Col H B C))
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct H2.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
intro.
apply perp_not_col2 in H2.
destruct H2.

*****
H3 : Col A B C
H5 : not (eq A C)
H4 : not (eq H B)
H2 : not (Col H B A)
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H2.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
intro.
apply perp_not_col2 in H2.
destruct H2.
apply H2.

*****
H3 : Col A B C
H5 : not (eq A C)
H4 : not (eq H B)
H2 : not (Col H B A)
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col H B A
+++++
ColR.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
intro.
apply perp_not_col2 in H2.
destruct H2.

*****
H3 : Col A B C
H5 : not (eq A C)
H4 : not (eq H B)
H2 : not (Col H B C)
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H2.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
intro.
apply perp_not_col2 in H2.
destruct H2.
apply H2.

*****
H3 : Col A B C
H5 : not (eq A C)
H4 : not (eq H B)
H2 : not (Col H B C)
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col H B C
+++++
ColR.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).

*****
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
assert_diffs.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.

*****
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
assert (A<>H).
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).

*****
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A H)
+++++
intro.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
intro.

*****
H6 : eq A H
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
intro.
treat_equalities.

*****
H8 : not (eq B C)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp A B A C
H4 : not (eq A B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (Lt A B B C /\ Lt A C B C).
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
intro.
treat_equalities.
assert (Lt A B B C /\\ Lt A C B C).

*****
H8 : not (eq B C)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp A B A C
H4 : not (eq A B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Lt A B B C) (Lt A C B C)
+++++
apply (l11_46 B A C).
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
intro.
treat_equalities.
assert (Lt A B B C /\\ Lt A C B C).
apply (l11_46 B A C).

*****
H8 : not (eq B C)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp A B A C
H4 : not (eq A B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
Col.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
intro.
treat_equalities.
assert (Lt A B B C /\\ Lt A C B C).
apply (l11_46 B A C).

*****
H8 : not (eq B C)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp A B A C
H4 : not (eq A B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
Col.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
intro.
treat_equalities.
assert (Lt A B B C /\\ Lt A C B C).
apply (l11_46 B A C).

*****
H8 : not (eq B C)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp A B A C
H4 : not (eq A B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Per B A C) (Obtuse B A C)
+++++
Col.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
intro.
treat_equalities.
assert (Lt A B B C /\\ Lt A C B C).
apply (l11_46 B A C).
Col.

*****
H8 : not (eq B C)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp A B A C
H4 : not (eq A B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Per B A C) (Obtuse B A C)
+++++
left.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
intro.
treat_equalities.
assert (Lt A B B C /\\ Lt A C B C).
apply (l11_46 B A C).
Col.
left.

*****
H8 : not (eq B C)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp A B A C
H4 : not (eq A B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B A C
+++++
apply perp_per_2.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
intro.
treat_equalities.
assert (Lt A B B C /\\ Lt A C B C).
apply (l11_46 B A C).
Col.
left.
apply perp_per_2.

*****
H8 : not (eq B C)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp A B A C
H4 : not (eq A B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A B A C
+++++
auto.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
intro.
treat_equalities.
assert (Lt A B B C /\\ Lt A C B C).

*****
H : and (Lt A B B C) (Lt A C B C)
H8 : not (eq B C)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp A B A C
H4 : not (eq A B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
intro.
treat_equalities.
assert (Lt A B B C /\\ Lt A C B C).
spliter.

*****
H1 : Lt A C B C
H : Lt A B B C
H8 : not (eq B C)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp A B A C
H4 : not (eq A B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
unfold isosceles in *.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
intro.
treat_equalities.
assert (Lt A B B C /\\ Lt A C B C).
spliter.
unfold isosceles in *.

*****
H1 : Lt A C B C
H : Lt A B B C
H8 : not (eq B C)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp A B A C
H4 : not (eq A B)
H0 : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (cong__nlt A B B C).
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
intro.
treat_equalities.
assert (Lt A B B C /\\ Lt A C B C).
spliter.
unfold isosceles in *.
apply (cong__nlt A B B C).

*****
H1 : Lt A C B C
H : Lt A B B C
H8 : not (eq B C)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp A B A C
H4 : not (eq A B)
H0 : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A B B C
+++++
auto.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
intro.
treat_equalities.
assert (Lt A B B C /\\ Lt A C B C).
spliter.
unfold isosceles in *.
apply (cong__nlt A B B C).

*****
H1 : Lt A C B C
H : Lt A B B C
H8 : not (eq B C)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp A B A C
H4 : not (eq A B)
H0 : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt A B B C
+++++
auto.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).

*****
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
assert (C<>H).
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).

*****
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C H)
+++++
intro.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
intro.

*****
H7 : eq C H
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
intro.
treat_equalities.

*****
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp C B A C
H4 : not (eq C B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (Lt C B B A /\ Lt C A B A).
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
intro.
treat_equalities.
assert (Lt C B B A /\\ Lt C A B A).

*****
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp C B A C
H4 : not (eq C B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Lt C B B A) (Lt C A B A)
+++++
apply (l11_46 B C A).
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
intro.
treat_equalities.
assert (Lt C B B A /\\ Lt C A B A).
apply (l11_46 B C A).

*****
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp C B A C
H4 : not (eq C B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
Col.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
intro.
treat_equalities.
assert (Lt C B B A /\\ Lt C A B A).
apply (l11_46 B C A).

*****
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp C B A C
H4 : not (eq C B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C A)
+++++
Col.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
intro.
treat_equalities.
assert (Lt C B B A /\\ Lt C A B A).
apply (l11_46 B C A).

*****
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp C B A C
H4 : not (eq C B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Per B C A) (Obtuse B C A)
+++++
Col.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
intro.
treat_equalities.
assert (Lt C B B A /\\ Lt C A B A).
apply (l11_46 B C A).
Col.

*****
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp C B A C
H4 : not (eq C B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Per B C A) (Obtuse B C A)
+++++
left.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
intro.
treat_equalities.
assert (Lt C B B A /\\ Lt C A B A).
apply (l11_46 B C A).
Col.
left.

*****
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp C B A C
H4 : not (eq C B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B C A
+++++
apply perp_per_2.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
intro.
treat_equalities.
assert (Lt C B B A /\\ Lt C A B A).
apply (l11_46 B C A).
Col.
left.
apply perp_per_2.

*****
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp C B A C
H4 : not (eq C B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C B C A
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
intro.
treat_equalities.
assert (Lt C B B A /\\ Lt C A B A).

*****
H : and (Lt C B B A) (Lt C A B A)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp C B A C
H4 : not (eq C B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
spliter.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
intro.
treat_equalities.
assert (Lt C B B A /\\ Lt C A B A).
spliter.

*****
H1 : Lt C A B A
H : Lt C B B A
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp C B A C
H4 : not (eq C B)
H0 : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
unfold isosceles in *.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
intro.
treat_equalities.
assert (Lt C B B A /\\ Lt C A B A).
spliter.
unfold isosceles in *.

*****
H1 : Lt C A B A
H : Lt C B B A
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp C B A C
H4 : not (eq C B)
H0 : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (cong__nlt C B B A).
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
intro.
treat_equalities.
assert (Lt C B B A /\\ Lt C A B A).
spliter.
unfold isosceles in *.
apply (cong__nlt C B B A).

*****
H1 : Lt C A B A
H : Lt C B B A
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp C B A C
H4 : not (eq C B)
H0 : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C B B A
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
intro.
treat_equalities.
assert (Lt C B B A /\\ Lt C A B A).
spliter.
unfold isosceles in *.
apply (cong__nlt C B B A).

*****
H1 : Lt C A B A
H : Lt C B B A
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H2 : Perp C B A C
H4 : not (eq C B)
H0 : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt C B B A
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).

*****
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
assert (Perp_at H A C B H).
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).

*****
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_at H A C B H
+++++
apply l8_14_2_1b_bis.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
apply l8_14_2_1b_bis.

*****
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A C B H
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
apply l8_14_2_1b_bis.

*****
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col H A C
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
apply l8_14_2_1b_bis.

*****
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col H B H
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).

*****
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
idtac.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.

*****
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
assert (Per A H B).
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).

*****
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A H B
+++++
apply perp_in_per_1 with C H.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
apply perp_in_per_1 with C H.

*****
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_at H A C B H
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).

*****
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
idtac.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.

*****
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
assert (Per C H B).
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).

*****
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per C H B
+++++
apply perp_in_per_3 with A H.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
apply perp_in_per_3 with A H.

*****
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_at H A C B H
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).

*****
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
idtac.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.

*****
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
assert (Cong H A H C /\ CongA H A B H C B /\ CongA H B A H B C).
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.
assert (Cong H A H C /\\ CongA H A B H C B /\\ CongA H B A H B C).

*****
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong H A H C) (and (CongA H A B H C B) (CongA H B A H B C))
+++++
apply (cong2_per2__cong_conga2 A H B C H B).
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.
assert (Cong H A H C /\\ CongA H A B H C B /\\ CongA H B A H B C).
apply (cong2_per2__cong_conga2 A H B C H B).

*****
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A H)
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.
assert (Cong H A H C /\\ CongA H A B H C B /\\ CongA H B A H B C).
apply (cong2_per2__cong_conga2 A H B C H B).

*****
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq H B)
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.
assert (Cong H A H C /\\ CongA H A B H C B /\\ CongA H B A H B C).
apply (cong2_per2__cong_conga2 A H B C H B).

*****
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A H B
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.
assert (Cong H A H C /\\ CongA H A B H C B /\\ CongA H B A H B C).
apply (cong2_per2__cong_conga2 A H B C H B).

*****
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per C H B
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.
assert (Cong H A H C /\\ CongA H A B H C B /\\ CongA H B A H B C).
apply (cong2_per2__cong_conga2 A H B C H B).

*****
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A B C B
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.
assert (Cong H A H C /\\ CongA H A B H C B /\\ CongA H B A H B C).
apply (cong2_per2__cong_conga2 A H B C H B).

*****
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong H B H B
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.
assert (Cong H A H C /\\ CongA H A B H C B /\\ CongA H B A H B C).

*****
H13 : and (Cong H A H C) (and (CongA H A B H C B) (CongA H B A H B C))
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
idtac.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.
assert (Cong H A H C /\\ CongA H A B H C B /\\ CongA H B A H B C).
idtac.

*****
H13 : and (Cong H A H C) (and (CongA H A B H C B) (CongA H B A H B C))
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
spliter.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.
assert (Cong H A H C /\\ CongA H A B H C B /\\ CongA H B A H B C).
idtac.
spliter.

*****
H15 : CongA H B A H B C
H14 : CongA H A B H C B
H13 : Cong H A H C
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
assert (Midpoint H A C).
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.
assert (Cong H A H C /\\ CongA H A B H C B /\\ CongA H B A H B C).
idtac.
spliter.
assert (Midpoint H A C).

*****
H15 : CongA H B A H B C
H14 : CongA H A B H C B
H13 : Cong H A H C
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint H A C
+++++
apply l7_20_bis.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.
assert (Cong H A H C /\\ CongA H A B H C B /\\ CongA H B A H B C).
idtac.
spliter.
assert (Midpoint H A C).
apply l7_20_bis.

*****
H15 : CongA H B A H B C
H14 : CongA H A B H C B
H13 : Cong H A H C
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.
assert (Cong H A H C /\\ CongA H A B H C B /\\ CongA H B A H B C).
idtac.
spliter.
assert (Midpoint H A C).
apply l7_20_bis.

*****
H15 : CongA H B A H B C
H14 : CongA H A B H C B
H13 : Cong H A H C
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A H C
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.
assert (Cong H A H C /\\ CongA H A B H C B /\\ CongA H B A H B C).
idtac.
spliter.
assert (Midpoint H A C).
apply l7_20_bis.

*****
H15 : CongA H B A H B C
H14 : CongA H A B H C B
H13 : Cong H A H C
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong H A H C
+++++
finish.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.
assert (Cong H A H C /\\ CongA H A B H C B /\\ CongA H B A H B C).
idtac.
spliter.
assert (Midpoint H A C).

*****
H16 : Midpoint H A C
H15 : CongA H B A H B C
H14 : CongA H A B H C B
H13 : Cong H A H C
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
idtac.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).
assert_diffs.
assert (A<>H).
assert (C<>H).
assert (Perp_at H A C B H).
idtac.
assert (Per A H B).
idtac.
assert (Per C H B).
idtac.
assert (Cong H A H C /\\ CongA H A B H C B /\\ CongA H B A H B C).
idtac.
spliter.
assert (Midpoint H A C).
idtac.

*****
H16 : Midpoint H A C
H15 : CongA H B A H B C
H14 : CongA H A B H C B
H13 : Cong H A H C
H12 : Per C H B
H11 : Per A H B
H10 : Perp_at H A C B H
H7 : not (eq C H)
H6 : not (eq A H)
H8 : not (eq B C)
H9 : not (eq A B)
H3 : not (Col A B C)
H5 : not (eq A C)
H4 : not (eq H B)
H2 : Perp H B A C
H1 : Col H A C
H0 : isosceles A B C
A,B,C,H : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (not (eq A H)) (and (not (eq C H)) (and (Midpoint H A C) (CongA H B A H B C))))
+++++
auto.
-----
Lemma isosceles_foot__midpoint_conga : forall H, isosceles A B C -> Col H A C -> Perp H B A C -> ~ Col A B C /\\ A<>H /\\ C<>H /\\ Midpoint H A C /\\ CongA H B A H B C.
Proof.
intros.
assert_diffs.
assert (~ Col A B C).

*****

*****

+++++
Qed.
-----
Definition equilateral A B C :=\n Cong A B B C /\ Cong B C C A.
-----
Definition equilateral_strict A B C :=\n equilateral A B C /\ A <> B.
-----
Lemma equilateral_strict_equilateral :\n equilateral_strict A B C ->\n equilateral A B C.
-----
Lemma equilateral_strict_equilateral : equilateral_strict A B C -> equilateral A B C.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, equilateral A B C
+++++
Proof.
-----
Lemma equilateral_strict_equilateral : equilateral_strict A B C -> equilateral A B C.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, equilateral A B C
+++++
unfold equilateral_strict in *.
-----
Lemma equilateral_strict_equilateral : equilateral_strict A B C -> equilateral A B C.
Proof.
unfold equilateral_strict in *.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : and (equilateral A B C) (not (eq A B)), equilateral A B C
+++++
tauto.
-----
Lemma equilateral_strict_equilateral : equilateral_strict A B C -> equilateral A B C.
Proof.
unfold equilateral_strict in *.
tauto.

*****

*****

+++++
Qed.
-----
Lemma equilateral_cong:\n  equilateral A B C ->\n  Cong A B B C /\ Cong B C C A /\ Cong C A A B.
-----
Lemma equilateral_cong: equilateral A B C -> Cong A B B C /\\ Cong B C C A /\\ Cong C A A B.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, and (Cong A B B C) (and (Cong B C C A) (Cong C A A B))
+++++
Proof.
-----
Lemma equilateral_cong: equilateral A B C -> Cong A B B C /\\ Cong B C C A /\\ Cong C A A B.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, and (Cong A B B C) (and (Cong B C C A) (Cong C A A B))
+++++
unfold equilateral.
-----
Lemma equilateral_cong: equilateral A B C -> Cong A B B C /\\ Cong B C C A /\\ Cong C A A B.
Proof.
unfold equilateral.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : and (Cong A B B C) (Cong B C C A), and (Cong A B B C) (and (Cong B C C A) (Cong C A A B))
+++++
intros.
-----
Lemma equilateral_cong: equilateral A B C -> Cong A B B C /\\ Cong B C C A /\\ Cong C A A B.
Proof.
unfold equilateral.
intros.

*****
H : and (Cong A B B C) (Cong B C C A)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong A B B C) (and (Cong B C C A) (Cong C A A B))
+++++
intuition Cong.
-----
Lemma equilateral_cong: equilateral A B C -> Cong A B B C /\\ Cong B C C A /\\ Cong C A A B.
Proof.
unfold equilateral.
intros.
intuition Cong.

*****
H1 : Cong B C C A
H0 : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C A A B
+++++
assert (T:=cong_transitivity A B B C C A H0 H1).
-----
Lemma equilateral_cong: equilateral A B C -> Cong A B B C /\\ Cong B C C A /\\ Cong C A A B.
Proof.
unfold equilateral.
intros.
intuition Cong.
assert (T:=cong_transitivity A B B C C A H0 H1).

*****
T : Cong A B C A
H1 : Cong B C C A
H0 : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C A A B
+++++
Cong.
-----
Lemma equilateral_cong: equilateral A B C -> Cong A B B C /\\ Cong B C C A /\\ Cong C A A B.
Proof.
unfold equilateral.
intros.
intuition Cong.
assert (T:=cong_transitivity A B B C C A H0 H1).
Cong.

*****

*****

+++++
Qed.
-----
Lemma equilateral_rot :\n equilateral A B C ->\n equilateral B C A.
-----
Lemma equilateral_rot : equilateral A B C -> equilateral B C A.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, equilateral B C A
+++++
Proof.
-----
Lemma equilateral_rot : equilateral A B C -> equilateral B C A.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, equilateral B C A
+++++
intro.
-----
Lemma equilateral_rot : equilateral A B C -> equilateral B C A.
Proof.
intro.

*****
H : equilateral A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral B C A
+++++
apply equilateral_cong in H.
-----
Lemma equilateral_rot : equilateral A B C -> equilateral B C A.
Proof.
intro.
apply equilateral_cong in H.

*****
H : and (Cong A B B C) (and (Cong B C C A) (Cong C A A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral B C A
+++++
unfold equilateral.
-----
Lemma equilateral_rot : equilateral A B C -> equilateral B C A.
Proof.
intro.
apply equilateral_cong in H.
unfold equilateral.

*****
H : and (Cong A B B C) (and (Cong B C C A) (Cong C A A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong B C C A) (Cong C A A B)
+++++
intuition Cong.
-----
Lemma equilateral_rot : equilateral A B C -> equilateral B C A.
Proof.
intro.
apply equilateral_cong in H.
unfold equilateral.
intuition Cong.

*****

*****

+++++
Qed.
-----
Lemma equilateral_swap :\n equilateral A B C ->\n equilateral B A C.
-----
Lemma equilateral_swap : equilateral A B C -> equilateral B A C.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, equilateral B A C
+++++
Proof.
-----
Lemma equilateral_swap : equilateral A B C -> equilateral B A C.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, equilateral B A C
+++++
intro.
-----
Lemma equilateral_swap : equilateral A B C -> equilateral B A C.
Proof.
intro.

*****
H : equilateral A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral B A C
+++++
apply equilateral_cong in H.
-----
Lemma equilateral_swap : equilateral A B C -> equilateral B A C.
Proof.
intro.
apply equilateral_cong in H.

*****
H : and (Cong A B B C) (and (Cong B C C A) (Cong C A A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral B A C
+++++
unfold equilateral.
-----
Lemma equilateral_swap : equilateral A B C -> equilateral B A C.
Proof.
intro.
apply equilateral_cong in H.
unfold equilateral.

*****
H : and (Cong A B B C) (and (Cong B C C A) (Cong C A A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong B A A C) (Cong A C C B)
+++++
intuition Cong.
-----
Lemma equilateral_swap : equilateral A B C -> equilateral B A C.
Proof.
intro.
apply equilateral_cong in H.
unfold equilateral.
intuition Cong.

*****

*****

+++++
Qed.
-----
Lemma equilateral_rot_2 :\n equilateral A B C ->\n equilateral C B A.
-----
Lemma equilateral_rot_2 : equilateral A B C -> equilateral C B A.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, equilateral C B A
+++++
Proof.
-----
Lemma equilateral_rot_2 : equilateral A B C -> equilateral C B A.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, equilateral C B A
+++++
intro.
-----
Lemma equilateral_rot_2 : equilateral A B C -> equilateral C B A.
Proof.
intro.

*****
H : equilateral A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral C B A
+++++
apply equilateral_cong in H.
-----
Lemma equilateral_rot_2 : equilateral A B C -> equilateral C B A.
Proof.
intro.
apply equilateral_cong in H.

*****
H : and (Cong A B B C) (and (Cong B C C A) (Cong C A A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral C B A
+++++
unfold equilateral.
-----
Lemma equilateral_rot_2 : equilateral A B C -> equilateral C B A.
Proof.
intro.
apply equilateral_cong in H.
unfold equilateral.

*****
H : and (Cong A B B C) (and (Cong B C C A) (Cong C A A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong C B B A) (Cong B A A C)
+++++
intuition Cong.
-----
Lemma equilateral_rot_2 : equilateral A B C -> equilateral C B A.
Proof.
intro.
apply equilateral_cong in H.
unfold equilateral.
intuition Cong.

*****

*****

+++++
Qed.
-----
Lemma equilateral_swap_2 :\n equilateral A B C ->\n equilateral A C B.
-----
Lemma equilateral_swap_2 : equilateral A B C -> equilateral A C B.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, equilateral A C B
+++++
Proof.
-----
Lemma equilateral_swap_2 : equilateral A B C -> equilateral A C B.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, equilateral A C B
+++++
intro.
-----
Lemma equilateral_swap_2 : equilateral A B C -> equilateral A C B.
Proof.
intro.

*****
H : equilateral A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral A C B
+++++
apply equilateral_cong in H.
-----
Lemma equilateral_swap_2 : equilateral A B C -> equilateral A C B.
Proof.
intro.
apply equilateral_cong in H.

*****
H : and (Cong A B B C) (and (Cong B C C A) (Cong C A A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral A C B
+++++
unfold equilateral.
-----
Lemma equilateral_swap_2 : equilateral A B C -> equilateral A C B.
Proof.
intro.
apply equilateral_cong in H.
unfold equilateral.

*****
H : and (Cong A B B C) (and (Cong B C C A) (Cong C A A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong A C C B) (Cong C B B A)
+++++
intuition Cong.
-----
Lemma equilateral_swap_2 : equilateral A B C -> equilateral A C B.
Proof.
intro.
apply equilateral_cong in H.
unfold equilateral.
intuition Cong.

*****

*****

+++++
Qed.
-----
Lemma equilateral_swap_rot :\n equilateral A B C ->\n equilateral C A B.
-----
Lemma equilateral_swap_rot : equilateral A B C -> equilateral C A B.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, equilateral C A B
+++++
Proof.
-----
Lemma equilateral_swap_rot : equilateral A B C -> equilateral C A B.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, equilateral C A B
+++++
intro.
-----
Lemma equilateral_swap_rot : equilateral A B C -> equilateral C A B.
Proof.
intro.

*****
H : equilateral A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral C A B
+++++
apply equilateral_cong in H.
-----
Lemma equilateral_swap_rot : equilateral A B C -> equilateral C A B.
Proof.
intro.
apply equilateral_cong in H.

*****
H : and (Cong A B B C) (and (Cong B C C A) (Cong C A A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral C A B
+++++
unfold equilateral.
-----
Lemma equilateral_swap_rot : equilateral A B C -> equilateral C A B.
Proof.
intro.
apply equilateral_cong in H.
unfold equilateral.

*****
H : and (Cong A B B C) (and (Cong B C C A) (Cong C A A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong C A A B) (Cong A B B C)
+++++
intuition Cong.
-----
Lemma equilateral_swap_rot : equilateral A B C -> equilateral C A B.
Proof.
intro.
apply equilateral_cong in H.
unfold equilateral.
intuition Cong.

*****

*****

+++++
Qed.
-----
Hint Resolve equilateral_swap equilateral_swap_2\n equilateral_swap_rot equilateral_rot equilateral_rot_2 : equilateral.
-----
Lemma equilateral_isosceles_1 :\n  equilateral A B C ->\n  isosceles A B C.
-----
Lemma equilateral_isosceles_1 : equilateral A B C -> isosceles A B C.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, isosceles A B C
+++++
Proof.
-----
Lemma equilateral_isosceles_1 : equilateral A B C -> isosceles A B C.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, isosceles A B C
+++++
unfold equilateral.
-----
Lemma equilateral_isosceles_1 : equilateral A B C -> isosceles A B C.
Proof.
unfold equilateral.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : and (Cong A B B C) (Cong B C C A), isosceles A B C
+++++
unfold isosceles.
-----
Lemma equilateral_isosceles_1 : equilateral A B C -> isosceles A B C.
Proof.
unfold equilateral.
unfold isosceles.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : and (Cong A B B C) (Cong B C C A), Cong A B B C
+++++
tauto.
-----
Lemma equilateral_isosceles_1 : equilateral A B C -> isosceles A B C.
Proof.
unfold equilateral.
unfold isosceles.
tauto.

*****

*****

+++++
Qed.
-----
Lemma equilateral_isosceles_2 :\n  equilateral A B C ->\n  isosceles B C A.
-----
Lemma equilateral_isosceles_2 : equilateral A B C -> isosceles B C A.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, isosceles B C A
+++++
Proof.
-----
Lemma equilateral_isosceles_2 : equilateral A B C -> isosceles B C A.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, isosceles B C A
+++++
unfold equilateral.
-----
Lemma equilateral_isosceles_2 : equilateral A B C -> isosceles B C A.
Proof.
unfold equilateral.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : and (Cong A B B C) (Cong B C C A), isosceles B C A
+++++
unfold isosceles.
-----
Lemma equilateral_isosceles_2 : equilateral A B C -> isosceles B C A.
Proof.
unfold equilateral.
unfold isosceles.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : and (Cong A B B C) (Cong B C C A), Cong B C C A
+++++
tauto.
-----
Lemma equilateral_isosceles_2 : equilateral A B C -> isosceles B C A.
Proof.
unfold equilateral.
unfold isosceles.
tauto.

*****

*****

+++++
Qed.
-----
Lemma equilateral_isosceles_3 :\n  equilateral A B C ->\n  isosceles C A B.
-----
Lemma equilateral_isosceles_3 : equilateral A B C -> isosceles C A B.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, isosceles C A B
+++++
Proof.
-----
Lemma equilateral_isosceles_3 : equilateral A B C -> isosceles C A B.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral A B C, isosceles C A B
+++++
intros.
-----
Lemma equilateral_isosceles_3 : equilateral A B C -> isosceles C A B.
Proof.
intros.

*****
H : equilateral A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
isosceles C A B
+++++
apply equilateral_cong in H.
-----
Lemma equilateral_isosceles_3 : equilateral A B C -> isosceles C A B.
Proof.
intros.
apply equilateral_cong in H.

*****
H : and (Cong A B B C) (and (Cong B C C A) (Cong C A A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
isosceles C A B
+++++
unfold isosceles.
-----
Lemma equilateral_isosceles_3 : equilateral A B C -> isosceles C A B.
Proof.
intros.
apply equilateral_cong in H.
unfold isosceles.

*****
H : and (Cong A B B C) (and (Cong B C C A) (Cong C A A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C A A B
+++++
tauto.
-----
Lemma equilateral_isosceles_3 : equilateral A B C -> isosceles C A B.
Proof.
intros.
apply equilateral_cong in H.
unfold isosceles.
tauto.

*****

*****

+++++
Qed.
-----
Hint Resolve equilateral_isosceles_1 equilateral_isosceles_2 equilateral_isosceles_3 : equilateral.
-----
Lemma equilateral_strict_neq :\n equilateral_strict A B C ->\n A <> B /\ B <> C /\ A <> C.
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
+++++
Proof.
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
+++++
intros.
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.
Proof.
intros.

*****
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
+++++
unfold equilateral_strict in H.
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.
Proof.
intros.
unfold equilateral_strict in H.

*****
H : and (equilateral A B C) (not (eq A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
+++++
unfold equilateral in H.
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.
Proof.
intros.
unfold equilateral_strict in H.
unfold equilateral in H.

*****
H : and (and (Cong A B B C) (Cong B C C A)) (not (eq A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
+++++
decompose [and] H.
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.
Proof.
intros.
unfold equilateral_strict in H.
unfold equilateral in H.
decompose [and] H.

*****
H3 : Cong B C C A
H2 : Cong A B B C
H1 : not (eq A B)
H : and (and (Cong A B B C) (Cong B C C A)) (not (eq A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
+++++
clear H.
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.
Proof.
intros.
unfold equilateral_strict in H.
unfold equilateral in H.
decompose [and] H.
clear H.

*****
H3 : Cong B C C A
H2 : Cong A B B C
H1 : not (eq A B)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
+++++
repeat split.
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.
Proof.
intros.
unfold equilateral_strict in H.
unfold equilateral in H.
decompose [and] H.
clear H.
repeat split.

*****
H3 : Cong B C C A
H2 : Cong A B B C
H1 : not (eq A B)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
Cong.
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.
Proof.
intros.
unfold equilateral_strict in H.
unfold equilateral in H.
decompose [and] H.
clear H.
repeat split.

*****
H3 : Cong B C C A
H2 : Cong A B B C
H1 : not (eq A B)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
Cong.
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.
Proof.
intros.
unfold equilateral_strict in H.
unfold equilateral in H.
decompose [and] H.
clear H.
repeat split.
Cong.

*****
H3 : Cong B C C A
H2 : Cong A B B C
H1 : not (eq A B)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
eauto using cong_diff.
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.
Proof.
intros.
unfold equilateral_strict in H.
unfold equilateral in H.
decompose [and] H.
clear H.
repeat split.

*****
H3 : Cong B C C A
H2 : Cong A B B C
H1 : not (eq A B)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
Cong.
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.
Proof.
intros.
unfold equilateral_strict in H.
unfold equilateral in H.
decompose [and] H.
clear H.
repeat split.
Cong.

*****
H3 : Cong B C C A
H2 : Cong A B B C
H1 : not (eq A B)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
eapply cong_diff.
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.
Proof.
intros.
unfold equilateral_strict in H.
unfold equilateral in H.
decompose [and] H.
clear H.
repeat split.
Cong.
eapply cong_diff.

*****
H3 : Cong B C C A
H2 : Cong A B B C
H1 : not (eq A B)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq ?A ?B)
+++++
assert (T:=cong_transitivity A B B C C A H2 H3).
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.
Proof.
intros.
unfold equilateral_strict in H.
unfold equilateral in H.
decompose [and] H.
clear H.
repeat split.
Cong.
eapply cong_diff.
assert (T:=cong_transitivity A B B C C A H2 H3).

*****
T : Cong A B C A
H3 : Cong B C C A
H2 : Cong A B B C
H1 : not (eq A B)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq ?A ?B)
+++++
apply H1.
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.
Proof.
intros.
unfold equilateral_strict in H.
unfold equilateral in H.
decompose [and] H.
clear H.
repeat split.
Cong.
eapply cong_diff.

*****
H3 : Cong B C C A
H2 : Cong A B B C
H1 : not (eq A B)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A B A C
+++++
assert (T:=cong_transitivity A B B C C A H2 H3).
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.
Proof.
intros.
unfold equilateral_strict in H.
unfold equilateral in H.
decompose [and] H.
clear H.
repeat split.
Cong.
eapply cong_diff.
assert (T:=cong_transitivity A B B C C A H2 H3).

*****
T : Cong A B C A
H3 : Cong B C C A
H2 : Cong A B B C
H1 : not (eq A B)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A B A C
+++++
Cong.
-----
Lemma equilateral_strict_neq : equilateral_strict A B C -> A <> B /\\ B <> C /\\ A <> C.
Proof.
intros.
unfold equilateral_strict in H.
unfold equilateral in H.
decompose [and] H.
clear H.
repeat split.

*****

*****

+++++
Qed.
-----
Hint Resolve equilateral_strict_neq : equilateral.
-----
Lemma equilateral_strict_swap_1 :\n equilateral_strict A B C ->\n equilateral_strict A C B.
-----
Lemma equilateral_strict_swap_1 : equilateral_strict A B C -> equilateral_strict A C B.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, equilateral_strict A C B
+++++
Proof.
-----
Lemma equilateral_strict_swap_1 : equilateral_strict A B C -> equilateral_strict A C B.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, equilateral_strict A C B
+++++
intros.
-----
Lemma equilateral_strict_swap_1 : equilateral_strict A B C -> equilateral_strict A C B.
Proof.
intros.

*****
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral_strict A C B
+++++
assert (T:= equilateral_strict_neq H).
-----
Lemma equilateral_strict_swap_1 : equilateral_strict A B C -> equilateral_strict A C B.
Proof.
intros.
assert (T:= equilateral_strict_neq H).

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral_strict A C B
+++++
unfold equilateral_strict in *.
-----
Lemma equilateral_strict_swap_1 : equilateral_strict A B C -> equilateral_strict A C B.
Proof.
intros.
assert (T:= equilateral_strict_neq H).
unfold equilateral_strict in *.

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : and (equilateral A B C) (not (eq A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (equilateral A C B) (not (eq A C))
+++++
intuition (eauto with equilateral).
-----
Lemma equilateral_strict_swap_1 : equilateral_strict A B C -> equilateral_strict A C B.
Proof.
intros.
assert (T:= equilateral_strict_neq H).
unfold equilateral_strict in *.
intuition (eauto with equilateral).

*****

*****

+++++
Qed.
-----
Lemma equilateral_strict_swap_2 :\n equilateral_strict A B C ->\n equilateral_strict B A C.
-----
Lemma equilateral_strict_swap_2 : equilateral_strict A B C -> equilateral_strict B A C.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, equilateral_strict B A C
+++++
Proof.
-----
Lemma equilateral_strict_swap_2 : equilateral_strict A B C -> equilateral_strict B A C.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, equilateral_strict B A C
+++++
intros.
-----
Lemma equilateral_strict_swap_2 : equilateral_strict A B C -> equilateral_strict B A C.
Proof.
intros.

*****
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral_strict B A C
+++++
assert (T:= equilateral_strict_neq H).
-----
Lemma equilateral_strict_swap_2 : equilateral_strict A B C -> equilateral_strict B A C.
Proof.
intros.
assert (T:= equilateral_strict_neq H).

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral_strict B A C
+++++
unfold equilateral_strict in *.
-----
Lemma equilateral_strict_swap_2 : equilateral_strict A B C -> equilateral_strict B A C.
Proof.
intros.
assert (T:= equilateral_strict_neq H).
unfold equilateral_strict in *.

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : and (equilateral A B C) (not (eq A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (equilateral B A C) (not (eq B A))
+++++
intuition (eauto with equilateral).
-----
Lemma equilateral_strict_swap_2 : equilateral_strict A B C -> equilateral_strict B A C.
Proof.
intros.
assert (T:= equilateral_strict_neq H).
unfold equilateral_strict in *.
intuition (eauto with equilateral).

*****

*****

+++++
Qed.
-----
Lemma equilateral_strict_swap_3 :\n equilateral_strict A B C ->\n equilateral_strict B C A.
-----
Lemma equilateral_strict_swap_3 : equilateral_strict A B C -> equilateral_strict B C A.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, equilateral_strict B C A
+++++
Proof.
-----
Lemma equilateral_strict_swap_3 : equilateral_strict A B C -> equilateral_strict B C A.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, equilateral_strict B C A
+++++
intros.
-----
Lemma equilateral_strict_swap_3 : equilateral_strict A B C -> equilateral_strict B C A.
Proof.
intros.

*****
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral_strict B C A
+++++
assert (T:= equilateral_strict_neq H).
-----
Lemma equilateral_strict_swap_3 : equilateral_strict A B C -> equilateral_strict B C A.
Proof.
intros.
assert (T:= equilateral_strict_neq H).

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral_strict B C A
+++++
unfold equilateral_strict in *.
-----
Lemma equilateral_strict_swap_3 : equilateral_strict A B C -> equilateral_strict B C A.
Proof.
intros.
assert (T:= equilateral_strict_neq H).
unfold equilateral_strict in *.

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : and (equilateral A B C) (not (eq A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (equilateral B C A) (not (eq B C))
+++++
intuition (eauto with equilateral).
-----
Lemma equilateral_strict_swap_3 : equilateral_strict A B C -> equilateral_strict B C A.
Proof.
intros.
assert (T:= equilateral_strict_neq H).
unfold equilateral_strict in *.
intuition (eauto with equilateral).

*****

*****

+++++
Qed.
-----
Lemma equilateral_strict_swap_4 :\n equilateral_strict A B C ->\n equilateral_strict C A B.
-----
Lemma equilateral_strict_swap_4 : equilateral_strict A B C -> equilateral_strict C A B.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, equilateral_strict C A B
+++++
Proof.
-----
Lemma equilateral_strict_swap_4 : equilateral_strict A B C -> equilateral_strict C A B.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, equilateral_strict C A B
+++++
intros.
-----
Lemma equilateral_strict_swap_4 : equilateral_strict A B C -> equilateral_strict C A B.
Proof.
intros.

*****
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral_strict C A B
+++++
assert (T:= equilateral_strict_neq H).
-----
Lemma equilateral_strict_swap_4 : equilateral_strict A B C -> equilateral_strict C A B.
Proof.
intros.
assert (T:= equilateral_strict_neq H).

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral_strict C A B
+++++
unfold equilateral_strict in *.
-----
Lemma equilateral_strict_swap_4 : equilateral_strict A B C -> equilateral_strict C A B.
Proof.
intros.
assert (T:= equilateral_strict_neq H).
unfold equilateral_strict in *.

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : and (equilateral A B C) (not (eq A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (equilateral C A B) (not (eq C A))
+++++
intuition (eauto with equilateral).
-----
Lemma equilateral_strict_swap_4 : equilateral_strict A B C -> equilateral_strict C A B.
Proof.
intros.
assert (T:= equilateral_strict_neq H).
unfold equilateral_strict in *.
intuition (eauto with equilateral).

*****

*****

+++++
Qed.
-----
Lemma equilateral_strict_swap_5 :\n equilateral_strict A B C ->\n equilateral_strict C B A.
-----
Lemma equilateral_strict_swap_5 : equilateral_strict A B C -> equilateral_strict C B A.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, equilateral_strict C B A
+++++
Proof.
-----
Lemma equilateral_strict_swap_5 : equilateral_strict A B C -> equilateral_strict C B A.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, equilateral_strict C B A
+++++
intros.
-----
Lemma equilateral_strict_swap_5 : equilateral_strict A B C -> equilateral_strict C B A.
Proof.
intros.

*****
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral_strict C B A
+++++
assert (T:= equilateral_strict_neq H).
-----
Lemma equilateral_strict_swap_5 : equilateral_strict A B C -> equilateral_strict C B A.
Proof.
intros.
assert (T:= equilateral_strict_neq H).

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral_strict C B A
+++++
unfold equilateral_strict in *.
-----
Lemma equilateral_strict_swap_5 : equilateral_strict A B C -> equilateral_strict C B A.
Proof.
intros.
assert (T:= equilateral_strict_neq H).
unfold equilateral_strict in *.

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : and (equilateral A B C) (not (eq A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (equilateral C B A) (not (eq C B))
+++++
intuition (eauto with equilateral).
-----
Lemma equilateral_strict_swap_5 : equilateral_strict A B C -> equilateral_strict C B A.
Proof.
intros.
assert (T:= equilateral_strict_neq H).
unfold equilateral_strict in *.
intuition (eauto with equilateral).

*****

*****

+++++
Qed.
-----
Hint Resolve equilateral_strict_swap_1 equilateral_strict_swap_2\nequilateral_strict_swap_3 equilateral_strict_swap_4 equilateral_strict_swap_5 : equilateral.
-----
Lemma equilateral_strict__not_col : \n equilateral_strict A B C -> ~ Col A B C.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, not (Col A B C)
+++++
Proof.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, not (Col A B C)
+++++
intros.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.

*****
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
assert (T:=(equilateral_strict_neq H)).
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
unfold equilateral_strict in *.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : and (equilateral A B C) (not (eq A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
unfold equilateral in *.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : and (and (Cong A B B C) (Cong B C C A)) (not (eq A B))
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
spliter.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.

*****
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
intro.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.

*****
H5 : Col A B C
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (Midpoint B A C).
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.
assert (Midpoint B A C).

*****
H5 : Col A B C
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint B A C
+++++
apply (l7_20_bis B A C).
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.
assert (Midpoint B A C).
apply (l7_20_bis B A C).

*****
H5 : Col A B C
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
finish.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.
assert (Midpoint B A C).
apply (l7_20_bis B A C).

*****
H5 : Col A B C
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
finish.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.
assert (Midpoint B A C).
apply (l7_20_bis B A C).

*****
H5 : Col A B C
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B A B C
+++++
finish.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.
assert (Midpoint B A C).

*****
H6 : Midpoint B A C
H5 : Col A B C
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.
assert (Midpoint B A C).
idtac.

*****
H6 : Midpoint B A C
H5 : Col A B C
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (Midpoint C A B).
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.
assert (Midpoint B A C).
idtac.
assert (Midpoint C A B).

*****
H6 : Midpoint B A C
H5 : Col A B C
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint C A B
+++++
apply (l7_20_bis C A B).
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.
assert (Midpoint B A C).
idtac.
assert (Midpoint C A B).
apply (l7_20_bis C A B).

*****
H6 : Midpoint B A C
H5 : Col A B C
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
finish.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.
assert (Midpoint B A C).
idtac.
assert (Midpoint C A B).
apply (l7_20_bis C A B).

*****
H6 : Midpoint B A C
H5 : Col A B C
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A C B
+++++
finish.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.
assert (Midpoint B A C).
idtac.
assert (Midpoint C A B).
apply (l7_20_bis C A B).

*****
H6 : Midpoint B A C
H5 : Col A B C
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C A C B
+++++
finish.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.
assert (Midpoint B A C).
idtac.
assert (Midpoint C A B).

*****
H7 : Midpoint C A B
H6 : Midpoint B A C
H5 : Col A B C
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.
assert (Midpoint B A C).
idtac.
assert (Midpoint C A B).
idtac.

*****
H7 : Midpoint C A B
H6 : Midpoint B A C
H5 : Col A B C
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply midpoint_not_midpoint with C A B.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.
assert (Midpoint B A C).
idtac.
assert (Midpoint C A B).
idtac.
apply midpoint_not_midpoint with C A B.

*****
H7 : Midpoint C A B
H6 : Midpoint B A C
H5 : Col A B C
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.
assert (Midpoint B A C).
idtac.
assert (Midpoint C A B).
idtac.
apply midpoint_not_midpoint with C A B.

*****
H7 : Midpoint C A B
H6 : Midpoint B A C
H5 : Col A B C
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint C A B
+++++
auto.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.
assert (Midpoint B A C).
idtac.
assert (Midpoint C A B).
idtac.
apply midpoint_not_midpoint with C A B.

*****
H7 : Midpoint C A B
H6 : Midpoint B A C
H5 : Col A B C
H2 : not (eq A C)
H1 : not (eq B C)
H3,H0 : not (eq A B)
H4 : Cong B C C A
H : Cong A B B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Midpoint B A C
+++++
auto.
-----
Lemma equilateral_strict__not_col : equilateral_strict A B C -> ~ Col A B C.
Proof.
intros.
assert (T:=(equilateral_strict_neq H)).
unfold equilateral_strict in *.
unfold equilateral in *.
spliter.
intro.
assert (Midpoint B A C).

*****

*****

+++++
Qed.
-----
Lemma equilateral_strict_conga_1 :\n equilateral_strict A B C ->\n CongA C A B A C B.
-----
Lemma equilateral_strict_conga_1 : equilateral_strict A B C -> CongA C A B A C B.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, CongA C A B A C B
+++++
Proof.
-----
Lemma equilateral_strict_conga_1 : equilateral_strict A B C -> CongA C A B A C B.
Proof.

*****
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : equilateral_strict A B C, CongA C A B A C B
+++++
intros.
-----
Lemma equilateral_strict_conga_1 : equilateral_strict A B C -> CongA C A B A C B.
Proof.
intros.

*****
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA C A B A C B
+++++
assert (T:= equilateral_strict_neq H).
-----
Lemma equilateral_strict_conga_1 : equilateral_strict A B C -> CongA C A B A C B.
Proof.
intros.
assert (T:= equilateral_strict_neq H).

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA C A B A C B
+++++
apply equilateral_strict_equilateral in H.
-----
Lemma equilateral_strict_conga_1 : equilateral_strict A B C -> CongA C A B A C B.
Proof.
intros.
assert (T:= equilateral_strict_neq H).
apply equilateral_strict_equilateral in H.

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : equilateral A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA C A B A C B
+++++
apply equilateral_isosceles_1 in H.
-----
Lemma equilateral_strict_conga_1 : equilateral_strict A B C -> CongA C A B A C B.
Proof.
intros.
assert (T:= equilateral_strict_neq H).
apply equilateral_strict_equilateral in H.
apply equilateral_isosceles_1 in H.

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA C A B A C B
+++++
apply isosceles_conga.
-----
Lemma equilateral_strict_conga_1 : equilateral_strict A B C -> CongA C A B A C B.
Proof.
intros.
assert (T:= equilateral_strict_neq H).
apply equilateral_strict_equilateral in H.
apply equilateral_isosceles_1 in H.
apply isosceles_conga.

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
tauto.
-----
Lemma equilateral_strict_conga_1 : equilateral_strict A B C -> CongA C A B A C B.
Proof.
intros.
assert (T:= equilateral_strict_neq H).
apply equilateral_strict_equilateral in H.
apply equilateral_isosceles_1 in H.
apply isosceles_conga.

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
tauto.
-----
Lemma equilateral_strict_conga_1 : equilateral_strict A B C -> CongA C A B A C B.
Proof.
intros.
assert (T:= equilateral_strict_neq H).
apply equilateral_strict_equilateral in H.
apply equilateral_isosceles_1 in H.
apply isosceles_conga.

*****
T : and (not (eq A B)) (and (not (eq B C)) (not (eq A C)))
H : isosceles A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
isosceles A B C
+++++
assumption.
-----
Lemma equilateral_strict_conga_1 : equilateral_strict A B C -> CongA C A B A C B.
Proof.
intros.
assert (T:= equilateral_strict_neq H).
apply equilateral_strict_equilateral in H.
apply equilateral_isosceles_1 in H.
apply isosceles_conga.

*****

*****

+++++
Qed.
-----
End ABC.
-----
Lemma equilateral_strict_conga_2 :\n forall A B C,\n equilateral_strict A B C ->\n CongA B A C A B C.
-----
Lemma equilateral_strict_conga_2 : forall A B C, equilateral_strict A B C -> CongA B A C A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : equilateral_strict A B C), CongA B A C A B C
+++++
Proof.
-----
Lemma equilateral_strict_conga_2 : forall A B C, equilateral_strict A B C -> CongA B A C A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : equilateral_strict A B C), CongA B A C A B C
+++++
intros.
-----
Lemma equilateral_strict_conga_2 : forall A B C, equilateral_strict A B C -> CongA B A C A B C.
Proof.
intros.

*****
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA B A C A B C
+++++
apply equilateral_strict_swap_1 in H.
-----
Lemma equilateral_strict_conga_2 : forall A B C, equilateral_strict A B C -> CongA B A C A B C.
Proof.
intros.
apply equilateral_strict_swap_1 in H.

*****
H : equilateral_strict A C B
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA B A C A B C
+++++
apply equilateral_strict_conga_1 in H.
-----
Lemma equilateral_strict_conga_2 : forall A B C, equilateral_strict A B C -> CongA B A C A B C.
Proof.
intros.
apply equilateral_strict_swap_1 in H.
apply equilateral_strict_conga_1 in H.

*****
H : CongA B A C A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA B A C A B C
+++++
assumption.
-----
Lemma equilateral_strict_conga_2 : forall A B C, equilateral_strict A B C -> CongA B A C A B C.
Proof.
intros.
apply equilateral_strict_swap_1 in H.
apply equilateral_strict_conga_1 in H.
assumption.

*****

*****

+++++
Qed.
-----
Lemma equilateral_strict_conga_3 :\n forall A B C,\n equilateral_strict A B C ->\n CongA C B A B C A.
-----
Lemma equilateral_strict_conga_3 : forall A B C, equilateral_strict A B C -> CongA C B A B C A.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : equilateral_strict A B C), CongA C B A B C A
+++++
Proof.
-----
Lemma equilateral_strict_conga_3 : forall A B C, equilateral_strict A B C -> CongA C B A B C A.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : equilateral_strict A B C), CongA C B A B C A
+++++
intros.
-----
Lemma equilateral_strict_conga_3 : forall A B C, equilateral_strict A B C -> CongA C B A B C A.
Proof.
intros.

*****
H : equilateral_strict A B C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA C B A B C A
+++++
apply equilateral_strict_swap_2 in H.
-----
Lemma equilateral_strict_conga_3 : forall A B C, equilateral_strict A B C -> CongA C B A B C A.
Proof.
intros.
apply equilateral_strict_swap_2 in H.

*****
H : equilateral_strict B A C
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA C B A B C A
+++++
apply equilateral_strict_conga_1 in H.
-----
Lemma equilateral_strict_conga_3 : forall A B C, equilateral_strict A B C -> CongA C B A B C A.
Proof.
intros.
apply equilateral_strict_swap_2 in H.
apply equilateral_strict_conga_1 in H.

*****
H : CongA C B A B C A
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA C B A B C A
+++++
assumption.
-----
Lemma equilateral_strict_conga_3 : forall A B C, equilateral_strict A B C -> CongA C B A B C A.
Proof.
intros.
apply equilateral_strict_swap_2 in H.
apply equilateral_strict_conga_1 in H.
assumption.

*****

*****

+++++
Qed.
-----
Lemma conga3_equilateral :\n forall A B C, \n ~ Col A B C ->\n CongA B A C A B C ->\n CongA A B C B C A ->\n equilateral A B C.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (Col A B C)) (_ : CongA B A C A B C) (_ : CongA A B C B C A), equilateral A B C
+++++
Proof.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (Col A B C)) (_ : CongA B A C A B C) (_ : CongA A B C B C A), equilateral A B C
+++++
intros.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.

*****
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral A B C
+++++
assert (isosceles B C A).
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).

*****
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
isosceles B C A
+++++
apply conga_isosceles.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).
apply conga_isosceles.

*****
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B C A)
+++++
CongA.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).
apply conga_isosceles.
CongA.

*****
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B C A)
+++++
Col.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).
apply conga_isosceles.

*****
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C B A C
+++++
CongA.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).

*****
H2 : isosceles B C A
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral A B C
+++++
idtac.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).
idtac.

*****
H2 : isosceles B C A
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral A B C
+++++
assert (isosceles C A B).
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).
idtac.
assert (isosceles C A B).

*****
H2 : isosceles B C A
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
isosceles C A B
+++++
apply conga_isosceles.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).
idtac.
assert (isosceles C A B).
apply conga_isosceles.

*****
H2 : isosceles B C A
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C A B)
+++++
CongA.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).
idtac.
assert (isosceles C A B).
apply conga_isosceles.
CongA.

*****
H2 : isosceles B C A
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C A B)
+++++
Col.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).
idtac.
assert (isosceles C A B).
apply conga_isosceles.

*****
H2 : isosceles B C A
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA B C A C B A
+++++
CongA.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).
idtac.
assert (isosceles C A B).

*****
H3 : isosceles C A B
H2 : isosceles B C A
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral A B C
+++++
idtac.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).
idtac.
assert (isosceles C A B).
idtac.

*****
H3 : isosceles C A B
H2 : isosceles B C A
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral A B C
+++++
unfold isosceles in *.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).
idtac.
assert (isosceles C A B).
idtac.
unfold isosceles in *.

*****
H3 : Cong C A A B
H2 : Cong B C C A
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
equilateral A B C
+++++
unfold equilateral.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).
idtac.
assert (isosceles C A B).
idtac.
unfold isosceles in *.
unfold equilateral.

*****
H3 : Cong C A A B
H2 : Cong B C C A
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong A B B C) (Cong B C C A)
+++++
split.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).
idtac.
assert (isosceles C A B).
idtac.
unfold isosceles in *.
unfold equilateral.
split.

*****
H3 : Cong C A A B
H2 : Cong B C C A
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A B B C
+++++
eCong.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).
idtac.
assert (isosceles C A B).
idtac.
unfold isosceles in *.
unfold equilateral.
split.

*****
H3 : Cong C A A B
H2 : Cong B C C A
H1 : CongA A B C B C A
H0 : CongA B A C A B C
H : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B C C A
+++++
eCong.
-----
Lemma conga3_equilateral : forall A B C, ~ Col A B C -> CongA B A C A B C -> CongA A B C B C A -> equilateral A B C.
Proof.
intros.
assert (isosceles B C A).

*****

*****

+++++
Qed.
-----
End Triangles.
-----
