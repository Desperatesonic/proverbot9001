Require Coq.Logic.Eqdep_dec.
-----
From Coq Require EquivDec.
-----
Require Import ExtLib.Core.RelDec.
-----
Require Import ExtLib.Tactics.Consider.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Section Classes.
-----
Context {A : Type}.
-----
Context {dec : EquivDec.EqDec A (@eq A)}.
-----
Theorem UIP_refl : forall {x : A} (p1 : x = x), p1 = refl_equal _.
-----
Theorem UIP_refl : forall {x : A} (p1 : x = x), p1 = refl_equal _.

*****
dec : EquivDec.EqDec A eq
A : Type
*****
forall (x : A) (p1 : eq x x), eq p1 eq_refl
+++++
intros.
-----
Theorem UIP_refl : forall {x : A} (p1 : x = x), p1 = refl_equal _.
intros.

*****
p1 : eq x x
x : A
dec : EquivDec.EqDec A eq
A : Type
*****
eq p1 eq_refl
+++++
eapply Coq.Logic.Eqdep_dec.UIP_dec.
-----
Theorem UIP_refl : forall {x : A} (p1 : x = x), p1 = refl_equal _.
intros.
eapply Coq.Logic.Eqdep_dec.UIP_dec.

*****
p1 : eq x x
x : A
dec : EquivDec.EqDec A eq
A : Type
*****
forall x y : A, sumbool (eq x y) (not (eq x y))
+++++
apply EquivDec.equiv_dec.
-----
Theorem UIP_refl : forall {x : A} (p1 : x = x), p1 = refl_equal _.
intros.
eapply Coq.Logic.Eqdep_dec.UIP_dec.
apply EquivDec.equiv_dec.

*****

*****

+++++
Qed.
-----
Theorem UIP_equal : forall {x y : A} (p1 p2 : x = y), p1 = p2.
-----
Theorem UIP_equal : forall {x y : A} (p1 p2 : x = y), p1 = p2.

*****
dec : EquivDec.EqDec A eq
A : Type
*****
forall (x y : A) (p1 p2 : eq x y), eq p1 p2
+++++
eapply Coq.Logic.Eqdep_dec.UIP_dec.
-----
Theorem UIP_equal : forall {x y : A} (p1 p2 : x = y), p1 = p2.
eapply Coq.Logic.Eqdep_dec.UIP_dec.

*****
dec : EquivDec.EqDec A eq
A : Type
*****
forall x y : A, sumbool (eq x y) (not (eq x y))
+++++
apply EquivDec.equiv_dec.
-----
Theorem UIP_equal : forall {x y : A} (p1 p2 : x = y), p1 = p2.
eapply Coq.Logic.Eqdep_dec.UIP_dec.
apply EquivDec.equiv_dec.

*****

*****

+++++
Qed.
-----
Lemma inj_pair2 :\n    forall (P:A -> Type) (p:A) (x y:P p),\n      existT P p x = existT P p y -> x = y.
-----
Lemma inj_pair2 : forall (P:A -> Type) (p:A) (x y:P p), existT P p x = existT P p y -> x = y.

*****
dec : EquivDec.EqDec A eq
A : Type
*****
forall (P : forall _ : A, Type) (p : A) (x y : P p) (_ : eq (existT P p x) (existT P p y)), eq x y
+++++
Proof.
-----
Lemma inj_pair2 : forall (P:A -> Type) (p:A) (x y:P p), existT P p x = existT P p y -> x = y.
Proof.

*****
dec : EquivDec.EqDec A eq
A : Type
*****
forall (P : forall _ : A, Type) (p : A) (x y : P p) (_ : eq (existT P p x) (existT P p y)), eq x y
+++++
intros.
-----
Lemma inj_pair2 : forall (P:A -> Type) (p:A) (x y:P p), existT P p x = existT P p y -> x = y.
Proof.
intros.

*****
H : eq (existT P p x) (existT P p y)
x,y : P p
p : A
P : forall _ : A, Type
dec : EquivDec.EqDec A eq
A : Type
*****
eq x y
+++++
eapply Coq.Logic.Eqdep_dec.inj_pair2_eq_dec.
-----
Lemma inj_pair2 : forall (P:A -> Type) (p:A) (x y:P p), existT P p x = existT P p y -> x = y.
Proof.
intros.
eapply Coq.Logic.Eqdep_dec.inj_pair2_eq_dec.

*****
H : eq (existT P p x) (existT P p y)
x,y : P p
p : A
P : forall _ : A, Type
dec : EquivDec.EqDec A eq
A : Type
*****
forall x y : A, sumbool (eq x y) (not (eq x y))
+++++
auto.
-----
Lemma inj_pair2 : forall (P:A -> Type) (p:A) (x y:P p), existT P p x = existT P p y -> x = y.
Proof.
intros.
eapply Coq.Logic.Eqdep_dec.inj_pair2_eq_dec.

*****
H : eq (existT P p x) (existT P p y)
x,y : P p
p : A
P : forall _ : A, Type
dec : EquivDec.EqDec A eq
A : Type
*****
eq (existT P p x) (existT P p y)
+++++
auto.
-----
Lemma inj_pair2 : forall (P:A -> Type) (p:A) (x y:P p), existT P p x = existT P p y -> x = y.
Proof.
intros.
eapply Coq.Logic.Eqdep_dec.inj_pair2_eq_dec.

*****

*****

+++++
Qed.
-----
Theorem equiv_dec_refl_left : forall a, @EquivDec.equiv_dec _ _ _ dec a a = left eq_refl.
-----
Theorem equiv_dec_refl_left : forall a, @EquivDec.equiv_dec _ _ _ dec a a = left eq_refl.

*****
dec : EquivDec.EqDec A eq
A : Type
*****
forall a : A, eq (EquivDec.equiv_dec a a) (left eq_refl)
+++++
Proof.
-----
Theorem equiv_dec_refl_left : forall a, @EquivDec.equiv_dec _ _ _ dec a a = left eq_refl.
Proof.

*****
dec : EquivDec.EqDec A eq
A : Type
*****
forall a : A, eq (EquivDec.equiv_dec a a) (left eq_refl)
+++++
intros.
-----
Theorem equiv_dec_refl_left : forall a, @EquivDec.equiv_dec _ _ _ dec a a = left eq_refl.
Proof.
intros.

*****
a : A
dec : EquivDec.EqDec A eq
A : Type
*****
eq (EquivDec.equiv_dec a a) (left eq_refl)
+++++
destruct (EquivDec.equiv_dec a a).
-----
Theorem equiv_dec_refl_left : forall a, @EquivDec.equiv_dec _ _ _ dec a a = left eq_refl.
Proof.
intros.
destruct (EquivDec.equiv_dec a a).

*****
e : Equivalence.equiv a a
a : A
dec : EquivDec.EqDec A eq
A : Type
*****
eq (left e) (left eq_refl)
+++++
try congruence.
-----
Theorem equiv_dec_refl_left : forall a, @EquivDec.equiv_dec _ _ _ dec a a = left eq_refl.
Proof.
intros.
destruct (EquivDec.equiv_dec a a).
try congruence.

*****
e : Equivalence.equiv a a
a : A
dec : EquivDec.EqDec A eq
A : Type
*****
eq (left e) (left eq_refl)
+++++
f_equal.
-----
Theorem equiv_dec_refl_left : forall a, @EquivDec.equiv_dec _ _ _ dec a a = left eq_refl.
Proof.
intros.
destruct (EquivDec.equiv_dec a a).
try congruence.
f_equal.

*****
e : Equivalence.equiv a a
a : A
dec : EquivDec.EqDec A eq
A : Type
*****
eq e eq_refl
+++++
apply UIP_equal.
-----
Theorem equiv_dec_refl_left : forall a, @EquivDec.equiv_dec _ _ _ dec a a = left eq_refl.
Proof.
intros.
destruct (EquivDec.equiv_dec a a).

*****
c : RelationClasses.complement Equivalence.equiv a a
a : A
dec : EquivDec.EqDec A eq
A : Type
*****
eq (right c) (left eq_refl)
+++++
try congruence.
-----
Theorem equiv_dec_refl_left : forall a, @EquivDec.equiv_dec _ _ _ dec a a = left eq_refl.
Proof.
intros.
destruct (EquivDec.equiv_dec a a).

*****

*****

+++++
Qed.
-----
End Classes.
-----
Section from_rel_dec.
-----
Variable T : Type.
-----
Variable RD : RelDec (@eq T).
-----
Variable RDC : RelDec_Correct RD.
-----
Global Instance EqDec_RelDec : EquivDec.EqDec T (@eq T).
-----
Global Instance EqDec_RelDec : EquivDec.EqDec T (@eq T).

*****
RDC : RelDec_Correct RD
RD : RelDec eq
T : Type
*****
EquivDec.EqDec T eq
+++++
Proof.
-----
Global Instance EqDec_RelDec : EquivDec.EqDec T (@eq T).
Proof.

*****
RDC : RelDec_Correct RD
RD : RelDec eq
T : Type
*****
EquivDec.EqDec T eq
+++++
red.
-----
Global Instance EqDec_RelDec : EquivDec.EqDec T (@eq T).
Proof.
red.

*****
RDC : RelDec_Correct RD
RD : RelDec eq
T : Type
*****
forall x y : T, sumbool (Equivalence.equiv x y) (RelationClasses.complement Equivalence.equiv x y)
+++++
intros.
-----
Global Instance EqDec_RelDec : EquivDec.EqDec T (@eq T).
Proof.
red.
intros.

*****
x,y : T
RDC : RelDec_Correct RD
RD : RelDec eq
T : Type
*****
sumbool (Equivalence.equiv x y) (RelationClasses.complement Equivalence.equiv x y)
+++++
consider (x ?[ eq ] y).
-----
Global Instance EqDec_RelDec : EquivDec.EqDec T (@eq T).
Proof.
red.
intros.
consider (x ?[ eq ] y).

*****
x,y : T
RDC : RelDec_Correct RD
RD : RelDec eq
T : Type
*****
forall _ : eq x y, sumbool (Equivalence.equiv x y) (RelationClasses.complement Equivalence.equiv x y)
+++++
intros.
-----
Global Instance EqDec_RelDec : EquivDec.EqDec T (@eq T).
Proof.
red.
intros.
consider (x ?[ eq ] y).
intros.

*****
H : eq x y
x,y : T
RDC : RelDec_Correct RD
RD : RelDec eq
T : Type
*****
sumbool (Equivalence.equiv x y) (RelationClasses.complement Equivalence.equiv x y)
+++++
subst.
-----
Global Instance EqDec_RelDec : EquivDec.EqDec T (@eq T).
Proof.
red.
intros.
consider (x ?[ eq ] y).
intros.
subst.

*****
y : T
RDC : RelDec_Correct RD
RD : RelDec eq
T : Type
*****
sumbool (Equivalence.equiv y y) (RelationClasses.complement Equivalence.equiv y y)
+++++
auto.
-----
Global Instance EqDec_RelDec : EquivDec.EqDec T (@eq T).
Proof.
red.
intros.
consider (x ?[ eq ] y).
intros.
subst.
auto.

*****
y : T
RDC : RelDec_Correct RD
RD : RelDec eq
T : Type
*****
sumbool (Equivalence.equiv y y) (RelationClasses.complement Equivalence.equiv y y)
+++++
left.
-----
Global Instance EqDec_RelDec : EquivDec.EqDec T (@eq T).
Proof.
red.
intros.
consider (x ?[ eq ] y).
intros.
subst.
auto.
left.

*****
y : T
RDC : RelDec_Correct RD
RD : RelDec eq
T : Type
*****
Equivalence.equiv y y
+++++
reflexivity.
-----
Global Instance EqDec_RelDec : EquivDec.EqDec T (@eq T).
Proof.
red.
intros.
consider (x ?[ eq ] y).

*****
x,y : T
RDC : RelDec_Correct RD
RD : RelDec eq
T : Type
*****
forall _ : not (eq x y), sumbool (Equivalence.equiv x y) (RelationClasses.complement Equivalence.equiv x y)
+++++
intros.
-----
Global Instance EqDec_RelDec : EquivDec.EqDec T (@eq T).
Proof.
red.
intros.
consider (x ?[ eq ] y).
intros.

*****
H : not (eq x y)
x,y : T
RDC : RelDec_Correct RD
RD : RelDec eq
T : Type
*****
sumbool (Equivalence.equiv x y) (RelationClasses.complement Equivalence.equiv x y)
+++++
subst.
-----
Global Instance EqDec_RelDec : EquivDec.EqDec T (@eq T).
Proof.
red.
intros.
consider (x ?[ eq ] y).
intros.
subst.

*****
H : not (eq x y)
x,y : T
RDC : RelDec_Correct RD
RD : RelDec eq
T : Type
*****
sumbool (Equivalence.equiv x y) (RelationClasses.complement Equivalence.equiv x y)
+++++
auto.
-----
Global Instance EqDec_RelDec : EquivDec.EqDec T (@eq T).
Proof.
red.
intros.
consider (x ?[ eq ] y).

*****

*****

+++++
Qed.
-----
End from_rel_dec.
-----
