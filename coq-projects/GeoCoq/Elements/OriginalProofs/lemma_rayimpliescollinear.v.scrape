Require Export GeoCoq.Elements.OriginalProofs.lemma_collinear4.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_rayimpliescollinear : \n   forall A B C, \n   Out A B C ->\n   Col A B C.
-----
Lemma lemma_rayimpliescollinear : forall A B C, Out A B C -> Col A B C.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C : Point) (_ : Out A B C), Col A B C
+++++
Proof.
-----
Lemma lemma_rayimpliescollinear : forall A B C, Out A B C -> Col A B C.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C : Point) (_ : Out A B C), Col A B C
+++++
intros.
-----
Lemma lemma_rayimpliescollinear : forall A B C, Out A B C -> Col A B C.
Proof.
intros.

*****
H : Out A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col A B C
+++++
let Tf:=fresh in assert (Tf:exists J, (BetS J A C /\ BetS J A B)) by (conclude_def Out );destruct Tf as [J];spliter.
-----
Lemma lemma_rayimpliescollinear : forall A B C, Out A B C -> Col A B C.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS J A C /\\ BetS J A B)) by (conclude_def Out );destruct Tf as [J];spliter.

*****
H1 : BetS J A B
H0 : BetS J A C
J : Point
H : Out A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col A B C
+++++
assert (neq J A) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_rayimpliescollinear : forall A B C, Out A B C -> Col A B C.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS J A C /\\ BetS J A B)) by (conclude_def Out );destruct Tf as [J];spliter.
assert (neq J A) by (forward_using lemma_betweennotequal).

*****
H2 : neq J A
H1 : BetS J A B
H0 : BetS J A C
J : Point
H : Out A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col A B C
+++++
assert (Col J A B) by (conclude_def Col ).
-----
Lemma lemma_rayimpliescollinear : forall A B C, Out A B C -> Col A B C.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS J A C /\\ BetS J A B)) by (conclude_def Out );destruct Tf as [J];spliter.
assert (neq J A) by (forward_using lemma_betweennotequal).
assert (Col J A B) by (conclude_def Col ).

*****
H3 : Col J A B
H2 : neq J A
H1 : BetS J A B
H0 : BetS J A C
J : Point
H : Out A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col A B C
+++++
assert (Col J A C) by (conclude_def Col ).
-----
Lemma lemma_rayimpliescollinear : forall A B C, Out A B C -> Col A B C.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS J A C /\\ BetS J A B)) by (conclude_def Out );destruct Tf as [J];spliter.
assert (neq J A) by (forward_using lemma_betweennotequal).
assert (Col J A B) by (conclude_def Col ).
assert (Col J A C) by (conclude_def Col ).

*****
H4 : Col J A C
H3 : Col J A B
H2 : neq J A
H1 : BetS J A B
H0 : BetS J A C
J : Point
H : Out A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col A B C
+++++
assert (Col A B C) by (conclude lemma_collinear4).
-----
Lemma lemma_rayimpliescollinear : forall A B C, Out A B C -> Col A B C.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS J A C /\\ BetS J A B)) by (conclude_def Out );destruct Tf as [J];spliter.
assert (neq J A) by (forward_using lemma_betweennotequal).
assert (Col J A B) by (conclude_def Col ).
assert (Col J A C) by (conclude_def Col ).
assert (Col A B C) by (conclude lemma_collinear4).

*****
H5 : Col A B C
H4 : Col J A C
H3 : Col J A B
H2 : neq J A
H1 : BetS J A B
H0 : BetS J A C
J : Point
H : Out A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col A B C
+++++
close.
-----
Lemma lemma_rayimpliescollinear : forall A B C, Out A B C -> Col A B C.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists J, (BetS J A C /\\ BetS J A B)) by (conclude_def Out );destruct Tf as [J];spliter.
assert (neq J A) by (forward_using lemma_betweennotequal).
assert (Col J A B) by (conclude_def Col ).
assert (Col J A C) by (conclude_def Col ).
assert (Col A B C) by (conclude lemma_collinear4).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
