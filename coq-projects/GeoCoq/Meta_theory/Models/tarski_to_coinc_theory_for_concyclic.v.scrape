Require Import GeoCoq.Tactics.Coinc.tactics_axioms.
-----
Require Import GeoCoq.Tarski_dev.Annexes.inscribed_angle.
-----
Section Tarski_is_a_Coinc_theory_for_concyclic.
-----
Context `{TE:Tarski_euclidean}.
-----
Definition not_col : arity Tpoint 3 := fun A B C : Tpoint => ~ Col A B C.
-----
Lemma not_col_perm_1 : forall A X, app_1_n not_col A X -> app_n_1 not_col X A.
-----
Lemma not_col_perm_1 : forall A X, app_1_n not_col A X -> app_n_1 not_col X A.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A : Tpoint) (X : cartesianPower Tpoint (S (S O))) (_ : app_1_n not_col A X), app_n_1 not_col X A
+++++
Proof.
-----
Lemma not_col_perm_1 : forall A X, app_1_n not_col A X -> app_n_1 not_col X A.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A : Tpoint) (X : cartesianPower Tpoint (S (S O))) (_ : app_1_n not_col A X), app_n_1 not_col X A
+++++
unfold not_col.
-----
Lemma not_col_perm_1 : forall A X, app_1_n not_col A X -> app_n_1 not_col X A.
Proof.
unfold not_col.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A : Tpoint) (X : cartesianPower Tpoint (S (S O))) (_ : app_1_n (fun A0 B C : Tpoint => not (Col A0 B C)) A X), app_n_1 (fun A0 B C : Tpoint => not (Col A0 B C)) X A
+++++
simpl.
-----
Lemma not_col_perm_1 : forall A X, app_1_n not_col A X -> app_n_1 not_col X A.
Proof.
unfold not_col.
simpl.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A : Tpoint) (X : cartesianPower Tpoint (S (S O))) (_ : not (Col A (fst X) (snd X))), not (Col (fst X) (snd X) A)
+++++
Col.
-----
Lemma not_col_perm_1 : forall A X, app_1_n not_col A X -> app_n_1 not_col X A.
Proof.
unfold not_col.
simpl.
Col.

*****

*****

+++++
Qed.
-----
Lemma not_col_perm_2 : forall A B (X : cartesianPower Tpoint 1),\n  app_2_n not_col A B X -> app_2_n not_col B A X.
-----
Lemma not_col_perm_2 : forall A B (X : cartesianPower Tpoint 1), app_2_n not_col A B X -> app_2_n not_col B A X.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B : Tpoint) (X : cartesianPower Tpoint (S O)) (_ : app_2_n not_col A B X), app_2_n not_col B A X
+++++
Proof.
-----
Lemma not_col_perm_2 : forall A B (X : cartesianPower Tpoint 1), app_2_n not_col A B X -> app_2_n not_col B A X.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B : Tpoint) (X : cartesianPower Tpoint (S O)) (_ : app_2_n not_col A B X), app_2_n not_col B A X
+++++
unfold not_col.
-----
Lemma not_col_perm_2 : forall A B (X : cartesianPower Tpoint 1), app_2_n not_col A B X -> app_2_n not_col B A X.
Proof.
unfold not_col.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B : Tpoint) (X : cartesianPower Tpoint (S O)) (_ : app_2_n (fun A0 B0 C : Tpoint => not (Col A0 B0 C)) A B X), app_2_n (fun A0 B0 C : Tpoint => not (Col A0 B0 C)) B A X
+++++
unfold app_2_n.
-----
Lemma not_col_perm_2 : forall A B (X : cartesianPower Tpoint 1), app_2_n not_col A B X -> app_2_n not_col B A X.
Proof.
unfold not_col.
unfold app_2_n.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B : Tpoint) (X : cartesianPower Tpoint (S O)) (_ : app (fun C : Tpoint => not (Col A B C)) X), app (fun C : Tpoint => not (Col B A C)) X
+++++
simpl.
-----
Lemma not_col_perm_2 : forall A B (X : cartesianPower Tpoint 1), app_2_n not_col A B X -> app_2_n not_col B A X.
Proof.
unfold not_col.
unfold app_2_n.
simpl.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B : Tpoint) (X : cartesianPower Tpoint (S O)) (_ : not (Col A B X)), not (Col B A X)
+++++
Col.
-----
Lemma not_col_perm_2 : forall A B (X : cartesianPower Tpoint 1), app_2_n not_col A B X -> app_2_n not_col B A X.
Proof.
unfold not_col.
unfold app_2_n.
simpl.
Col.

*****

*****

+++++
Qed.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P,\n  OnCircle A O P /\ OnCircle B O P /\ OnCircle C O P /\ OnCircle D O P /\ Coplanar A B C O.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), ex (fun O : Tpoint => ex (fun P : Tpoint => and (OnCircle A O P) (and (OnCircle B O P) (and (OnCircle C O P) (and (OnCircle D O P) (Coplanar A B C O))))))
+++++
Proof.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), ex (fun O : Tpoint => ex (fun P : Tpoint => and (OnCircle A O P) (and (OnCircle B O P) (and (OnCircle C O P) (and (OnCircle D O P) (Coplanar A B C O))))))
+++++
intros A B C D [HCop [O1 [P1]]].
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].

*****
H : and (OnCircle A O1 P1)\n (and (OnCircle B O1 P1) (and (OnCircle C O1 P1) (OnCircle D O1 P1)))
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => ex (fun P : Tpoint => and (OnCircle A O P) (and (OnCircle B O P) (and (OnCircle C O P) (and (OnCircle D O P) (Coplanar A B C O))))))
+++++
spliter.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.

*****
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => ex (fun P : Tpoint => and (OnCircle A O P) (and (OnCircle B O P) (and (OnCircle C O P) (and (OnCircle D O P) (Coplanar A B C O))))))
+++++
destruct (col_dec A B C).
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).

*****
H3 : Col A B C
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => ex (fun P : Tpoint => and (OnCircle A O P) (and (OnCircle B O P) (and (OnCircle C O P) (and (OnCircle D O P) (Coplanar A B C O))))))
+++++
exists O1, P1.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
exists O1, P1.

*****
H3 : Col A B C
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (OnCircle A O1 P1) (and (OnCircle B O1 P1) (and (OnCircle C O1 P1) (and (OnCircle D O1 P1) (Coplanar A B C O1))))
+++++
repeat split.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
exists O1, P1.
repeat split.

*****
H3 : Col A B C
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OnCircle A O1 P1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
exists O1, P1.
repeat split.

*****
H3 : Col A B C
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OnCircle B O1 P1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
exists O1, P1.
repeat split.

*****
H3 : Col A B C
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OnCircle C O1 P1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
exists O1, P1.
repeat split.

*****
H3 : Col A B C
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OnCircle D O1 P1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
exists O1, P1.
repeat split.

*****
H3 : Col A B C
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).

*****
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => ex (fun P : Tpoint => and (OnCircle A O P) (and (OnCircle B O P) (and (OnCircle C O P) (and (OnCircle D O P) (Coplanar A B C O))))))
+++++
destruct (l11_62_existence A B C O1) as [O []].
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].

*****
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => ex (fun P : Tpoint => and (OnCircle A O P) (and (OnCircle B O P) (and (OnCircle C O P) (and (OnCircle D O P) (Coplanar A B C O))))))
+++++
exists O, A.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.

*****
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (OnCircle A O A) (and (OnCircle B O A) (and (OnCircle C O A) (and (OnCircle D O A) (Coplanar A B C O))))
+++++
assert (HCong := onc2__cong O1 P1).
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (OnCircle A O A) (and (OnCircle B O A) (and (OnCircle C O A) (and (OnCircle D O A) (Coplanar A B C O))))
+++++
repeat split.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OnCircle A O A
+++++
apply cong2_per2__cong with O1 O1.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A O1 A O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.
Cop.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A O1 A O1
+++++
Cong...
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O O1 O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.
Cop.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O O1 O O1
+++++
Cong...
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OnCircle B O A
+++++
apply cong2_per2__cong with O1 O1.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B O1 A O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.
Cop.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B O1 A O1
+++++
Cong...
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O O1 O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.
Cop.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O O1 O O1
+++++
Cong...
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OnCircle C O A
+++++
apply cong2_per2__cong with O1 O1.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per C O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C O1 A O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.
Cop.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C O1 A O1
+++++
Cong...
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O O1 O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.
Cop.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O O1 O O1
+++++
Cong...
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OnCircle D O A
+++++
apply cong2_per2__cong with O1 O1.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per D O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong D O1 A O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.
Cop.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong D O1 A O1
+++++
Cong...
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O O1 O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.
apply cong2_per2__cong with O1 O1.
Cop.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O O1 O O1
+++++
Cong...
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O, A.
assert (HCong := onc2__cong O1 P1).
repeat split.

*****
HCong : forall (A B : Tpoint) (_ : OnCircle A O1 P1) (_ : OnCircle B O1 P1),\nCong O1 A O1 B
H5 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H4 : Coplanar A B C O
O : Tpoint
H3 : not (Col A B C)
H2 : OnCircle D O1 P1
H1 : OnCircle C O1 P1
H0 : OnCircle B O1 P1
H : OnCircle A O1 P1
O1,P1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C O
+++++
assumption.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O P, OnCircle A O P /\\ OnCircle B O P /\\ OnCircle C O P /\\ OnCircle D O P /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1 [P1]]].
spliter.
destruct (col_dec A B C).

*****

*****

+++++
Qed.
-----
Definition Concyclic_gen A B C D :=\n  Concyclic A B C D \/ (Col A B C /\ Col A B D /\ Col A C D /\ Col B C D).
-----
Definition concy : arity Tpoint 4 := Concyclic_gen.
-----
Lemma concyclic_gen_2341 : forall A B C D,\n  Concyclic_gen A B C D -> Concyclic_gen B C D A.
-----
Lemma concyclic_gen_2341 : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen B C D A.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D), Concyclic_gen B C D A
+++++
Proof.
-----
Lemma concyclic_gen_2341 : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen B C D A.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D), Concyclic_gen B C D A
+++++
unfold Concyclic_gen; simpl; intros A B C D H.
-----
Lemma concyclic_gen_2341 : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen B C D A.
Proof.
unfold Concyclic_gen; simpl; intros A B C D H.

*****
H : or (Concyclic A B C D)\n (and (Col A B C) (and (Col A B D) (and (Col A C D) (Col B C D))))
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Concyclic B C D A) (and (Col B C D) (and (Col B C A) (and (Col B D A) (Col C D A))))
+++++
elim H; clear H; intro H; [left; destruct H as [HCop [O [P]]]; split; Cop; exists O, P|right]; spliter; repeat split; Col.
-----
Lemma concyclic_gen_2341 : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen B C D A.
Proof.
unfold Concyclic_gen; simpl; intros A B C D H.
elim H; clear H; intro H; [left; destruct H as [HCop [O [P]]]; split; Cop; exists O, P|right]; spliter; repeat split; Col.

*****

*****

+++++
Qed.
-----
Lemma concy_perm_1 : forall (A : Tpoint) (X : cartesianPower Tpoint 3),\napp_1_n concy A X -> app_n_1 concy X A.
-----
Lemma concy_perm_1 : forall (A : Tpoint) (X : cartesianPower Tpoint 3), app_1_n concy A X -> app_n_1 concy X A.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A : Tpoint) (X : cartesianPower Tpoint (S (S (S O)))) (_ : app_1_n concy A X), app_n_1 concy X A
+++++
Proof.
-----
Lemma concy_perm_1 : forall (A : Tpoint) (X : cartesianPower Tpoint 3), app_1_n concy A X -> app_n_1 concy X A.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A : Tpoint) (X : cartesianPower Tpoint (S (S (S O)))) (_ : app_1_n concy A X), app_n_1 concy X A
+++++
unfold concy.
-----
Lemma concy_perm_1 : forall (A : Tpoint) (X : cartesianPower Tpoint 3), app_1_n concy A X -> app_n_1 concy X A.
Proof.
unfold concy.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A : Tpoint) (X : cartesianPower Tpoint (S (S (S O)))) (_ : app_1_n Concyclic_gen A X), app_n_1 Concyclic_gen X A
+++++
simpl.
-----
Lemma concy_perm_1 : forall (A : Tpoint) (X : cartesianPower Tpoint 3), app_1_n concy A X -> app_n_1 concy X A.
Proof.
unfold concy.
simpl.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A : Tpoint) (X : cartesianPower Tpoint (S (S (S O)))) (_ : Concyclic_gen A (fst X) (fst (snd X)) (snd (snd X))), Concyclic_gen (fst X) (fst (snd X)) (snd (snd X)) A
+++++
intros.
-----
Lemma concy_perm_1 : forall (A : Tpoint) (X : cartesianPower Tpoint 3), app_1_n concy A X -> app_n_1 concy X A.
Proof.
unfold concy.
simpl.
intros.

*****
H : Concyclic_gen A (fst X) (fst (snd X)) (snd (snd X))
X : cartesianPower Tpoint (S (S (S O)))
A : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen (fst X) (fst (snd X)) (snd (snd X)) A
+++++
apply concyclic_gen_2341.
-----
Lemma concy_perm_1 : forall (A : Tpoint) (X : cartesianPower Tpoint 3), app_1_n concy A X -> app_n_1 concy X A.
Proof.
unfold concy.
simpl.
intros.
apply concyclic_gen_2341.

*****
H : Concyclic_gen A (fst X) (fst (snd X)) (snd (snd X))
X : cartesianPower Tpoint (S (S (S O)))
A : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A (fst X) (fst (snd X)) (snd (snd X))
+++++
auto.
-----
Lemma concy_perm_1 : forall (A : Tpoint) (X : cartesianPower Tpoint 3), app_1_n concy A X -> app_n_1 concy X A.
Proof.
unfold concy.
simpl.
intros.
apply concyclic_gen_2341.
auto.

*****

*****

+++++
Qed.
-----
Lemma concyclic_gen_2134 : forall A B C D,\n  Concyclic_gen A B C D -> Concyclic_gen B A C D.
-----
Lemma concyclic_gen_2134 : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen B A C D.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D), Concyclic_gen B A C D
+++++
Proof.
-----
Lemma concyclic_gen_2134 : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen B A C D.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D), Concyclic_gen B A C D
+++++
unfold Concyclic_gen; simpl; intros A B C D H.
-----
Lemma concyclic_gen_2134 : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen B A C D.
Proof.
unfold Concyclic_gen; simpl; intros A B C D H.

*****
H : or (Concyclic A B C D)\n (and (Col A B C) (and (Col A B D) (and (Col A C D) (Col B C D))))
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Concyclic B A C D) (and (Col B A C) (and (Col B A D) (and (Col B C D) (Col A C D))))
+++++
elim H; clear H; intro H; [left; destruct H as [HCop [O [P]]]; split; Cop; exists O, P|right]; spliter; repeat split; Col.
-----
Lemma concyclic_gen_2134 : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen B A C D.
Proof.
unfold Concyclic_gen; simpl; intros A B C D H.
elim H; clear H; intro H; [left; destruct H as [HCop [O [P]]]; split; Cop; exists O, P|right]; spliter; repeat split; Col.

*****

*****

+++++
Qed.
-----
Lemma concy_perm_2 : forall (A B : Tpoint) (X : cartesianPower Tpoint 2),\napp_2_n concy A B X -> app_2_n concy B A X.
-----
Lemma concy_perm_2 : forall (A B : Tpoint) (X : cartesianPower Tpoint 2), app_2_n concy A B X -> app_2_n concy B A X.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B : Tpoint) (X : cartesianPower Tpoint (S (S O))) (_ : app_2_n concy A B X), app_2_n concy B A X
+++++
Proof.
-----
Lemma concy_perm_2 : forall (A B : Tpoint) (X : cartesianPower Tpoint 2), app_2_n concy A B X -> app_2_n concy B A X.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B : Tpoint) (X : cartesianPower Tpoint (S (S O))) (_ : app_2_n concy A B X), app_2_n concy B A X
+++++
unfold app_2_n.
-----
Lemma concy_perm_2 : forall (A B : Tpoint) (X : cartesianPower Tpoint 2), app_2_n concy A B X -> app_2_n concy B A X.
Proof.
unfold app_2_n.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B : Tpoint) (X : cartesianPower Tpoint (S (S O))) (_ : app (concy A B) X), app (concy B A) X
+++++
unfold concy.
-----
Lemma concy_perm_2 : forall (A B : Tpoint) (X : cartesianPower Tpoint 2), app_2_n concy A B X -> app_2_n concy B A X.
Proof.
unfold app_2_n.
unfold concy.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B : Tpoint) (X : cartesianPower Tpoint (S (S O))) (_ : app (Concyclic_gen A B) X), app (Concyclic_gen B A) X
+++++
simpl.
-----
Lemma concy_perm_2 : forall (A B : Tpoint) (X : cartesianPower Tpoint 2), app_2_n concy A B X -> app_2_n concy B A X.
Proof.
unfold app_2_n.
unfold concy.
simpl.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B : Tpoint) (X : cartesianPower Tpoint (S (S O))) (_ : Concyclic_gen A B (fst X) (snd X)), Concyclic_gen B A (fst X) (snd X)
+++++
intros.
-----
Lemma concy_perm_2 : forall (A B : Tpoint) (X : cartesianPower Tpoint 2), app_2_n concy A B X -> app_2_n concy B A X.
Proof.
unfold app_2_n.
unfold concy.
simpl.
intros.

*****
H : Concyclic_gen A B (fst X) (snd X)
X : cartesianPower Tpoint (S (S O))
A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen B A (fst X) (snd X)
+++++
apply concyclic_gen_2134.
-----
Lemma concy_perm_2 : forall (A B : Tpoint) (X : cartesianPower Tpoint 2), app_2_n concy A B X -> app_2_n concy B A X.
Proof.
unfold app_2_n.
unfold concy.
simpl.
intros.
apply concyclic_gen_2134.

*****
H : Concyclic_gen A B (fst X) (snd X)
X : cartesianPower Tpoint (S (S O))
A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B (fst X) (snd X)
+++++
auto.
-----
Lemma concy_perm_2 : forall (A B : Tpoint) (X : cartesianPower Tpoint 2), app_2_n concy A B X -> app_2_n concy B A X.
Proof.
unfold app_2_n.
unfold concy.
simpl.
intros.
apply concyclic_gen_2134.
auto.

*****

*****

+++++
Qed.
-----
Lemma concyclic_gen_1123 : forall A B C, Concyclic_gen A A B C.
-----
Lemma concyclic_gen_1123 : forall A B C, Concyclic_gen A A B C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall A B C : Tpoint, Concyclic_gen A A B C
+++++
Proof.
-----
Lemma concyclic_gen_1123 : forall A B C, Concyclic_gen A A B C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall A B C : Tpoint, Concyclic_gen A A B C
+++++
unfold Concyclic_gen; simpl; intros A B C.
-----
Lemma concyclic_gen_1123 : forall A B C, Concyclic_gen A A B C.
Proof.
unfold Concyclic_gen; simpl; intros A B C.

*****
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Concyclic A A B C) (and (Col A A B) (and (Col A A C) (and (Col A B C) (Col A B C))))
+++++
elim (col_dec A B C); intro; [right; repeat split; Col|].
-----
Lemma concyclic_gen_1123 : forall A B C, Concyclic_gen A A B C.
Proof.
unfold Concyclic_gen; simpl; intros A B C.
elim (col_dec A B C); intro; [right; repeat split; Col|].

*****
H : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Concyclic A A B C) (and (Col A A B) (and (Col A A C) (and (Col A B C) (Col A B C))))
+++++
left.
-----
Lemma concyclic_gen_1123 : forall A B C, Concyclic_gen A A B C.
Proof.
unfold Concyclic_gen; simpl; intros A B C.
elim (col_dec A B C); intro; [right; repeat split; Col|].
left.

*****
H : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic A A B C
+++++
split; Cop.
-----
Lemma concyclic_gen_1123 : forall A B C, Concyclic_gen A A B C.
Proof.
unfold Concyclic_gen; simpl; intros A B C.
elim (col_dec A B C); intro; [right; repeat split; Col|].
left.
split; Cop.

*****
H : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => ex (fun P : Tpoint => and (OnCircle A O P) (and (OnCircle A O P) (and (OnCircle B O P) (OnCircle C O P)))))
+++++
destruct (triangle_circumscription A B C H) as [O]; spliter.
-----
Lemma concyclic_gen_1123 : forall A B C, Concyclic_gen A A B C.
Proof.
unfold Concyclic_gen; simpl; intros A B C.
elim (col_dec A B C); intro; [right; repeat split; Col|].
left.
split; Cop.
destruct (triangle_circumscription A B C H) as [O]; spliter.

*****
H2 : Coplanar A B C O
H1 : Cong A O C O
H0 : Cong A O B O
O : Tpoint
H : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => ex (fun P : Tpoint => and (OnCircle A O P) (and (OnCircle A O P) (and (OnCircle B O P) (OnCircle C O P)))))
+++++
exists O, A; unfold OnCircle; repeat split; Cong.
-----
Lemma concyclic_gen_1123 : forall A B C, Concyclic_gen A A B C.
Proof.
unfold Concyclic_gen; simpl; intros A B C.
elim (col_dec A B C); intro; [right; repeat split; Col|].
left.
split; Cop.
destruct (triangle_circumscription A B C H) as [O]; spliter.
exists O, A; unfold OnCircle; repeat split; Cong.

*****

*****

+++++
Qed.
-----
Lemma concy_bd : forall (A : Tpoint) (X  : cartesianPower Tpoint 2),\napp_2_n concy A A X.
-----
Lemma concy_bd : forall (A : Tpoint) (X : cartesianPower Tpoint 2), app_2_n concy A A X.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A : Tpoint) (X : cartesianPower Tpoint (S (S O))), app_2_n concy A A X
+++++
Proof.
-----
Lemma concy_bd : forall (A : Tpoint) (X : cartesianPower Tpoint 2), app_2_n concy A A X.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A : Tpoint) (X : cartesianPower Tpoint (S (S O))), app_2_n concy A A X
+++++
unfold app_2_n.
-----
Lemma concy_bd : forall (A : Tpoint) (X : cartesianPower Tpoint 2), app_2_n concy A A X.
Proof.
unfold app_2_n.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A : Tpoint) (X : cartesianPower Tpoint (S (S O))), app (concy A A) X
+++++
unfold concy.
-----
Lemma concy_bd : forall (A : Tpoint) (X : cartesianPower Tpoint 2), app_2_n concy A A X.
Proof.
unfold app_2_n.
unfold concy.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A : Tpoint) (X : cartesianPower Tpoint (S (S O))), app (Concyclic_gen A A) X
+++++
simpl.
-----
Lemma concy_bd : forall (A : Tpoint) (X : cartesianPower Tpoint 2), app_2_n concy A A X.
Proof.
unfold app_2_n.
unfold concy.
simpl.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A : Tpoint) (X : cartesianPower Tpoint (S (S O))), Concyclic_gen A A (fst X) (snd X)
+++++
intros.
-----
Lemma concy_bd : forall (A : Tpoint) (X : cartesianPower Tpoint 2), app_2_n concy A A X.
Proof.
unfold app_2_n.
unfold concy.
simpl.
intros.

*****
X : cartesianPower Tpoint (S (S O))
A : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A A (fst X) (snd X)
+++++
apply concyclic_gen_1123.
-----
Lemma concy_bd : forall (A : Tpoint) (X : cartesianPower Tpoint 2), app_2_n concy A A X.
Proof.
unfold app_2_n.
unfold concy.
simpl.
intros.
apply concyclic_gen_1123.

*****

*****

+++++
Qed.
-----
Lemma concy_trans_1 : forall P Q R A B,\n  ~Col P Q R ->\n  Concyclic_gen P Q R A -> Concyclic_gen P Q R B ->\n  Concyclic_gen Q R A B.
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (P Q R A B : Tpoint) (_ : not (Col P Q R)) (_ : Concyclic_gen P Q R A) (_ : Concyclic_gen P Q R B), Concyclic_gen Q R A B
+++++
Proof.
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (P Q R A B : Tpoint) (_ : not (Col P Q R)) (_ : Concyclic_gen P Q R A) (_ : Concyclic_gen P Q R B), Concyclic_gen Q R A B
+++++
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.

*****
H2 : or (Concyclic P Q R B)\n (and (Col P Q R) (and (Col P Q B) (and (Col P R B) (Col Q R B))))
H1 : or (Concyclic P Q R A)\n (and (Col P Q R) (and (Col P Q A) (and (Col P R A) (Col Q R A))))
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Concyclic Q R A B) (and (Col Q R A) (and (Col Q R B) (and (Col Q A B) (Col R A B))))
+++++
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].

*****
H1 : Concyclic P Q R A
H2 : or (Concyclic P Q R B)\n (and (Col P Q R) (and (Col P Q B) (and (Col P R B) (Col Q R B))))
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Concyclic Q R A B) (and (Col Q R A) (and (Col Q R B) (and (Col Q A B) (Col R A B))))
+++++
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].

*****
H2 : Concyclic P Q R B
H1 : Concyclic P Q R A
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Concyclic Q R A B) (and (Col Q R A) (and (Col Q R B) (and (Col Q A B) (Col R A B))))
+++++
destruct (concyclic_aux P Q R A H1) as [O [M]].
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].
destruct (concyclic_aux P Q R A H1) as [O [M]].

*****
H : and (OnCircle P O M)\n (and (OnCircle Q O M)\n (and (OnCircle R O M) (and (OnCircle A O M) (Coplanar P Q R O))))
O,M : Tpoint
H2 : Concyclic P Q R B
H1 : Concyclic P Q R A
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Concyclic Q R A B) (and (Col Q R A) (and (Col Q R B) (and (Col Q A B) (Col R A B))))
+++++
destruct (concyclic_aux P Q R B H2) as [O' [M']].
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].
destruct (concyclic_aux P Q R A H1) as [O [M]].
destruct (concyclic_aux P Q R B H2) as [O' [M']].

*****
H0 : and (OnCircle P O' M')\n (and (OnCircle Q O' M')\n (and (OnCircle R O' M')\n (and (OnCircle B O' M') (Coplanar P Q R O'))))
O',M' : Tpoint
H : and (OnCircle P O M)\n (and (OnCircle Q O M)\n (and (OnCircle R O M) (and (OnCircle A O M) (Coplanar P Q R O))))
O,M : Tpoint
H2 : Concyclic P Q R B
H1 : Concyclic P Q R A
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Concyclic Q R A B) (and (Col Q R A) (and (Col Q R B) (and (Col Q A B) (Col R A B))))
+++++
spliter.
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].
destruct (concyclic_aux P Q R A H1) as [O [M]].
destruct (concyclic_aux P Q R B H2) as [O' [M']].
spliter.

*****
H6 : Coplanar P Q R O'
H5 : OnCircle B O' M'
H4 : OnCircle R O' M'
H3 : OnCircle Q O' M'
H0 : OnCircle P O' M'
O',M' : Tpoint
H10 : Coplanar P Q R O
H9 : OnCircle A O M
H8 : OnCircle R O M
H7 : OnCircle Q O M
H : OnCircle P O M
O,M : Tpoint
H2 : Concyclic P Q R B
H1 : Concyclic P Q R A
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Concyclic Q R A B) (and (Col Q R A) (and (Col Q R B) (and (Col Q A B) (Col R A B))))
+++++
assert (O = O').
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].
destruct (concyclic_aux P Q R A H1) as [O [M]].
destruct (concyclic_aux P Q R B H2) as [O' [M']].
spliter.
assert (O = O').

*****
H6 : Coplanar P Q R O'
H5 : OnCircle B O' M'
H4 : OnCircle R O' M'
H3 : OnCircle Q O' M'
H0 : OnCircle P O' M'
O',M' : Tpoint
H10 : Coplanar P Q R O
H9 : OnCircle A O M
H8 : OnCircle R O M
H7 : OnCircle Q O M
H : OnCircle P O M
O,M : Tpoint
H2 : Concyclic P Q R B
H1 : Concyclic P Q R A
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq O O'
+++++
apply (cong4_cop2__eq P Q R); trivial; [apply cong_transitivity with O M..| apply cong_transitivity with O' M'|apply cong_transitivity with O' M']; Cong.
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].
destruct (concyclic_aux P Q R A H1) as [O [M]].
destruct (concyclic_aux P Q R B H2) as [O' [M']].
spliter.
assert (O = O').
apply (cong4_cop2__eq P Q R); trivial; [apply cong_transitivity with O M..| apply cong_transitivity with O' M'|apply cong_transitivity with O' M']; Cong.

*****
H11 : eq O O'
H6 : Coplanar P Q R O'
H5 : OnCircle B O' M'
H4 : OnCircle R O' M'
H3 : OnCircle Q O' M'
H0 : OnCircle P O' M'
O',M' : Tpoint
H10 : Coplanar P Q R O
H9 : OnCircle A O M
H8 : OnCircle R O M
H7 : OnCircle Q O M
H : OnCircle P O M
O,M : Tpoint
H2 : Concyclic P Q R B
H1 : Concyclic P Q R A
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Concyclic Q R A B) (and (Col Q R A) (and (Col Q R B) (and (Col Q A B) (Col R A B))))
+++++
subst O'.
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].
destruct (concyclic_aux P Q R A H1) as [O [M]].
destruct (concyclic_aux P Q R B H2) as [O' [M']].
spliter.
assert (O = O').
apply (cong4_cop2__eq P Q R); trivial; [apply cong_transitivity with O M..| apply cong_transitivity with O' M'|apply cong_transitivity with O' M']; Cong.
subst O'.

*****
H0 : OnCircle P O M'
H3 : OnCircle Q O M'
H4 : OnCircle R O M'
H5 : OnCircle B O M'
H6 : Coplanar P Q R O
M' : Tpoint
H10 : Coplanar P Q R O
H9 : OnCircle A O M
H8 : OnCircle R O M
H7 : OnCircle Q O M
H : OnCircle P O M
O,M : Tpoint
H2 : Concyclic P Q R B
H1 : Concyclic P Q R A
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Concyclic Q R A B) (and (Col Q R A) (and (Col Q R B) (and (Col Q A B) (Col R A B))))
+++++
assert (OnCircle B O M).
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].
destruct (concyclic_aux P Q R A H1) as [O [M]].
destruct (concyclic_aux P Q R B H2) as [O' [M']].
spliter.
assert (O = O').
apply (cong4_cop2__eq P Q R); trivial; [apply cong_transitivity with O M..| apply cong_transitivity with O' M'|apply cong_transitivity with O' M']; Cong.
subst O'.
assert (OnCircle B O M).

*****
H0 : OnCircle P O M'
H3 : OnCircle Q O M'
H4 : OnCircle R O M'
H5 : OnCircle B O M'
H6 : Coplanar P Q R O
M' : Tpoint
H10 : Coplanar P Q R O
H9 : OnCircle A O M
H8 : OnCircle R O M
H7 : OnCircle Q O M
H : OnCircle P O M
O,M : Tpoint
H2 : Concyclic P Q R B
H1 : Concyclic P Q R A
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OnCircle B O M
+++++
apply cong_transitivity with O M'; [|apply cong_transitivity with O P]; Cong.
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].
destruct (concyclic_aux P Q R A H1) as [O [M]].
destruct (concyclic_aux P Q R B H2) as [O' [M']].
spliter.
assert (O = O').
apply (cong4_cop2__eq P Q R); trivial; [apply cong_transitivity with O M..| apply cong_transitivity with O' M'|apply cong_transitivity with O' M']; Cong.
subst O'.
assert (OnCircle B O M).
apply cong_transitivity with O M'; [|apply cong_transitivity with O P]; Cong.

*****
H11 : OnCircle B O M
H0 : OnCircle P O M'
H3 : OnCircle Q O M'
H4 : OnCircle R O M'
H5 : OnCircle B O M'
H6 : Coplanar P Q R O
M' : Tpoint
H10 : Coplanar P Q R O
H9 : OnCircle A O M
H8 : OnCircle R O M
H7 : OnCircle Q O M
H : OnCircle P O M
O,M : Tpoint
H2 : Concyclic P Q R B
H1 : Concyclic P Q R A
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Concyclic Q R A B) (and (Col Q R A) (and (Col Q R B) (and (Col Q A B) (Col R A B))))
+++++
clear dependent M'.
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].
destruct (concyclic_aux P Q R A H1) as [O [M]].
destruct (concyclic_aux P Q R B H2) as [O' [M']].
spliter.
assert (O = O').
apply (cong4_cop2__eq P Q R); trivial; [apply cong_transitivity with O M..| apply cong_transitivity with O' M'|apply cong_transitivity with O' M']; Cong.
subst O'.
assert (OnCircle B O M).
apply cong_transitivity with O M'; [|apply cong_transitivity with O P]; Cong.
clear dependent M'.

*****
H11 : OnCircle B O M
H10,H6 : Coplanar P Q R O
H9 : OnCircle A O M
H8 : OnCircle R O M
H7 : OnCircle Q O M
H : OnCircle P O M
O,M : Tpoint
H2 : Concyclic P Q R B
H1 : Concyclic P Q R A
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Concyclic Q R A B) (and (Col Q R A) (and (Col Q R B) (and (Col Q A B) (Col R A B))))
+++++
destruct H1 as [HCop1 _].
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].
destruct (concyclic_aux P Q R A H1) as [O [M]].
destruct (concyclic_aux P Q R B H2) as [O' [M']].
spliter.
assert (O = O').
apply (cong4_cop2__eq P Q R); trivial; [apply cong_transitivity with O M..| apply cong_transitivity with O' M'|apply cong_transitivity with O' M']; Cong.
subst O'.
assert (OnCircle B O M).
apply cong_transitivity with O M'; [|apply cong_transitivity with O P]; Cong.
clear dependent M'.
destruct H1 as [HCop1 _].

*****
H11 : OnCircle B O M
H10,H6 : Coplanar P Q R O
H9 : OnCircle A O M
H8 : OnCircle R O M
H7 : OnCircle Q O M
H : OnCircle P O M
O,M : Tpoint
H2 : Concyclic P Q R B
HCop1 : Coplanar P Q R A
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Concyclic Q R A B) (and (Col Q R A) (and (Col Q R B) (and (Col Q A B) (Col R A B))))
+++++
destruct H2 as [HCop2 _].
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].
destruct (concyclic_aux P Q R A H1) as [O [M]].
destruct (concyclic_aux P Q R B H2) as [O' [M']].
spliter.
assert (O = O').
apply (cong4_cop2__eq P Q R); trivial; [apply cong_transitivity with O M..| apply cong_transitivity with O' M'|apply cong_transitivity with O' M']; Cong.
subst O'.
assert (OnCircle B O M).
apply cong_transitivity with O M'; [|apply cong_transitivity with O P]; Cong.
clear dependent M'.
destruct H1 as [HCop1 _].
destruct H2 as [HCop2 _].

*****
H11 : OnCircle B O M
H10,H6 : Coplanar P Q R O
H9 : OnCircle A O M
H8 : OnCircle R O M
H7 : OnCircle Q O M
H : OnCircle P O M
O,M : Tpoint
HCop2 : Coplanar P Q R B
HCop1 : Coplanar P Q R A
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Concyclic Q R A B) (and (Col Q R A) (and (Col Q R B) (and (Col Q A B) (Col R A B))))
+++++
left.
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].
destruct (concyclic_aux P Q R A H1) as [O [M]].
destruct (concyclic_aux P Q R B H2) as [O' [M']].
spliter.
assert (O = O').
apply (cong4_cop2__eq P Q R); trivial; [apply cong_transitivity with O M..| apply cong_transitivity with O' M'|apply cong_transitivity with O' M']; Cong.
subst O'.
assert (OnCircle B O M).
apply cong_transitivity with O M'; [|apply cong_transitivity with O P]; Cong.
clear dependent M'.
destruct H1 as [HCop1 _].
destruct H2 as [HCop2 _].
left.

*****
H11 : OnCircle B O M
H10,H6 : Coplanar P Q R O
H9 : OnCircle A O M
H8 : OnCircle R O M
H7 : OnCircle Q O M
H : OnCircle P O M
O,M : Tpoint
HCop2 : Coplanar P Q R B
HCop1 : Coplanar P Q R A
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic Q R A B
+++++
split.
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].
destruct (concyclic_aux P Q R A H1) as [O [M]].
destruct (concyclic_aux P Q R B H2) as [O' [M']].
spliter.
assert (O = O').
apply (cong4_cop2__eq P Q R); trivial; [apply cong_transitivity with O M..| apply cong_transitivity with O' M'|apply cong_transitivity with O' M']; Cong.
subst O'.
assert (OnCircle B O M).
apply cong_transitivity with O M'; [|apply cong_transitivity with O P]; Cong.
clear dependent M'.
destruct H1 as [HCop1 _].
destruct H2 as [HCop2 _].
left.
split.

*****
H11 : OnCircle B O M
H10,H6 : Coplanar P Q R O
H9 : OnCircle A O M
H8 : OnCircle R O M
H7 : OnCircle Q O M
H : OnCircle P O M
O,M : Tpoint
HCop2 : Coplanar P Q R B
HCop1 : Coplanar P Q R A
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar Q R A B
+++++
apply coplanar_trans_1 with P; Col; Cop.
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].
destruct (concyclic_aux P Q R A H1) as [O [M]].
destruct (concyclic_aux P Q R B H2) as [O' [M']].
spliter.
assert (O = O').
apply (cong4_cop2__eq P Q R); trivial; [apply cong_transitivity with O M..| apply cong_transitivity with O' M'|apply cong_transitivity with O' M']; Cong.
subst O'.
assert (OnCircle B O M).
apply cong_transitivity with O M'; [|apply cong_transitivity with O P]; Cong.
clear dependent M'.
destruct H1 as [HCop1 _].
destruct H2 as [HCop2 _].
left.
split.
apply coplanar_trans_1 with P; Col; Cop.

*****
H11 : OnCircle B O M
H10,H6 : Coplanar P Q R O
H9 : OnCircle A O M
H8 : OnCircle R O M
H7 : OnCircle Q O M
H : OnCircle P O M
O,M : Tpoint
HCop2 : Coplanar P Q R B
HCop1 : Coplanar P Q R A
HNC : not (Col P Q R)
P,Q,R,A,B : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => ex (fun P : Tpoint => and (OnCircle Q O P) (and (OnCircle R O P) (and (OnCircle A O P) (OnCircle B O P)))))
+++++
exists O, M; repeat split; assumption.
-----
Lemma concy_trans_1 : forall P Q R A B, ~Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen Q R A B.
Proof.
unfold Concyclic_gen; intros P Q R A B HNC H1 H2.
elim H1; clear H1; intro H1; [|spliter; exfalso; apply HNC; Col].
elim H2; clear H2; intro H2; [|spliter; exfalso; apply HNC; Col].
destruct (concyclic_aux P Q R A H1) as [O [M]].
destruct (concyclic_aux P Q R B H2) as [O' [M']].
spliter.
assert (O = O').
apply (cong4_cop2__eq P Q R); trivial; [apply cong_transitivity with O M..| apply cong_transitivity with O' M'|apply cong_transitivity with O' M']; Cong.
subst O'.
assert (OnCircle B O M).
apply cong_transitivity with O M'; [|apply cong_transitivity with O P]; Cong.
clear dependent M'.
destruct H1 as [HCop1 _].
destruct H2 as [HCop2 _].
left.
split.
apply coplanar_trans_1 with P; Col; Cop.
exists O, M; repeat split; assumption.

*****

*****

+++++
Qed.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R,\n  ~ Col P Q R ->\n  Concyclic_gen P Q R A ->\n  Concyclic_gen P Q R B ->\n  Concyclic_gen P Q R C ->\n  Concyclic_gen P Q R D ->\n  Concyclic_gen A B C D.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D P Q R : Tpoint) (_ : not (Col P Q R)) (_ : Concyclic_gen P Q R A) (_ : Concyclic_gen P Q R B) (_ : Concyclic_gen P Q R C) (_ : Concyclic_gen P Q R D), Concyclic_gen A B C D
+++++
Proof.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D P Q R : Tpoint) (_ : not (Col P Q R)) (_ : Concyclic_gen P Q R A) (_ : Concyclic_gen P Q R B) (_ : Concyclic_gen P Q R C) (_ : Concyclic_gen P Q R D), Concyclic_gen A B C D
+++++
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.

*****
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
elim (col_dec R A B).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).

*****
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col R A B, Concyclic_gen A B C D
+++++
intro HRAB.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.

*****
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
elim (col_dec R C D).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).

*****
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col R C D, Concyclic_gen A B C D
+++++
intro HRCD.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.

*****
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
elim (col_dec Q A B).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).

*****
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col Q A B, Concyclic_gen A B C D
+++++
intro HQAB.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.

*****
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
elim (eq_dec_points A B).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).

*****
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A B, Concyclic_gen A B C D
+++++
intro HAB.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.

*****
HAB : eq A B
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
try (subst A; apply concyclic_gen_1123).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).

*****
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq A B), Concyclic_gen A B C D
+++++
intro HAB.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.

*****
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
try (subst A; apply concyclic_gen_1123).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).

*****
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HPAB : ~ Col P A B).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).

*****
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P A B)
+++++
intro.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
intro.

*****
H : Col P A B
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNC.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
intro.
apply HNC.

*****
H : Col P A B
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q R
+++++
ColR.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).

*****
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
idtac.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.

*****
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
elim (col_dec P Q A).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).

*****
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col P Q A, Concyclic_gen A B C D
+++++
intro HPQA.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.

*****
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HQRB : ~ Col P Q B).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).

*****
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P Q B)
+++++
intro.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
intro.

*****
H : Col P Q B
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
intro.
assert_diffs.

*****
H7 : not (eq P R)
H2 : not (eq Q R)
H4 : not (eq P Q)
H5 : not (eq P B)
H3 : not (eq P A)
H : Col P Q B
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HPAB.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
intro.
assert_diffs.
apply HPAB.

*****
H7 : not (eq P R)
H2 : not (eq Q R)
H4 : not (eq P Q)
H5 : not (eq P B)
H3 : not (eq P A)
H : Col P Q B
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P A B
+++++
ColR.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).

*****
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
idtac.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.

*****
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HNC' : ~ Col R P Q).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).

*****
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col R P Q)
+++++
Col.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).

*****
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
idtac.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.

*****
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).

*****
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D), Concyclic_gen C A B D
+++++
intros.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
intros.

*****
H : Concyclic_gen A0 B0 C0 D0
A0,B0,C0,D0 : Tpoint
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen C0 A0 B0 D0
+++++
apply concyclic_gen_2341.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
intros.
apply concyclic_gen_2341.

*****
H : Concyclic_gen A0 B0 C0 D0
A0,B0,C0,D0 : Tpoint
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen D0 C0 A0 B0
+++++
apply concyclic_gen_2134.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
intros.
apply concyclic_gen_2341.
apply concyclic_gen_2134.

*****
H : Concyclic_gen A0 B0 C0 D0
A0,B0,C0,D0 : Tpoint
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen C0 D0 A0 B0
+++++
do 2 apply concyclic_gen_2341.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
intros.
apply concyclic_gen_2341.
apply concyclic_gen_2134.
do 2 apply concyclic_gen_2341.

*****
H : Concyclic_gen A0 B0 C0 D0
A0,B0,C0,D0 : Tpoint
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A0 B0 C0 D0
+++++
auto.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply H in HConcy1.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply H in HConcy2.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply H in HConcy3.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply H in HConcy4.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).

*****
HConcy5 : Concyclic_gen P Q B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).

*****
HConcy6 : Concyclic_gen P Q B C
HConcy5 : Concyclic_gen P Q B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).

*****
HConcy7 : Concyclic_gen P Q B D
HConcy6 : Concyclic_gen P Q B C
HConcy5 : Concyclic_gen P Q B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HQPB : ~ Col Q P B).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HQPB : ~ Col Q P B).

*****
HConcy7 : Concyclic_gen P Q B D
HConcy6 : Concyclic_gen P Q B C
HConcy5 : Concyclic_gen P Q B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Q P B)
+++++
Col.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HQPB : ~ Col Q P B).

*****
HQPB : not (Col Q P B)
HConcy7 : Concyclic_gen P Q B D
HConcy6 : Concyclic_gen P Q B C
HConcy5 : Concyclic_gen P Q B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
idtac.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HQPB : ~ Col Q P B).
idtac.

*****
HQPB : not (Col Q P B)
HConcy7 : Concyclic_gen P Q B D
HConcy6 : Concyclic_gen P Q B C
HConcy5 : Concyclic_gen P Q B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply concyclic_gen_2134 in HConcy5.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HQPB : ~ Col Q P B).
idtac.
apply concyclic_gen_2134 in HConcy5.

*****
HQPB : not (Col Q P B)
HConcy7 : Concyclic_gen P Q B D
HConcy6 : Concyclic_gen P Q B C
HConcy5 : Concyclic_gen Q P B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply concyclic_gen_2134 in HConcy6.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HQPB : ~ Col Q P B).
idtac.
apply concyclic_gen_2134 in HConcy5.
apply concyclic_gen_2134 in HConcy6.

*****
HQPB : not (Col Q P B)
HConcy7 : Concyclic_gen P Q B D
HConcy6 : Concyclic_gen Q P B C
HConcy5 : Concyclic_gen Q P B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply concyclic_gen_2134 in HConcy7.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HQPB : ~ Col Q P B).
idtac.
apply concyclic_gen_2134 in HConcy5.
apply concyclic_gen_2134 in HConcy6.
apply concyclic_gen_2134 in HConcy7.

*****
HQPB : not (Col Q P B)
HConcy7 : Concyclic_gen Q P B D
HConcy6 : Concyclic_gen Q P B C
HConcy5 : Concyclic_gen Q P B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy8 := concy_trans_1 Q P B A C HQPB HConcy5 HConcy6).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HQPB : ~ Col Q P B).
idtac.
apply concyclic_gen_2134 in HConcy5.
apply concyclic_gen_2134 in HConcy6.
apply concyclic_gen_2134 in HConcy7.
assert (HConcy8 := concy_trans_1 Q P B A C HQPB HConcy5 HConcy6).

*****
HConcy8 : Concyclic_gen P B A C
HQPB : not (Col Q P B)
HConcy7 : Concyclic_gen Q P B D
HConcy6 : Concyclic_gen Q P B C
HConcy5 : Concyclic_gen Q P B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy9 := concy_trans_1 Q P B A D HQPB HConcy5 HConcy7).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HQPB : ~ Col Q P B).
idtac.
apply concyclic_gen_2134 in HConcy5.
apply concyclic_gen_2134 in HConcy6.
apply concyclic_gen_2134 in HConcy7.
assert (HConcy8 := concy_trans_1 Q P B A C HQPB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 Q P B A D HQPB HConcy5 HConcy7).

*****
HConcy9 : Concyclic_gen P B A D
HConcy8 : Concyclic_gen P B A C
HQPB : not (Col Q P B)
HConcy7 : Concyclic_gen Q P B D
HConcy6 : Concyclic_gen Q P B C
HConcy5 : Concyclic_gen Q P B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HRBA : ~ Col P B A).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HQPB : ~ Col Q P B).
idtac.
apply concyclic_gen_2134 in HConcy5.
apply concyclic_gen_2134 in HConcy6.
apply concyclic_gen_2134 in HConcy7.
assert (HConcy8 := concy_trans_1 Q P B A C HQPB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 Q P B A D HQPB HConcy5 HConcy7).
assert (HRBA : ~ Col P B A).

*****
HConcy9 : Concyclic_gen P B A D
HConcy8 : Concyclic_gen P B A C
HQPB : not (Col Q P B)
HConcy7 : Concyclic_gen Q P B D
HConcy6 : Concyclic_gen Q P B C
HConcy5 : Concyclic_gen Q P B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P B A)
+++++
Col.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HQPB : ~ Col Q P B).
idtac.
apply concyclic_gen_2134 in HConcy5.
apply concyclic_gen_2134 in HConcy6.
apply concyclic_gen_2134 in HConcy7.
assert (HConcy8 := concy_trans_1 Q P B A C HQPB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 Q P B A D HQPB HConcy5 HConcy7).
assert (HRBA : ~ Col P B A).

*****
HRBA : not (Col P B A)
HConcy9 : Concyclic_gen P B A D
HConcy8 : Concyclic_gen P B A C
HQPB : not (Col Q P B)
HConcy7 : Concyclic_gen Q P B D
HConcy6 : Concyclic_gen Q P B C
HConcy5 : Concyclic_gen Q P B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
idtac.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HQPB : ~ Col Q P B).
idtac.
apply concyclic_gen_2134 in HConcy5.
apply concyclic_gen_2134 in HConcy6.
apply concyclic_gen_2134 in HConcy7.
assert (HConcy8 := concy_trans_1 Q P B A C HQPB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 Q P B A D HQPB HConcy5 HConcy7).
assert (HRBA : ~ Col P B A).
idtac.

*****
HRBA : not (Col P B A)
HConcy9 : Concyclic_gen P B A D
HConcy8 : Concyclic_gen P B A C
HQPB : not (Col Q P B)
HConcy7 : Concyclic_gen Q P B D
HConcy6 : Concyclic_gen Q P B C
HConcy5 : Concyclic_gen Q P B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy := concy_trans_1 P B A C D HRBA HConcy8 HConcy9).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HQPB : ~ Col Q P B).
idtac.
apply concyclic_gen_2134 in HConcy5.
apply concyclic_gen_2134 in HConcy6.
apply concyclic_gen_2134 in HConcy7.
assert (HConcy8 := concy_trans_1 Q P B A C HQPB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 Q P B A D HQPB HConcy5 HConcy7).
assert (HRBA : ~ Col P B A).
idtac.
assert (HConcy := concy_trans_1 P B A C D HRBA HConcy8 HConcy9).

*****
HConcy : Concyclic_gen B A C D
HRBA : not (Col P B A)
HConcy9 : Concyclic_gen P B A D
HConcy8 : Concyclic_gen P B A C
HQPB : not (Col Q P B)
HConcy7 : Concyclic_gen Q P B D
HConcy6 : Concyclic_gen Q P B C
HConcy5 : Concyclic_gen Q P B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply concyclic_gen_2134.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HQRB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HQPB : ~ Col Q P B).
idtac.
apply concyclic_gen_2134 in HConcy5.
apply concyclic_gen_2134 in HConcy6.
apply concyclic_gen_2134 in HConcy7.
assert (HConcy8 := concy_trans_1 Q P B A C HQPB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 Q P B A D HQPB HConcy5 HConcy7).
assert (HRBA : ~ Col P B A).
idtac.
assert (HConcy := concy_trans_1 P B A C D HRBA HConcy8 HConcy9).
apply concyclic_gen_2134.

*****
HConcy : Concyclic_gen B A C D
HRBA : not (Col P B A)
HConcy9 : Concyclic_gen P B A D
HConcy8 : Concyclic_gen P B A C
HQPB : not (Col Q P B)
HConcy7 : Concyclic_gen Q P B D
HConcy6 : Concyclic_gen Q P B C
HConcy5 : Concyclic_gen Q P B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HQRB : not (Col P Q B)
HPQA : Col P Q A
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen B A C D
+++++
auto.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).

*****
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col P Q A), Concyclic_gen A B C D
+++++
intro HPQA.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.

*****
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HNC' : ~ Col R P Q).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).

*****
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col R P Q)
+++++
Col.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).

*****
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
idtac.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.

*****
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).

*****
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D), Concyclic_gen C A B D
+++++
intros.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
intros.

*****
H : Concyclic_gen A0 B0 C0 D0
A0,B0,C0,D0 : Tpoint
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen C0 A0 B0 D0
+++++
apply concyclic_gen_2341.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
intros.
apply concyclic_gen_2341.

*****
H : Concyclic_gen A0 B0 C0 D0
A0,B0,C0,D0 : Tpoint
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen D0 C0 A0 B0
+++++
apply concyclic_gen_2134.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
intros.
apply concyclic_gen_2341.
apply concyclic_gen_2134.

*****
H : Concyclic_gen A0 B0 C0 D0
A0,B0,C0,D0 : Tpoint
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen C0 D0 A0 B0
+++++
do 2 apply concyclic_gen_2341.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
intros.
apply concyclic_gen_2341.
apply concyclic_gen_2134.
do 2 apply concyclic_gen_2341.

*****
H : Concyclic_gen A0 B0 C0 D0
A0,B0,C0,D0 : Tpoint
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A0 B0 C0 D0
+++++
auto.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply H in HConcy1.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply H in HConcy2.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply H in HConcy3.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply H in HConcy4.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).

*****
HConcy5 : Concyclic_gen P Q A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).

*****
HConcy6 : Concyclic_gen P Q A C
HConcy5 : Concyclic_gen P Q A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy7 := concy_trans_1 R P Q A D HNC' HConcy1 HConcy4).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q A D HNC' HConcy1 HConcy4).

*****
HConcy7 : Concyclic_gen P Q A D
HConcy6 : Concyclic_gen P Q A C
HConcy5 : Concyclic_gen P Q A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HQPA : ~ Col Q P A).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q A D HNC' HConcy1 HConcy4).
assert (HQPA : ~ Col Q P A).

*****
HConcy7 : Concyclic_gen P Q A D
HConcy6 : Concyclic_gen P Q A C
HConcy5 : Concyclic_gen P Q A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Q P A)
+++++
Col.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q A D HNC' HConcy1 HConcy4).
assert (HQPA : ~ Col Q P A).

*****
HQPA : not (Col Q P A)
HConcy7 : Concyclic_gen P Q A D
HConcy6 : Concyclic_gen P Q A C
HConcy5 : Concyclic_gen P Q A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
idtac.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q A D HNC' HConcy1 HConcy4).
assert (HQPA : ~ Col Q P A).
idtac.

*****
HQPA : not (Col Q P A)
HConcy7 : Concyclic_gen P Q A D
HConcy6 : Concyclic_gen P Q A C
HConcy5 : Concyclic_gen P Q A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply concyclic_gen_2134 in HConcy5.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q A D HNC' HConcy1 HConcy4).
assert (HQPA : ~ Col Q P A).
idtac.
apply concyclic_gen_2134 in HConcy5.

*****
HQPA : not (Col Q P A)
HConcy7 : Concyclic_gen P Q A D
HConcy6 : Concyclic_gen P Q A C
HConcy5 : Concyclic_gen Q P A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply concyclic_gen_2134 in HConcy6.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q A D HNC' HConcy1 HConcy4).
assert (HQPA : ~ Col Q P A).
idtac.
apply concyclic_gen_2134 in HConcy5.
apply concyclic_gen_2134 in HConcy6.

*****
HQPA : not (Col Q P A)
HConcy7 : Concyclic_gen P Q A D
HConcy6 : Concyclic_gen Q P A C
HConcy5 : Concyclic_gen Q P A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply concyclic_gen_2134 in HConcy7.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q A D HNC' HConcy1 HConcy4).
assert (HQPA : ~ Col Q P A).
idtac.
apply concyclic_gen_2134 in HConcy5.
apply concyclic_gen_2134 in HConcy6.
apply concyclic_gen_2134 in HConcy7.

*****
HQPA : not (Col Q P A)
HConcy7 : Concyclic_gen Q P A D
HConcy6 : Concyclic_gen Q P A C
HConcy5 : Concyclic_gen Q P A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy8 := concy_trans_1 Q P A B C HQPA HConcy5 HConcy6).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q A D HNC' HConcy1 HConcy4).
assert (HQPA : ~ Col Q P A).
idtac.
apply concyclic_gen_2134 in HConcy5.
apply concyclic_gen_2134 in HConcy6.
apply concyclic_gen_2134 in HConcy7.
assert (HConcy8 := concy_trans_1 Q P A B C HQPA HConcy5 HConcy6).

*****
HConcy8 : Concyclic_gen P A B C
HQPA : not (Col Q P A)
HConcy7 : Concyclic_gen Q P A D
HConcy6 : Concyclic_gen Q P A C
HConcy5 : Concyclic_gen Q P A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy9 := concy_trans_1 Q P A B D HQPA HConcy5 HConcy7).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q A D HNC' HConcy1 HConcy4).
assert (HQPA : ~ Col Q P A).
idtac.
apply concyclic_gen_2134 in HConcy5.
apply concyclic_gen_2134 in HConcy6.
apply concyclic_gen_2134 in HConcy7.
assert (HConcy8 := concy_trans_1 Q P A B C HQPA HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 Q P A B D HQPA HConcy5 HConcy7).

*****
HConcy9 : Concyclic_gen P A B D
HConcy8 : Concyclic_gen P A B C
HQPA : not (Col Q P A)
HConcy7 : Concyclic_gen Q P A D
HConcy6 : Concyclic_gen Q P A C
HConcy5 : Concyclic_gen Q P A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy := concy_trans_1 P A B C D HPAB HConcy8 HConcy9).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (eq_dec_points A B).
intro HAB.
try (subst A; apply concyclic_gen_1123).
assert (HPAB : ~ Col P A B).
idtac.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q A D HNC' HConcy1 HConcy4).
assert (HQPA : ~ Col Q P A).
idtac.
apply concyclic_gen_2134 in HConcy5.
apply concyclic_gen_2134 in HConcy6.
apply concyclic_gen_2134 in HConcy7.
assert (HConcy8 := concy_trans_1 Q P A B C HQPA HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 Q P A B D HQPA HConcy5 HConcy7).
assert (HConcy := concy_trans_1 P A B C D HPAB HConcy8 HConcy9).

*****
HConcy : Concyclic_gen A B C D
HConcy9 : Concyclic_gen P A B D
HConcy8 : Concyclic_gen P A B C
HQPA : not (Col Q P A)
HConcy7 : Concyclic_gen Q P A D
HConcy6 : Concyclic_gen Q P A C
HConcy5 : Concyclic_gen Q P A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HPAB : not (Col P A B)
HAB : not (eq A B)
HQAB : Col Q A B
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
auto.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).

*****
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col Q A B), Concyclic_gen A B C D
+++++
intro HQAB.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.

*****
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
elim (col_dec P Q A).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).

*****
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col P Q A, Concyclic_gen A B C D
+++++
intro HPQA.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.

*****
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HPQB : ~ Col P Q B).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).

*****
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P Q B)
+++++
intro.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
intro.

*****
H : Col P Q B
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
intro.
assert_diffs.

*****
H8 : not (eq P R)
H4 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq Q B)
H2 : not (eq A B)
H3 : not (eq Q A)
H : Col P Q B
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HQAB.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
intro.
assert_diffs.
apply HQAB.

*****
H8 : not (eq P R)
H4 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq Q B)
H2 : not (eq A B)
H3 : not (eq Q A)
H : Col P Q B
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Q A B
+++++
ColR.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).

*****
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
idtac.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.

*****
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HNC' : ~ Col R P Q).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).

*****
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col R P Q)
+++++
Col.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).

*****
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
idtac.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.

*****
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).

*****
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D), Concyclic_gen C A B D
+++++
intros.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
intros.

*****
H : Concyclic_gen A0 B0 C0 D0
A0,B0,C0,D0 : Tpoint
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen C0 A0 B0 D0
+++++
apply concyclic_gen_2341.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
intros.
apply concyclic_gen_2341.

*****
H : Concyclic_gen A0 B0 C0 D0
A0,B0,C0,D0 : Tpoint
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen D0 C0 A0 B0
+++++
apply concyclic_gen_2134.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
intros.
apply concyclic_gen_2341.
apply concyclic_gen_2134.

*****
H : Concyclic_gen A0 B0 C0 D0
A0,B0,C0,D0 : Tpoint
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen C0 D0 A0 B0
+++++
do 2 apply concyclic_gen_2341.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
intros.
apply concyclic_gen_2341.
apply concyclic_gen_2134.
do 2 apply concyclic_gen_2341.

*****
H : Concyclic_gen A0 B0 C0 D0
A0,B0,C0,D0 : Tpoint
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A0 B0 C0 D0
+++++
auto.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply H in HConcy1.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply H in HConcy2.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply H in HConcy3.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply H in HConcy4.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).

*****
HConcy5 : Concyclic_gen P Q B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).

*****
HConcy6 : Concyclic_gen P Q B C
HConcy5 : Concyclic_gen P Q B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).

*****
HConcy7 : Concyclic_gen P Q B D
HConcy6 : Concyclic_gen P Q B C
HConcy5 : Concyclic_gen P Q B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy8 := concy_trans_1 P Q B A C HPQB HConcy5 HConcy6).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HConcy8 := concy_trans_1 P Q B A C HPQB HConcy5 HConcy6).

*****
HConcy8 : Concyclic_gen Q B A C
HConcy7 : Concyclic_gen P Q B D
HConcy6 : Concyclic_gen P Q B C
HConcy5 : Concyclic_gen P Q B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy9 := concy_trans_1 P Q B A D HPQB HConcy5 HConcy7).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HConcy8 := concy_trans_1 P Q B A C HPQB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 P Q B A D HPQB HConcy5 HConcy7).

*****
HConcy9 : Concyclic_gen Q B A D
HConcy8 : Concyclic_gen Q B A C
HConcy7 : Concyclic_gen P Q B D
HConcy6 : Concyclic_gen P Q B C
HConcy5 : Concyclic_gen P Q B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HQBA : ~ Col Q B A).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HConcy8 := concy_trans_1 P Q B A C HPQB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 P Q B A D HPQB HConcy5 HConcy7).
assert (HQBA : ~ Col Q B A).

*****
HConcy9 : Concyclic_gen Q B A D
HConcy8 : Concyclic_gen Q B A C
HConcy7 : Concyclic_gen P Q B D
HConcy6 : Concyclic_gen P Q B C
HConcy5 : Concyclic_gen P Q B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Q B A)
+++++
Col.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HConcy8 := concy_trans_1 P Q B A C HPQB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 P Q B A D HPQB HConcy5 HConcy7).
assert (HQBA : ~ Col Q B A).

*****
HQBA : not (Col Q B A)
HConcy9 : Concyclic_gen Q B A D
HConcy8 : Concyclic_gen Q B A C
HConcy7 : Concyclic_gen P Q B D
HConcy6 : Concyclic_gen P Q B C
HConcy5 : Concyclic_gen P Q B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
idtac.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HConcy8 := concy_trans_1 P Q B A C HPQB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 P Q B A D HPQB HConcy5 HConcy7).
assert (HQBA : ~ Col Q B A).
idtac.

*****
HQBA : not (Col Q B A)
HConcy9 : Concyclic_gen Q B A D
HConcy8 : Concyclic_gen Q B A C
HConcy7 : Concyclic_gen P Q B D
HConcy6 : Concyclic_gen P Q B C
HConcy5 : Concyclic_gen P Q B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy := concy_trans_1 Q B A C D HQBA HConcy8 HConcy9).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HConcy8 := concy_trans_1 P Q B A C HPQB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 P Q B A D HPQB HConcy5 HConcy7).
assert (HQBA : ~ Col Q B A).
idtac.
assert (HConcy := concy_trans_1 Q B A C D HQBA HConcy8 HConcy9).

*****
HConcy : Concyclic_gen B A C D
HQBA : not (Col Q B A)
HConcy9 : Concyclic_gen Q B A D
HConcy8 : Concyclic_gen Q B A C
HConcy7 : Concyclic_gen P Q B D
HConcy6 : Concyclic_gen P Q B C
HConcy5 : Concyclic_gen P Q B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply concyclic_gen_2134.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HPQB : ~ Col P Q B).
idtac.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q B A HNC' HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 R P Q B C HNC' HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q B D HNC' HConcy2 HConcy4).
assert (HConcy8 := concy_trans_1 P Q B A C HPQB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 P Q B A D HPQB HConcy5 HConcy7).
assert (HQBA : ~ Col Q B A).
idtac.
assert (HConcy := concy_trans_1 Q B A C D HQBA HConcy8 HConcy9).
apply concyclic_gen_2134.

*****
HConcy : Concyclic_gen B A C D
HQBA : not (Col Q B A)
HConcy9 : Concyclic_gen Q B A D
HConcy8 : Concyclic_gen Q B A C
HConcy7 : Concyclic_gen P Q B D
HConcy6 : Concyclic_gen P Q B C
HConcy5 : Concyclic_gen P Q B A
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQB : not (Col P Q B)
HPQA : Col P Q A
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen B A C D
+++++
auto.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).

*****
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col P Q A), Concyclic_gen A B C D
+++++
intro HPQA.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.

*****
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HNC' : ~ Col R P Q).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).

*****
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col R P Q)
+++++
Col.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).

*****
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
idtac.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.

*****
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).

*****
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D), Concyclic_gen C A B D
+++++
intros.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
intros.

*****
H : Concyclic_gen A0 B0 C0 D0
A0,B0,C0,D0 : Tpoint
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen C0 A0 B0 D0
+++++
apply concyclic_gen_2341.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
intros.
apply concyclic_gen_2341.

*****
H : Concyclic_gen A0 B0 C0 D0
A0,B0,C0,D0 : Tpoint
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen D0 C0 A0 B0
+++++
apply concyclic_gen_2134.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
intros.
apply concyclic_gen_2341.
apply concyclic_gen_2134.

*****
H : Concyclic_gen A0 B0 C0 D0
A0,B0,C0,D0 : Tpoint
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen C0 D0 A0 B0
+++++
do 2 apply concyclic_gen_2341.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
intros.
apply concyclic_gen_2341.
apply concyclic_gen_2134.
do 2 apply concyclic_gen_2341.

*****
H : Concyclic_gen A0 B0 C0 D0
A0,B0,C0,D0 : Tpoint
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A0 B0 C0 D0
+++++
auto.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply H in HConcy1.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply H in HConcy2.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply H in HConcy3.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply H in HConcy4.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.

*****
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).

*****
HConcy5 : Concyclic_gen P Q A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).

*****
HConcy6 : Concyclic_gen P Q A C
HConcy5 : Concyclic_gen P Q A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy7 := concy_trans_1 R P Q A D HNC' HConcy1 HConcy4).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q A D HNC' HConcy1 HConcy4).

*****
HConcy7 : Concyclic_gen P Q A D
HConcy6 : Concyclic_gen P Q A C
HConcy5 : Concyclic_gen P Q A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy8 := concy_trans_1 P Q A B C HPQA HConcy5 HConcy6).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q A D HNC' HConcy1 HConcy4).
assert (HConcy8 := concy_trans_1 P Q A B C HPQA HConcy5 HConcy6).

*****
HConcy8 : Concyclic_gen Q A B C
HConcy7 : Concyclic_gen P Q A D
HConcy6 : Concyclic_gen P Q A C
HConcy5 : Concyclic_gen P Q A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy9 := concy_trans_1 P Q A B D HPQA HConcy5 HConcy7).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q A D HNC' HConcy1 HConcy4).
assert (HConcy8 := concy_trans_1 P Q A B C HPQA HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 P Q A B D HPQA HConcy5 HConcy7).

*****
HConcy9 : Concyclic_gen Q A B D
HConcy8 : Concyclic_gen Q A B C
HConcy7 : Concyclic_gen P Q A D
HConcy6 : Concyclic_gen P Q A C
HConcy5 : Concyclic_gen P Q A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy := concy_trans_1 Q A B C D HQAB HConcy8 HConcy9).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q A B).
intro HQAB.
elim (col_dec P Q A).
intro HPQA.
assert (HNC' : ~ Col R P Q).
idtac.
assert (H : forall A B C D, Concyclic_gen A B C D -> Concyclic_gen C A B D).
apply H in HConcy1.
apply H in HConcy2.
apply H in HConcy3.
apply H in HConcy4.
assert (HConcy5 := concy_trans_1 R P Q A B HNC' HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 R P Q A C HNC' HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 R P Q A D HNC' HConcy1 HConcy4).
assert (HConcy8 := concy_trans_1 P Q A B C HPQA HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 P Q A B D HPQA HConcy5 HConcy7).
assert (HConcy := concy_trans_1 Q A B C D HQAB HConcy8 HConcy9).

*****
HConcy : Concyclic_gen A B C D
HConcy9 : Concyclic_gen Q A B D
HConcy8 : Concyclic_gen Q A B C
HConcy7 : Concyclic_gen P Q A D
HConcy6 : Concyclic_gen P Q A C
HConcy5 : Concyclic_gen P Q A B
H : forall (A B C D : Tpoint) (_ : Concyclic_gen A B C D),\nConcyclic_gen C A B D
HNC' : not (Col R P Q)
HPQA : not (Col P Q A)
HQAB : not (Col Q A B)
HRCD : Col R C D
HRAB : Col R A B
HConcy4 : Concyclic_gen R P Q D
HConcy3 : Concyclic_gen R P Q C
HConcy2 : Concyclic_gen R P Q B
HConcy1 : Concyclic_gen R P Q A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
auto.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).

*****
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col R C D), Concyclic_gen A B C D
+++++
intro HRCD.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.

*****
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
elim (col_dec Q R C).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).

*****
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col Q R C, Concyclic_gen A B C D
+++++
intro HQRC.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.

*****
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HQRD : ~ Col Q R D).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).

*****
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Q R D)
+++++
intro.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).
intro.

*****
H : Col Q R D
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).
intro.
assert_diffs.

*****
H8 : not (eq P R)
H4 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq R D)
H2 : not (eq C D)
H3 : not (eq R C)
H : Col Q R D
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HRCD.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).
intro.
assert_diffs.
apply HRCD.

*****
H8 : not (eq P R)
H4 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq R D)
H2 : not (eq C D)
H3 : not (eq R C)
H : Col Q R D
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col R C D
+++++
ColR.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).

*****
HQRD : not (Col Q R D)
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
idtac.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).
idtac.

*****
HQRD : not (Col Q R D)
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy5 := concy_trans_1 P Q R D A HNC HConcy4 HConcy1).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).
idtac.
assert (HConcy5 := concy_trans_1 P Q R D A HNC HConcy4 HConcy1).

*****
HConcy5 : Concyclic_gen Q R D A
HQRD : not (Col Q R D)
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy6 := concy_trans_1 P Q R D B HNC HConcy4 HConcy2).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).
idtac.
assert (HConcy5 := concy_trans_1 P Q R D A HNC HConcy4 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R D B HNC HConcy4 HConcy2).

*****
HConcy6 : Concyclic_gen Q R D B
HConcy5 : Concyclic_gen Q R D A
HQRD : not (Col Q R D)
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy7 := concy_trans_1 P Q R D C HNC HConcy4 HConcy3).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).
idtac.
assert (HConcy5 := concy_trans_1 P Q R D A HNC HConcy4 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R D B HNC HConcy4 HConcy2).
assert (HConcy7 := concy_trans_1 P Q R D C HNC HConcy4 HConcy3).

*****
HConcy7 : Concyclic_gen Q R D C
HConcy6 : Concyclic_gen Q R D B
HConcy5 : Concyclic_gen Q R D A
HQRD : not (Col Q R D)
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy8 := concy_trans_1 Q R D C A HQRD HConcy7 HConcy5).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).
idtac.
assert (HConcy5 := concy_trans_1 P Q R D A HNC HConcy4 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R D B HNC HConcy4 HConcy2).
assert (HConcy7 := concy_trans_1 P Q R D C HNC HConcy4 HConcy3).
assert (HConcy8 := concy_trans_1 Q R D C A HQRD HConcy7 HConcy5).

*****
HConcy8 : Concyclic_gen R D C A
HConcy7 : Concyclic_gen Q R D C
HConcy6 : Concyclic_gen Q R D B
HConcy5 : Concyclic_gen Q R D A
HQRD : not (Col Q R D)
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy9 := concy_trans_1 Q R D C B HQRD HConcy7 HConcy6).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).
idtac.
assert (HConcy5 := concy_trans_1 P Q R D A HNC HConcy4 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R D B HNC HConcy4 HConcy2).
assert (HConcy7 := concy_trans_1 P Q R D C HNC HConcy4 HConcy3).
assert (HConcy8 := concy_trans_1 Q R D C A HQRD HConcy7 HConcy5).
assert (HConcy9 := concy_trans_1 Q R D C B HQRD HConcy7 HConcy6).

*****
HConcy9 : Concyclic_gen R D C B
HConcy8 : Concyclic_gen R D C A
HConcy7 : Concyclic_gen Q R D C
HConcy6 : Concyclic_gen Q R D B
HConcy5 : Concyclic_gen Q R D A
HQRD : not (Col Q R D)
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HRDC : ~ Col R D C).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).
idtac.
assert (HConcy5 := concy_trans_1 P Q R D A HNC HConcy4 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R D B HNC HConcy4 HConcy2).
assert (HConcy7 := concy_trans_1 P Q R D C HNC HConcy4 HConcy3).
assert (HConcy8 := concy_trans_1 Q R D C A HQRD HConcy7 HConcy5).
assert (HConcy9 := concy_trans_1 Q R D C B HQRD HConcy7 HConcy6).
assert (HRDC : ~ Col R D C).

*****
HConcy9 : Concyclic_gen R D C B
HConcy8 : Concyclic_gen R D C A
HConcy7 : Concyclic_gen Q R D C
HConcy6 : Concyclic_gen Q R D B
HConcy5 : Concyclic_gen Q R D A
HQRD : not (Col Q R D)
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col R D C)
+++++
Col.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).
idtac.
assert (HConcy5 := concy_trans_1 P Q R D A HNC HConcy4 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R D B HNC HConcy4 HConcy2).
assert (HConcy7 := concy_trans_1 P Q R D C HNC HConcy4 HConcy3).
assert (HConcy8 := concy_trans_1 Q R D C A HQRD HConcy7 HConcy5).
assert (HConcy9 := concy_trans_1 Q R D C B HQRD HConcy7 HConcy6).
assert (HRDC : ~ Col R D C).

*****
HRDC : not (Col R D C)
HConcy9 : Concyclic_gen R D C B
HConcy8 : Concyclic_gen R D C A
HConcy7 : Concyclic_gen Q R D C
HConcy6 : Concyclic_gen Q R D B
HConcy5 : Concyclic_gen Q R D A
HQRD : not (Col Q R D)
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
idtac.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).
idtac.
assert (HConcy5 := concy_trans_1 P Q R D A HNC HConcy4 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R D B HNC HConcy4 HConcy2).
assert (HConcy7 := concy_trans_1 P Q R D C HNC HConcy4 HConcy3).
assert (HConcy8 := concy_trans_1 Q R D C A HQRD HConcy7 HConcy5).
assert (HConcy9 := concy_trans_1 Q R D C B HQRD HConcy7 HConcy6).
assert (HRDC : ~ Col R D C).
idtac.

*****
HRDC : not (Col R D C)
HConcy9 : Concyclic_gen R D C B
HConcy8 : Concyclic_gen R D C A
HConcy7 : Concyclic_gen Q R D C
HConcy6 : Concyclic_gen Q R D B
HConcy5 : Concyclic_gen Q R D A
HQRD : not (Col Q R D)
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy := concy_trans_1 R D C A B HRDC HConcy8 HConcy9).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).
idtac.
assert (HConcy5 := concy_trans_1 P Q R D A HNC HConcy4 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R D B HNC HConcy4 HConcy2).
assert (HConcy7 := concy_trans_1 P Q R D C HNC HConcy4 HConcy3).
assert (HConcy8 := concy_trans_1 Q R D C A HQRD HConcy7 HConcy5).
assert (HConcy9 := concy_trans_1 Q R D C B HQRD HConcy7 HConcy6).
assert (HRDC : ~ Col R D C).
idtac.
assert (HConcy := concy_trans_1 R D C A B HRDC HConcy8 HConcy9).

*****
HConcy : Concyclic_gen D C A B
HRDC : not (Col R D C)
HConcy9 : Concyclic_gen R D C B
HConcy8 : Concyclic_gen R D C A
HConcy7 : Concyclic_gen Q R D C
HConcy6 : Concyclic_gen Q R D B
HConcy5 : Concyclic_gen Q R D A
HQRD : not (Col Q R D)
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
do 2 apply concyclic_gen_2341.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).
idtac.
assert (HConcy5 := concy_trans_1 P Q R D A HNC HConcy4 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R D B HNC HConcy4 HConcy2).
assert (HConcy7 := concy_trans_1 P Q R D C HNC HConcy4 HConcy3).
assert (HConcy8 := concy_trans_1 Q R D C A HQRD HConcy7 HConcy5).
assert (HConcy9 := concy_trans_1 Q R D C B HQRD HConcy7 HConcy6).
assert (HRDC : ~ Col R D C).
idtac.
assert (HConcy := concy_trans_1 R D C A B HRDC HConcy8 HConcy9).
do 2 apply concyclic_gen_2341.

*****
HConcy : Concyclic_gen D C A B
HRDC : not (Col R D C)
HConcy9 : Concyclic_gen R D C B
HConcy8 : Concyclic_gen R D C A
HConcy7 : Concyclic_gen Q R D C
HConcy6 : Concyclic_gen Q R D B
HConcy5 : Concyclic_gen Q R D A
HQRD : not (Col Q R D)
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen C D A B
+++++
apply concyclic_gen_2134.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HQRD : ~ Col Q R D).
idtac.
assert (HConcy5 := concy_trans_1 P Q R D A HNC HConcy4 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R D B HNC HConcy4 HConcy2).
assert (HConcy7 := concy_trans_1 P Q R D C HNC HConcy4 HConcy3).
assert (HConcy8 := concy_trans_1 Q R D C A HQRD HConcy7 HConcy5).
assert (HConcy9 := concy_trans_1 Q R D C B HQRD HConcy7 HConcy6).
assert (HRDC : ~ Col R D C).
idtac.
assert (HConcy := concy_trans_1 R D C A B HRDC HConcy8 HConcy9).
do 2 apply concyclic_gen_2341.
apply concyclic_gen_2134.

*****
HConcy : Concyclic_gen D C A B
HRDC : not (Col R D C)
HConcy9 : Concyclic_gen R D C B
HConcy8 : Concyclic_gen R D C A
HConcy7 : Concyclic_gen Q R D C
HConcy6 : Concyclic_gen Q R D B
HConcy5 : Concyclic_gen Q R D A
HQRD : not (Col Q R D)
HQRC : Col Q R C
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen D C A B
+++++
auto.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).

*****
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col Q R C), Concyclic_gen A B C D
+++++
intro HQRC.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.

*****
HQRC : not (Col Q R C)
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy5 := concy_trans_1 P Q R C A HNC HConcy3 HConcy1).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HConcy5 := concy_trans_1 P Q R C A HNC HConcy3 HConcy1).

*****
HConcy5 : Concyclic_gen Q R C A
HQRC : not (Col Q R C)
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy6 := concy_trans_1 P Q R C B HNC HConcy3 HConcy2).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HConcy5 := concy_trans_1 P Q R C A HNC HConcy3 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R C B HNC HConcy3 HConcy2).

*****
HConcy6 : Concyclic_gen Q R C B
HConcy5 : Concyclic_gen Q R C A
HQRC : not (Col Q R C)
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy7 := concy_trans_1 P Q R C D HNC HConcy3 HConcy4).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HConcy5 := concy_trans_1 P Q R C A HNC HConcy3 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R C B HNC HConcy3 HConcy2).
assert (HConcy7 := concy_trans_1 P Q R C D HNC HConcy3 HConcy4).

*****
HConcy7 : Concyclic_gen Q R C D
HConcy6 : Concyclic_gen Q R C B
HConcy5 : Concyclic_gen Q R C A
HQRC : not (Col Q R C)
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy8 := concy_trans_1 Q R C D A HQRC HConcy7 HConcy5).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HConcy5 := concy_trans_1 P Q R C A HNC HConcy3 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R C B HNC HConcy3 HConcy2).
assert (HConcy7 := concy_trans_1 P Q R C D HNC HConcy3 HConcy4).
assert (HConcy8 := concy_trans_1 Q R C D A HQRC HConcy7 HConcy5).

*****
HConcy8 : Concyclic_gen R C D A
HConcy7 : Concyclic_gen Q R C D
HConcy6 : Concyclic_gen Q R C B
HConcy5 : Concyclic_gen Q R C A
HQRC : not (Col Q R C)
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy9 := concy_trans_1 Q R C D B HQRC HConcy7 HConcy6).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HConcy5 := concy_trans_1 P Q R C A HNC HConcy3 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R C B HNC HConcy3 HConcy2).
assert (HConcy7 := concy_trans_1 P Q R C D HNC HConcy3 HConcy4).
assert (HConcy8 := concy_trans_1 Q R C D A HQRC HConcy7 HConcy5).
assert (HConcy9 := concy_trans_1 Q R C D B HQRC HConcy7 HConcy6).

*****
HConcy9 : Concyclic_gen R C D B
HConcy8 : Concyclic_gen R C D A
HConcy7 : Concyclic_gen Q R C D
HConcy6 : Concyclic_gen Q R C B
HConcy5 : Concyclic_gen Q R C A
HQRC : not (Col Q R C)
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy := concy_trans_1 R C D A B HRCD HConcy8 HConcy9).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HConcy5 := concy_trans_1 P Q R C A HNC HConcy3 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R C B HNC HConcy3 HConcy2).
assert (HConcy7 := concy_trans_1 P Q R C D HNC HConcy3 HConcy4).
assert (HConcy8 := concy_trans_1 Q R C D A HQRC HConcy7 HConcy5).
assert (HConcy9 := concy_trans_1 Q R C D B HQRC HConcy7 HConcy6).
assert (HConcy := concy_trans_1 R C D A B HRCD HConcy8 HConcy9).

*****
HConcy : Concyclic_gen C D A B
HConcy9 : Concyclic_gen R C D B
HConcy8 : Concyclic_gen R C D A
HConcy7 : Concyclic_gen Q R C D
HConcy6 : Concyclic_gen Q R C B
HConcy5 : Concyclic_gen Q R C A
HQRC : not (Col Q R C)
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
do 2 apply concyclic_gen_2341.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec R C D).
intro HRCD.
elim (col_dec Q R C).
intro HQRC.
assert (HConcy5 := concy_trans_1 P Q R C A HNC HConcy3 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R C B HNC HConcy3 HConcy2).
assert (HConcy7 := concy_trans_1 P Q R C D HNC HConcy3 HConcy4).
assert (HConcy8 := concy_trans_1 Q R C D A HQRC HConcy7 HConcy5).
assert (HConcy9 := concy_trans_1 Q R C D B HQRC HConcy7 HConcy6).
assert (HConcy := concy_trans_1 R C D A B HRCD HConcy8 HConcy9).
do 2 apply concyclic_gen_2341.

*****
HConcy : Concyclic_gen C D A B
HConcy9 : Concyclic_gen R C D B
HConcy8 : Concyclic_gen R C D A
HConcy7 : Concyclic_gen Q R C D
HConcy6 : Concyclic_gen Q R C B
HConcy5 : Concyclic_gen Q R C A
HQRC : not (Col Q R C)
HRCD : not (Col R C D)
HRAB : Col R A B
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen C D A B
+++++
auto.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).

*****
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col R A B), Concyclic_gen A B C D
+++++
intro HRAB.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.

*****
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
elim (col_dec Q R A).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).

*****
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col Q R A, Concyclic_gen A B C D
+++++
intro HQRA.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.

*****
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HQRB : ~ Col Q R B).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HQRB : ~ Col Q R B).

*****
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Q R B)
+++++
intro.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HQRB : ~ Col Q R B).
intro.

*****
H : Col Q R B
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HQRB : ~ Col Q R B).
intro.
assert_diffs.

*****
H8 : not (eq P R)
H4 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq R B)
H2 : not (eq A B)
H3 : not (eq R A)
H : Col Q R B
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HRAB.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HQRB : ~ Col Q R B).
intro.
assert_diffs.
apply HRAB.

*****
H8 : not (eq P R)
H4 : not (eq Q R)
H6 : not (eq P Q)
H5 : not (eq R B)
H2 : not (eq A B)
H3 : not (eq R A)
H : Col Q R B
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col R A B
+++++
ColR.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HQRB : ~ Col Q R B).

*****
HQRB : not (Col Q R B)
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
idtac.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HQRB : ~ Col Q R B).
idtac.

*****
HQRB : not (Col Q R B)
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy5 := concy_trans_1 P Q R B A HNC HConcy2 HConcy1).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HQRB : ~ Col Q R B).
idtac.
assert (HConcy5 := concy_trans_1 P Q R B A HNC HConcy2 HConcy1).

*****
HConcy5 : Concyclic_gen Q R B A
HQRB : not (Col Q R B)
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy6 := concy_trans_1 P Q R B C HNC HConcy2 HConcy3).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HQRB : ~ Col Q R B).
idtac.
assert (HConcy5 := concy_trans_1 P Q R B A HNC HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R B C HNC HConcy2 HConcy3).

*****
HConcy6 : Concyclic_gen Q R B C
HConcy5 : Concyclic_gen Q R B A
HQRB : not (Col Q R B)
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy7 := concy_trans_1 P Q R B D HNC HConcy2 HConcy4).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HQRB : ~ Col Q R B).
idtac.
assert (HConcy5 := concy_trans_1 P Q R B A HNC HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R B C HNC HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 P Q R B D HNC HConcy2 HConcy4).

*****
HConcy7 : Concyclic_gen Q R B D
HConcy6 : Concyclic_gen Q R B C
HConcy5 : Concyclic_gen Q R B A
HQRB : not (Col Q R B)
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy8 := concy_trans_1 Q R B A C HQRB HConcy5 HConcy6).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HQRB : ~ Col Q R B).
idtac.
assert (HConcy5 := concy_trans_1 P Q R B A HNC HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R B C HNC HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 P Q R B D HNC HConcy2 HConcy4).
assert (HConcy8 := concy_trans_1 Q R B A C HQRB HConcy5 HConcy6).

*****
HConcy8 : Concyclic_gen R B A C
HConcy7 : Concyclic_gen Q R B D
HConcy6 : Concyclic_gen Q R B C
HConcy5 : Concyclic_gen Q R B A
HQRB : not (Col Q R B)
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy9 := concy_trans_1 Q R B A D HQRB HConcy5 HConcy7).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HQRB : ~ Col Q R B).
idtac.
assert (HConcy5 := concy_trans_1 P Q R B A HNC HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R B C HNC HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 P Q R B D HNC HConcy2 HConcy4).
assert (HConcy8 := concy_trans_1 Q R B A C HQRB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 Q R B A D HQRB HConcy5 HConcy7).

*****
HConcy9 : Concyclic_gen R B A D
HConcy8 : Concyclic_gen R B A C
HConcy7 : Concyclic_gen Q R B D
HConcy6 : Concyclic_gen Q R B C
HConcy5 : Concyclic_gen Q R B A
HQRB : not (Col Q R B)
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HRBA : ~ Col R B A).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HQRB : ~ Col Q R B).
idtac.
assert (HConcy5 := concy_trans_1 P Q R B A HNC HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R B C HNC HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 P Q R B D HNC HConcy2 HConcy4).
assert (HConcy8 := concy_trans_1 Q R B A C HQRB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 Q R B A D HQRB HConcy5 HConcy7).
assert (HRBA : ~ Col R B A).

*****
HConcy9 : Concyclic_gen R B A D
HConcy8 : Concyclic_gen R B A C
HConcy7 : Concyclic_gen Q R B D
HConcy6 : Concyclic_gen Q R B C
HConcy5 : Concyclic_gen Q R B A
HQRB : not (Col Q R B)
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col R B A)
+++++
Col.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HQRB : ~ Col Q R B).
idtac.
assert (HConcy5 := concy_trans_1 P Q R B A HNC HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R B C HNC HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 P Q R B D HNC HConcy2 HConcy4).
assert (HConcy8 := concy_trans_1 Q R B A C HQRB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 Q R B A D HQRB HConcy5 HConcy7).
assert (HRBA : ~ Col R B A).

*****
HRBA : not (Col R B A)
HConcy9 : Concyclic_gen R B A D
HConcy8 : Concyclic_gen R B A C
HConcy7 : Concyclic_gen Q R B D
HConcy6 : Concyclic_gen Q R B C
HConcy5 : Concyclic_gen Q R B A
HQRB : not (Col Q R B)
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
idtac.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HQRB : ~ Col Q R B).
idtac.
assert (HConcy5 := concy_trans_1 P Q R B A HNC HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R B C HNC HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 P Q R B D HNC HConcy2 HConcy4).
assert (HConcy8 := concy_trans_1 Q R B A C HQRB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 Q R B A D HQRB HConcy5 HConcy7).
assert (HRBA : ~ Col R B A).
idtac.

*****
HRBA : not (Col R B A)
HConcy9 : Concyclic_gen R B A D
HConcy8 : Concyclic_gen R B A C
HConcy7 : Concyclic_gen Q R B D
HConcy6 : Concyclic_gen Q R B C
HConcy5 : Concyclic_gen Q R B A
HQRB : not (Col Q R B)
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy := concy_trans_1 R B A C D HRBA HConcy8 HConcy9).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HQRB : ~ Col Q R B).
idtac.
assert (HConcy5 := concy_trans_1 P Q R B A HNC HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R B C HNC HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 P Q R B D HNC HConcy2 HConcy4).
assert (HConcy8 := concy_trans_1 Q R B A C HQRB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 Q R B A D HQRB HConcy5 HConcy7).
assert (HRBA : ~ Col R B A).
idtac.
assert (HConcy := concy_trans_1 R B A C D HRBA HConcy8 HConcy9).

*****
HConcy : Concyclic_gen B A C D
HRBA : not (Col R B A)
HConcy9 : Concyclic_gen R B A D
HConcy8 : Concyclic_gen R B A C
HConcy7 : Concyclic_gen Q R B D
HConcy6 : Concyclic_gen Q R B C
HConcy5 : Concyclic_gen Q R B A
HQRB : not (Col Q R B)
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
apply concyclic_gen_2134.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HQRB : ~ Col Q R B).
idtac.
assert (HConcy5 := concy_trans_1 P Q R B A HNC HConcy2 HConcy1).
assert (HConcy6 := concy_trans_1 P Q R B C HNC HConcy2 HConcy3).
assert (HConcy7 := concy_trans_1 P Q R B D HNC HConcy2 HConcy4).
assert (HConcy8 := concy_trans_1 Q R B A C HQRB HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 Q R B A D HQRB HConcy5 HConcy7).
assert (HRBA : ~ Col R B A).
idtac.
assert (HConcy := concy_trans_1 R B A C D HRBA HConcy8 HConcy9).
apply concyclic_gen_2134.

*****
HConcy : Concyclic_gen B A C D
HRBA : not (Col R B A)
HConcy9 : Concyclic_gen R B A D
HConcy8 : Concyclic_gen R B A C
HConcy7 : Concyclic_gen Q R B D
HConcy6 : Concyclic_gen Q R B C
HConcy5 : Concyclic_gen Q R B A
HQRB : not (Col Q R B)
HQRA : Col Q R A
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen B A C D
+++++
auto.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).

*****
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col Q R A), Concyclic_gen A B C D
+++++
intro HQRA.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.

*****
HQRA : not (Col Q R A)
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy5 := concy_trans_1 P Q R A B HNC HConcy1 HConcy2).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HConcy5 := concy_trans_1 P Q R A B HNC HConcy1 HConcy2).

*****
HConcy5 : Concyclic_gen Q R A B
HQRA : not (Col Q R A)
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy6 := concy_trans_1 P Q R A C HNC HConcy1 HConcy3).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HConcy5 := concy_trans_1 P Q R A B HNC HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 P Q R A C HNC HConcy1 HConcy3).

*****
HConcy6 : Concyclic_gen Q R A C
HConcy5 : Concyclic_gen Q R A B
HQRA : not (Col Q R A)
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy7 := concy_trans_1 P Q R A D HNC HConcy1 HConcy4).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HConcy5 := concy_trans_1 P Q R A B HNC HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 P Q R A C HNC HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 P Q R A D HNC HConcy1 HConcy4).

*****
HConcy7 : Concyclic_gen Q R A D
HConcy6 : Concyclic_gen Q R A C
HConcy5 : Concyclic_gen Q R A B
HQRA : not (Col Q R A)
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy8 := concy_trans_1 Q R A B C HQRA HConcy5 HConcy6).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HConcy5 := concy_trans_1 P Q R A B HNC HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 P Q R A C HNC HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 P Q R A D HNC HConcy1 HConcy4).
assert (HConcy8 := concy_trans_1 Q R A B C HQRA HConcy5 HConcy6).

*****
HConcy8 : Concyclic_gen R A B C
HConcy7 : Concyclic_gen Q R A D
HConcy6 : Concyclic_gen Q R A C
HConcy5 : Concyclic_gen Q R A B
HQRA : not (Col Q R A)
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy9 := concy_trans_1 Q R A B D HQRA HConcy5 HConcy7).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HConcy5 := concy_trans_1 P Q R A B HNC HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 P Q R A C HNC HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 P Q R A D HNC HConcy1 HConcy4).
assert (HConcy8 := concy_trans_1 Q R A B C HQRA HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 Q R A B D HQRA HConcy5 HConcy7).

*****
HConcy9 : Concyclic_gen R A B D
HConcy8 : Concyclic_gen R A B C
HConcy7 : Concyclic_gen Q R A D
HConcy6 : Concyclic_gen Q R A C
HConcy5 : Concyclic_gen Q R A B
HQRA : not (Col Q R A)
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
assert (HConcy := concy_trans_1 R A B C D HRAB HConcy8 HConcy9).
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).
intro HRAB.
elim (col_dec Q R A).
intro HQRA.
assert (HConcy5 := concy_trans_1 P Q R A B HNC HConcy1 HConcy2).
assert (HConcy6 := concy_trans_1 P Q R A C HNC HConcy1 HConcy3).
assert (HConcy7 := concy_trans_1 P Q R A D HNC HConcy1 HConcy4).
assert (HConcy8 := concy_trans_1 Q R A B C HQRA HConcy5 HConcy6).
assert (HConcy9 := concy_trans_1 Q R A B D HQRA HConcy5 HConcy7).
assert (HConcy := concy_trans_1 R A B C D HRAB HConcy8 HConcy9).

*****
HConcy : Concyclic_gen A B C D
HConcy9 : Concyclic_gen R A B D
HConcy8 : Concyclic_gen R A B C
HConcy7 : Concyclic_gen Q R A D
HConcy6 : Concyclic_gen Q R A C
HConcy5 : Concyclic_gen Q R A B
HQRA : not (Col Q R A)
HRAB : not (Col R A B)
HConcy4 : Concyclic_gen P Q R D
HConcy3 : Concyclic_gen P Q R C
HConcy2 : Concyclic_gen P Q R B
HConcy1 : Concyclic_gen P Q R A
HNC : not (Col P Q R)
A,B,C,D,P,Q,R : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen A B C D
+++++
auto.
-----
Lemma concyclic_gen_pseudo_trans : forall A B C D P Q R, ~ Col P Q R -> Concyclic_gen P Q R A -> Concyclic_gen P Q R B -> Concyclic_gen P Q R C -> Concyclic_gen P Q R D -> Concyclic_gen A B C D.
Proof.
intros A B C D P Q R HNC HConcy1 HConcy2 HConcy3 HConcy4.
elim (col_dec R A B).

*****

*****

+++++
Qed.
-----
Lemma concy_3 :\n  forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3),\n  pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (CONCY : cartesianPower Tpoint (S (S (S (S O))))) (NOT_COL : cartesianPower Tpoint (S (S (S O)))) (_ : pred_conj concy CONCY NOT_COL) (_ : app not_col NOT_COL), app concy CONCY
+++++
Proof.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (CONCY : cartesianPower Tpoint (S (S (S (S O))))) (NOT_COL : cartesianPower Tpoint (S (S (S O)))) (_ : pred_conj concy CONCY NOT_COL) (_ : app not_col NOT_COL), app concy CONCY
+++++
unfold pred_conj.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (CONCY : cartesianPower Tpoint (S (S (S (S O))))) (NOT_COL : cartesianPower Tpoint (S (S (S O)))) (_ : pred_conj_aux concy (S (S (S O))) CONCY NOT_COL) (_ : app not_col NOT_COL), app concy CONCY
+++++
unfold app_2_n.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.
unfold app_2_n.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (CONCY : cartesianPower Tpoint (S (S (S (S O))))) (NOT_COL : cartesianPower Tpoint (S (S (S O)))) (_ : pred_conj_aux concy (S (S (S O))) CONCY NOT_COL) (_ : app not_col NOT_COL), app concy CONCY
+++++
unfold concy.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.
unfold app_2_n.
unfold concy.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (CONCY : cartesianPower Tpoint (S (S (S (S O))))) (NOT_COL : cartesianPower Tpoint (S (S (S O)))) (_ : pred_conj_aux Concyclic_gen (S (S (S O))) CONCY NOT_COL) (_ : app not_col NOT_COL), app Concyclic_gen CONCY
+++++
simpl.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.
unfold app_2_n.
unfold concy.
simpl.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (CONCY : cartesianPower Tpoint (S (S (S (S O))))) (NOT_COL : cartesianPower Tpoint (S (S (S O)))) (_ : and (Concyclic_gen (fst CONCY) (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))) (and (Concyclic_gen (fst (snd CONCY)) (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))) (and (Concyclic_gen (fst (snd (snd CONCY))) (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))) (Concyclic_gen (snd (snd (snd CONCY))) (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)))))) (_ : not_col (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))), Concyclic_gen (fst CONCY) (fst (snd CONCY)) (fst (snd (snd CONCY))) (snd (snd (snd CONCY)))
+++++
intros CONCY NOT_COL HConcy HNot_Col.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.
unfold app_2_n.
unfold concy.
simpl.
intros CONCY NOT_COL HConcy HNot_Col.

*****
HNot_Col : not_col (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy : and\n (Concyclic_gen (fst CONCY) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL)))\n (and\n (Concyclic_gen (fst (snd CONCY)) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL)))\n (and\n (Concyclic_gen (fst (snd (snd CONCY))) (fst NOT_COL)\n (fst (snd NOT_COL)) (snd (snd NOT_COL)))\n (Concyclic_gen (snd (snd (snd CONCY))) (fst NOT_COL)\n (fst (snd NOT_COL)) (snd (snd NOT_COL)))))
NOT_COL : cartesianPower Tpoint (S (S (S O)))
CONCY : cartesianPower Tpoint (S (S (S (S O))))
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen (fst CONCY) (fst (snd CONCY)) (fst (snd (snd CONCY))) (snd (snd (snd CONCY)))
+++++
destruct HConcy as [HConcy1 [HConcy2 [HConcy3 HConcy4]]].
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.
unfold app_2_n.
unfold concy.
simpl.
intros CONCY NOT_COL HConcy HNot_Col.
destruct HConcy as [HConcy1 [HConcy2 [HConcy3 HConcy4]]].

*****
HNot_Col : not_col (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy4 : Concyclic_gen (snd (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy3 : Concyclic_gen (fst (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy2 : Concyclic_gen (fst (snd CONCY)) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
HConcy1 : Concyclic_gen (fst CONCY) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
NOT_COL : cartesianPower Tpoint (S (S (S O)))
CONCY : cartesianPower Tpoint (S (S (S (S O))))
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen (fst CONCY) (fst (snd CONCY)) (fst (snd (snd CONCY))) (snd (snd (snd CONCY)))
+++++
apply concyclic_gen_pseudo_trans with (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)).
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.
unfold app_2_n.
unfold concy.
simpl.
intros CONCY NOT_COL HConcy HNot_Col.
destruct HConcy as [HConcy1 [HConcy2 [HConcy3 HConcy4]]].
apply concyclic_gen_pseudo_trans with (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)).

*****
HNot_Col : not_col (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy4 : Concyclic_gen (snd (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy3 : Concyclic_gen (fst (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy2 : Concyclic_gen (fst (snd CONCY)) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
HConcy1 : Concyclic_gen (fst CONCY) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
NOT_COL : cartesianPower Tpoint (S (S (S O)))
CONCY : cartesianPower Tpoint (S (S (S (S O))))
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)))
+++++
try apply concyclic_gen_2341.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.
unfold app_2_n.
unfold concy.
simpl.
intros CONCY NOT_COL HConcy HNot_Col.
destruct HConcy as [HConcy1 [HConcy2 [HConcy3 HConcy4]]].
apply concyclic_gen_pseudo_trans with (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)).
try apply concyclic_gen_2341.

*****
HNot_Col : not_col (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy4 : Concyclic_gen (snd (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy3 : Concyclic_gen (fst (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy2 : Concyclic_gen (fst (snd CONCY)) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
HConcy1 : Concyclic_gen (fst CONCY) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
NOT_COL : cartesianPower Tpoint (S (S (S O)))
CONCY : cartesianPower Tpoint (S (S (S (S O))))
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)))
+++++
auto.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.
unfold app_2_n.
unfold concy.
simpl.
intros CONCY NOT_COL HConcy HNot_Col.
destruct HConcy as [HConcy1 [HConcy2 [HConcy3 HConcy4]]].
apply concyclic_gen_pseudo_trans with (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)).

*****
HNot_Col : not_col (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy4 : Concyclic_gen (snd (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy3 : Concyclic_gen (fst (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy2 : Concyclic_gen (fst (snd CONCY)) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
HConcy1 : Concyclic_gen (fst CONCY) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
NOT_COL : cartesianPower Tpoint (S (S (S O)))
CONCY : cartesianPower Tpoint (S (S (S (S O))))
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)) (fst CONCY)
+++++
try apply concyclic_gen_2341.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.
unfold app_2_n.
unfold concy.
simpl.
intros CONCY NOT_COL HConcy HNot_Col.
destruct HConcy as [HConcy1 [HConcy2 [HConcy3 HConcy4]]].
apply concyclic_gen_pseudo_trans with (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)).
try apply concyclic_gen_2341.

*****
HNot_Col : not_col (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy4 : Concyclic_gen (snd (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy3 : Concyclic_gen (fst (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy2 : Concyclic_gen (fst (snd CONCY)) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
HConcy1 : Concyclic_gen (fst CONCY) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
NOT_COL : cartesianPower Tpoint (S (S (S O)))
CONCY : cartesianPower Tpoint (S (S (S (S O))))
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen (fst CONCY) (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))
+++++
auto.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.
unfold app_2_n.
unfold concy.
simpl.
intros CONCY NOT_COL HConcy HNot_Col.
destruct HConcy as [HConcy1 [HConcy2 [HConcy3 HConcy4]]].
apply concyclic_gen_pseudo_trans with (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)).

*****
HNot_Col : not_col (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy4 : Concyclic_gen (snd (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy3 : Concyclic_gen (fst (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy2 : Concyclic_gen (fst (snd CONCY)) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
HConcy1 : Concyclic_gen (fst CONCY) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
NOT_COL : cartesianPower Tpoint (S (S (S O)))
CONCY : cartesianPower Tpoint (S (S (S (S O))))
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)) (fst (snd CONCY))
+++++
try apply concyclic_gen_2341.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.
unfold app_2_n.
unfold concy.
simpl.
intros CONCY NOT_COL HConcy HNot_Col.
destruct HConcy as [HConcy1 [HConcy2 [HConcy3 HConcy4]]].
apply concyclic_gen_pseudo_trans with (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)).
try apply concyclic_gen_2341.

*****
HNot_Col : not_col (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy4 : Concyclic_gen (snd (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy3 : Concyclic_gen (fst (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy2 : Concyclic_gen (fst (snd CONCY)) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
HConcy1 : Concyclic_gen (fst CONCY) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
NOT_COL : cartesianPower Tpoint (S (S (S O)))
CONCY : cartesianPower Tpoint (S (S (S (S O))))
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen (fst (snd CONCY)) (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))
+++++
auto.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.
unfold app_2_n.
unfold concy.
simpl.
intros CONCY NOT_COL HConcy HNot_Col.
destruct HConcy as [HConcy1 [HConcy2 [HConcy3 HConcy4]]].
apply concyclic_gen_pseudo_trans with (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)).

*****
HNot_Col : not_col (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy4 : Concyclic_gen (snd (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy3 : Concyclic_gen (fst (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy2 : Concyclic_gen (fst (snd CONCY)) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
HConcy1 : Concyclic_gen (fst CONCY) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
NOT_COL : cartesianPower Tpoint (S (S (S O)))
CONCY : cartesianPower Tpoint (S (S (S (S O))))
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)) (fst (snd (snd CONCY)))
+++++
try apply concyclic_gen_2341.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.
unfold app_2_n.
unfold concy.
simpl.
intros CONCY NOT_COL HConcy HNot_Col.
destruct HConcy as [HConcy1 [HConcy2 [HConcy3 HConcy4]]].
apply concyclic_gen_pseudo_trans with (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)).
try apply concyclic_gen_2341.

*****
HNot_Col : not_col (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy4 : Concyclic_gen (snd (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy3 : Concyclic_gen (fst (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy2 : Concyclic_gen (fst (snd CONCY)) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
HConcy1 : Concyclic_gen (fst CONCY) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
NOT_COL : cartesianPower Tpoint (S (S (S O)))
CONCY : cartesianPower Tpoint (S (S (S (S O))))
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen (fst (snd (snd CONCY))) (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))
+++++
auto.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.
unfold app_2_n.
unfold concy.
simpl.
intros CONCY NOT_COL HConcy HNot_Col.
destruct HConcy as [HConcy1 [HConcy2 [HConcy3 HConcy4]]].
apply concyclic_gen_pseudo_trans with (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)).

*****
HNot_Col : not_col (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy4 : Concyclic_gen (snd (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy3 : Concyclic_gen (fst (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy2 : Concyclic_gen (fst (snd CONCY)) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
HConcy1 : Concyclic_gen (fst CONCY) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
NOT_COL : cartesianPower Tpoint (S (S (S O)))
CONCY : cartesianPower Tpoint (S (S (S (S O))))
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)) (snd (snd (snd CONCY)))
+++++
try apply concyclic_gen_2341.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.
unfold app_2_n.
unfold concy.
simpl.
intros CONCY NOT_COL HConcy HNot_Col.
destruct HConcy as [HConcy1 [HConcy2 [HConcy3 HConcy4]]].
apply concyclic_gen_pseudo_trans with (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)).
try apply concyclic_gen_2341.

*****
HNot_Col : not_col (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy4 : Concyclic_gen (snd (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy3 : Concyclic_gen (fst (snd (snd CONCY))) (fst NOT_COL) \n (fst (snd NOT_COL)) (snd (snd NOT_COL))
HConcy2 : Concyclic_gen (fst (snd CONCY)) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
HConcy1 : Concyclic_gen (fst CONCY) (fst NOT_COL) (fst (snd NOT_COL))\n (snd (snd NOT_COL))
NOT_COL : cartesianPower Tpoint (S (S (S O)))
CONCY : cartesianPower Tpoint (S (S (S (S O))))
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic_gen (snd (snd (snd CONCY))) (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL))
+++++
auto.
-----
Lemma concy_3 : forall (CONCY : cartesianPower Tpoint 4) (NOT_COL : cartesianPower Tpoint 3), pred_conj concy CONCY NOT_COL -> app not_col NOT_COL -> app concy CONCY.
Proof.
unfold pred_conj.
unfold app_2_n.
unfold concy.
simpl.
intros CONCY NOT_COL HConcy HNot_Col.
destruct HConcy as [HConcy1 [HConcy2 [HConcy3 HConcy4]]].
apply concyclic_gen_pseudo_trans with (fst NOT_COL) (fst (snd NOT_COL)) (snd (snd NOT_COL)).

*****

*****

+++++
Qed.
-----
Global Instance Tarski_is_a_Coinc_theory_for_concy : (Coinc_theory (Build_Arity Tpoint 1) (Build_Coinc_predicates (Build_Arity Tpoint 1) not_col concy)).
-----
Global Instance Tarski_is_a_Coinc_theory_for_concy : (Coinc_theory (Build_Arity Tpoint 1) (Build_Coinc_predicates (Build_Arity Tpoint 1) not_col concy)).

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coinc_theory {| COINCpoint := Tpoint; n := S O |} {| wd := not_col; coinc := concy |}
+++++
Proof.
-----
Global Instance Tarski_is_a_Coinc_theory_for_concy : (Coinc_theory (Build_Arity Tpoint 1) (Build_Coinc_predicates (Build_Arity Tpoint 1) not_col concy)).
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coinc_theory {| COINCpoint := Tpoint; n := S O |} {| wd := not_col; coinc := concy |}
+++++
exact (Build_Coinc_theory (Build_Arity Tpoint 1) (Build_Coinc_predicates (Build_Arity Tpoint 1) not_col concy) not_col_perm_1 not_col_perm_2 concy_perm_1 concy_perm_2 concy_bd concy_3).
-----
Global Instance Tarski_is_a_Coinc_theory_for_concy : (Coinc_theory (Build_Arity Tpoint 1) (Build_Coinc_predicates (Build_Arity Tpoint 1) not_col concy)).
Proof.
exact (Build_Coinc_theory (Build_Arity Tpoint 1) (Build_Coinc_predicates (Build_Arity Tpoint 1) not_col concy) not_col_perm_1 not_col_perm_2 concy_perm_1 concy_perm_2 concy_bd concy_3).

*****

*****

+++++
Qed.
-----
End Tarski_is_a_Coinc_theory_for_concyclic.
-----
