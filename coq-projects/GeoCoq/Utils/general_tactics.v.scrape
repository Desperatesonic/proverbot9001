Ltac ex_elim H x := elim H; intros x ; intro; clear H.
-----
Ltac DecompEx H P := elim H;intro P;intro;clear H.
-----
Ltac DecompExAnd H P :=\n  elim H;intro P;let id:=fresh in\n(intro id;decompose [and] id;clear id;clear H).
-----
Ltac exist_hyp t := match goal with\n  | H1:t |- _ => idtac\n end.
-----
Ltac hyp_of_type t := match goal with\n  | H1:t |- _ => H1\nend.
-----
Ltac clean_duplicated_hyps :=\n  repeat match goal with\n      | H:?X1 |- _ => clear H; exist_hyp X1\nend.
-----
Ltac suppose H := cut H;[intro|idtac].
-----
Ltac not_exist_hyp t := match goal with\n  | H1:t |- _ => fail 2\n end || idtac.
-----
Ltac DecompAndAll :=\n repeat\n match goal with\n   | H:(?X1 /\ ?X2) |- _ => decompose [and] H;clear H\nend.
-----
Ltac assert_if_not_exist H :=\n  not_exist_hyp H;assert H.
-----
Ltac absurde :=\nmatch goal with\n   |H : (?X <> ?X) |- _ => apply False_ind; apply H; reflexivity\nend.
-----
Ltac spliter := repeat\nmatch goal with\n   | H:(?X1 /\ ?X2) |- _ => induction H\nend.
-----
Ltac ex_and H x := elim H; intro x; intros; clear H;spliter.
-----
Ltac use H := decompose [and] H;clear H.
-----
Ltac try_or T :=\n match goal with\n | |- ?A \/ ?B =>\n   (left; try_or T) || (right;try_or T)\n | |- _ => T\n end.
-----
Tactic Notation "generalizes" hyp(X) :=\n  generalize X; clear X.
-----
Ltac sort_tactic :=\n  try match goal with H: ?T |- _ =>\n  match type of T with Prop =>\n    generalizes H; (try sort_tactic); intro\n  end end.
-----
Tactic Notation "sort" :=\n  sort_tactic.
-----
Definition ltac_something (P:Type) (e:P) := e.
-----
Notation "'Something'" :=\n  (@ltac_something _ _).
-----
Lemma ltac_something_eq : forall (e:Type),\n  e = (@ltac_something _ e).
-----
Lemma ltac_something_eq : forall (e:Type), e = (@ltac_something _ e).

*****

*****
forall e : Type, eq e (ltac_something Type e)
+++++
Proof.
-----
Lemma ltac_something_eq : forall (e:Type), e = (@ltac_something _ e).
Proof.

*****

*****
forall e : Type, eq e (ltac_something Type e)
+++++
auto.
-----
Lemma ltac_something_eq : forall (e:Type), e = (@ltac_something _ e).
Proof.
auto.

*****

*****

+++++
Qed.
-----
Lemma ltac_something_hide : forall (e:Type),\n  e -> (@ltac_something _ e).
-----
Lemma ltac_something_hide : forall (e:Type), e -> (@ltac_something _ e).

*****

*****
forall (e : Type) (_ : e), ltac_something Type e
+++++
Proof.
-----
Lemma ltac_something_hide : forall (e:Type), e -> (@ltac_something _ e).
Proof.

*****

*****
forall (e : Type) (_ : e), ltac_something Type e
+++++
auto.
-----
Lemma ltac_something_hide : forall (e:Type), e -> (@ltac_something _ e).
Proof.
auto.

*****

*****

+++++
Qed.
-----
Lemma ltac_something_show : forall (e:Type),\n  (@ltac_something _ e) -> e.
-----
Lemma ltac_something_show : forall (e:Type), (@ltac_something _ e) -> e.

*****

*****
forall (e : Type) (_ : ltac_something Type e), e
+++++
Proof.
-----
Lemma ltac_something_show : forall (e:Type), (@ltac_something _ e) -> e.
Proof.

*****

*****
forall (e : Type) (_ : ltac_something Type e), e
+++++
auto.
-----
Lemma ltac_something_show : forall (e:Type), (@ltac_something _ e) -> e.
Proof.
auto.

*****

*****

+++++
Qed.
-----
Tactic Notation "hide_def" hyp(x) :=\n  let x' := constr:(x) in\n  let T := eval unfold x in x' in\n  change T with (@ltac_something _ T) in x.
-----
Tactic Notation "show_def" hyp(x) :=\n  let x' := constr:(x) in\n  let U := eval unfold x in x' in\n  match U with @ltac_something _ ?T =>\n    change U with T in x end.
-----
Tactic Notation "show_def" :=\n  unfold ltac_something.
-----
Tactic Notation "show_def" "in" "*" :=\n  unfold ltac_something in *.
-----
Tactic Notation "hide_defs" :=\n  repeat match goal with H := ?T |- _ =>\n    match T with\n    | @ltac_something _ _ => fail 1\n    | _ => change T with (@ltac_something _ T) in H\n    end\n  end.
-----
Tactic Notation "show_defs" :=\n  repeat match goal with H := (@ltac_something _ ?T) |- _ =>\n    change (@ltac_something _ T) with T in H end.
-----
Tactic Notation "show_hyp" hyp(H) :=\n  apply ltac_something_show in H.
-----
Tactic Notation "hide_hyp" hyp(H) :=\n  apply ltac_something_hide in H.
-----
Tactic Notation "show_hyps" :=\n  repeat match goal with\n    H: @ltac_something _ _ |- _ => show_hyp H end.
-----
Tactic Notation "hide_hyps" :=\n  repeat match goal with H: ?T |- _ =>\n    match type of T with\n    | Prop =>\n      match T with\n      | @ltac_something _ _ => fail 2\n      | _ => hide_hyp H\n      end\n    | _ => fail 1\n    end\n  end.
-----
Tactic Notation "hide" hyp(H) :=\n  first [hide_def H | hide_hyp H].
-----
Tactic Notation "show" hyp(H) :=\n  first [show_def H | show_hyp H].
-----
Tactic Notation "hide_all" :=\n  hide_hyps; hide_defs.
-----
Tactic Notation "show_all" :=\n  unfold ltac_something in *.
-----
Tactic Notation "hide_term" constr(E) :=\n  change E with (@ltac_something _ E).
-----
Tactic Notation "show_term" constr(E) :=\n  change (@ltac_something _ E) with E.
-----
Tactic Notation "show_term" :=\n  unfold ltac_something.
-----
Tactic Notation "hide_term" constr(E) "in" hyp(H) :=\n  change E with (@ltac_something _ E) in H.
-----
Tactic Notation "show_term" constr(E) "in" hyp(H) :=\n  change (@ltac_something _ E) with E in H.
-----
Tactic Notation "show_term" "in" hyp(H) :=\n  unfold ltac_something in H.
-----
