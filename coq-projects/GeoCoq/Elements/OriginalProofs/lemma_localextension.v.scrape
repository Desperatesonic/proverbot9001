Require Export GeoCoq.Elements.OriginalProofs.euclidean_defs.
-----
Require Export GeoCoq.Elements.OriginalProofs.euclidean_tactics.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_localextension : \n   forall A B Q, \n   neq A B -> neq B Q ->\n   exists X, BetS A B X /\ Cong B X B Q.
-----
Lemma lemma_localextension : forall A B Q, neq A B -> neq B Q -> exists X, BetS A B X /\\ Cong B X B Q.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B Q : Point) (_ : neq A B) (_ : neq B Q), ex (fun X : Point => and (BetS A B X) (Cong B X B Q))
+++++
Proof.
-----
Lemma lemma_localextension : forall A B Q, neq A B -> neq B Q -> exists X, BetS A B X /\\ Cong B X B Q.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B Q : Point) (_ : neq A B) (_ : neq B Q), ex (fun X : Point => and (BetS A B X) (Cong B X B Q))
+++++
intros.
-----
Lemma lemma_localextension : forall A B Q, neq A B -> neq B Q -> exists X, BetS A B X /\\ Cong B X B Q.
Proof.
intros.

*****
H0 : neq B Q
H : neq A B
A,B,Q : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS A B X) (Cong B X B Q))
+++++
assert (eq B B) by (conclude cn_equalityreflexive).
-----
Lemma lemma_localextension : forall A B Q, neq A B -> neq B Q -> exists X, BetS A B X /\\ Cong B X B Q.
Proof.
intros.
assert (eq B B) by (conclude cn_equalityreflexive).

*****
H1 : eq B B
H0 : neq B Q
H : neq A B
A,B,Q : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS A B X) (Cong B X B Q))
+++++
let Tf:=fresh in assert (Tf:exists J, CI J B B Q) by (conclude postulate_Euclid3);destruct Tf as [J];spliter.
-----
Lemma lemma_localextension : forall A B Q, neq A B -> neq B Q -> exists X, BetS A B X /\\ Cong B X B Q.
Proof.
intros.
assert (eq B B) by (conclude cn_equalityreflexive).
let Tf:=fresh in assert (Tf:exists J, CI J B B Q) by (conclude postulate_Euclid3);destruct Tf as [J];spliter.

*****
H2 : CI J B B Q
J : Circle
H1 : eq B B
H0 : neq B Q
H : neq A B
A,B,Q : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS A B X) (Cong B X B Q))
+++++
assert (InCirc B J) by (conclude_def InCirc ).
-----
Lemma lemma_localextension : forall A B Q, neq A B -> neq B Q -> exists X, BetS A B X /\\ Cong B X B Q.
Proof.
intros.
assert (eq B B) by (conclude cn_equalityreflexive).
let Tf:=fresh in assert (Tf:exists J, CI J B B Q) by (conclude postulate_Euclid3);destruct Tf as [J];spliter.
assert (InCirc B J) by (conclude_def InCirc ).

*****
H3 : InCirc B J
H2 : CI J B B Q
J : Circle
H1 : eq B B
H0 : neq B Q
H : neq A B
A,B,Q : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS A B X) (Cong B X B Q))
+++++
let Tf:=fresh in assert (Tf:exists C E, (Col A B C /\ BetS A B E /\ OnCirc C J /\ OnCirc E J /\ BetS C B E)) by (conclude postulate_line_circle);destruct Tf as [C[E]];spliter.
-----
Lemma lemma_localextension : forall A B Q, neq A B -> neq B Q -> exists X, BetS A B X /\\ Cong B X B Q.
Proof.
intros.
assert (eq B B) by (conclude cn_equalityreflexive).
let Tf:=fresh in assert (Tf:exists J, CI J B B Q) by (conclude postulate_Euclid3);destruct Tf as [J];spliter.
assert (InCirc B J) by (conclude_def InCirc ).
let Tf:=fresh in assert (Tf:exists C E, (Col A B C /\\ BetS A B E /\\ OnCirc C J /\\ OnCirc E J /\\ BetS C B E)) by (conclude postulate_line_circle);destruct Tf as [C[E]];spliter.

*****
H8 : BetS C B E
H7 : OnCirc E J
H6 : OnCirc C J
H5 : BetS A B E
H4 : Col A B C
C,E : Point
H3 : InCirc B J
H2 : CI J B B Q
J : Circle
H1 : eq B B
H0 : neq B Q
H : neq A B
A,B,Q : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS A B X) (Cong B X B Q))
+++++
assert (Cong B E B Q) by (conclude axiom_circle_center_radius).
-----
Lemma lemma_localextension : forall A B Q, neq A B -> neq B Q -> exists X, BetS A B X /\\ Cong B X B Q.
Proof.
intros.
assert (eq B B) by (conclude cn_equalityreflexive).
let Tf:=fresh in assert (Tf:exists J, CI J B B Q) by (conclude postulate_Euclid3);destruct Tf as [J];spliter.
assert (InCirc B J) by (conclude_def InCirc ).
let Tf:=fresh in assert (Tf:exists C E, (Col A B C /\\ BetS A B E /\\ OnCirc C J /\\ OnCirc E J /\\ BetS C B E)) by (conclude postulate_line_circle);destruct Tf as [C[E]];spliter.
assert (Cong B E B Q) by (conclude axiom_circle_center_radius).

*****
H9 : Cong B E B Q
H8 : BetS C B E
H7 : OnCirc E J
H6 : OnCirc C J
H5 : BetS A B E
H4 : Col A B C
C,E : Point
H3 : InCirc B J
H2 : CI J B B Q
J : Circle
H1 : eq B B
H0 : neq B Q
H : neq A B
A,B,Q : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS A B X) (Cong B X B Q))
+++++
close.
-----
Lemma lemma_localextension : forall A B Q, neq A B -> neq B Q -> exists X, BetS A B X /\\ Cong B X B Q.
Proof.
intros.
assert (eq B B) by (conclude cn_equalityreflexive).
let Tf:=fresh in assert (Tf:exists J, CI J B B Q) by (conclude postulate_Euclid3);destruct Tf as [J];spliter.
assert (InCirc B J) by (conclude_def InCirc ).
let Tf:=fresh in assert (Tf:exists C E, (Col A B C /\\ BetS A B E /\\ OnCirc C J /\\ OnCirc E J /\\ BetS C B E)) by (conclude postulate_line_circle);destruct Tf as [C[E]];spliter.
assert (Cong B E B Q) by (conclude axiom_circle_center_radius).
close.

*****

*****

+++++
Unshelve.
-----
Lemma lemma_localextension : forall A B Q, neq A B -> neq B Q -> exists X, BetS A B X /\\ Cong B X B Q.
Proof.
intros.
assert (eq B B) by (conclude cn_equalityreflexive).
let Tf:=fresh in assert (Tf:exists J, CI J B B Q) by (conclude postulate_Euclid3);destruct Tf as [J];spliter.
assert (InCirc B J) by (conclude_def InCirc ).
let Tf:=fresh in assert (Tf:exists C E, (Col A B C /\\ BetS A B E /\\ OnCirc C J /\\ OnCirc E J /\\ BetS C B E)) by (conclude postulate_line_circle);destruct Tf as [C[E]];spliter.
assert (Cong B E B Q) by (conclude axiom_circle_center_radius).
close.
Unshelve.

*****
H2 : CI J B B Q
J : Circle
H1 : eq B B
H0 : neq B Q
H : neq A B
A,B,Q : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Point
+++++
exact A.
-----
Lemma lemma_localextension : forall A B Q, neq A B -> neq B Q -> exists X, BetS A B X /\\ Cong B X B Q.
Proof.
intros.
assert (eq B B) by (conclude cn_equalityreflexive).
let Tf:=fresh in assert (Tf:exists J, CI J B B Q) by (conclude postulate_Euclid3);destruct Tf as [J];spliter.
assert (InCirc B J) by (conclude_def InCirc ).
let Tf:=fresh in assert (Tf:exists C E, (Col A B C /\\ BetS A B E /\\ OnCirc C J /\\ OnCirc E J /\\ BetS C B E)) by (conclude postulate_line_circle);destruct Tf as [C[E]];spliter.
assert (Cong B E B Q) by (conclude axiom_circle_center_radius).
close.
Unshelve.
exact A.

*****
H2 : CI J B B Q
J : Circle
H1 : eq B B
H0 : neq B Q
H : neq A B
A,B,Q : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Point
+++++
exact A.
-----
Lemma lemma_localextension : forall A B Q, neq A B -> neq B Q -> exists X, BetS A B X /\\ Cong B X B Q.
Proof.
intros.
assert (eq B B) by (conclude cn_equalityreflexive).
let Tf:=fresh in assert (Tf:exists J, CI J B B Q) by (conclude postulate_Euclid3);destruct Tf as [J];spliter.
assert (InCirc B J) by (conclude_def InCirc ).
let Tf:=fresh in assert (Tf:exists C E, (Col A B C /\\ BetS A B E /\\ OnCirc C J /\\ OnCirc E J /\\ BetS C B E)) by (conclude postulate_line_circle);destruct Tf as [C[E]];spliter.
assert (Cong B E B Q) by (conclude axiom_circle_center_radius).
close.
Unshelve.
exact A.
exact A.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
