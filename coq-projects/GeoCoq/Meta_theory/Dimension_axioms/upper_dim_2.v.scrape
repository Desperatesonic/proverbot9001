Require Export GeoCoq.Tarski_dev.Ch09_plane.
-----
Section Upper_dim.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Definition upper_dim_axiom := forall A B C P Q : Tpoint,\n  P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q ->\n  (Bet A B C \/ Bet B C A \/ Bet C A B).
-----
Definition all_coplanar_axiom := forall A B C D, Coplanar A B C D.
-----
Lemma upper_dim_implies_per2__col :\n  upper_dim_axiom ->\n  (forall A B C X, Per A X C -> X <> C -> Per B X C -> Col A B X).
-----
Lemma upper_dim_implies_per2__col : upper_dim_axiom -> (forall A B C X, Per A X C -> X <> C -> Per B X C -> Col A B X).

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : upper_dim_axiom) (A B C X : Tpoint) (_ : Per A X C) (_ : not (eq X C)) (_ : Per B X C), Col A B X
+++++
Proof.
-----
Lemma upper_dim_implies_per2__col : upper_dim_axiom -> (forall A B C X, Per A X C -> X <> C -> Per B X C -> Col A B X).
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : upper_dim_axiom) (A B C X : Tpoint) (_ : Per A X C) (_ : not (eq X C)) (_ : Per B X C), Col A B X
+++++
intros HUD A B C X HPer1 HDiff HPer2.
-----
Lemma upper_dim_implies_per2__col : upper_dim_axiom -> (forall A B C X, Per A X C -> X <> C -> Per B X C -> Col A B X).
Proof.
intros HUD A B C X HPer1 HDiff HPer2.

*****
HPer2 : Per B X C
HDiff : not (eq X C)
HPer1 : Per A X C
A,B,C,X : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
destruct HPer1 as [C' HPer1].
-----
Lemma upper_dim_implies_per2__col : upper_dim_axiom -> (forall A B C X, Per A X C -> X <> C -> Per B X C -> Col A B X).
Proof.
intros HUD A B C X HPer1 HDiff HPer2.
destruct HPer1 as [C' HPer1].

*****
HPer2 : Per B X C
HDiff : not (eq X C)
HPer1 : and (Midpoint X C C') (Cong A C A C')
A,B,C,X,C' : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
destruct HPer2 as [C'' HPer2].
-----
Lemma upper_dim_implies_per2__col : upper_dim_axiom -> (forall A B C X, Per A X C -> X <> C -> Per B X C -> Col A B X).
Proof.
intros HUD A B C X HPer1 HDiff HPer2.
destruct HPer1 as [C' HPer1].
destruct HPer2 as [C'' HPer2].

*****
HPer2 : and (Midpoint X C C'') (Cong B C B C'')
C'' : Tpoint
HDiff : not (eq X C)
HPer1 : and (Midpoint X C C') (Cong A C A C')
A,B,C,X,C' : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
assert (C' = C'') by (apply symmetric_point_uniqueness with C X; spliter; auto); treat_equalities.
-----
Lemma upper_dim_implies_per2__col : upper_dim_axiom -> (forall A B C X, Per A X C -> X <> C -> Per B X C -> Col A B X).
Proof.
intros HUD A B C X HPer1 HDiff HPer2.
destruct HPer1 as [C' HPer1].
destruct HPer2 as [C'' HPer2].
assert (C' = C'') by (apply symmetric_point_uniqueness with C X; spliter; auto); treat_equalities.

*****
HPer2 : and (Midpoint X C C') (Cong B C B C')
HDiff : not (eq X C)
HPer1 : and (Midpoint X C C') (Cong A C A C')
A,B,C,X,C' : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
unfold upper_dim_axiom in HUD.
-----
Lemma upper_dim_implies_per2__col : upper_dim_axiom -> (forall A B C X, Per A X C -> X <> C -> Per B X C -> Col A B X).
Proof.
intros HUD A B C X HPer1 HDiff HPer2.
destruct HPer1 as [C' HPer1].
destruct HPer2 as [C'' HPer2].
assert (C' = C'') by (apply symmetric_point_uniqueness with C X; spliter; auto); treat_equalities.
unfold upper_dim_axiom in HUD.

*****
HPer2 : and (Midpoint X C C') (Cong B C B C')
HDiff : not (eq X C)
HPer1 : and (Midpoint X C C') (Cong A C A C')
A,B,C,X,C' : Tpoint
HUD : forall (A B C P Q : Tpoint) (_ : not (eq P Q)) (_ : Cong A P A Q)\n (_ : Cong B P B Q) (_ : Cong C P C Q),\nor (Bet A B C) (or (Bet B C A) (Bet C A B))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
spliter; assert_diffs; unfold Midpoint in *; spliter; apply HUD with C C'; Cong.
-----
Lemma upper_dim_implies_per2__col : upper_dim_axiom -> (forall A B C X, Per A X C -> X <> C -> Per B X C -> Col A B X).
Proof.
intros HUD A B C X HPer1 HDiff HPer2.
destruct HPer1 as [C' HPer1].
destruct HPer2 as [C'' HPer2].
assert (C' = C'') by (apply symmetric_point_uniqueness with C X; spliter; auto); treat_equalities.
unfold upper_dim_axiom in HUD.
spliter; assert_diffs; unfold Midpoint in *; spliter; apply HUD with C C'; Cong.

*****

*****

+++++
Qed.
-----
Lemma upper_dim_implies_col_perp2__col :\n  upper_dim_axiom ->\n  (forall A B X Y P,\n   Col A B P ->\n   Perp A B X P ->\n   Perp P A Y P ->\n   Col Y X P).
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : upper_dim_axiom) (A B X Y P : Tpoint) (_ : Col A B P) (_ : Perp A B X P) (_ : Perp P A Y P), Col Y X P
+++++
Proof.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : upper_dim_axiom) (A B X Y P : Tpoint) (_ : Col A B P) (_ : Perp A B X P) (_ : Perp P A Y P), Col Y X P
+++++
intro HUP; intros.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.

*****
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Y X P
+++++
assert (P <> A).
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).

*****
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P A)
+++++
eapply perp_not_eq_1.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).
eapply perp_not_eq_1.

*****
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P A ?C ?D
+++++
apply H1.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).
eapply perp_not_eq_1.
apply H1.

*****
H2 : not (eq P A)
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Y X P
+++++
eapply upper_dim_implies_per2__col; auto.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).
eapply perp_not_eq_1.
apply H1.
eapply upper_dim_implies_per2__col; auto.

*****
H2 : not (eq P A)
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Y P ?C
+++++
apply perp_in_per.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).
eapply perp_not_eq_1.
apply H1.
eapply upper_dim_implies_per2__col; auto.
apply perp_in_per.

*****
H2 : not (eq P A)
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_at P Y P P ?C
+++++
apply perp_in_sym.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).
eapply perp_not_eq_1.
apply H1.
eapply upper_dim_implies_per2__col; auto.
apply perp_in_per.
apply perp_in_sym.

*****
H2 : not (eq P A)
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_at P P ?C Y P
+++++
apply perp_perp_in.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).
eapply perp_not_eq_1.
apply H1.
eapply upper_dim_implies_per2__col; auto.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.

*****
H2 : not (eq P A)
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P ?C Y P
+++++
apply H1.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).
eapply perp_not_eq_1.
apply H1.
eapply upper_dim_implies_per2__col; auto.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.
apply H1.

*****
H2 : not (eq P A)
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P A)
+++++
assumption.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).
eapply perp_not_eq_1.
apply H1.
eapply upper_dim_implies_per2__col; auto.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.
apply H1.
assumption.

*****
H2 : not (eq P A)
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per X P A
+++++
apply perp_in_per.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).
eapply perp_not_eq_1.
apply H1.
eapply upper_dim_implies_per2__col; auto.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.
apply H1.
assumption.
apply perp_in_per.

*****
H2 : not (eq P A)
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_at P X P P A
+++++
apply perp_in_sym.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).
eapply perp_not_eq_1.
apply H1.
eapply upper_dim_implies_per2__col; auto.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.
apply H1.
assumption.
apply perp_in_per.
apply perp_in_sym.

*****
H2 : not (eq P A)
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_at P P A X P
+++++
apply perp_perp_in.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).
eapply perp_not_eq_1.
apply H1.
eapply upper_dim_implies_per2__col; auto.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.
apply H1.
assumption.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.

*****
H2 : not (eq P A)
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P A X P
+++++
apply perp_left_comm.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).
eapply perp_not_eq_1.
apply H1.
eapply upper_dim_implies_per2__col; auto.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.
apply H1.
assumption.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.
apply perp_left_comm.

*****
H2 : not (eq P A)
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A P X P
+++++
eapply perp_col.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).
eapply perp_not_eq_1.
apply H1.
eapply upper_dim_implies_per2__col; auto.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.
apply H1.
assumption.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.
apply perp_left_comm.
eapply perp_col.

*****
H2 : not (eq P A)
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A P)
+++++
auto.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).
eapply perp_not_eq_1.
apply H1.
eapply upper_dim_implies_per2__col; auto.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.
apply H1.
assumption.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.
apply perp_left_comm.
eapply perp_col.
auto.

*****
H2 : not (eq P A)
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A ?B X P
+++++
apply H0.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).
eapply perp_not_eq_1.
apply H1.
eapply upper_dim_implies_per2__col; auto.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.
apply H1.
assumption.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.
apply perp_left_comm.
eapply perp_col.
auto.
apply H0.

*****
H2 : not (eq P A)
H1 : Perp P A Y P
H0 : Perp A B X P
H : Col A B P
A,B,X,Y,P : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B P
+++++
assumption.
-----
Lemma upper_dim_implies_col_perp2__col : upper_dim_axiom -> (forall A B X Y P, Col A B P -> Perp A B X P -> Perp P A Y P -> Col Y X P).
Proof.
intro HUP; intros.
assert (P <> A).
eapply perp_not_eq_1.
apply H1.
eapply upper_dim_implies_per2__col; auto.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.
apply H1.
assumption.
apply perp_in_per.
apply perp_in_sym.
apply perp_perp_in.
apply perp_left_comm.
eapply perp_col.
auto.
apply H0.
assumption.

*****

*****

+++++
Qed.
-----
Lemma upper_dim_implies_perp2__col :\n  upper_dim_axiom ->\n  (forall X Y Z A B,\n   Perp X Y A B ->\n   Perp X Z A B ->\n   Col X Y Z).
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : upper_dim_axiom) (X Y Z A B : Tpoint) (_ : Perp X Y A B) (_ : Perp X Z A B), Col X Y Z
+++++
Proof.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : upper_dim_axiom) (X Y Z A B : Tpoint) (_ : Perp X Y A B) (_ : Perp X Z A B), Col X Y Z
+++++
intro HUP.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.

*****
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (X Y Z A B : Tpoint) (_ : Perp X Y A B) (_ : Perp X Z A B), Col X Y Z
+++++
intros.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.

*****
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
induction(col_dec A B X).
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).

*****
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
induction(eq_dec_points X A).
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).

*****
H2 : eq X A
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
subst A.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.

*****
H : Perp X Y X B
H0 : Perp X Z X B
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
assert(X <> B).
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).

*****
H : Perp X Y X B
H0 : Perp X Z X B
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X B)
+++++
apply perp_distinct in H.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).
apply perp_distinct in H.

*****
H : and (not (eq X Y)) (not (eq X B))
H0 : Perp X Z X B
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X B)
+++++
spliter.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).
apply perp_distinct in H.
spliter.

*****
H2 : not (eq X B)
H : not (eq X Y)
H0 : Perp X Z X B
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X B)
+++++
assumption.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).

*****
H2 : not (eq X B)
H : Perp X Y X B
H0 : Perp X Z X B
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
apply perp_right_comm in H.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).
apply perp_right_comm in H.

*****
H2 : not (eq X B)
H : Perp X Y B X
H0 : Perp X Z X B
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
apply perp_perp_in in H.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).
apply perp_right_comm in H.
apply perp_perp_in in H.

*****
H2 : not (eq X B)
H : Perp_at X X Y B X
H0 : Perp X Z X B
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
apply perp_in_comm in H.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).
apply perp_right_comm in H.
apply perp_perp_in in H.
apply perp_in_comm in H.

*****
H2 : not (eq X B)
H : Perp_at X Y X X B
H0 : Perp X Z X B
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
apply perp_in_per in H.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).
apply perp_right_comm in H.
apply perp_perp_in in H.
apply perp_in_comm in H.
apply perp_in_per in H.

*****
H2 : not (eq X B)
H : Per Y X B
H0 : Perp X Z X B
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
apply perp_right_comm in H0.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).
apply perp_right_comm in H.
apply perp_perp_in in H.
apply perp_in_comm in H.
apply perp_in_per in H.
apply perp_right_comm in H0.

*****
H2 : not (eq X B)
H : Per Y X B
H0 : Perp X Z B X
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
apply perp_perp_in in H0.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).
apply perp_right_comm in H.
apply perp_perp_in in H.
apply perp_in_comm in H.
apply perp_in_per in H.
apply perp_right_comm in H0.
apply perp_perp_in in H0.

*****
H2 : not (eq X B)
H : Per Y X B
H0 : Perp_at X X Z B X
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
apply perp_in_comm in H0.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).
apply perp_right_comm in H.
apply perp_perp_in in H.
apply perp_in_comm in H.
apply perp_in_per in H.
apply perp_right_comm in H0.
apply perp_perp_in in H0.
apply perp_in_comm in H0.

*****
H2 : not (eq X B)
H : Per Y X B
H0 : Perp_at X Z X X B
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
apply perp_in_per in H0.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).
apply perp_right_comm in H.
apply perp_perp_in in H.
apply perp_in_comm in H.
apply perp_in_per in H.
apply perp_right_comm in H0.
apply perp_perp_in in H0.
apply perp_in_comm in H0.
apply perp_in_per in H0.

*****
H2 : not (eq X B)
H : Per Y X B
H0 : Per Z X B
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
apply col_permutation_2.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).
apply perp_right_comm in H.
apply perp_perp_in in H.
apply perp_in_comm in H.
apply perp_in_per in H.
apply perp_right_comm in H0.
apply perp_perp_in in H0.
apply perp_in_comm in H0.
apply perp_in_per in H0.
apply col_permutation_2.

*****
H2 : not (eq X B)
H : Per Y X B
H0 : Per Z X B
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Y Z X
+++++
eapply (upper_dim_implies_per2__col).
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).
apply perp_right_comm in H.
apply perp_perp_in in H.
apply perp_in_comm in H.
apply perp_in_per in H.
apply perp_right_comm in H0.
apply perp_perp_in in H0.
apply perp_in_comm in H0.
apply perp_in_per in H0.
apply col_permutation_2.
eapply (upper_dim_implies_per2__col).

*****
H2 : not (eq X B)
H : Per Y X B
H0 : Per Z X B
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
upper_dim_axiom
+++++
assumption.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).
apply perp_right_comm in H.
apply perp_perp_in in H.
apply perp_in_comm in H.
apply perp_in_per in H.
apply perp_right_comm in H0.
apply perp_perp_in in H0.
apply perp_in_comm in H0.
apply perp_in_per in H0.
apply col_permutation_2.
eapply (upper_dim_implies_per2__col).

*****
H2 : not (eq X B)
H : Per Y X B
H0 : Per Z X B
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Y X ?C
+++++
apply H.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).
apply perp_right_comm in H.
apply perp_perp_in in H.
apply perp_in_comm in H.
apply perp_in_per in H.
apply perp_right_comm in H0.
apply perp_perp_in in H0.
apply perp_in_comm in H0.
apply perp_in_per in H0.
apply col_permutation_2.
eapply (upper_dim_implies_per2__col).

*****
H2 : not (eq X B)
H : Per Y X B
H0 : Per Z X B
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X B)
+++++
assumption.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
subst A.
assert(X <> B).
apply perp_right_comm in H.
apply perp_perp_in in H.
apply perp_in_comm in H.
apply perp_in_per in H.
apply perp_right_comm in H0.
apply perp_perp_in in H0.
apply perp_in_comm in H0.
apply perp_in_per in H0.
apply col_permutation_2.
eapply (upper_dim_implies_per2__col).

*****
H2 : not (eq X B)
H : Per Y X B
H0 : Per Z X B
H1 : Col X B X
X,Y,Z,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Z X B
+++++
assumption.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).

*****
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
assert(Perp A X X Y ).
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).

*****
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A X X Y
+++++
eapply perp_col.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
eapply perp_col.

*****
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A X)
+++++
auto.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
eapply perp_col.

*****
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A ?B X Y
+++++
apply perp_sym.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
eapply perp_col.
apply perp_sym.

*****
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X Y A ?B
+++++
apply H.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
eapply perp_col.

*****
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
assumption.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).

*****
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
assert(Perp A X X Z).
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).

*****
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A X X Z
+++++
eapply perp_col.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
eapply perp_col.

*****
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A X)
+++++
auto.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
eapply perp_col.

*****
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A ?B X Z
+++++
apply perp_sym.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
eapply perp_col.
apply perp_sym.

*****
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X Z A ?B
+++++
apply H0.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
eapply perp_col.

*****
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
assumption.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
apply col_permutation_2.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Y Z X
+++++
apply upper_dim_implies_per2__col with A.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
upper_dim_axiom
+++++
assumption.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Y X A
+++++
apply perp_in_per.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.
apply perp_in_per.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_at X Y X X A
+++++
apply perp_in_comm.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.
apply perp_in_per.
apply perp_in_comm.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_at X X Y A X
+++++
apply perp_perp_in.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.
apply perp_in_per.
apply perp_in_comm.
apply perp_perp_in.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X Y A X
+++++
apply perp_sym.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.
apply perp_in_per.
apply perp_in_comm.
apply perp_perp_in.
apply perp_sym.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A X X Y
+++++
eapply perp_col.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.
apply perp_in_per.
apply perp_in_comm.
apply perp_perp_in.
apply perp_sym.
eapply perp_col.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A X)
+++++
auto.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.
apply perp_in_per.
apply perp_in_comm.
apply perp_perp_in.
apply perp_sym.
eapply perp_col.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A ?B X Y
+++++
apply perp_sym.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.
apply perp_in_per.
apply perp_in_comm.
apply perp_perp_in.
apply perp_sym.
eapply perp_col.
apply perp_sym.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X Y A ?B
+++++
apply H.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.
apply perp_in_per.
apply perp_in_comm.
apply perp_perp_in.
apply perp_sym.
eapply perp_col.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
assumption.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X A)
+++++
assumption.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per Z X A
+++++
apply perp_in_per.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.
apply perp_in_per.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_at X Z X X A
+++++
apply perp_in_comm.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.
apply perp_in_per.
apply perp_in_comm.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp_at X X Z A X
+++++
apply perp_perp_in.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.
apply perp_in_per.
apply perp_in_comm.
apply perp_perp_in.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X Z A X
+++++
apply perp_sym.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.
apply perp_in_per.
apply perp_in_comm.
apply perp_perp_in.
apply perp_sym.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A X X Z
+++++
eapply perp_col.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.
apply perp_in_per.
apply perp_in_comm.
apply perp_perp_in.
apply perp_sym.
eapply perp_col.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A X)
+++++
auto.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.
apply perp_in_per.
apply perp_in_comm.
apply perp_perp_in.
apply perp_sym.
eapply perp_col.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A ?B X Z
+++++
apply perp_sym.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.
apply perp_in_per.
apply perp_in_comm.
apply perp_perp_in.
apply perp_sym.
eapply perp_col.
apply perp_sym.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X Z A ?B
+++++
apply H0.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
induction(eq_dec_points X A).
assert(Perp A X X Y ).
assert(Perp A X X Z).
apply col_permutation_2.
apply upper_dim_implies_per2__col with A.
apply perp_in_per.
apply perp_in_comm.
apply perp_perp_in.
apply perp_sym.
eapply perp_col.

*****
H4 : Perp A X X Z
H3 : Perp A X X Y
H2 : not (eq X A)
H1 : Col A B X
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
assumption.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).

*****
H1 : not (Col A B X)
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
assert(HH0:=H).
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).

*****
HH0 : Perp X Y A B
H1 : not (Col A B X)
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
assert(HH1:=H0).
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).

*****
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
H0 : Perp X Z A B
H : Perp X Y A B
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
unfold Perp in H.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.

*****
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
H0 : Perp X Z A B
H : ex (fun X0 : Tpoint => Perp_at X0 X Y A B)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
unfold Perp in H0.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.

*****
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
H0 : ex (fun X0 : Tpoint => Perp_at X0 X Z A B)
H : ex (fun X0 : Tpoint => Perp_at X0 X Y A B)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
ex_and H Y0.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.

*****
H2 : Perp_at Y0 X Y A B
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
H0 : ex (fun X0 : Tpoint => Perp_at X0 X Z A B)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
ex_and H0 Z0.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.

*****
H : Perp_at Z0 X Z A B
Z0 : Tpoint
H2 : Perp_at Y0 X Y A B
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
assert(HH2:=H).
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).

*****
H,HH2 : Perp_at Z0 X Z A B
Z0 : Tpoint
H2 : Perp_at Y0 X Y A B
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
assert(HH3:=H2).
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).

*****
HH3 : Perp_at Y0 X Y A B
H,HH2 : Perp_at Z0 X Z A B
Z0 : Tpoint
H2 : Perp_at Y0 X Y A B
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
apply perp_in_col in H.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.

*****
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H : and (Col X Z Z0) (Col A B Z0)
Z0 : Tpoint
H2 : Perp_at Y0 X Y A B
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
apply perp_in_col in H2.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.

*****
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H : and (Col X Z Z0) (Col A B Z0)
Z0 : Tpoint
H2 : and (Col X Y Y0) (Col A B Y0)
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
spliter.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.

*****
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
assert(Perp X Y0 A B).
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).

*****
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X Y0 A B
+++++
eapply perp_col.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
eapply perp_col.

*****
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X Y0)
+++++
intro.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
eapply perp_col.
intro.

*****
H4 : eq X Y0
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst Y0.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
eapply perp_col.
intro.
subst Y0.

*****
HH3 : Perp_at X X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H2 : Col X Y X
H3 : Col A B X
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
contradiction.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
eapply perp_col.

*****
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X ?B A B
+++++
apply HH0.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
eapply perp_col.

*****
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Y0
+++++
assumption.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).

*****
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
assert(Perp X Z0 A B).
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).

*****
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X Z0 A B
+++++
eapply perp_col.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
eapply perp_col.

*****
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X Z0)
+++++
intro.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
eapply perp_col.
intro.

*****
H5 : eq X Z0
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst Z0.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
eapply perp_col.
intro.
subst Z0.

*****
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
H : Col X Z X
H0 : Col A B X
HH2 : Perp_at X X Z A B
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
contradiction.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
eapply perp_col.

*****
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X ?B A B
+++++
apply HH1.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
eapply perp_col.

*****
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Z Z0
+++++
assumption.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).

*****
H5 : Perp X Z0 A B
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
assert(Y0 = Z0).
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
assert(Y0 = Z0).

*****
H5 : Perp X Z0 A B
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq Y0 Z0
+++++
eapply l8_18_uniqueness.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
assert(Y0 = Z0).
eapply l8_18_uniqueness.

*****
H5 : Perp X Z0 A B
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col ?A ?B ?C)
+++++
apply H1.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
assert(Y0 = Z0).
eapply l8_18_uniqueness.

*****
H5 : Perp X Z0 A B
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B Y0
+++++
assumption.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
assert(Y0 = Z0).
eapply l8_18_uniqueness.

*****
H5 : Perp X Z0 A B
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A B X Y0
+++++
apply perp_sym.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
assert(Y0 = Z0).
eapply l8_18_uniqueness.
apply perp_sym.

*****
H5 : Perp X Z0 A B
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X Y0 A B
+++++
assumption.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
assert(Y0 = Z0).
eapply l8_18_uniqueness.

*****
H5 : Perp X Z0 A B
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B Z0
+++++
assumption.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
assert(Y0 = Z0).
eapply l8_18_uniqueness.

*****
H5 : Perp X Z0 A B
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A B X Z0
+++++
apply perp_sym.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
assert(Y0 = Z0).
eapply l8_18_uniqueness.
apply perp_sym.

*****
H5 : Perp X Z0 A B
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp X Z0 A B
+++++
assumption.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
assert(Y0 = Z0).

*****
H6 : eq Y0 Z0
H5 : Perp X Z0 A B
H4 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
HH2 : Perp_at Z0 X Z A B
H0 : Col A B Z0
H : Col X Z Z0
Z0 : Tpoint
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
subst Z0.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
assert(Y0 = Z0).
subst Z0.

*****
H4,H5 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
H : Col X Z Y0
H0 : Col A B Y0
HH2 : Perp_at Y0 X Z A B
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y Z
+++++
eapply (col_transitivity_1 _ Y0).
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
assert(Y0 = Z0).
subst Z0.
eapply (col_transitivity_1 _ Y0).

*****
H4,H5 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
H : Col X Z Y0
H0 : Col A B Y0
HH2 : Perp_at Y0 X Z A B
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X Y0)
+++++
intro.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
assert(Y0 = Z0).
subst Z0.
eapply (col_transitivity_1 _ Y0).
intro.

*****
H6 : eq X Y0
H4,H5 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
H : Col X Z Y0
H0 : Col A B Y0
HH2 : Perp_at Y0 X Z A B
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst Y0.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
assert(Y0 = Z0).
subst Z0.
eapply (col_transitivity_1 _ Y0).
intro.
subst Y0.

*****
H2 : Col X Y X
H3 : Col A B X
HH2 : Perp_at X X Z A B
H0 : Col A B X
H : Col X Z X
HH3 : Perp_at X X Y A B
H5,H4 : Perp X X A B
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
contradiction.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
assert(Y0 = Z0).
subst Z0.
eapply (col_transitivity_1 _ Y0).

*****
H4,H5 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
H : Col X Z Y0
H0 : Col A B Y0
HH2 : Perp_at Y0 X Z A B
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y0 Y
+++++
Col.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).
assert(HH0:=H).
assert(HH1:=H0).
unfold Perp in H.
unfold Perp in H0.
ex_and H Y0.
ex_and H0 Z0.
assert(HH2:=H).
assert(HH3:=H2).
apply perp_in_col in H.
apply perp_in_col in H2.
spliter.
assert(Perp X Y0 A B).
assert(Perp X Z0 A B).
assert(Y0 = Z0).
subst Z0.
eapply (col_transitivity_1 _ Y0).

*****
H4,H5 : Perp X Y0 A B
HH3 : Perp_at Y0 X Y A B
H : Col X Z Y0
H0 : Col A B Y0
HH2 : Perp_at Y0 X Z A B
H3 : Col A B Y0
H2 : Col X Y Y0
Y0 : Tpoint
HH1 : Perp X Z A B
HH0 : Perp X Y A B
H1 : not (Col A B X)
X,Y,Z,A,B : Tpoint
HUP : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X Y0 Z
+++++
Col.
-----
Lemma upper_dim_implies_perp2__col : upper_dim_axiom -> (forall X Y Z A B, Perp X Y A B -> Perp X Z A B -> Col X Y Z).
Proof.
intro HUP.
intros.
induction(col_dec A B X).

*****

*****

+++++
Qed.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux :\n  upper_dim_axiom ->\n  (forall A B X Y PX,\n   A <> B -> PX <> A ->\n   Perp A B X PX ->\n   Col A B PX ->\n   ~ Col X A B ->\n   ~ Col Y A B ->\n   ~ TS A B X Y ->\n   OS A B X Y).
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : upper_dim_axiom) (A B X Y PX : Tpoint) (_ : not (eq A B)) (_ : not (eq PX A)) (_ : Perp A B X PX) (_ : Col A B PX) (_ : not (Col X A B)) (_ : not (Col Y A B)) (_ : not (TS A B X Y)), OS A B X Y
+++++
Proof.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : upper_dim_axiom) (A B X Y PX : Tpoint) (_ : not (eq A B)) (_ : not (eq PX A)) (_ : Perp A B X PX) (_ : Col A B PX) (_ : not (Col X A B)) (_ : not (Col Y A B)) (_ : not (TS A B X Y)), OS A B X Y
+++++
intro HUD.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.

*****
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B X Y PX : Tpoint) (_ : not (eq A B)) (_ : not (eq PX A)) (_ : Perp A B X PX) (_ : Col A B PX) (_ : not (Col X A B)) (_ : not (Col Y A B)) (_ : not (TS A B X Y)), OS A B X Y
+++++
intros.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.

*****
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
assert(exists P, exists T, Perp PX A P PX /\ Col PX A T /\ Bet Y T P).
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).

*****
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun P : Tpoint => ex (fun T : Tpoint => and (Perp PX A P PX) (and (Col PX A T) (Bet Y T P))))
+++++
apply l8_21.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
apply l8_21.

*****
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq PX A)
+++++
assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).

*****
H6 : ex\n (fun P : Tpoint =>\n ex\n (fun T : Tpoint =>\n and (Perp PX A P PX) (and (Col PX A T) (Bet Y T P))))
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
ex_elim H6 P.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.

*****
H7 : ex\n (fun T : Tpoint =>\n and (Perp PX A P PX) (and (Col PX A T) (Bet Y T P)))
P : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
ex_and H7 T.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.

*****
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).

*****
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
assert(~Col P A B).
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).

*****
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P A B)
+++++
apply perp_not_col in H6.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
apply perp_not_col in H6.

*****
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : not (Col PX A P)
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P A B)
+++++
intro.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
apply perp_not_col in H6.
intro.

*****
H9 : Col P A B
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : not (Col PX A P)
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H6.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
apply perp_not_col in H6.
intro.
apply H6.

*****
H9 : Col P A B
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : not (Col PX A P)
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col PX A P
+++++
ColR.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).

*****
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
assert(TS PX A P Y).
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).

*****
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS PX A P Y
+++++
repeat split.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
repeat split.

*****
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P PX A)
+++++
intro.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
repeat split.
intro.

*****
H10 : Col P PX A
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H9.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
repeat split.
intro.
apply H9.

*****
H10 : Col P PX A
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P A B
+++++
ColR.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
repeat split.

*****
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Y PX A)
+++++
intro.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
repeat split.
intro.

*****
H10 : Col Y PX A
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H4.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
repeat split.
intro.
apply H4.

*****
H10 : Col Y PX A
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Y A B
+++++
ColR.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
repeat split.

*****
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T PX A) (Bet P T Y))
+++++
exists T.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
repeat split.
exists T.

*****
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col T PX A) (Bet P T Y)
+++++
split.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
repeat split.
exists T.
split.

*****
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col T PX A
+++++
apply col_permutation_2.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
repeat split.
exists T.
split.
apply col_permutation_2.

*****
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col PX A T
+++++
assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
repeat split.
exists T.
split.

*****
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P T Y
+++++
apply between_symmetry.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
repeat split.
exists T.
split.
apply between_symmetry.

*****
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet Y T P
+++++
assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).

*****
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
assert(X <> PX).
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).

*****
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X PX)
+++++
apply perp_not_eq_2 in H1.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
apply perp_not_eq_2 in H1.

*****
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : not (eq X PX)
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X PX)
+++++
assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).

*****
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
assert(P <> PX).
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).

*****
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P PX)
+++++
apply perp_not_eq_2 in H6.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
apply perp_not_eq_2 in H6.

*****
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : not (eq P PX)
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P PX)
+++++
assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).

*****
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
assert(HA:= (or_bet_out X PX P)).
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).

*****
HA : or (Bet X PX P) (or (Out PX X P) (not (Col X PX P)))
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
induction HA.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.

*****
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
assert(TS PX A P X).
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).

*****
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS PX A P X
+++++
repeat split.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
repeat split.

*****
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P PX A)
+++++
try assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
repeat split.
try assumption.

*****
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P PX A)
+++++
intro.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
repeat split.
try assumption.
intro.

*****
H14 : Col P PX A
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H9.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
repeat split.
try assumption.
intro.
apply H9.

*****
H14 : Col P PX A
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P A B
+++++
ColR.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
repeat split.

*****
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col X PX A)
+++++
try assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
repeat split.
try assumption.

*****
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col X PX A)
+++++
intro.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
repeat split.
try assumption.
intro.

*****
H14 : Col X PX A
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H3.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
repeat split.
try assumption.
intro.
apply H3.

*****
H14 : Col X PX A
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X A B
+++++
ColR.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
repeat split.

*****
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T PX A) (Bet P T X))
+++++
try assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
repeat split.
try assumption.

*****
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T PX A) (Bet P T X))
+++++
exists PX.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
repeat split.
try assumption.
exists PX.

*****
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col PX PX A) (Bet P PX X)
+++++
split.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
repeat split.
try assumption.
exists PX.
split.

*****
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col PX PX A
+++++
apply col_trivial_1.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
repeat split.
try assumption.
exists PX.
split.

*****
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P PX X
+++++
apply between_symmetry.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
repeat split.
try assumption.
exists PX.
split.
apply between_symmetry.

*****
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet X PX P
+++++
assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).

*****
H14 : TS PX A P X
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
eapply l9_8_1.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
eapply l9_8_1.

*****
H14 : TS PX A P X
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A B X ?C
+++++
apply l9_2.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
eapply l9_8_1.
apply l9_2.

*****
H14 : TS PX A P X
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A B ?C X
+++++
eapply (col_two_sides _ PX).
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
eapply l9_8_1.
apply l9_2.
eapply (col_two_sides _ PX).

*****
H14 : TS PX A P X
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A PX B
+++++
apply col_permutation_5.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
eapply l9_8_1.
apply l9_2.
eapply (col_two_sides _ PX).
apply col_permutation_5.

*****
H14 : TS PX A P X
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B PX
+++++
assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
eapply l9_8_1.
apply l9_2.
eapply (col_two_sides _ PX).

*****
H14 : TS PX A P X
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
eapply l9_8_1.
apply l9_2.
eapply (col_two_sides _ PX).

*****
H14 : TS PX A P X
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A PX ?C X
+++++
apply invert_two_sides.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
eapply l9_8_1.
apply l9_2.
eapply (col_two_sides _ PX).
apply invert_two_sides.

*****
H14 : TS PX A P X
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS PX A ?C X
+++++
apply H14.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
eapply l9_8_1.

*****
H14 : TS PX A P X
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A B Y P
+++++
eapply (col_two_sides _ PX).
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
eapply l9_8_1.
eapply (col_two_sides _ PX).

*****
H14 : TS PX A P X
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A PX B
+++++
apply col_permutation_5.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
eapply l9_8_1.
eapply (col_two_sides _ PX).
apply col_permutation_5.

*****
H14 : TS PX A P X
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B PX
+++++
assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
eapply l9_8_1.
eapply (col_two_sides _ PX).

*****
H14 : TS PX A P X
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
eapply l9_8_1.
eapply (col_two_sides _ PX).

*****
H14 : TS PX A P X
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A PX Y P
+++++
apply invert_two_sides.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
eapply l9_8_1.
eapply (col_two_sides _ PX).
apply invert_two_sides.

*****
H14 : TS PX A P X
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS PX A Y P
+++++
apply l9_2.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
assert(TS PX A P X).
eapply l9_8_1.
eapply (col_two_sides _ PX).
apply invert_two_sides.
apply l9_2.

*****
H14 : TS PX A P X
H13 : Bet X PX P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS PX A P Y
+++++
assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.

*****
H13 : or (Out PX X P) (not (Col X PX P))
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
induction H13.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
induction H13.

*****
H13 : Out PX X P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
assert(TS A B P Y).
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
induction H13.
assert(TS A B P Y).

*****
H13 : Out PX X P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A B P Y
+++++
eapply (col_two_sides _ PX).
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
induction H13.
assert(TS A B P Y).
eapply (col_two_sides _ PX).

*****
H13 : Out PX X P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A PX B
+++++
Col.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
induction H13.
assert(TS A B P Y).
eapply (col_two_sides _ PX).

*****
H13 : Out PX X P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
induction H13.
assert(TS A B P Y).
eapply (col_two_sides _ PX).

*****
H13 : Out PX X P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A PX P Y
+++++
apply invert_two_sides.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
induction H13.
assert(TS A B P Y).
eapply (col_two_sides _ PX).
apply invert_two_sides.

*****
H13 : Out PX X P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS PX A P Y
+++++
assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
induction H13.
assert(TS A B P Y).

*****
H14 : TS A B P Y
H13 : Out PX X P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
assert(HO:= out_two_sides_two_sides A B X Y P PX (sym_not_eq H0) H2 H13 H14).
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
induction H13.
assert(TS A B P Y).
assert(HO:= out_two_sides_two_sides A B X Y P PX (sym_not_eq H0) H2 H13 H14).

*****
HO : TS A B X Y
H14 : TS A B P Y
H13 : Out PX X P
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
contradiction.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
induction H13.

*****
H13 : not (Col X PX P)
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col P X PX
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
apply col_permutation_1 in HH.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).
ex_elim H6 P.
ex_and H7 T.
assert(HH:= upper_dim_implies_col_perp2__col HUD A B X P PX H2 H1 H6).
assert(~Col P A B).
assert(TS PX A P Y).
assert(X <> PX).
assert(P <> PX).
assert(HA:= (or_bet_out X PX P)).
induction HA.
induction H13.
apply col_permutation_1 in HH.

*****
H13 : not (Col X PX P)
H12 : not (eq P PX)
H11 : not (eq X PX)
H10 : TS PX A P Y
H9 : not (Col P A B)
HH : Col X PX P
H8 : Bet Y T P
H7 : Col PX A T
H6 : Perp PX A P PX
P,T : Tpoint
H5 : not (TS A B X Y)
H4 : not (Col Y A B)
H3 : not (Col X A B)
H2 : Col A B PX
H1 : Perp A B X PX
H0 : not (eq PX A)
H : not (eq A B)
A,B,X,Y,PX : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
contradiction.
-----
Lemma upper_dim_implies_not_two_sides_one_side_aux : upper_dim_axiom -> (forall A B X Y PX, A <> B -> PX <> A -> Perp A B X PX -> Col A B PX -> ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert(exists P, exists T, Perp PX A P PX /\\ Col PX A T /\\ Bet Y T P).

*****

*****

+++++
Qed.
-----
Lemma upper_dim_implies_not_two_sides_one_side :\n  upper_dim_axiom ->\n  (forall A B X Y,\n   ~ Col X A B ->\n   ~ Col Y A B ->\n   ~ TS A B X Y ->\n   OS A B X Y).
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : upper_dim_axiom) (A B X Y : Tpoint) (_ : not (Col X A B)) (_ : not (Col Y A B)) (_ : not (TS A B X Y)), OS A B X Y
+++++
Proof.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : upper_dim_axiom) (A B X Y : Tpoint) (_ : not (Col X A B)) (_ : not (Col Y A B)) (_ : not (TS A B X Y)), OS A B X Y
+++++
intro HUD.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.

*****
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B X Y : Tpoint) (_ : not (Col X A B)) (_ : not (Col Y A B)) (_ : not (TS A B X Y)), OS A B X Y
+++++
intros.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.

*****
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
assert (A <> B).
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).

*****
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
intro.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
intro.

*****
H2 : eq A B
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
intro.
subst.

*****
H : not (Col X B B)
H0 : not (Col Y B B)
H1 : not (TS B B X Y)
B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).

*****
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
idtac.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.

*****
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
assert(exists PX, Col A B PX /\ Perp A B X PX).
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).

*****
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun PX : Tpoint => and (Col A B PX) (Perp A B X PX))
+++++
apply l8_18_existence.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
apply l8_18_existence.

*****
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B X)
+++++
intro.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
apply l8_18_existence.
intro.

*****
H3 : Col A B X
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
apply l8_18_existence.
intro.
apply H.

*****
H3 : Col A B X
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X A B
+++++
apply col_permutation_2.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
apply l8_18_existence.
intro.
apply H.
apply col_permutation_2.

*****
H3 : Col A B X
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B X
+++++
assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).

*****
H3 : ex (fun PX : Tpoint => and (Col A B PX) (Perp A B X PX))
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
ex_and H3 PX.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.

*****
H4 : Perp A B X PX
H3 : Col A B PX
PX : Tpoint
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
induction(eq_dec_points PX A).
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).

*****
H5 : eq PX A
H4 : Perp A B X PX
H3 : Col A B PX
PX : Tpoint
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
subst PX.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.

*****
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
apply invert_one_side.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.

*****
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A X Y
+++++
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).

*****
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
auto.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).

*****
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).

*****
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B A X A
+++++
auto.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).
auto.

*****
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B A X A
+++++
apply perp_left_comm.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).
auto.
apply perp_left_comm.

*****
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A B X A
+++++
assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).

*****
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B A A
+++++
auto.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).
auto.

*****
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B A A
+++++
Col.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).

*****
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col X B A)
+++++
auto.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).
auto.

*****
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col X B A)
+++++
intro.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).
auto.
intro.

*****
H5 : Col X B A
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).
auto.
intro.
apply H.

*****
H5 : Col X B A
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col X A B
+++++
Col.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).

*****
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Y B A)
+++++
auto.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).
auto.

*****
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Y B A)
+++++
intro.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).
auto.
intro.

*****
H5 : Col Y B A
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H0.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).
auto.
intro.
apply H0.

*****
H5 : Col Y B A
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col Y A B
+++++
Col.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).

*****
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (TS B A X Y)
+++++
auto.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).
auto.

*****
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (TS B A X Y)
+++++
intro.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).
auto.
intro.

*****
H5 : TS B A X Y
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H1.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).
auto.
intro.
apply H1.

*****
H5 : TS B A X Y
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A B X Y
+++++
apply invert_two_sides.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
subst PX.
apply invert_one_side.
eapply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ A).
auto.
intro.
apply H1.
apply invert_two_sides.

*****
H5 : TS B A X Y
H3 : Col A B A
H4 : Perp A B X A
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS B A X Y
+++++
assumption.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).

*****
H5 : not (eq PX A)
H4 : Perp A B X PX
H3 : Col A B PX
PX : Tpoint
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
apply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ PX).
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
apply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ PX).

*****
H5 : not (eq PX A)
H4 : Perp A B X PX
H3 : Col A B PX
PX : Tpoint
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
apply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ PX).

*****
H5 : not (eq PX A)
H4 : Perp A B X PX
H3 : Col A B PX
PX : Tpoint
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq PX A)
+++++
auto.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
apply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ PX).

*****
H5 : not (eq PX A)
H4 : Perp A B X PX
H3 : Col A B PX
PX : Tpoint
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp A B X PX
+++++
auto.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
apply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ PX).

*****
H5 : not (eq PX A)
H4 : Perp A B X PX
H3 : Col A B PX
PX : Tpoint
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B PX
+++++
auto.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
apply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ PX).

*****
H5 : not (eq PX A)
H4 : Perp A B X PX
H3 : Col A B PX
PX : Tpoint
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col X A B)
+++++
auto.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
apply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ PX).

*****
H5 : not (eq PX A)
H4 : Perp A B X PX
H3 : Col A B PX
PX : Tpoint
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Y A B)
+++++
auto.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).
idtac.
assert(exists PX, Col A B PX /\\ Perp A B X PX).
ex_and H3 PX.
induction(eq_dec_points PX A).
apply (upper_dim_implies_not_two_sides_one_side_aux HUD _ _ _ _ PX).

*****
H5 : not (eq PX A)
H4 : Perp A B X PX
H3 : Col A B PX
PX : Tpoint
H2 : not (eq A B)
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (TS A B X Y)
+++++
auto.
-----
Lemma upper_dim_implies_not_two_sides_one_side : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ TS A B X Y -> OS A B X Y).
Proof.
intro HUD.
intros.
assert (A <> B).

*****

*****

+++++
Qed.
-----
Lemma upper_dim_implies_not_one_side_two_sides :\n  upper_dim_axiom ->\n  (forall A B X Y,\n   ~ Col X A B ->\n   ~ Col Y A B ->\n   ~ OS A B X Y ->\n   TS A B X Y).
-----
Lemma upper_dim_implies_not_one_side_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ OS A B X Y -> TS A B X Y).

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : upper_dim_axiom) (A B X Y : Tpoint) (_ : not (Col X A B)) (_ : not (Col Y A B)) (_ : not (OS A B X Y)), TS A B X Y
+++++
Proof.
-----
Lemma upper_dim_implies_not_one_side_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ OS A B X Y -> TS A B X Y).
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : upper_dim_axiom) (A B X Y : Tpoint) (_ : not (Col X A B)) (_ : not (Col Y A B)) (_ : not (OS A B X Y)), TS A B X Y
+++++
intro HUD.
-----
Lemma upper_dim_implies_not_one_side_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ OS A B X Y -> TS A B X Y).
Proof.
intro HUD.

*****
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B X Y : Tpoint) (_ : not (Col X A B)) (_ : not (Col Y A B)) (_ : not (OS A B X Y)), TS A B X Y
+++++
intros.
-----
Lemma upper_dim_implies_not_one_side_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ OS A B X Y -> TS A B X Y).
Proof.
intro HUD.
intros.

*****
H1 : not (OS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A B X Y
+++++
intros.
-----
Lemma upper_dim_implies_not_one_side_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ OS A B X Y -> TS A B X Y).
Proof.
intro HUD.
intros.
intros.

*****
H1 : not (OS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A B X Y
+++++
induction(two_sides_dec A B X Y).
-----
Lemma upper_dim_implies_not_one_side_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ OS A B X Y -> TS A B X Y).
Proof.
intro HUD.
intros.
intros.
induction(two_sides_dec A B X Y).

*****
H2 : TS A B X Y
H1 : not (OS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A B X Y
+++++
assumption.
-----
Lemma upper_dim_implies_not_one_side_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ OS A B X Y -> TS A B X Y).
Proof.
intro HUD.
intros.
intros.
induction(two_sides_dec A B X Y).

*****
H2 : not (TS A B X Y)
H1 : not (OS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A B X Y
+++++
apply upper_dim_implies_not_two_sides_one_side in H2.
-----
Lemma upper_dim_implies_not_one_side_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ OS A B X Y -> TS A B X Y).
Proof.
intro HUD.
intros.
intros.
induction(two_sides_dec A B X Y).
apply upper_dim_implies_not_two_sides_one_side in H2.

*****
H2 : OS A B X Y
H1 : not (OS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A B X Y
+++++
try assumption.
-----
Lemma upper_dim_implies_not_one_side_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ OS A B X Y -> TS A B X Y).
Proof.
intro HUD.
intros.
intros.
induction(two_sides_dec A B X Y).
apply upper_dim_implies_not_two_sides_one_side in H2.
try assumption.

*****
H2 : OS A B X Y
H1 : not (OS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A B X Y
+++++
contradiction.
-----
Lemma upper_dim_implies_not_one_side_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ OS A B X Y -> TS A B X Y).
Proof.
intro HUD.
intros.
intros.
induction(two_sides_dec A B X Y).
apply upper_dim_implies_not_two_sides_one_side in H2.

*****
H2 : not (TS A B X Y)
H1 : not (OS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
upper_dim_axiom
+++++
try assumption.
-----
Lemma upper_dim_implies_not_one_side_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ OS A B X Y -> TS A B X Y).
Proof.
intro HUD.
intros.
intros.
induction(two_sides_dec A B X Y).
apply upper_dim_implies_not_two_sides_one_side in H2.

*****
H2 : not (TS A B X Y)
H1 : not (OS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col X A B)
+++++
try assumption.
-----
Lemma upper_dim_implies_not_one_side_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ OS A B X Y -> TS A B X Y).
Proof.
intro HUD.
intros.
intros.
induction(two_sides_dec A B X Y).
apply upper_dim_implies_not_two_sides_one_side in H2.

*****
H2 : not (TS A B X Y)
H1 : not (OS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Y A B)
+++++
try assumption.
-----
Lemma upper_dim_implies_not_one_side_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> ~ OS A B X Y -> TS A B X Y).
Proof.
intro HUD.
intros.
intros.
induction(two_sides_dec A B X Y).

*****

*****

+++++
Qed.
-----
Lemma upper_dim_implies_one_or_two_sides :\n  upper_dim_axiom ->\n  (forall A B X Y,\n   ~ Col X A B ->\n   ~ Col Y A B ->\n   TS A B X Y \/ OS A B X Y).
-----
Lemma upper_dim_implies_one_or_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> TS A B X Y \\/ OS A B X Y).

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : upper_dim_axiom) (A B X Y : Tpoint) (_ : not (Col X A B)) (_ : not (Col Y A B)), or (TS A B X Y) (OS A B X Y)
+++++
Proof.
-----
Lemma upper_dim_implies_one_or_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> TS A B X Y \\/ OS A B X Y).
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : upper_dim_axiom) (A B X Y : Tpoint) (_ : not (Col X A B)) (_ : not (Col Y A B)), or (TS A B X Y) (OS A B X Y)
+++++
intro HUD.
-----
Lemma upper_dim_implies_one_or_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> TS A B X Y \\/ OS A B X Y).
Proof.
intro HUD.

*****
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B X Y : Tpoint) (_ : not (Col X A B)) (_ : not (Col Y A B)), or (TS A B X Y) (OS A B X Y)
+++++
intros.
-----
Lemma upper_dim_implies_one_or_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> TS A B X Y \\/ OS A B X Y).
Proof.
intro HUD.
intros.

*****
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (TS A B X Y) (OS A B X Y)
+++++
induction(two_sides_dec A B X Y).
-----
Lemma upper_dim_implies_one_or_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> TS A B X Y \\/ OS A B X Y).
Proof.
intro HUD.
intros.
induction(two_sides_dec A B X Y).

*****
H1 : TS A B X Y
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (TS A B X Y) (OS A B X Y)
+++++
left.
-----
Lemma upper_dim_implies_one_or_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> TS A B X Y \\/ OS A B X Y).
Proof.
intro HUD.
intros.
induction(two_sides_dec A B X Y).
left.

*****
H1 : TS A B X Y
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS A B X Y
+++++
assumption.
-----
Lemma upper_dim_implies_one_or_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> TS A B X Y \\/ OS A B X Y).
Proof.
intro HUD.
intros.
induction(two_sides_dec A B X Y).

*****
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (TS A B X Y) (OS A B X Y)
+++++
right.
-----
Lemma upper_dim_implies_one_or_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> TS A B X Y \\/ OS A B X Y).
Proof.
intro HUD.
intros.
induction(two_sides_dec A B X Y).
right.

*****
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
apply upper_dim_implies_not_two_sides_one_side in H1.
-----
Lemma upper_dim_implies_one_or_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> TS A B X Y \\/ OS A B X Y).
Proof.
intro HUD.
intros.
induction(two_sides_dec A B X Y).
right.
apply upper_dim_implies_not_two_sides_one_side in H1.

*****
H1 : OS A B X Y
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B X Y
+++++
try assumption.
-----
Lemma upper_dim_implies_one_or_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> TS A B X Y \\/ OS A B X Y).
Proof.
intro HUD.
intros.
induction(two_sides_dec A B X Y).
right.
apply upper_dim_implies_not_two_sides_one_side in H1.

*****
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
upper_dim_axiom
+++++
try assumption.
-----
Lemma upper_dim_implies_one_or_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> TS A B X Y \\/ OS A B X Y).
Proof.
intro HUD.
intros.
induction(two_sides_dec A B X Y).
right.
apply upper_dim_implies_not_two_sides_one_side in H1.

*****
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col X A B)
+++++
try assumption.
-----
Lemma upper_dim_implies_one_or_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> TS A B X Y \\/ OS A B X Y).
Proof.
intro HUD.
intros.
induction(two_sides_dec A B X Y).
right.
apply upper_dim_implies_not_two_sides_one_side in H1.

*****
H1 : not (TS A B X Y)
H0 : not (Col Y A B)
H : not (Col X A B)
A,B,X,Y : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col Y A B)
+++++
try assumption.
-----
Lemma upper_dim_implies_one_or_two_sides : upper_dim_axiom -> (forall A B X Y, ~ Col X A B -> ~ Col Y A B -> TS A B X Y \\/ OS A B X Y).
Proof.
intro HUD.
intros.
induction(two_sides_dec A B X Y).

*****

*****

+++++
Qed.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : upper_dim_axiom, all_coplanar_axiom
+++++
Proof.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : upper_dim_axiom, all_coplanar_axiom
+++++
intro HUD.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.

*****
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
all_coplanar_axiom
+++++
unfold all_coplanar_axiom.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.

*****
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall A B C D : Tpoint, Coplanar A B C D
+++++
intros.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.

*****
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
elim (col_dec A B C).
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).

*****
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col A B C, Coplanar A B C D
+++++
Cop.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).

*****
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col A B C), Coplanar A B C D
+++++
Cop.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.

*****
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col A B C), Coplanar A B C D
+++++
intro HABC.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.

*****
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
elim (col_dec A B D).
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).

*****
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col A B D, Coplanar A B C D
+++++
Cop.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).

*****
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col A B D), Coplanar A B C D
+++++
Cop.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.

*****
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col A B D), Coplanar A B C D
+++++
intro HABD.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.

*****
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
elim (col_dec A C D).
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).

*****
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col A C D, Coplanar A B C D
+++++
Cop.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).

*****
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col A C D), Coplanar A B C D
+++++
Cop.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.

*****
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col A C D), Coplanar A B C D
+++++
intro HACD.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : TS A B C D, Coplanar A B C D
+++++
Col.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : TS A B C D, Coplanar A B C D
+++++
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : TS A C B D) (_ : TS A B C D), Coplanar A B C D
+++++
Col.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : TS A C B D) (_ : TS A B C D), Coplanar A B C D
+++++
intros HTS1 HTS2.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HTS1 HTS2.

*****
HTS2 : TS A B C D
HTS1 : TS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
destruct HTS1 as [Hc1 [Hc2 [I [HCol HBet]]]].
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HTS1 HTS2.
destruct HTS1 as [Hc1 [Hc2 [I [HCol HBet]]]].

*****
HTS2 : TS A B C D
HBet : Bet B I D
HCol : Col I A C
I : Tpoint
Hc2 : not (Col D A C)
Hc1 : not (Col B A C)
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
clear Hc1.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HTS1 HTS2.
destruct HTS1 as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.

*****
HTS2 : TS A B C D
HBet : Bet B I D
HCol : Col I A C
I : Tpoint
Hc2 : not (Col D A C)
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
clear Hc2.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HTS1 HTS2.
destruct HTS1 as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.

*****
HTS2 : TS A B C D
HBet : Bet B I D
HCol : Col I A C
I : Tpoint
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
exists I.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HTS1 HTS2.
destruct HTS1 as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.

*****
HTS2 : TS A B C D
HBet : Bet B I D
HCol : Col I A C
I : Tpoint
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col A B I) (Col C D I)) (or (and (Col A C I) (Col B D I)) (and (Col A D I) (Col B C I)))
+++++
right.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HTS1 HTS2.
destruct HTS1 as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
right.

*****
HTS2 : TS A B C D
HBet : Bet B I D
HCol : Col I A C
I : Tpoint
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col A C I) (Col B D I)) (and (Col A D I) (Col B C I))
+++++
left.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HTS1 HTS2.
destruct HTS1 as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
right.
left.

*****
HTS2 : TS A B C D
HBet : Bet B I D
HCol : Col I A C
I : Tpoint
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col A C I) (Col B D I)
+++++
assert_cols.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HTS1 HTS2.
destruct HTS1 as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
right.
left.
assert_cols.

*****
H : Col B I D
HTS2 : TS A B C D
HBet : Bet B I D
HCol : Col I A C
I : Tpoint
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col A C I) (Col B D I)
+++++
Col.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : OS A C B D) (_ : TS A B C D), Coplanar A B C D
+++++
Col.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : OS A C B D) (_ : TS A B C D), Coplanar A B C D
+++++
intros HOS HTS.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS HTS.

*****
HTS : TS A B C D
HOS : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS HTS.
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].

*****
HBet : Bet C I D
HCol : Col I A B
I : Tpoint
Hc2 : not (Col D A B)
Hc1 : not (Col C A B)
HOS : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
clear Hc1.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS HTS.
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.

*****
HBet : Bet C I D
HCol : Col I A B
I : Tpoint
Hc2 : not (Col D A B)
HOS : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
clear Hc2.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS HTS.
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.

*****
HBet : Bet C I D
HCol : Col I A B
I : Tpoint
HOS : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
exists I.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS HTS.
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.

*****
HBet : Bet C I D
HCol : Col I A B
I : Tpoint
HOS : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col A B I) (Col C D I)) (or (and (Col A C I) (Col B D I)) (and (Col A D I) (Col B C I)))
+++++
left.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS HTS.
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
left.

*****
HBet : Bet C I D
HCol : Col I A B
I : Tpoint
HOS : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col A B I) (Col C D I)
+++++
assert_cols.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS HTS.
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
left.
assert_cols.

*****
H : Col C I D
HBet : Bet C I D
HCol : Col I A B
I : Tpoint
HOS : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col A B I) (Col C D I)
+++++
Col.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B A C)
+++++
Col.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col D A C)
+++++
Col.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : OS A B C D, Coplanar A B C D
+++++
Col.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : OS A B C D, Coplanar A B C D
+++++
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : TS A C B D) (_ : OS A B C D), Coplanar A B C D
+++++
Col.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : TS A C B D) (_ : OS A B C D), Coplanar A B C D
+++++
intros HTS HOS.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HTS HOS.

*****
HOS : OS A B C D
HTS : TS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HTS HOS.
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].

*****
HOS : OS A B C D
HBet : Bet B I D
HCol : Col I A C
I : Tpoint
Hc2 : not (Col D A C)
Hc1 : not (Col B A C)
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
clear Hc1.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HTS HOS.
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.

*****
HOS : OS A B C D
HBet : Bet B I D
HCol : Col I A C
I : Tpoint
Hc2 : not (Col D A C)
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
clear Hc2.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HTS HOS.
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.

*****
HOS : OS A B C D
HBet : Bet B I D
HCol : Col I A C
I : Tpoint
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
exists I.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HTS HOS.
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.

*****
HOS : OS A B C D
HBet : Bet B I D
HCol : Col I A C
I : Tpoint
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col A B I) (Col C D I)) (or (and (Col A C I) (Col B D I)) (and (Col A D I) (Col B C I)))
+++++
right.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HTS HOS.
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
right.

*****
HOS : OS A B C D
HBet : Bet B I D
HCol : Col I A C
I : Tpoint
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col A C I) (Col B D I)) (and (Col A D I) (Col B C I))
+++++
left.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HTS HOS.
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
right.
left.

*****
HOS : OS A B C D
HBet : Bet B I D
HCol : Col I A C
I : Tpoint
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col A C I) (Col B D I)
+++++
assert_cols.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HTS HOS.
destruct HTS as [Hc1 [Hc2 [I [HCol HBet]]]].
clear Hc1.
clear Hc2.
exists I.
right.
left.
assert_cols.

*****
H : Col B I D
HOS : OS A B C D
HBet : Bet B I D
HCol : Col I A C
I : Tpoint
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col A C I) (Col B D I)
+++++
Col.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : OS A C B D) (_ : OS A B C D), Coplanar A B C D
+++++
Col.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : OS A C B D) (_ : OS A B C D), Coplanar A B C D
+++++
intros HOS1 HOS2.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS1 HOS2.

*****
HOS2 : OS A B C D
HOS1 : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
destruct (l9_31 A B D C) as [Hc1 [Hc2 [I [HCol HBet]]]].
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS1 HOS2.
destruct (l9_31 A B D C) as [Hc1 [Hc2 [I [HCol HBet]]]].

*****
HOS2 : OS A B C D
HOS1 : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B D C
+++++
try (apply one_side_symmetry; auto).
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS1 HOS2.
destruct (l9_31 A B D C) as [Hc1 [Hc2 [I [HCol HBet]]]].

*****
HOS2 : OS A B C D
HOS1 : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A C D B
+++++
try (apply one_side_symmetry; auto).
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS1 HOS2.
destruct (l9_31 A B D C) as [Hc1 [Hc2 [I [HCol HBet]]]].

*****
HBet : Bet B I C
HCol : Col I A D
I : Tpoint
Hc2 : not (Col C A D)
Hc1 : not (Col B A D)
HOS2 : OS A B C D
HOS1 : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
try (apply one_side_symmetry; auto).
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS1 HOS2.
destruct (l9_31 A B D C) as [Hc1 [Hc2 [I [HCol HBet]]]].
try (apply one_side_symmetry; auto).

*****
HBet : Bet B I C
HCol : Col I A D
I : Tpoint
Hc2 : not (Col C A D)
Hc1 : not (Col B A D)
HOS2 : OS A B C D
HOS1 : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
clear Hc1.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS1 HOS2.
destruct (l9_31 A B D C) as [Hc1 [Hc2 [I [HCol HBet]]]].
try (apply one_side_symmetry; auto).
clear Hc1.

*****
HBet : Bet B I C
HCol : Col I A D
I : Tpoint
Hc2 : not (Col C A D)
HOS2 : OS A B C D
HOS1 : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
clear Hc2.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS1 HOS2.
destruct (l9_31 A B D C) as [Hc1 [Hc2 [I [HCol HBet]]]].
try (apply one_side_symmetry; auto).
clear Hc1.
clear Hc2.

*****
HBet : Bet B I C
HCol : Col I A D
I : Tpoint
HOS2 : OS A B C D
HOS1 : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C D
+++++
exists I.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS1 HOS2.
destruct (l9_31 A B D C) as [Hc1 [Hc2 [I [HCol HBet]]]].
try (apply one_side_symmetry; auto).
clear Hc1.
clear Hc2.
exists I.

*****
HBet : Bet B I C
HCol : Col I A D
I : Tpoint
HOS2 : OS A B C D
HOS1 : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col A B I) (Col C D I)) (or (and (Col A C I) (Col B D I)) (and (Col A D I) (Col B C I)))
+++++
right.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS1 HOS2.
destruct (l9_31 A B D C) as [Hc1 [Hc2 [I [HCol HBet]]]].
try (apply one_side_symmetry; auto).
clear Hc1.
clear Hc2.
exists I.
right.

*****
HBet : Bet B I C
HCol : Col I A D
I : Tpoint
HOS2 : OS A B C D
HOS1 : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col A C I) (Col B D I)) (and (Col A D I) (Col B C I))
+++++
right.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS1 HOS2.
destruct (l9_31 A B D C) as [Hc1 [Hc2 [I [HCol HBet]]]].
try (apply one_side_symmetry; auto).
clear Hc1.
clear Hc2.
exists I.
right.
right.

*****
HBet : Bet B I C
HCol : Col I A D
I : Tpoint
HOS2 : OS A B C D
HOS1 : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col A D I) (Col B C I)
+++++
assert_cols.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).
Col.
intros HOS1 HOS2.
destruct (l9_31 A B D C) as [Hc1 [Hc2 [I [HCol HBet]]]].
try (apply one_side_symmetry; auto).
clear Hc1.
clear Hc2.
exists I.
right.
right.
assert_cols.

*****
H : Col B I C
HBet : Bet B I C
HCol : Col I A D
I : Tpoint
HOS2 : OS A B C D
HOS1 : OS A C B D
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col A D I) (Col B C I)
+++++
Col.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B A C)
+++++
Col.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).
Col.
elim (upper_dim_implies_one_or_two_sides HUD A C B D).

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col D A C)
+++++
Col.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C A B)
+++++
Col.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).
Cop.
intro HABC.
elim (col_dec A B D).
Cop.
intro HABD.
elim (col_dec A C D).
Cop.
intro HACD.
elim (upper_dim_implies_one_or_two_sides HUD A B C D).

*****
HACD : not (Col A C D)
HABD : not (Col A B D)
HABC : not (Col A B C)
A,B,C,D : Tpoint
HUD : upper_dim_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col D A B)
+++++
Col.
-----
Lemma upper_dim_implies_all_coplanar : upper_dim_axiom -> all_coplanar_axiom.
Proof.
intro HUD.
unfold all_coplanar_axiom.
intros.
elim (col_dec A B C).

*****

*****

+++++
Qed.
-----
Lemma all_coplanar_implies_upper_dim : all_coplanar_axiom -> upper_dim_axiom.
-----
Lemma all_coplanar_implies_upper_dim : all_coplanar_axiom -> upper_dim_axiom.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : all_coplanar_axiom, upper_dim_axiom
+++++
Proof.
-----
Lemma all_coplanar_implies_upper_dim : all_coplanar_axiom -> upper_dim_axiom.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : all_coplanar_axiom, upper_dim_axiom
+++++
intros HAC A B C P Q.
-----
Lemma all_coplanar_implies_upper_dim : all_coplanar_axiom -> upper_dim_axiom.
Proof.
intros HAC A B C P Q.

*****
A,B,C,P,Q : Tpoint
HAC : all_coplanar_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : not (eq P Q)) (_ : Cong A P A Q) (_ : Cong B P B Q) (_ : Cong C P C Q), or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
apply cong3_cop2__col.
-----
Lemma all_coplanar_implies_upper_dim : all_coplanar_axiom -> upper_dim_axiom.
Proof.
intros HAC A B C P Q.
apply cong3_cop2__col.

*****
A,B,C,P,Q : Tpoint
HAC : all_coplanar_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P
+++++
apply HAC.
-----
Lemma all_coplanar_implies_upper_dim : all_coplanar_axiom -> upper_dim_axiom.
Proof.
intros HAC A B C P Q.
apply cong3_cop2__col.

*****
A,B,C,P,Q : Tpoint
HAC : all_coplanar_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C Q
+++++
apply HAC.
-----
Lemma all_coplanar_implies_upper_dim : all_coplanar_axiom -> upper_dim_axiom.
Proof.
intros HAC A B C P Q.
apply cong3_cop2__col.

*****

*****

+++++
Qed.
-----
Lemma all_coplanar_upper_dim : all_coplanar_axiom <-> upper_dim_axiom.
-----
Lemma all_coplanar_upper_dim : all_coplanar_axiom <-> upper_dim_axiom.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff all_coplanar_axiom upper_dim_axiom
+++++
Proof.
-----
Lemma all_coplanar_upper_dim : all_coplanar_axiom <-> upper_dim_axiom.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
iff all_coplanar_axiom upper_dim_axiom
+++++
split.
-----
Lemma all_coplanar_upper_dim : all_coplanar_axiom <-> upper_dim_axiom.
Proof.
split.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : all_coplanar_axiom, upper_dim_axiom
+++++
try apply all_coplanar_implies_upper_dim.
-----
Lemma all_coplanar_upper_dim : all_coplanar_axiom <-> upper_dim_axiom.
Proof.
split.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : upper_dim_axiom, all_coplanar_axiom
+++++
try apply all_coplanar_implies_upper_dim.
-----
Lemma all_coplanar_upper_dim : all_coplanar_axiom <-> upper_dim_axiom.
Proof.
split.
try apply all_coplanar_implies_upper_dim.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : upper_dim_axiom, all_coplanar_axiom
+++++
apply upper_dim_implies_all_coplanar.
-----
Lemma all_coplanar_upper_dim : all_coplanar_axiom <-> upper_dim_axiom.
Proof.
split.

*****

*****

+++++
Qed.
-----
Lemma upper_dim_stab : ~ ~ upper_dim_axiom -> upper_dim_axiom.
-----
Lemma upper_dim_stab : ~ ~ upper_dim_axiom -> upper_dim_axiom.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (not upper_dim_axiom), upper_dim_axiom
+++++
Proof.
-----
Lemma upper_dim_stab : ~ ~ upper_dim_axiom -> upper_dim_axiom.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (not upper_dim_axiom), upper_dim_axiom
+++++
intros nnupper A B C P Q HPQ H1 H2 H3.
-----
Lemma upper_dim_stab : ~ ~ upper_dim_axiom -> upper_dim_axiom.
Proof.
intros nnupper A B C P Q HPQ H1 H2 H3.

*****
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
nnupper : not (not upper_dim_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
destruct (col_dec A B C) as [|HNCol].
-----
Lemma upper_dim_stab : ~ ~ upper_dim_axiom -> upper_dim_axiom.
Proof.
intros nnupper A B C P Q HPQ H1 H2 H3.
destruct (col_dec A B C) as [|HNCol].

*****
H : Col A B C
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
nnupper : not (not upper_dim_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
auto.
-----
Lemma upper_dim_stab : ~ ~ upper_dim_axiom -> upper_dim_axiom.
Proof.
intros nnupper A B C P Q HPQ H1 H2 H3.
destruct (col_dec A B C) as [|HNCol].

*****
HNCol : not (Col A B C)
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
nnupper : not (not upper_dim_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
auto.
-----
Lemma upper_dim_stab : ~ ~ upper_dim_axiom -> upper_dim_axiom.
Proof.
intros nnupper A B C P Q HPQ H1 H2 H3.
destruct (col_dec A B C) as [|HNCol].
auto.

*****
HNCol : not (Col A B C)
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
nnupper : not (not upper_dim_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
exfalso.
-----
Lemma upper_dim_stab : ~ ~ upper_dim_axiom -> upper_dim_axiom.
Proof.
intros nnupper A B C P Q HPQ H1 H2 H3.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.

*****
HNCol : not (Col A B C)
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
nnupper : not (not upper_dim_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply nnupper.
-----
Lemma upper_dim_stab : ~ ~ upper_dim_axiom -> upper_dim_axiom.
Proof.
intros nnupper A B C P Q HPQ H1 H2 H3.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.

*****
HNCol : not (Col A B C)
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
nnupper : not (not upper_dim_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not upper_dim_axiom
+++++
intro upper.
-----
Lemma upper_dim_stab : ~ ~ upper_dim_axiom -> upper_dim_axiom.
Proof.
intros nnupper A B C P Q HPQ H1 H2 H3.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.

*****
upper : upper_dim_axiom
HNCol : not (Col A B C)
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
nnupper : not (not upper_dim_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol.
-----
Lemma upper_dim_stab : ~ ~ upper_dim_axiom -> upper_dim_axiom.
Proof.
intros nnupper A B C P Q HPQ H1 H2 H3.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.
apply HNCol.

*****
upper : upper_dim_axiom
HNCol : not (Col A B C)
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
nnupper : not (not upper_dim_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
apply upper with P Q.
-----
Lemma upper_dim_stab : ~ ~ upper_dim_axiom -> upper_dim_axiom.
Proof.
intros nnupper A B C P Q HPQ H1 H2 H3.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.
apply HNCol.
apply upper with P Q.

*****
upper : upper_dim_axiom
HNCol : not (Col A B C)
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
nnupper : not (not upper_dim_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Q)
+++++
auto.
-----
Lemma upper_dim_stab : ~ ~ upper_dim_axiom -> upper_dim_axiom.
Proof.
intros nnupper A B C P Q HPQ H1 H2 H3.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.
apply HNCol.
apply upper with P Q.

*****
upper : upper_dim_axiom
HNCol : not (Col A B C)
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
nnupper : not (not upper_dim_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A P A Q
+++++
auto.
-----
Lemma upper_dim_stab : ~ ~ upper_dim_axiom -> upper_dim_axiom.
Proof.
intros nnupper A B C P Q HPQ H1 H2 H3.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.
apply HNCol.
apply upper with P Q.

*****
upper : upper_dim_axiom
HNCol : not (Col A B C)
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
nnupper : not (not upper_dim_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B P B Q
+++++
auto.
-----
Lemma upper_dim_stab : ~ ~ upper_dim_axiom -> upper_dim_axiom.
Proof.
intros nnupper A B C P Q HPQ H1 H2 H3.
destruct (col_dec A B C) as [|HNCol].
auto.
exfalso.
apply nnupper.
intro upper.
apply HNCol.
apply upper with P Q.

*****
upper : upper_dim_axiom
HNCol : not (Col A B C)
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
nnupper : not (not upper_dim_axiom)
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
auto.
-----
Lemma upper_dim_stab : ~ ~ upper_dim_axiom -> upper_dim_axiom.
Proof.
intros nnupper A B C P Q HPQ H1 H2 H3.
destruct (col_dec A B C) as [|HNCol].

*****

*****

+++++
Qed.
-----
End Upper_dim.
-----
