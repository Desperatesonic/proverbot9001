Require Export GeoCoq.Elements.OriginalProofs.lemma_ABCequalsCBA.
-----
Require Export GeoCoq.Elements.OriginalProofs.proposition_04.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma proposition_05 : \n   forall A B C, \n   isosceles A B C ->\n   CongA A B C A C B.
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C : Point) (_ : isosceles A B C), CongA A B C A C B
+++++
Proof.
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C : Point) (_ : isosceles A B C), CongA A B C A C B
+++++
intros.
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.

*****
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C A C B
+++++
assert ((Triangle A B C /\ Cong A B A C)).
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).

*****
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Triangle A B C) (Cong A B A C)
+++++
conclude_def isosceles .
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).

*****
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C A C B
+++++
idtac.
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.

*****
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C A C B
+++++
assert (Cong A C A B).
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).

*****
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Cong A C A B
+++++
conclude lemma_congruencesymmetric.
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).

*****
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C A C B
+++++
idtac.
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).
idtac.

*****
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C A C B
+++++
assert (nCol A B C).
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).
idtac.
assert (nCol A B C).

*****
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
nCol A B C
+++++
conclude_def Triangle .
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).
idtac.
assert (nCol A B C).

*****
H2 : nCol A B C
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C A C B
+++++
idtac.
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).
idtac.
assert (nCol A B C).
idtac.

*****
H2 : nCol A B C
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C A C B
+++++
assert (~ Col C A B).
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C A B).

*****
H2 : nCol A B C
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col C A B)
+++++
intro.
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C A B).
intro.

*****
H3 : Col C A B
H2 : nCol A B C
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C).
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C A B).
intro.
assert (Col A B C).

*****
H3 : Col C A B
H2 : nCol A B C
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Col A B C
+++++
forward_using lemma_collinearorder.
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C A B).
intro.
assert (Col A B C).

*****
H4 : Col A B C
H3 : Col C A B
H2 : nCol A B C
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C A B).
intro.
assert (Col A B C).
idtac.

*****
H4 : Col A B C
H3 : Col C A B
H2 : nCol A B C
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C A B).

*****
H3 : not (Col C A B)
H2 : nCol A B C
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C A C B
+++++
assert (CongA C A B B A C).
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C A B).
assert (CongA C A B B A C).

*****
H3 : not (Col C A B)
H2 : nCol A B C
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA C A B B A C
+++++
conclude lemma_ABCequalsCBA.
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C A B).
assert (CongA C A B B A C).

*****
H4 : CongA C A B B A C
H3 : not (Col C A B)
H2 : nCol A B C
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C A C B
+++++
idtac.
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C A B).
assert (CongA C A B B A C).
idtac.

*****
H4 : CongA C A B B A C
H3 : not (Col C A B)
H2 : nCol A B C
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C A C B
+++++
assert ((Cong C B B C /\ CongA A C B A B C /\ CongA A B C A C B)).
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C A B).
assert (CongA C A B B A C).
idtac.
assert ((Cong C B B C /\\ CongA A C B A B C /\\ CongA A B C A C B)).

*****
H4 : CongA C A B B A C
H3 : not (Col C A B)
H2 : nCol A B C
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (Cong C B B C) (and (CongA A C B A B C) (CongA A B C A C B))
+++++
conclude proposition_04.
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C A B).
assert (CongA C A B B A C).
idtac.
assert ((Cong C B B C /\\ CongA A C B A B C /\\ CongA A B C A C B)).

*****
H5 : and (Cong C B B C) (and (CongA A C B A B C) (CongA A B C A C B))
H4 : CongA C A B B A C
H3 : not (Col C A B)
H2 : nCol A B C
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C A C B
+++++
idtac.
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).
idtac.
assert (Cong A C A B).
idtac.
assert (nCol A B C).
idtac.
assert (~ Col C A B).
assert (CongA C A B B A C).
idtac.
assert ((Cong C B B C /\\ CongA A C B A B C /\\ CongA A B C A C B)).
idtac.

*****
H5 : and (Cong C B B C) (and (CongA A C B A B C) (CongA A B C A C B))
H4 : CongA C A B B A C
H3 : not (Col C A B)
H2 : nCol A B C
H1 : Cong A C A B
H0 : and (Triangle A B C) (Cong A B A C)
H : isosceles A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
CongA A B C A C B
+++++
close.
-----
Lemma proposition_05 : forall A B C, isosceles A B C -> CongA A B C A C B.
Proof.
intros.
assert ((Triangle A B C /\\ Cong A B A C)).

*****

*****

+++++
Qed.
-----
End Euclid.
-----
