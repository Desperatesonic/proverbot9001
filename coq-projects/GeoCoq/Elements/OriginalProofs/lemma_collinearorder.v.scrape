Require Export GeoCoq.Elements.OriginalProofs.lemma_collinear2.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_collinear1.
-----
Section Euclid.
-----
Context `{Ax1:euclidean_neutral}.
-----
Lemma lemma_collinearorder : \n   forall A B C, \n   Col A B C ->\n   Col B A C /\ Col B C A /\ Col C A B /\ Col A C B /\ Col C B A.
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.

*****
Ax1 : euclidean_neutral
*****
forall (A B C : Point) (_ : Col A B C), and (Col B A C) (and (Col B C A) (and (Col C A B) (and (Col A C B) (Col C B A))))
+++++
Proof.
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.

*****
Ax1 : euclidean_neutral
*****
forall (A B C : Point) (_ : Col A B C), and (Col B A C) (and (Col B C A) (and (Col C A B) (and (Col A C B) (Col C B A))))
+++++
intros.
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.

*****
H : Col A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (Col B A C) (and (Col B C A) (and (Col C A B) (and (Col A C B) (Col C B A))))
+++++
assert (Col B C A).
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.
assert (Col B C A).

*****
H : Col A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
Col B C A
+++++
conclude lemma_collinear2.
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.
assert (Col B C A).

*****
H0 : Col B C A
H : Col A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (Col B A C) (and (Col B C A) (and (Col C A B) (and (Col A C B) (Col C B A))))
+++++
idtac.
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.
assert (Col B C A).
idtac.

*****
H0 : Col B C A
H : Col A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (Col B A C) (and (Col B C A) (and (Col C A B) (and (Col A C B) (Col C B A))))
+++++
assert (Col C A B).
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.
assert (Col B C A).
idtac.
assert (Col C A B).

*****
H0 : Col B C A
H : Col A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
Col C A B
+++++
conclude lemma_collinear2.
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.
assert (Col B C A).
idtac.
assert (Col C A B).

*****
H1 : Col C A B
H0 : Col B C A
H : Col A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (Col B A C) (and (Col B C A) (and (Col C A B) (and (Col A C B) (Col C B A))))
+++++
idtac.
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.
assert (Col B C A).
idtac.
assert (Col C A B).
idtac.

*****
H1 : Col C A B
H0 : Col B C A
H : Col A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (Col B A C) (and (Col B C A) (and (Col C A B) (and (Col A C B) (Col C B A))))
+++++
assert (Col B A C).
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.
assert (Col B C A).
idtac.
assert (Col C A B).
idtac.
assert (Col B A C).

*****
H1 : Col C A B
H0 : Col B C A
H : Col A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
Col B A C
+++++
conclude lemma_collinear1.
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.
assert (Col B C A).
idtac.
assert (Col C A B).
idtac.
assert (Col B A C).

*****
H2 : Col B A C
H1 : Col C A B
H0 : Col B C A
H : Col A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (Col B A C) (and (Col B C A) (and (Col C A B) (and (Col A C B) (Col C B A))))
+++++
idtac.
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.
assert (Col B C A).
idtac.
assert (Col C A B).
idtac.
assert (Col B A C).
idtac.

*****
H2 : Col B A C
H1 : Col C A B
H0 : Col B C A
H : Col A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (Col B A C) (and (Col B C A) (and (Col C A B) (and (Col A C B) (Col C B A))))
+++++
assert (Col A C B).
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.
assert (Col B C A).
idtac.
assert (Col C A B).
idtac.
assert (Col B A C).
idtac.
assert (Col A C B).

*****
H2 : Col B A C
H1 : Col C A B
H0 : Col B C A
H : Col A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
Col A C B
+++++
conclude lemma_collinear2.
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.
assert (Col B C A).
idtac.
assert (Col C A B).
idtac.
assert (Col B A C).
idtac.
assert (Col A C B).

*****
H3 : Col A C B
H2 : Col B A C
H1 : Col C A B
H0 : Col B C A
H : Col A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (Col B A C) (and (Col B C A) (and (Col C A B) (and (Col A C B) (Col C B A))))
+++++
idtac.
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.
assert (Col B C A).
idtac.
assert (Col C A B).
idtac.
assert (Col B A C).
idtac.
assert (Col A C B).
idtac.

*****
H3 : Col A C B
H2 : Col B A C
H1 : Col C A B
H0 : Col B C A
H : Col A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (Col B A C) (and (Col B C A) (and (Col C A B) (and (Col A C B) (Col C B A))))
+++++
assert (Col C B A).
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.
assert (Col B C A).
idtac.
assert (Col C A B).
idtac.
assert (Col B A C).
idtac.
assert (Col A C B).
idtac.
assert (Col C B A).

*****
H3 : Col A C B
H2 : Col B A C
H1 : Col C A B
H0 : Col B C A
H : Col A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
Col C B A
+++++
conclude lemma_collinear2.
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.
assert (Col B C A).
idtac.
assert (Col C A B).
idtac.
assert (Col B A C).
idtac.
assert (Col A C B).
idtac.
assert (Col C B A).

*****
H4 : Col C B A
H3 : Col A C B
H2 : Col B A C
H1 : Col C A B
H0 : Col B C A
H : Col A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (Col B A C) (and (Col B C A) (and (Col C A B) (and (Col A C B) (Col C B A))))
+++++
idtac.
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.
assert (Col B C A).
idtac.
assert (Col C A B).
idtac.
assert (Col B A C).
idtac.
assert (Col A C B).
idtac.
assert (Col C B A).
idtac.

*****
H4 : Col C B A
H3 : Col A C B
H2 : Col B A C
H1 : Col C A B
H0 : Col B C A
H : Col A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (Col B A C) (and (Col B C A) (and (Col C A B) (and (Col A C B) (Col C B A))))
+++++
close.
-----
Lemma lemma_collinearorder : forall A B C, Col A B C -> Col B A C /\\ Col B C A /\\ Col C A B /\\ Col A C B /\\ Col C B A.
Proof.
intros.
assert (Col B C A).

*****

*****

+++++
Qed.
-----
End Euclid.
-----
