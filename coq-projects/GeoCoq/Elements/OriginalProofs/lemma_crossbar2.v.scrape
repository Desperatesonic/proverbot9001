Require Export GeoCoq.Elements.OriginalProofs.lemma_crossbar.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglesreflexive.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_sameside2.
-----
Require Export GeoCoq.Elements.OriginalProofs.proposition_07.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_crossbar2 : \n   forall A G H P S T, \n   LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T ->\n   exists X, BetS T X S /\ Out G A X.
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A G H P S T : Point) (_ : LtA H G A H G P) (_ : OS A P G H) (_ : Out G H S) (_ : Out G P T), ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
Proof.
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A G H P S T : Point) (_ : LtA H G A H G P) (_ : OS A P G H) (_ : Out G H S) (_ : Out G P T), ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
intros.
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.

*****
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (nCol G H P) by (conclude_def OS ).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).

*****
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\ Out G H L /\ Out G P J /\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.

*****
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (nCol H G K) by (conclude lemma_equalanglesNC).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).

*****
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (~ Col L G J).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).

*****
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col L G J)
+++++
intro.
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
intro.

*****
H10 : Col L G J
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G H L) by (conclude lemma_rayimpliescollinear).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
intro.
assert (Col G H L) by (conclude lemma_rayimpliescollinear).

*****
H11 : Col G H L
H10 : Col L G J
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G P J) by (conclude lemma_rayimpliescollinear).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
intro.
assert (Col G H L) by (conclude lemma_rayimpliescollinear).
assert (Col G P J) by (conclude lemma_rayimpliescollinear).

*****
H12 : Col G P J
H11 : Col G H L
H10 : Col L G J
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col L G H) by (forward_using lemma_collinearorder).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
intro.
assert (Col G H L) by (conclude lemma_rayimpliescollinear).
assert (Col G P J) by (conclude lemma_rayimpliescollinear).
assert (Col L G H) by (forward_using lemma_collinearorder).

*****
H13 : Col L G H
H12 : Col G P J
H11 : Col G H L
H10 : Col L G J
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq G L) by (conclude lemma_raystrict).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
intro.
assert (Col G H L) by (conclude lemma_rayimpliescollinear).
assert (Col G P J) by (conclude lemma_rayimpliescollinear).
assert (Col L G H) by (forward_using lemma_collinearorder).
assert (neq G L) by (conclude lemma_raystrict).

*****
H14 : neq G L
H13 : Col L G H
H12 : Col G P J
H11 : Col G H L
H10 : Col L G J
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq L G) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
intro.
assert (Col G H L) by (conclude lemma_rayimpliescollinear).
assert (Col G P J) by (conclude lemma_rayimpliescollinear).
assert (Col L G H) by (forward_using lemma_collinearorder).
assert (neq G L) by (conclude lemma_raystrict).
assert (neq L G) by (conclude lemma_inequalitysymmetric).

*****
H15 : neq L G
H14 : neq G L
H13 : Col L G H
H12 : Col G P J
H11 : Col G H L
H10 : Col L G J
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G J H) by (conclude lemma_collinear4).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
intro.
assert (Col G H L) by (conclude lemma_rayimpliescollinear).
assert (Col G P J) by (conclude lemma_rayimpliescollinear).
assert (Col L G H) by (forward_using lemma_collinearorder).
assert (neq G L) by (conclude lemma_raystrict).
assert (neq L G) by (conclude lemma_inequalitysymmetric).
assert (Col G J H) by (conclude lemma_collinear4).

*****
H16 : Col G J H
H15 : neq L G
H14 : neq G L
H13 : Col L G H
H12 : Col G P J
H11 : Col G H L
H10 : Col L G J
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col J G H) by (forward_using lemma_collinearorder).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
intro.
assert (Col G H L) by (conclude lemma_rayimpliescollinear).
assert (Col G P J) by (conclude lemma_rayimpliescollinear).
assert (Col L G H) by (forward_using lemma_collinearorder).
assert (neq G L) by (conclude lemma_raystrict).
assert (neq L G) by (conclude lemma_inequalitysymmetric).
assert (Col G J H) by (conclude lemma_collinear4).
assert (Col J G H) by (forward_using lemma_collinearorder).

*****
H17 : Col J G H
H16 : Col G J H
H15 : neq L G
H14 : neq G L
H13 : Col L G H
H12 : Col G P J
H11 : Col G H L
H10 : Col L G J
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col J G P) by (forward_using lemma_collinearorder).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
intro.
assert (Col G H L) by (conclude lemma_rayimpliescollinear).
assert (Col G P J) by (conclude lemma_rayimpliescollinear).
assert (Col L G H) by (forward_using lemma_collinearorder).
assert (neq G L) by (conclude lemma_raystrict).
assert (neq L G) by (conclude lemma_inequalitysymmetric).
assert (Col G J H) by (conclude lemma_collinear4).
assert (Col J G H) by (forward_using lemma_collinearorder).
assert (Col J G P) by (forward_using lemma_collinearorder).

*****
H18 : Col J G P
H17 : Col J G H
H16 : Col G J H
H15 : neq L G
H14 : neq G L
H13 : Col L G H
H12 : Col G P J
H11 : Col G H L
H10 : Col L G J
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq G J) by (conclude lemma_raystrict).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
intro.
assert (Col G H L) by (conclude lemma_rayimpliescollinear).
assert (Col G P J) by (conclude lemma_rayimpliescollinear).
assert (Col L G H) by (forward_using lemma_collinearorder).
assert (neq G L) by (conclude lemma_raystrict).
assert (neq L G) by (conclude lemma_inequalitysymmetric).
assert (Col G J H) by (conclude lemma_collinear4).
assert (Col J G H) by (forward_using lemma_collinearorder).
assert (Col J G P) by (forward_using lemma_collinearorder).
assert (neq G J) by (conclude lemma_raystrict).

*****
H19 : neq G J
H18 : Col J G P
H17 : Col J G H
H16 : Col G J H
H15 : neq L G
H14 : neq G L
H13 : Col L G H
H12 : Col G P J
H11 : Col G H L
H10 : Col L G J
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq J G) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
intro.
assert (Col G H L) by (conclude lemma_rayimpliescollinear).
assert (Col G P J) by (conclude lemma_rayimpliescollinear).
assert (Col L G H) by (forward_using lemma_collinearorder).
assert (neq G L) by (conclude lemma_raystrict).
assert (neq L G) by (conclude lemma_inequalitysymmetric).
assert (Col G J H) by (conclude lemma_collinear4).
assert (Col J G H) by (forward_using lemma_collinearorder).
assert (Col J G P) by (forward_using lemma_collinearorder).
assert (neq G J) by (conclude lemma_raystrict).
assert (neq J G) by (conclude lemma_inequalitysymmetric).

*****
H20 : neq J G
H19 : neq G J
H18 : Col J G P
H17 : Col J G H
H16 : Col G J H
H15 : neq L G
H14 : neq G L
H13 : Col L G H
H12 : Col G P J
H11 : Col G H L
H10 : Col L G J
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G H P) by (conclude lemma_collinear4).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
intro.
assert (Col G H L) by (conclude lemma_rayimpliescollinear).
assert (Col G P J) by (conclude lemma_rayimpliescollinear).
assert (Col L G H) by (forward_using lemma_collinearorder).
assert (neq G L) by (conclude lemma_raystrict).
assert (neq L G) by (conclude lemma_inequalitysymmetric).
assert (Col G J H) by (conclude lemma_collinear4).
assert (Col J G H) by (forward_using lemma_collinearorder).
assert (Col J G P) by (forward_using lemma_collinearorder).
assert (neq G J) by (conclude lemma_raystrict).
assert (neq J G) by (conclude lemma_inequalitysymmetric).
assert (Col G H P) by (conclude lemma_collinear4).

*****
H21 : Col G H P
H20 : neq J G
H19 : neq G J
H18 : Col J G P
H17 : Col J G H
H16 : Col G J H
H15 : neq L G
H14 : neq G L
H13 : Col L G H
H12 : Col G P J
H11 : Col G H L
H10 : Col L G J
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).

*****
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Triangle L G J) by (conclude_def Triangle ).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).

*****
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Out G J T) by (conclude lemma_ray3).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).

*****
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Out G L S) by (conclude lemma_ray3).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).

*****
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.

*****
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).

*****
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).

*****
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (neq G A) by (forward_using lemma_angledistinct).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).

*****
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (neq G M) by (conclude lemma_raystrict).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).

*****
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.

*****
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (eq H H) by (conclude cn_equalityreflexive).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).

*****
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (~ eq G H).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).

*****
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq G H)
+++++
intro.
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
intro.

*****
H23 : eq G H
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G H P) by (conclude_def Col ).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
intro.
assert (Col G H P) by (conclude_def Col ).

*****
H24 : Col G H P
H23 : eq G H
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).

*****
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Out G H H) by (conclude lemma_ray4).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).

*****
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (~ Col H G M).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).

*****
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col H G M)
+++++
intro.
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
intro.

*****
H25 : Col H G M
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G K M) by (conclude lemma_rayimpliescollinear).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
intro.
assert (Col G K M) by (conclude lemma_rayimpliescollinear).

*****
H26 : Col G K M
H25 : Col H G M
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col M G K) by (forward_using lemma_collinearorder).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
intro.
assert (Col G K M) by (conclude lemma_rayimpliescollinear).
assert (Col M G K) by (forward_using lemma_collinearorder).

*****
H27 : Col M G K
H26 : Col G K M
H25 : Col H G M
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col M G H) by (forward_using lemma_collinearorder).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
intro.
assert (Col G K M) by (conclude lemma_rayimpliescollinear).
assert (Col M G K) by (forward_using lemma_collinearorder).
assert (Col M G H) by (forward_using lemma_collinearorder).

*****
H28 : Col M G H
H27 : Col M G K
H26 : Col G K M
H25 : Col H G M
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq G M) by (conclude lemma_raystrict).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
intro.
assert (Col G K M) by (conclude lemma_rayimpliescollinear).
assert (Col M G K) by (forward_using lemma_collinearorder).
assert (Col M G H) by (forward_using lemma_collinearorder).
assert (neq G M) by (conclude lemma_raystrict).

*****
H29 : neq G M
H28 : Col M G H
H27 : Col M G K
H26 : Col G K M
H25 : Col H G M
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq M G) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
intro.
assert (Col G K M) by (conclude lemma_rayimpliescollinear).
assert (Col M G K) by (forward_using lemma_collinearorder).
assert (Col M G H) by (forward_using lemma_collinearorder).
assert (neq G M) by (conclude lemma_raystrict).
assert (neq M G) by (conclude lemma_inequalitysymmetric).

*****
H30 : neq M G
H29 : neq G M
H28 : Col M G H
H27 : Col M G K
H26 : Col G K M
H25 : Col H G M
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col G K H) by (conclude lemma_collinear4).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
intro.
assert (Col G K M) by (conclude lemma_rayimpliescollinear).
assert (Col M G K) by (forward_using lemma_collinearorder).
assert (Col M G H) by (forward_using lemma_collinearorder).
assert (neq G M) by (conclude lemma_raystrict).
assert (neq M G) by (conclude lemma_inequalitysymmetric).
assert (Col G K H) by (conclude lemma_collinear4).

*****
H31 : Col G K H
H30 : neq M G
H29 : neq G M
H28 : Col M G H
H27 : Col M G K
H26 : Col G K M
H25 : Col H G M
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col H G K) by (forward_using lemma_collinearorder).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
intro.
assert (Col G K M) by (conclude lemma_rayimpliescollinear).
assert (Col M G K) by (forward_using lemma_collinearorder).
assert (Col M G H) by (forward_using lemma_collinearorder).
assert (neq G M) by (conclude lemma_raystrict).
assert (neq M G) by (conclude lemma_inequalitysymmetric).
assert (Col G K H) by (conclude lemma_collinear4).
assert (Col H G K) by (forward_using lemma_collinearorder).

*****
H32 : Col H G K
H31 : Col G K H
H30 : neq M G
H29 : neq G M
H28 : Col M G H
H27 : Col M G K
H26 : Col G K M
H25 : Col H G M
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).

*****
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).

*****
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Out G M K) by (conclude lemma_ray5).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).

*****
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).

*****
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).

*****
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (nCol H G A) by (conclude lemma_equalanglesNC).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).

*****
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).

*****
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).

*****
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).

*****
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).

*****
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Cong G H G H) by (conclude cn_congruencereflexive).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).

*****
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Cong H N H M) by (conclude proposition_04).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).

*****
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (eq G G) by (conclude cn_equalityreflexive).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).

*****
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Col G G H) by (conclude_def Col ).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).

*****
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (OS A T G H) by (conclude lemma_sameside2).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).

*****
H39 : OS A T G H
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (neq S M) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).
assert (neq S M) by (forward_using lemma_betweennotequal).

*****
H40 : neq S M
H39 : OS A T G H
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Out S M T) by (conclude lemma_ray4).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).
assert (neq S M) by (forward_using lemma_betweennotequal).
assert (Out S M T) by (conclude lemma_ray4).

*****
H41 : Out S M T
H40 : neq S M
H39 : OS A T G H
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Out S T M) by (conclude lemma_ray5).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).
assert (neq S M) by (forward_using lemma_betweennotequal).
assert (Out S M T) by (conclude lemma_ray4).
assert (Out S T M) by (conclude lemma_ray5).

*****
H42 : Out S T M
H41 : Out S M T
H40 : neq S M
H39 : OS A T G H
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Col G H S) by (conclude lemma_rayimpliescollinear).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).
assert (neq S M) by (forward_using lemma_betweennotequal).
assert (Out S M T) by (conclude lemma_ray4).
assert (Out S T M) by (conclude lemma_ray5).
assert (Col G H S) by (conclude lemma_rayimpliescollinear).

*****
H43 : Col G H S
H42 : Out S T M
H41 : Out S M T
H40 : neq S M
H39 : OS A T G H
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Col G S H) by (forward_using lemma_collinearorder).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).
assert (neq S M) by (forward_using lemma_betweennotequal).
assert (Out S M T) by (conclude lemma_ray4).
assert (Out S T M) by (conclude lemma_ray5).
assert (Col G H S) by (conclude lemma_rayimpliescollinear).
assert (Col G S H) by (forward_using lemma_collinearorder).

*****
H44 : Col G S H
H43 : Col G H S
H42 : Out S T M
H41 : Out S M T
H40 : neq S M
H39 : OS A T G H
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (OS A M G H) by (conclude lemma_sameside2).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).
assert (neq S M) by (forward_using lemma_betweennotequal).
assert (Out S M T) by (conclude lemma_ray4).
assert (Out S T M) by (conclude lemma_ray5).
assert (Col G H S) by (conclude lemma_rayimpliescollinear).
assert (Col G S H) by (forward_using lemma_collinearorder).
assert (OS A M G H) by (conclude lemma_sameside2).

*****
H45 : OS A M G H
H44 : Col G S H
H43 : Col G H S
H42 : Out S T M
H41 : Out S M T
H40 : neq S M
H39 : OS A T G H
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (OS M A G H) by (forward_using lemma_samesidesymmetric).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).
assert (neq S M) by (forward_using lemma_betweennotequal).
assert (Out S M T) by (conclude lemma_ray4).
assert (Out S T M) by (conclude lemma_ray5).
assert (Col G H S) by (conclude lemma_rayimpliescollinear).
assert (Col G S H) by (forward_using lemma_collinearorder).
assert (OS A M G H) by (conclude lemma_sameside2).
assert (OS M A G H) by (forward_using lemma_samesidesymmetric).

*****
H46 : OS M A G H
H45 : OS A M G H
H44 : Col G S H
H43 : Col G H S
H42 : Out S T M
H41 : Out S M T
H40 : neq S M
H39 : OS A T G H
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (OS M N G H) by (conclude lemma_sameside2).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).
assert (neq S M) by (forward_using lemma_betweennotequal).
assert (Out S M T) by (conclude lemma_ray4).
assert (Out S T M) by (conclude lemma_ray5).
assert (Col G H S) by (conclude lemma_rayimpliescollinear).
assert (Col G S H) by (forward_using lemma_collinearorder).
assert (OS A M G H) by (conclude lemma_sameside2).
assert (OS M A G H) by (forward_using lemma_samesidesymmetric).
assert (OS M N G H) by (conclude lemma_sameside2).

*****
H47 : OS M N G H
H46 : OS M A G H
H45 : OS A M G H
H44 : Col G S H
H43 : Col G H S
H42 : Out S T M
H41 : Out S M T
H40 : neq S M
H39 : OS A T G H
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Cong N H M H) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).
assert (neq S M) by (forward_using lemma_betweennotequal).
assert (Out S M T) by (conclude lemma_ray4).
assert (Out S T M) by (conclude lemma_ray5).
assert (Col G H S) by (conclude lemma_rayimpliescollinear).
assert (Col G S H) by (forward_using lemma_collinearorder).
assert (OS A M G H) by (conclude lemma_sameside2).
assert (OS M A G H) by (forward_using lemma_samesidesymmetric).
assert (OS M N G H) by (conclude lemma_sameside2).
assert (Cong N H M H) by (forward_using lemma_congruenceflip).

*****
H48 : Cong N H M H
H47 : OS M N G H
H46 : OS M A G H
H45 : OS A M G H
H44 : Col G S H
H43 : Col G H S
H42 : Out S T M
H41 : Out S M T
H40 : neq S M
H39 : OS A T G H
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Cong M H N H) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).
assert (neq S M) by (forward_using lemma_betweennotequal).
assert (Out S M T) by (conclude lemma_ray4).
assert (Out S T M) by (conclude lemma_ray5).
assert (Col G H S) by (conclude lemma_rayimpliescollinear).
assert (Col G S H) by (forward_using lemma_collinearorder).
assert (OS A M G H) by (conclude lemma_sameside2).
assert (OS M A G H) by (forward_using lemma_samesidesymmetric).
assert (OS M N G H) by (conclude lemma_sameside2).
assert (Cong N H M H) by (forward_using lemma_congruenceflip).
assert (Cong M H N H) by (conclude lemma_congruencesymmetric).

*****
H49 : Cong M H N H
H48 : Cong N H M H
H47 : OS M N G H
H46 : OS M A G H
H45 : OS A M G H
H44 : Col G S H
H43 : Col G H S
H42 : Out S T M
H41 : Out S M T
H40 : neq S M
H39 : OS A T G H
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Cong N G M G) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).
assert (neq S M) by (forward_using lemma_betweennotequal).
assert (Out S M T) by (conclude lemma_ray4).
assert (Out S T M) by (conclude lemma_ray5).
assert (Col G H S) by (conclude lemma_rayimpliescollinear).
assert (Col G S H) by (forward_using lemma_collinearorder).
assert (OS A M G H) by (conclude lemma_sameside2).
assert (OS M A G H) by (forward_using lemma_samesidesymmetric).
assert (OS M N G H) by (conclude lemma_sameside2).
assert (Cong N H M H) by (forward_using lemma_congruenceflip).
assert (Cong M H N H) by (conclude lemma_congruencesymmetric).
assert (Cong N G M G) by (forward_using lemma_congruenceflip).

*****
H50 : Cong N G M G
H49 : Cong M H N H
H48 : Cong N H M H
H47 : OS M N G H
H46 : OS M A G H
H45 : OS A M G H
H44 : Col G S H
H43 : Col G H S
H42 : Out S T M
H41 : Out S M T
H40 : neq S M
H39 : OS A T G H
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Cong M G N G) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).
assert (neq S M) by (forward_using lemma_betweennotequal).
assert (Out S M T) by (conclude lemma_ray4).
assert (Out S T M) by (conclude lemma_ray5).
assert (Col G H S) by (conclude lemma_rayimpliescollinear).
assert (Col G S H) by (forward_using lemma_collinearorder).
assert (OS A M G H) by (conclude lemma_sameside2).
assert (OS M A G H) by (forward_using lemma_samesidesymmetric).
assert (OS M N G H) by (conclude lemma_sameside2).
assert (Cong N H M H) by (forward_using lemma_congruenceflip).
assert (Cong M H N H) by (conclude lemma_congruencesymmetric).
assert (Cong N G M G) by (forward_using lemma_congruenceflip).
assert (Cong M G N G) by (conclude lemma_congruencesymmetric).

*****
H51 : Cong M G N G
H50 : Cong N G M G
H49 : Cong M H N H
H48 : Cong N H M H
H47 : OS M N G H
H46 : OS M A G H
H45 : OS A M G H
H44 : Col G S H
H43 : Col G H S
H42 : Out S T M
H41 : Out S M T
H40 : neq S M
H39 : OS A T G H
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (eq M N) by (conclude proposition_07).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).
assert (neq S M) by (forward_using lemma_betweennotequal).
assert (Out S M T) by (conclude lemma_ray4).
assert (Out S T M) by (conclude lemma_ray5).
assert (Col G H S) by (conclude lemma_rayimpliescollinear).
assert (Col G S H) by (forward_using lemma_collinearorder).
assert (OS A M G H) by (conclude lemma_sameside2).
assert (OS M A G H) by (forward_using lemma_samesidesymmetric).
assert (OS M N G H) by (conclude lemma_sameside2).
assert (Cong N H M H) by (forward_using lemma_congruenceflip).
assert (Cong M H N H) by (conclude lemma_congruencesymmetric).
assert (Cong N G M G) by (forward_using lemma_congruenceflip).
assert (Cong M G N G) by (conclude lemma_congruencesymmetric).
assert (eq M N) by (conclude proposition_07).

*****
H52 : eq M N
H51 : Cong M G N G
H50 : Cong N G M G
H49 : Cong M H N H
H48 : Cong N H M H
H47 : OS M N G H
H46 : OS M A G H
H45 : OS A M G H
H44 : Col G S H
H43 : Col G H S
H42 : Out S T M
H41 : Out S M T
H40 : neq S M
H39 : OS A T G H
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (eq N M) by (conclude lemma_equalitysymmetric).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).
assert (neq S M) by (forward_using lemma_betweennotequal).
assert (Out S M T) by (conclude lemma_ray4).
assert (Out S T M) by (conclude lemma_ray5).
assert (Col G H S) by (conclude lemma_rayimpliescollinear).
assert (Col G S H) by (forward_using lemma_collinearorder).
assert (OS A M G H) by (conclude lemma_sameside2).
assert (OS M A G H) by (forward_using lemma_samesidesymmetric).
assert (OS M N G H) by (conclude lemma_sameside2).
assert (Cong N H M H) by (forward_using lemma_congruenceflip).
assert (Cong M H N H) by (conclude lemma_congruencesymmetric).
assert (Cong N G M G) by (forward_using lemma_congruenceflip).
assert (Cong M G N G) by (conclude lemma_congruencesymmetric).
assert (eq M N) by (conclude proposition_07).
assert (eq N M) by (conclude lemma_equalitysymmetric).

*****
H53 : eq N M
H52 : eq M N
H51 : Cong M G N G
H50 : Cong N G M G
H49 : Cong M H N H
H48 : Cong N H M H
H47 : OS M N G H
H46 : OS M A G H
H45 : OS A M G H
H44 : Col G S H
H43 : Col G H S
H42 : Out S T M
H41 : Out S M T
H40 : neq S M
H39 : OS A T G H
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
assert (Out G A M) by (conclude cn_equalitysub).
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).
assert (neq S M) by (forward_using lemma_betweennotequal).
assert (Out S M T) by (conclude lemma_ray4).
assert (Out S T M) by (conclude lemma_ray5).
assert (Col G H S) by (conclude lemma_rayimpliescollinear).
assert (Col G S H) by (forward_using lemma_collinearorder).
assert (OS A M G H) by (conclude lemma_sameside2).
assert (OS M A G H) by (forward_using lemma_samesidesymmetric).
assert (OS M N G H) by (conclude lemma_sameside2).
assert (Cong N H M H) by (forward_using lemma_congruenceflip).
assert (Cong M H N H) by (conclude lemma_congruencesymmetric).
assert (Cong N G M G) by (forward_using lemma_congruenceflip).
assert (Cong M G N G) by (conclude lemma_congruencesymmetric).
assert (eq M N) by (conclude proposition_07).
assert (eq N M) by (conclude lemma_equalitysymmetric).
assert (Out G A M) by (conclude cn_equalitysub).

*****
H54 : Out G A M
H53 : eq N M
H52 : eq M N
H51 : Cong M G N G
H50 : Cong N G M G
H49 : Cong M H N H
H48 : Cong N H M H
H47 : OS M N G H
H46 : OS M A G H
H45 : OS A M G H
H44 : Col G S H
H43 : Col G H S
H42 : Out S T M
H41 : Out S M T
H40 : neq S M
H39 : OS A T G H
H38 : Col G G H
H37 : eq G G
H36 : Cong H N H M
H35 : Cong G H G H
H34 : CongA H G N H G M
H33 : CongA H G M H G N
H32 : CongA H G A H G N
H31 : CongA H G A H G A
H30 : nCol H G A
H29 : CongA H G M H G A
H28 : CongA H G M H G K
H27 : Out G M K
H26 : CongA H G M H G M
H25 : not (Col H G M)
H24 : Out G H H
H23 : not (eq G H)
H22 : eq H H
H21 : Cong G N G M
H20 : Out G A N
N : Point
H19 : neq G M
H18 : neq G A
H17 : CongA H G K H G A
H16 : BetS T M S
H15 : BetS S M T
H14 : Out G K M
M : Point
H13 : Out G L S
H12 : Out G J T
H11 : Triangle L G J
H10 : not (Col L G J)
H9 : nCol H G K
H8 : CongA H G A H G K
H7 : Out G P J
H6 : Out G H L
H5 : BetS L K J
J,K,L : Point
H4 : nCol G H P
H3 : Out G P T
H2 : Out G H S
H1 : OS A P G H
H0 : LtA H G A H G P
A,G,H,P,S,T : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (BetS T X S) (Out G A X))
+++++
close.
-----
Lemma lemma_crossbar2 : forall A G H P S T, LtA H G A H G P -> OS A P G H -> Out G H S -> Out G P T -> exists X, BetS T X S /\\ Out G A X.
Proof.
intros.
assert (nCol G H P) by (conclude_def OS ).
let Tf:=fresh in assert (Tf:exists J K L, (BetS L K J /\\ Out G H L /\\ Out G P J /\\ CongA H G A H G K)) by (conclude_def LtA );destruct Tf as [J[K[L]]];spliter.
assert (nCol H G K) by (conclude lemma_equalanglesNC).
assert (~ Col L G J).
assert (Triangle L G J) by (conclude_def Triangle ).
assert (Out G J T) by (conclude lemma_ray3).
assert (Out G L S) by (conclude lemma_ray3).
let Tf:=fresh in assert (Tf:exists M, (Out G K M /\\ BetS S M T)) by (conclude lemma_crossbar);destruct Tf as [M];spliter.
assert (BetS T M S) by (conclude axiom_betweennesssymmetry).
assert (CongA H G K H G A) by (conclude lemma_equalanglessymmetric).
assert (neq G A) by (forward_using lemma_angledistinct).
assert (neq G M) by (conclude lemma_raystrict).
let Tf:=fresh in assert (Tf:exists N, (Out G A N /\\ Cong G N G M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (eq H H) by (conclude cn_equalityreflexive).
assert (~ eq G H).
assert (Out G H H) by (conclude lemma_ray4).
assert (~ Col H G M).
assert (CongA H G M H G M) by (conclude lemma_equalanglesreflexive).
assert (Out G M K) by (conclude lemma_ray5).
assert (CongA H G M H G K) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G A) by (conclude lemma_equalanglestransitive).
assert (nCol H G A) by (conclude lemma_equalanglesNC).
assert (CongA H G A H G A) by (conclude lemma_equalanglesreflexive).
assert (CongA H G A H G N) by (conclude lemma_equalangleshelper).
assert (CongA H G M H G N) by (conclude lemma_equalanglestransitive).
assert (CongA H G N H G M) by (conclude lemma_equalanglessymmetric).
assert (Cong G H G H) by (conclude cn_congruencereflexive).
assert (Cong H N H M) by (conclude proposition_04).
assert (eq G G) by (conclude cn_equalityreflexive).
assert (Col G G H) by (conclude_def Col ).
assert (OS A T G H) by (conclude lemma_sameside2).
assert (neq S M) by (forward_using lemma_betweennotequal).
assert (Out S M T) by (conclude lemma_ray4).
assert (Out S T M) by (conclude lemma_ray5).
assert (Col G H S) by (conclude lemma_rayimpliescollinear).
assert (Col G S H) by (forward_using lemma_collinearorder).
assert (OS A M G H) by (conclude lemma_sameside2).
assert (OS M A G H) by (forward_using lemma_samesidesymmetric).
assert (OS M N G H) by (conclude lemma_sameside2).
assert (Cong N H M H) by (forward_using lemma_congruenceflip).
assert (Cong M H N H) by (conclude lemma_congruencesymmetric).
assert (Cong N G M G) by (forward_using lemma_congruenceflip).
assert (Cong M G N G) by (conclude lemma_congruencesymmetric).
assert (eq M N) by (conclude proposition_07).
assert (eq N M) by (conclude lemma_equalitysymmetric).
assert (Out G A M) by (conclude cn_equalitysub).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
