Require Export field_variable_isolation_tactic.
-----
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.
-----
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.

*****

*****
forall (a b : F) (_ : eq (Fplus a b) a), eq b F0
+++++
Proof.
-----
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.
Proof.

*****

*****
forall (a b : F) (_ : eq (Fplus a b) a), eq b F0
+++++
intros.
-----
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.
Proof.
intros.

*****
H : eq (Fplus a b) a
a,b : F
*****
eq b F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.
Proof.
intros.
try solve [ ring | congruence ].

*****
H : eq (Fplus a b) a
a,b : F
*****
eq b F0
+++++
assert (a + b - a = a - a).
-----
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + b - a = a - a).

*****
H : eq (Fplus a b) a
a,b : F
*****
eq (Fminus (Fplus a b) a) (Fminus a a)
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + b - a = a - a).

*****
H0 : eq (Fminus (Fplus a b) a) (Fminus a a)
H : eq (Fplus a b) a
a,b : F
*****
eq b F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + b - a = a - a).
try solve [ ring | congruence ].

*****
H0 : eq (Fminus (Fplus a b) a) (Fminus a a)
H : eq (Fplus a b) a
a,b : F
*****
eq b F0
+++++
assert (a - a = 0).
-----
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + b - a = a - a).
try solve [ ring | congruence ].
assert (a - a = 0).

*****
H0 : eq (Fminus (Fplus a b) a) (Fminus a a)
H : eq (Fplus a b) a
a,b : F
*****
eq (Fminus a a) F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + b - a = a - a).
try solve [ ring | congruence ].
assert (a - a = 0).

*****
H1 : eq (Fminus a a) F0
H0 : eq (Fminus (Fplus a b) a) (Fminus a a)
H : eq (Fplus a b) a
a,b : F
*****
eq b F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + b - a = a - a).
try solve [ ring | congruence ].
assert (a - a = 0).
try solve [ ring | congruence ].

*****
H1 : eq (Fminus a a) F0
H0 : eq (Fminus (Fplus a b) a) (Fminus a a)
H : eq (Fplus a b) a
a,b : F
*****
eq b F0
+++++
rewrite H1 in H0.
-----
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + b - a = a - a).
try solve [ ring | congruence ].
assert (a - a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.

*****
H1 : eq (Fminus a a) F0
H0 : eq (Fminus (Fplus a b) a) F0
H : eq (Fplus a b) a
a,b : F
*****
eq b F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + b - a = a - a).
try solve [ ring | congruence ].
assert (a - a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].

*****
H1 : eq (Fminus a a) F0
H0 : eq (Fminus (Fplus a b) a) F0
H : eq (Fplus a b) a
a,b : F
*****
eq b F0
+++++
assert (a + b - a = b).
-----
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + b - a = a - a).
try solve [ ring | congruence ].
assert (a - a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + b - a = b).

*****
H1 : eq (Fminus a a) F0
H0 : eq (Fminus (Fplus a b) a) F0
H : eq (Fplus a b) a
a,b : F
*****
eq (Fminus (Fplus a b) a) b
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + b - a = a - a).
try solve [ ring | congruence ].
assert (a - a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + b - a = b).

*****
H2 : eq (Fminus (Fplus a b) a) b
H1 : eq (Fminus a a) F0
H0 : eq (Fminus (Fplus a b) a) F0
H : eq (Fplus a b) a
a,b : F
*****
eq b F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_1 : forall a b : F, a + b = a -> b = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + b - a = a - a).

*****

*****

+++++
Qed.
-----
Lemma field_prop_3 : forall a : F, a = 0 -> - a = 0.
-----
Lemma field_prop_3 : forall a : F, a = 0 -> - a = 0.

*****

*****
forall (a : F) (_ : eq a F0), eq (Fopp a) F0
+++++
intros.
-----
Lemma field_prop_3 : forall a : F, a = 0 -> - a = 0.
intros.

*****
H : eq a F0
a : F
*****
eq (Fopp a) F0
+++++
rewrite H.
-----
Lemma field_prop_3 : forall a : F, a = 0 -> - a = 0.
intros.
rewrite H.

*****
H : eq a F0
a : F
*****
eq (Fopp F0) F0
+++++
ring.
-----
Lemma field_prop_3 : forall a : F, a = 0 -> - a = 0.
intros.
rewrite H.
ring.

*****

*****

+++++
Qed.
-----
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.
-----
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.

*****

*****
forall (a : F) (_ : eq (Fopp a) F0), eq a F0
+++++
Proof.
-----
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.
Proof.

*****

*****
forall (a : F) (_ : eq (Fopp a) F0), eq a F0
+++++
intros.
-----
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.
Proof.
intros.

*****
H : eq (Fopp a) F0
a : F
*****
eq a F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].

*****
H : eq (Fopp a) F0
a : F
*****
eq a F0
+++++
assert (a + - a = a + 0).
-----
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + - a = a + 0).

*****
H : eq (Fopp a) F0
a : F
*****
eq (Fplus a (Fopp a)) (Fplus a F0)
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + - a = a + 0).

*****
H0 : eq (Fplus a (Fopp a)) (Fplus a F0)
H : eq (Fopp a) F0
a : F
*****
eq a F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + - a = a + 0).
try solve [ ring | congruence ].

*****
H0 : eq (Fplus a (Fopp a)) (Fplus a F0)
H : eq (Fopp a) F0
a : F
*****
eq a F0
+++++
assert (a + - a = 0).
-----
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + - a = a + 0).
try solve [ ring | congruence ].
assert (a + - a = 0).

*****
H0 : eq (Fplus a (Fopp a)) (Fplus a F0)
H : eq (Fopp a) F0
a : F
*****
eq (Fplus a (Fopp a)) F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + - a = a + 0).
try solve [ ring | congruence ].
assert (a + - a = 0).

*****
H1 : eq (Fplus a (Fopp a)) F0
H0 : eq (Fplus a (Fopp a)) (Fplus a F0)
H : eq (Fopp a) F0
a : F
*****
eq a F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + - a = a + 0).
try solve [ ring | congruence ].
assert (a + - a = 0).
try solve [ ring | congruence ].

*****
H1 : eq (Fplus a (Fopp a)) F0
H0 : eq (Fplus a (Fopp a)) (Fplus a F0)
H : eq (Fopp a) F0
a : F
*****
eq a F0
+++++
rewrite H1 in H0.
-----
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + - a = a + 0).
try solve [ ring | congruence ].
assert (a + - a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.

*****
H1 : eq (Fplus a (Fopp a)) F0
H0 : eq F0 (Fplus a F0)
H : eq (Fopp a) F0
a : F
*****
eq a F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + - a = a + 0).
try solve [ ring | congruence ].
assert (a + - a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].

*****
H1 : eq (Fplus a (Fopp a)) F0
H0 : eq F0 (Fplus a F0)
H : eq (Fopp a) F0
a : F
*****
eq a F0
+++++
assert (a + 0 = a).
-----
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + - a = a + 0).
try solve [ ring | congruence ].
assert (a + - a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + 0 = a).

*****
H1 : eq (Fplus a (Fopp a)) F0
H0 : eq F0 (Fplus a F0)
H : eq (Fopp a) F0
a : F
*****
eq (Fplus a F0) a
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + - a = a + 0).
try solve [ ring | congruence ].
assert (a + - a = 0).
try solve [ ring | congruence ].
rewrite H1 in H0.
try solve [ ring | congruence ].
assert (a + 0 = a).

*****
H2 : eq (Fplus a F0) a
H1 : eq (Fplus a (Fopp a)) F0
H0 : eq F0 (Fplus a F0)
H : eq (Fopp a) F0
a : F
*****
eq a F0
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_4 : forall a : F, - a = 0 -> a = 0.
Proof.
intros.
try solve [ ring | congruence ].
assert (a + - a = a + 0).

*****

*****

+++++
Qed.
-----
Lemma field_prop_5 : forall a b : F, - a = - b -> a = b.
-----
Lemma field_prop_5 : forall a b : F, - a = - b -> a = b.

*****

*****
forall (a b : F) (_ : eq (Fopp a) (Fopp b)), eq a b
+++++
Proof.
-----
Lemma field_prop_5 : forall a b : F, - a = - b -> a = b.
Proof.

*****

*****
forall (a b : F) (_ : eq (Fopp a) (Fopp b)), eq a b
+++++
intros.
-----
Lemma field_prop_5 : forall a b : F, - a = - b -> a = b.
Proof.
intros.

*****
H : eq (Fopp a) (Fopp b)
a,b : F
*****
eq a b
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_5 : forall a b : F, - a = - b -> a = b.
Proof.
intros.
try solve [ ring | congruence ].

*****
H : eq (Fopp a) (Fopp b)
a,b : F
*****
eq a b
+++++
assert (- - a = - - b).
-----
Lemma field_prop_5 : forall a b : F, - a = - b -> a = b.
Proof.
intros.
try solve [ ring | congruence ].
assert (- - a = - - b).

*****
H : eq (Fopp a) (Fopp b)
a,b : F
*****
eq (Fopp (Fopp a)) (Fopp (Fopp b))
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_5 : forall a b : F, - a = - b -> a = b.
Proof.
intros.
try solve [ ring | congruence ].
assert (- - a = - - b).

*****
H0 : eq (Fopp (Fopp a)) (Fopp (Fopp b))
H : eq (Fopp a) (Fopp b)
a,b : F
*****
eq a b
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_5 : forall a b : F, - a = - b -> a = b.
Proof.
intros.
try solve [ ring | congruence ].
assert (- - a = - - b).
try solve [ ring | congruence ].

*****
H0 : eq (Fopp (Fopp a)) (Fopp (Fopp b))
H : eq (Fopp a) (Fopp b)
a,b : F
*****
eq a b
+++++
assert (- - a = a).
-----
Lemma field_prop_5 : forall a b : F, - a = - b -> a = b.
Proof.
intros.
try solve [ ring | congruence ].
assert (- - a = - - b).
try solve [ ring | congruence ].
assert (- - a = a).

*****
H0 : eq (Fopp (Fopp a)) (Fopp (Fopp b))
H : eq (Fopp a) (Fopp b)
a,b : F
*****
eq (Fopp (Fopp a)) a
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_5 : forall a b : F, - a = - b -> a = b.
Proof.
intros.
try solve [ ring | congruence ].
assert (- - a = - - b).
try solve [ ring | congruence ].
assert (- - a = a).

*****
H1 : eq (Fopp (Fopp a)) a
H0 : eq (Fopp (Fopp a)) (Fopp (Fopp b))
H : eq (Fopp a) (Fopp b)
a,b : F
*****
eq a b
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_5 : forall a b : F, - a = - b -> a = b.
Proof.
intros.
try solve [ ring | congruence ].
assert (- - a = - - b).
try solve [ ring | congruence ].
assert (- - a = a).
try solve [ ring | congruence ].

*****
H1 : eq (Fopp (Fopp a)) a
H0 : eq (Fopp (Fopp a)) (Fopp (Fopp b))
H : eq (Fopp a) (Fopp b)
a,b : F
*****
eq a b
+++++
assert (- - b = b).
-----
Lemma field_prop_5 : forall a b : F, - a = - b -> a = b.
Proof.
intros.
try solve [ ring | congruence ].
assert (- - a = - - b).
try solve [ ring | congruence ].
assert (- - a = a).
try solve [ ring | congruence ].
assert (- - b = b).

*****
H1 : eq (Fopp (Fopp a)) a
H0 : eq (Fopp (Fopp a)) (Fopp (Fopp b))
H : eq (Fopp a) (Fopp b)
a,b : F
*****
eq (Fopp (Fopp b)) b
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_5 : forall a b : F, - a = - b -> a = b.
Proof.
intros.
try solve [ ring | congruence ].
assert (- - a = - - b).
try solve [ ring | congruence ].
assert (- - a = a).
try solve [ ring | congruence ].
assert (- - b = b).

*****
H2 : eq (Fopp (Fopp b)) b
H1 : eq (Fopp (Fopp a)) a
H0 : eq (Fopp (Fopp a)) (Fopp (Fopp b))
H : eq (Fopp a) (Fopp b)
a,b : F
*****
eq a b
+++++
try solve [ ring | congruence ].
-----
Lemma field_prop_5 : forall a b : F, - a = - b -> a = b.
Proof.
intros.
try solve [ ring | congruence ].
assert (- - a = - - b).

*****

*****

+++++
Qed.
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.

*****

*****
forall (a b : F) (_ : not (eq a F0)) (_ : not (eq b F0)), not (eq (Fmult a b) F0)
+++++
Proof.
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.

*****

*****
forall (a b : F) (_ : not (eq a F0)) (_ : not (eq b F0)), not (eq (Fmult a b) F0)
+++++
intros.
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.

*****
H0 : not (eq b F0)
H : not (eq a F0)
a,b : F
*****
not (eq (Fmult a b) F0)
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].

*****
H0 : not (eq b F0)
H : not (eq a F0)
a,b : F
*****
not (eq (Fmult a b) F0)
+++++
assert (a * b / b = a).
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).

*****
H0 : not (eq b F0)
H : not (eq a F0)
a,b : F
*****
eq (Fdiv (Fmult a b) b) a
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].

*****
H0 : not (eq b F0)
H : not (eq a F0)
a,b : F
*****
eq (Fdiv (Fmult a b) b) a
+++++
field.
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].
field.

*****
H0 : not (eq b F0)
H : not (eq a F0)
a,b : F
*****
not (eq b F0)
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).

*****
H1 : eq (Fdiv (Fmult a b) b) a
H0 : not (eq b F0)
H : not (eq a F0)
a,b : F
*****
not (eq (Fmult a b) F0)
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].

*****
H1 : eq (Fdiv (Fmult a b) b) a
H0 : not (eq b F0)
H : not (eq a F0)
a,b : F
*****
not (eq (Fmult a b) F0)
+++++
intuition.
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].
intuition.

*****
H2 : eq (Fmult a b) F0
H1 : eq (Fdiv (Fmult a b) b) a
H0 : forall _ : eq b F0, False
H : forall _ : eq a F0, False
a,b : F
*****
False
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].
intuition.
try solve [ auto with field_hints | congruence ].

*****
H2 : eq (Fmult a b) F0
H1 : eq (Fdiv (Fmult a b) b) a
H0 : forall _ : eq b F0, False
H : forall _ : eq a F0, False
a,b : F
*****
False
+++++
assert (a * b / b = 0 / b).
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].
intuition.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = 0 / b).

*****
H2 : eq (Fmult a b) F0
H1 : eq (Fdiv (Fmult a b) b) a
H0 : forall _ : eq b F0, False
H : forall _ : eq a F0, False
a,b : F
*****
eq (Fdiv (Fmult a b) b) (Fdiv F0 b)
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].
intuition.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = 0 / b).

*****
H3 : eq (Fdiv (Fmult a b) b) (Fdiv F0 b)
H2 : eq (Fmult a b) F0
H1 : eq (Fdiv (Fmult a b) b) a
H0 : forall _ : eq b F0, False
H : forall _ : eq a F0, False
a,b : F
*****
False
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].
intuition.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = 0 / b).
try solve [ auto with field_hints | congruence ].

*****
H3 : eq (Fdiv (Fmult a b) b) (Fdiv F0 b)
H2 : eq (Fmult a b) F0
H1 : eq (Fdiv (Fmult a b) b) a
H0 : forall _ : eq b F0, False
H : forall _ : eq a F0, False
a,b : F
*****
False
+++++
rewrite H1 in H3.
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].
intuition.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = 0 / b).
try solve [ auto with field_hints | congruence ].
rewrite H1 in H3.

*****
H3 : eq a (Fdiv F0 b)
H2 : eq (Fmult a b) F0
H1 : eq (Fdiv (Fmult a b) b) a
H0 : forall _ : eq b F0, False
H : forall _ : eq a F0, False
a,b : F
*****
False
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].
intuition.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = 0 / b).
try solve [ auto with field_hints | congruence ].
rewrite H1 in H3.
try solve [ auto with field_hints | congruence ].

*****
H3 : eq a (Fdiv F0 b)
H2 : eq (Fmult a b) F0
H1 : eq (Fdiv (Fmult a b) b) a
H0 : forall _ : eq b F0, False
H : forall _ : eq a F0, False
a,b : F
*****
False
+++++
assert (a = 0).
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].
intuition.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = 0 / b).
try solve [ auto with field_hints | congruence ].
rewrite H1 in H3.
try solve [ auto with field_hints | congruence ].
assert (a = 0).

*****
H3 : eq a (Fdiv F0 b)
H2 : eq (Fmult a b) F0
H1 : eq (Fdiv (Fmult a b) b) a
H0 : forall _ : eq b F0, False
H : forall _ : eq a F0, False
a,b : F
*****
eq a F0
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].
intuition.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = 0 / b).
try solve [ auto with field_hints | congruence ].
rewrite H1 in H3.
try solve [ auto with field_hints | congruence ].
assert (a = 0).
try solve [ auto with field_hints | congruence ].

*****
H3 : eq a (Fdiv F0 b)
H2 : eq (Fmult a b) F0
H1 : eq (Fdiv (Fmult a b) b) a
H0 : forall _ : eq b F0, False
H : forall _ : eq a F0, False
a,b : F
*****
eq a F0
+++++
assert (0 / b = 0).
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].
intuition.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = 0 / b).
try solve [ auto with field_hints | congruence ].
rewrite H1 in H3.
try solve [ auto with field_hints | congruence ].
assert (a = 0).
try solve [ auto with field_hints | congruence ].
assert (0 / b = 0).

*****
H3 : eq a (Fdiv F0 b)
H2 : eq (Fmult a b) F0
H1 : eq (Fdiv (Fmult a b) b) a
H0 : forall _ : eq b F0, False
H : forall _ : eq a F0, False
a,b : F
*****
eq (Fdiv F0 b) F0
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].
intuition.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = 0 / b).
try solve [ auto with field_hints | congruence ].
rewrite H1 in H3.
try solve [ auto with field_hints | congruence ].
assert (a = 0).
try solve [ auto with field_hints | congruence ].
assert (0 / b = 0).
try solve [ auto with field_hints | congruence ].

*****
H3 : eq a (Fdiv F0 b)
H2 : eq (Fmult a b) F0
H1 : eq (Fdiv (Fmult a b) b) a
H0 : forall _ : eq b F0, False
H : forall _ : eq a F0, False
a,b : F
*****
eq (Fdiv F0 b) F0
+++++
field.
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].
intuition.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = 0 / b).
try solve [ auto with field_hints | congruence ].
rewrite H1 in H3.
try solve [ auto with field_hints | congruence ].
assert (a = 0).
try solve [ auto with field_hints | congruence ].
assert (0 / b = 0).
try solve [ auto with field_hints | congruence ].
field.

*****
H3 : eq a (Fdiv F0 b)
H2 : eq (Fmult a b) F0
H1 : eq (Fdiv (Fmult a b) b) a
H0 : forall _ : eq b F0, False
H : forall _ : eq a F0, False
a,b : F
*****
not (eq b F0)
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].
intuition.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = 0 / b).
try solve [ auto with field_hints | congruence ].
rewrite H1 in H3.
try solve [ auto with field_hints | congruence ].
assert (a = 0).
try solve [ auto with field_hints | congruence ].
assert (0 / b = 0).

*****
H4 : eq (Fdiv F0 b) F0
H3 : eq a (Fdiv F0 b)
H2 : eq (Fmult a b) F0
H1 : eq (Fdiv (Fmult a b) b) a
H0 : forall _ : eq b F0, False
H : forall _ : eq a F0, False
a,b : F
*****
eq a F0
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).
try solve [ auto with field_hints | congruence ].
intuition.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = 0 / b).
try solve [ auto with field_hints | congruence ].
rewrite H1 in H3.
try solve [ auto with field_hints | congruence ].
assert (a = 0).

*****
H4 : eq a F0
H3 : eq a (Fdiv F0 b)
H2 : eq (Fmult a b) F0
H1 : eq (Fdiv (Fmult a b) b) a
H0 : forall _ : eq b F0, False
H : forall _ : eq a F0, False
a,b : F
*****
False
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeromult : forall a b : F, a <> 0 -> b <> 0 -> a * b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
assert (a * b / b = a).

*****

*****

+++++
Qed.
-----
Lemma nonzerodiv : forall a b : F, a <> 0 -> b <> 0 -> a / b <> 0.
-----
Lemma nonzerodiv : forall a b : F, a <> 0 -> b <> 0 -> a / b <> 0.

*****

*****
forall (a b : F) (_ : not (eq a F0)) (_ : not (eq b F0)), not (eq (Fdiv a b) F0)
+++++
Proof.
-----
Lemma nonzerodiv : forall a b : F, a <> 0 -> b <> 0 -> a / b <> 0.
Proof.

*****

*****
forall (a b : F) (_ : not (eq a F0)) (_ : not (eq b F0)), not (eq (Fdiv a b) F0)
+++++
intros.
-----
Lemma nonzerodiv : forall a b : F, a <> 0 -> b <> 0 -> a / b <> 0.
Proof.
intros.

*****
H0 : not (eq b F0)
H : not (eq a F0)
a,b : F
*****
not (eq (Fdiv a b) F0)
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzerodiv : forall a b : F, a <> 0 -> b <> 0 -> a / b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].

*****
H0 : not (eq b F0)
H : not (eq a F0)
a,b : F
*****
not (eq (Fdiv a b) F0)
+++++
unfold not in |- *.
-----
Lemma nonzerodiv : forall a b : F, a <> 0 -> b <> 0 -> a / b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.

*****
H0 : not (eq b F0)
H : not (eq a F0)
a,b : F
*****
forall _ : eq (Fdiv a b) F0, False
+++++
intro.
-----
Lemma nonzerodiv : forall a b : F, a <> 0 -> b <> 0 -> a / b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.

*****
H1 : eq (Fdiv a b) F0
H0 : not (eq b F0)
H : not (eq a F0)
a,b : F
*****
False
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzerodiv : forall a b : F, a <> 0 -> b <> 0 -> a / b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].

*****
H1 : eq (Fdiv a b) F0
H0 : not (eq b F0)
H : not (eq a F0)
a,b : F
*****
False
+++++
IsoleVarRing a H1.
-----
Lemma nonzerodiv : forall a b : F, a <> 0 -> b <> 0 -> a / b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
IsoleVarRing a H1.

*****
H1 : eq a F0
H0 : not (eq b F0)
H : not (eq a F0)
a,b : F
*****
False
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzerodiv : forall a b : F, a <> 0 -> b <> 0 -> a / b <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
IsoleVarRing a H1.
try solve [ auto with field_hints | congruence ].

*****

*****

+++++
Qed.
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.

*****

*****
forall (a : F) (_ : not (eq a F0)), not (eq (Finv a) F0)
+++++
Proof.
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.

*****

*****
forall (a : F) (_ : not (eq a F0)), not (eq (Finv a) F0)
+++++
intros.
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.

*****
H : not (eq a F0)
a : F
*****
not (eq (Finv a) F0)
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].

*****
H : not (eq a F0)
a : F
*****
not (eq (Finv a) F0)
+++++
unfold not in |- *.
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.

*****
H : not (eq a F0)
a : F
*****
forall _ : eq (Finv a) F0, False
+++++
intro.
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.

*****
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
False
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].

*****
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
False
+++++
assert (a * / a = 1).
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
assert (a * / a = 1).

*****
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
eq (Fmult a (Finv a)) F1
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
assert (a * / a = 1).
try solve [ auto with field_hints | congruence ].

*****
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
eq (Fmult a (Finv a)) F1
+++++
field.
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
assert (a * / a = 1).
try solve [ auto with field_hints | congruence ].
field.

*****
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
not (eq a F0)
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
assert (a * / a = 1).

*****
H1 : eq (Fmult a (Finv a)) F1
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
False
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
assert (a * / a = 1).
try solve [ auto with field_hints | congruence ].

*****
H1 : eq (Fmult a (Finv a)) F1
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
False
+++++
assert (a * / a = a * 0).
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
assert (a * / a = 1).
try solve [ auto with field_hints | congruence ].
assert (a * / a = a * 0).

*****
H1 : eq (Fmult a (Finv a)) F1
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
eq (Fmult a (Finv a)) (Fmult a F0)
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
assert (a * / a = 1).
try solve [ auto with field_hints | congruence ].
assert (a * / a = a * 0).

*****
H2 : eq (Fmult a (Finv a)) (Fmult a F0)
H1 : eq (Fmult a (Finv a)) F1
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
False
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
assert (a * / a = 1).
try solve [ auto with field_hints | congruence ].
assert (a * / a = a * 0).
try solve [ auto with field_hints | congruence ].

*****
H2 : eq (Fmult a (Finv a)) (Fmult a F0)
H1 : eq (Fmult a (Finv a)) F1
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
False
+++++
rewrite H1 in H2.
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
assert (a * / a = 1).
try solve [ auto with field_hints | congruence ].
assert (a * / a = a * 0).
try solve [ auto with field_hints | congruence ].
rewrite H1 in H2.

*****
H2 : eq F1 (Fmult a F0)
H1 : eq (Fmult a (Finv a)) F1
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
False
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
assert (a * / a = 1).
try solve [ auto with field_hints | congruence ].
assert (a * / a = a * 0).
try solve [ auto with field_hints | congruence ].
rewrite H1 in H2.
try solve [ auto with field_hints | congruence ].

*****
H2 : eq F1 (Fmult a F0)
H1 : eq (Fmult a (Finv a)) F1
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
False
+++++
assert (a * 0 = 0).
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
assert (a * / a = 1).
try solve [ auto with field_hints | congruence ].
assert (a * / a = a * 0).
try solve [ auto with field_hints | congruence ].
rewrite H1 in H2.
try solve [ auto with field_hints | congruence ].
assert (a * 0 = 0).

*****
H2 : eq F1 (Fmult a F0)
H1 : eq (Fmult a (Finv a)) F1
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
eq (Fmult a F0) F0
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
assert (a * / a = 1).
try solve [ auto with field_hints | congruence ].
assert (a * / a = a * 0).
try solve [ auto with field_hints | congruence ].
rewrite H1 in H2.
try solve [ auto with field_hints | congruence ].
assert (a * 0 = 0).
try solve [ auto with field_hints | congruence ].

*****
H2 : eq F1 (Fmult a F0)
H1 : eq (Fmult a (Finv a)) F1
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
eq (Fmult a F0) F0
+++++
ring.
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
assert (a * / a = 1).
try solve [ auto with field_hints | congruence ].
assert (a * / a = a * 0).
try solve [ auto with field_hints | congruence ].
rewrite H1 in H2.
try solve [ auto with field_hints | congruence ].
assert (a * 0 = 0).

*****
H3 : eq (Fmult a F0) F0
H2 : eq F1 (Fmult a F0)
H1 : eq (Fmult a (Finv a)) F1
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
False
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
assert (a * / a = 1).
try solve [ auto with field_hints | congruence ].
assert (a * / a = a * 0).
try solve [ auto with field_hints | congruence ].
rewrite H1 in H2.
try solve [ auto with field_hints | congruence ].
assert (a * 0 = 0).
try solve [ auto with field_hints | congruence ].

*****
H3 : eq (Fmult a F0) F0
H2 : eq F1 (Fmult a F0)
H1 : eq (Fmult a (Finv a)) F1
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
False
+++++
rewrite H3 in H2.
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
assert (a * / a = 1).
try solve [ auto with field_hints | congruence ].
assert (a * / a = a * 0).
try solve [ auto with field_hints | congruence ].
rewrite H1 in H2.
try solve [ auto with field_hints | congruence ].
assert (a * 0 = 0).
try solve [ auto with field_hints | congruence ].
rewrite H3 in H2.

*****
H3 : eq (Fmult a F0) F0
H2 : eq F1 F0
H1 : eq (Fmult a (Finv a)) F1
H0 : eq (Finv a) F0
H : not (eq a F0)
a : F
*****
False
+++++
try solve [ auto with field_hints | congruence ].
-----
Lemma nonzeroinv : forall a : F, a <> 0 -> / a <> 0.
Proof.
intros.
try solve [ auto with field_hints | congruence ].
unfold not in |- *.
intro.
try solve [ auto with field_hints | congruence ].
assert (a * / a = 1).

*****

*****

+++++
Qed.
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.

*****

*****
forall (a : F) (_ : not (eq a F0)), not (eq (Fopp a) F0)
+++++
Proof.
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.

*****

*****
forall (a : F) (_ : not (eq a F0)), not (eq (Fopp a) F0)
+++++
intros.
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.

*****
H : not (eq a F0)
a : F
*****
not (eq (Fopp a) F0)
+++++
try solve [ congruence ].
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].

*****
H : not (eq a F0)
a : F
*****
not (eq (Fopp a) F0)
+++++
assert (a + - a = 0).
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).

*****
H : not (eq a F0)
a : F
*****
eq (Fplus a (Fopp a)) F0
+++++
try solve [ congruence ].
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].

*****
H : not (eq a F0)
a : F
*****
eq (Fplus a (Fopp a)) F0
+++++
apply Fplus_Fopp_r.
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).

*****
H0 : eq (Fplus a (Fopp a)) F0
H : not (eq a F0)
a : F
*****
not (eq (Fopp a) F0)
+++++
try solve [ congruence ].
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].

*****
H0 : eq (Fplus a (Fopp a)) F0
H : not (eq a F0)
a : F
*****
not (eq (Fopp a) F0)
+++++
intuition.
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].
intuition.

*****
H1 : eq (Fopp a) F0
H0 : eq (Fplus a (Fopp a)) F0
H : forall _ : eq a F0, False
a : F
*****
False
+++++
try solve [ congruence ].
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].
intuition.
try solve [ congruence ].

*****
H1 : eq (Fopp a) F0
H0 : eq (Fplus a (Fopp a)) F0
H : forall _ : eq a F0, False
a : F
*****
False
+++++
rewrite H1 in H0.
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].
intuition.
try solve [ congruence ].
rewrite H1 in H0.

*****
H1 : eq (Fopp a) F0
H0 : eq (Fplus a F0) F0
H : forall _ : eq a F0, False
a : F
*****
False
+++++
try solve [ congruence ].
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].
intuition.
try solve [ congruence ].
rewrite H1 in H0.
try solve [ congruence ].

*****
H1 : eq (Fopp a) F0
H0 : eq (Fplus a F0) F0
H : forall _ : eq a F0, False
a : F
*****
False
+++++
assert (a = 0).
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].
intuition.
try solve [ congruence ].
rewrite H1 in H0.
try solve [ congruence ].
assert (a = 0).

*****
H1 : eq (Fopp a) F0
H0 : eq (Fplus a F0) F0
H : forall _ : eq a F0, False
a : F
*****
eq a F0
+++++
try solve [ congruence ].
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].
intuition.
try solve [ congruence ].
rewrite H1 in H0.
try solve [ congruence ].
assert (a = 0).
try solve [ congruence ].

*****
H1 : eq (Fopp a) F0
H0 : eq (Fplus a F0) F0
H : forall _ : eq a F0, False
a : F
*****
eq a F0
+++++
assert (a + 0 = 0 + a).
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].
intuition.
try solve [ congruence ].
rewrite H1 in H0.
try solve [ congruence ].
assert (a = 0).
try solve [ congruence ].
assert (a + 0 = 0 + a).

*****
H1 : eq (Fopp a) F0
H0 : eq (Fplus a F0) F0
H : forall _ : eq a F0, False
a : F
*****
eq (Fplus a F0) (Fplus F0 a)
+++++
try solve [ congruence ].
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].
intuition.
try solve [ congruence ].
rewrite H1 in H0.
try solve [ congruence ].
assert (a = 0).
try solve [ congruence ].
assert (a + 0 = 0 + a).
try solve [ congruence ].

*****
H1 : eq (Fopp a) F0
H0 : eq (Fplus a F0) F0
H : forall _ : eq a F0, False
a : F
*****
eq (Fplus a F0) (Fplus F0 a)
+++++
apply Fplus_sym.
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].
intuition.
try solve [ congruence ].
rewrite H1 in H0.
try solve [ congruence ].
assert (a = 0).
try solve [ congruence ].
assert (a + 0 = 0 + a).

*****
H2 : eq (Fplus a F0) (Fplus F0 a)
H1 : eq (Fopp a) F0
H0 : eq (Fplus a F0) F0
H : forall _ : eq a F0, False
a : F
*****
eq a F0
+++++
try solve [ congruence ].
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].
intuition.
try solve [ congruence ].
rewrite H1 in H0.
try solve [ congruence ].
assert (a = 0).
try solve [ congruence ].
assert (a + 0 = 0 + a).
try solve [ congruence ].

*****
H2 : eq (Fplus a F0) (Fplus F0 a)
H1 : eq (Fopp a) F0
H0 : eq (Fplus a F0) F0
H : forall _ : eq a F0, False
a : F
*****
eq a F0
+++++
rewrite H2 in H0.
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].
intuition.
try solve [ congruence ].
rewrite H1 in H0.
try solve [ congruence ].
assert (a = 0).
try solve [ congruence ].
assert (a + 0 = 0 + a).
try solve [ congruence ].
rewrite H2 in H0.

*****
H2 : eq (Fplus a F0) (Fplus F0 a)
H1 : eq (Fopp a) F0
H0 : eq (Fplus F0 a) F0
H : forall _ : eq a F0, False
a : F
*****
eq a F0
+++++
try solve [ congruence ].
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].
intuition.
try solve [ congruence ].
rewrite H1 in H0.
try solve [ congruence ].
assert (a = 0).
try solve [ congruence ].
assert (a + 0 = 0 + a).
try solve [ congruence ].
rewrite H2 in H0.
try solve [ congruence ].

*****
H2 : eq (Fplus a F0) (Fplus F0 a)
H1 : eq (Fopp a) F0
H0 : eq (Fplus F0 a) F0
H : forall _ : eq a F0, False
a : F
*****
eq a F0
+++++
assert (0 + a = a).
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].
intuition.
try solve [ congruence ].
rewrite H1 in H0.
try solve [ congruence ].
assert (a = 0).
try solve [ congruence ].
assert (a + 0 = 0 + a).
try solve [ congruence ].
rewrite H2 in H0.
try solve [ congruence ].
assert (0 + a = a).

*****
H2 : eq (Fplus a F0) (Fplus F0 a)
H1 : eq (Fopp a) F0
H0 : eq (Fplus F0 a) F0
H : forall _ : eq a F0, False
a : F
*****
eq (Fplus F0 a) a
+++++
try solve [ congruence ].
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].
intuition.
try solve [ congruence ].
rewrite H1 in H0.
try solve [ congruence ].
assert (a = 0).
try solve [ congruence ].
assert (a + 0 = 0 + a).
try solve [ congruence ].
rewrite H2 in H0.
try solve [ congruence ].
assert (0 + a = a).
try solve [ congruence ].

*****
H2 : eq (Fplus a F0) (Fplus F0 a)
H1 : eq (Fopp a) F0
H0 : eq (Fplus F0 a) F0
H : forall _ : eq a F0, False
a : F
*****
eq (Fplus F0 a) a
+++++
apply Fplus_Ol.
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].
intuition.
try solve [ congruence ].
rewrite H1 in H0.
try solve [ congruence ].
assert (a = 0).
try solve [ congruence ].
assert (a + 0 = 0 + a).
try solve [ congruence ].
rewrite H2 in H0.
try solve [ congruence ].
assert (0 + a = a).

*****
H3 : eq (Fplus F0 a) a
H2 : eq (Fplus a F0) (Fplus F0 a)
H1 : eq (Fopp a) F0
H0 : eq (Fplus F0 a) F0
H : forall _ : eq a F0, False
a : F
*****
eq a F0
+++++
try solve [ congruence ].
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).
try solve [ congruence ].
intuition.
try solve [ congruence ].
rewrite H1 in H0.
try solve [ congruence ].
assert (a = 0).

*****
H2 : eq a F0
H1 : eq (Fopp a) F0
H0 : eq (Fplus a F0) F0
H : forall _ : eq a F0, False
a : F
*****
False
+++++
try solve [ congruence ].
-----
Lemma opzero : forall a : F, a <> 0 -> - a <> 0.
Proof.
intros.
try solve [ congruence ].
assert (a + - a = 0).

*****

*****

+++++
Qed.
-----
Theorem divnonzero: forall a b: F, a / b <> 0 -> a<>0.
-----
Theorem divnonzero: forall a b: F, a / b <> 0 -> a<>0.

*****

*****
forall (a b : F) (_ : not (eq (Fdiv a b) F0)), not (eq a F0)
+++++
intros a b H1 H2.
-----
Theorem divnonzero: forall a b: F, a / b <> 0 -> a<>0.
intros a b H1 H2.

*****
H2 : eq a F0
H1 : not (eq (Fdiv a b) F0)
a,b : F
*****
False
+++++
case H1.
-----
Theorem divnonzero: forall a b: F, a / b <> 0 -> a<>0.
intros a b H1 H2.
case H1.

*****
H2 : eq a F0
H1 : not (eq (Fdiv a b) F0)
a,b : F
*****
eq (Fdiv a b) F0
+++++
unfold Fdiv.
-----
Theorem divnonzero: forall a b: F, a / b <> 0 -> a<>0.
intros a b H1 H2.
case H1.
unfold Fdiv.

*****
H2 : eq a F0
H1 : not (eq (Fdiv a b) F0)
a,b : F
*****
eq (Fmult a (Finv b)) F0
+++++
rewrite H2.
-----
Theorem divnonzero: forall a b: F, a / b <> 0 -> a<>0.
intros a b H1 H2.
case H1.
unfold Fdiv.
rewrite H2.

*****
H2 : eq a F0
H1 : not (eq (Fdiv a b) F0)
a,b : F
*****
eq (Fmult F0 (Finv b)) F0
+++++
ring.
-----
Theorem divnonzero: forall a b: F, a / b <> 0 -> a<>0.
intros a b H1 H2.
case H1.
unfold Fdiv.
rewrite H2.
ring.

*****

*****

+++++
Qed.
-----
Theorem multnonzero: forall a b: F, a*b<>0 -> a<>0 /\ b<>0.
-----
Theorem multnonzero: forall a b: F, a*b<>0 -> a<>0 /\\ b<>0.

*****

*****
forall (a b : F) (_ : not (eq (Fmult a b) F0)), and (not (eq a F0)) (not (eq b F0))
+++++
intros a b H1.
-----
Theorem multnonzero: forall a b: F, a*b<>0 -> a<>0 /\\ b<>0.
intros a b H1.

*****
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
and (not (eq a F0)) (not (eq b F0))
+++++
split.
-----
Theorem multnonzero: forall a b: F, a*b<>0 -> a<>0 /\\ b<>0.
intros a b H1.
split.

*****
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
not (eq a F0)
+++++
intros H2.
-----
Theorem multnonzero: forall a b: F, a*b<>0 -> a<>0 /\\ b<>0.
intros a b H1.
split.
intros H2.

*****
H2 : eq a F0
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
False
+++++
case H1.
-----
Theorem multnonzero: forall a b: F, a*b<>0 -> a<>0 /\\ b<>0.
intros a b H1.
split.
intros H2.
case H1.

*****
H2 : eq a F0
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
eq (Fmult a b) F0
+++++
rewrite H2.
-----
Theorem multnonzero: forall a b: F, a*b<>0 -> a<>0 /\\ b<>0.
intros a b H1.
split.
intros H2.
case H1.
rewrite H2.

*****
H2 : eq a F0
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
eq (Fmult F0 b) F0
+++++
ring.
-----
Theorem multnonzero: forall a b: F, a*b<>0 -> a<>0 /\\ b<>0.
intros a b H1.
split.

*****
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
not (eq b F0)
+++++
intros H2.
-----
Theorem multnonzero: forall a b: F, a*b<>0 -> a<>0 /\\ b<>0.
intros a b H1.
split.
intros H2.

*****
H2 : eq b F0
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
False
+++++
case H1.
-----
Theorem multnonzero: forall a b: F, a*b<>0 -> a<>0 /\\ b<>0.
intros a b H1.
split.
intros H2.
case H1.

*****
H2 : eq b F0
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
eq (Fmult a b) F0
+++++
rewrite H2.
-----
Theorem multnonzero: forall a b: F, a*b<>0 -> a<>0 /\\ b<>0.
intros a b H1.
split.
intros H2.
case H1.
rewrite H2.

*****
H2 : eq b F0
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
eq (Fmult a F0) F0
+++++
ring.
-----
Theorem multnonzero: forall a b: F, a*b<>0 -> a<>0 /\\ b<>0.
intros a b H1.
split.

*****

*****

+++++
Qed.
-----
Theorem multnonzero_l: forall a b: F, a*b<>0 -> a<>0.
-----
Theorem multnonzero_l: forall a b: F, a*b<>0 -> a<>0.

*****

*****
forall (a b : F) (_ : not (eq (Fmult a b) F0)), not (eq a F0)
+++++
intros a b H1.
-----
Theorem multnonzero_l: forall a b: F, a*b<>0 -> a<>0.
intros a b H1.

*****
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
not (eq a F0)
+++++
intros H2.
-----
Theorem multnonzero_l: forall a b: F, a*b<>0 -> a<>0.
intros a b H1.
intros H2.

*****
H2 : eq a F0
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
False
+++++
case H1.
-----
Theorem multnonzero_l: forall a b: F, a*b<>0 -> a<>0.
intros a b H1.
intros H2.
case H1.

*****
H2 : eq a F0
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
eq (Fmult a b) F0
+++++
rewrite H2.
-----
Theorem multnonzero_l: forall a b: F, a*b<>0 -> a<>0.
intros a b H1.
intros H2.
case H1.
rewrite H2.

*****
H2 : eq a F0
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
eq (Fmult F0 b) F0
+++++
ring.
-----
Theorem multnonzero_l: forall a b: F, a*b<>0 -> a<>0.
intros a b H1.
intros H2.
case H1.
rewrite H2.
ring.

*****

*****

+++++
Qed.
-----
Theorem multnonzero_r: forall a b: F, a*b<>0 -> b<>0.
-----
Theorem multnonzero_r: forall a b: F, a*b<>0 -> b<>0.

*****

*****
forall (a b : F) (_ : not (eq (Fmult a b) F0)), not (eq b F0)
+++++
intros a b H1.
-----
Theorem multnonzero_r: forall a b: F, a*b<>0 -> b<>0.
intros a b H1.

*****
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
not (eq b F0)
+++++
intros H2.
-----
Theorem multnonzero_r: forall a b: F, a*b<>0 -> b<>0.
intros a b H1.
intros H2.

*****
H2 : eq b F0
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
False
+++++
case H1.
-----
Theorem multnonzero_r: forall a b: F, a*b<>0 -> b<>0.
intros a b H1.
intros H2.
case H1.

*****
H2 : eq b F0
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
eq (Fmult a b) F0
+++++
rewrite H2.
-----
Theorem multnonzero_r: forall a b: F, a*b<>0 -> b<>0.
intros a b H1.
intros H2.
case H1.
rewrite H2.

*****
H2 : eq b F0
H1 : not (eq (Fmult a b) F0)
a,b : F
*****
eq (Fmult a F0) F0
+++++
ring.
-----
Theorem multnonzero_r: forall a b: F, a*b<>0 -> b<>0.
intros a b H1.
intros H2.
case H1.
rewrite H2.
ring.

*****

*****

+++++
Qed.
-----
Lemma inverse_ratio : forall a b, a<>0 -> b<>0 -> a/b = 1 / (b/a).
-----
Lemma inverse_ratio : forall a b, a<>0 -> b<>0 -> a/b = 1 / (b/a).

*****

*****
forall (a b : F) (_ : not (eq a F0)) (_ : not (eq b F0)), eq (Fdiv a b) (Fdiv F1 (Fdiv b a))
+++++
Proof.
-----
Lemma inverse_ratio : forall a b, a<>0 -> b<>0 -> a/b = 1 / (b/a).
Proof.

*****

*****
forall (a b : F) (_ : not (eq a F0)) (_ : not (eq b F0)), eq (Fdiv a b) (Fdiv F1 (Fdiv b a))
+++++
intros.
-----
Lemma inverse_ratio : forall a b, a<>0 -> b<>0 -> a/b = 1 / (b/a).
Proof.
intros.

*****
H0 : not (eq b F0)
H : not (eq a F0)
a,b : F
*****
eq (Fdiv a b) (Fdiv F1 (Fdiv b a))
+++++
field.
-----
Lemma inverse_ratio : forall a b, a<>0 -> b<>0 -> a/b = 1 / (b/a).
Proof.
intros.
field.

*****
H0 : not (eq b F0)
H : not (eq a F0)
a,b : F
*****
and (not (eq a F0)) (not (eq b F0))
+++++
auto.
-----
Lemma inverse_ratio : forall a b, a<>0 -> b<>0 -> a/b = 1 / (b/a).
Proof.
intros.
field.
auto.

*****

*****

+++++
Qed.
-----
Hint Resolve field_prop_1 field_prop_3 field_prop_4 field_prop_5 opzero\n  nonzeromult nonzerodiv nonzeroinv inverse_ratio : field_hints.
-----
