Require Import Coq.Classes.RelationClasses.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Fixpoint guard A (R : A -> A -> Prop) (n : nat) (wfR : well_founded R)\n  {struct n}: well_founded R :=\n  match n with\n    | 0 => wfR\n    | S n => fun x => Acc_intro x (fun y _ => guard n (guard n wfR) y)\n  end.
-----
Section setoid_fix.
-----
Variables (A : Type) (R : A -> A -> Prop) (Rwf : well_founded R).
-----
Variables (P : A -> Type)\n            (F : forall x : A, (forall y : A, R y x -> P y) -> P x).
-----
Variable r : forall x : A, P x -> P x -> Prop.
-----
Hypothesis Hstep : forall (x : A) (f g : forall y : A, R y x -> P y),\n                       (forall (y : A) (p : R y x), r (f y p) (g y p)) ->\n                       r (@F x f) (@F x g).
-----
Lemma Fix_F_equiv_inv\n  : forall (x : A) (r' s' : Acc R x),\n      r (Fix_F _ F r') (Fix_F _ F s').
-----
Lemma Fix_F_equiv_inv : forall (x : A) (r' s' : Acc R x), r (Fix_F _ F r') (Fix_F _ F s').

*****
Hstep : forall (x : A) (f g : forall (y : A) (_ : R y x), P y)\n (_ : forall (y : A) (p : R y x), r (f y p) (g y p)), \nr (F f) (F g)
r : forall (x : A) (_ : P x) (_ : P x), Prop
F : forall (x : A) (_ : forall (y : A) (_ : R y x), P y), P x
P : forall _ : A, Type
Rwf : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall (x : A) (r' s' : Acc R x), r (Fix_F P F r') (Fix_F P F s')
+++++
Proof.
-----
Lemma Fix_F_equiv_inv : forall (x : A) (r' s' : Acc R x), r (Fix_F _ F r') (Fix_F _ F s').
Proof.

*****
Hstep : forall (x : A) (f g : forall (y : A) (_ : R y x), P y)\n (_ : forall (y : A) (p : R y x), r (f y p) (g y p)), \nr (F f) (F g)
r : forall (x : A) (_ : P x) (_ : P x), Prop
F : forall (x : A) (_ : forall (y : A) (_ : R y x), P y), P x
P : forall _ : A, Type
Rwf : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall (x : A) (r' s' : Acc R x), r (Fix_F P F r') (Fix_F P F s')
+++++
intro x.
-----
Lemma Fix_F_equiv_inv : forall (x : A) (r' s' : Acc R x), r (Fix_F _ F r') (Fix_F _ F s').
Proof.
intro x.

*****
x : A
Hstep : forall (x : A) (f g : forall (y : A) (_ : R y x), P y)\n (_ : forall (y : A) (p : R y x), r (f y p) (g y p)), \nr (F f) (F g)
r : forall (x : A) (_ : P x) (_ : P x), Prop
F : forall (x : A) (_ : forall (y : A) (_ : R y x), P y), P x
P : forall _ : A, Type
Rwf : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall r' s' : Acc R x, r (Fix_F P F r') (Fix_F P F s')
+++++
induction (Rwf x).
-----
Lemma Fix_F_equiv_inv : forall (x : A) (r' s' : Acc R x), r (Fix_F _ F r') (Fix_F _ F s').
Proof.
intro x.
induction (Rwf x).

*****
H0 : forall (y : A) (_ : R y x) (r' s' : Acc R y),\nr (Fix_F P F r') (Fix_F P F s')
H : forall (y : A) (_ : R y x), Acc R y
x : A
Hstep : forall (x : A) (f g : forall (y : A) (_ : R y x), P y)\n (_ : forall (y : A) (p : R y x), r (f y p) (g y p)), \nr (F f) (F g)
r : forall (x : A) (_ : P x) (_ : P x), Prop
F : forall (x : A) (_ : forall (y : A) (_ : R y x), P y), P x
P : forall _ : A, Type
Rwf : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall r' s' : Acc R x, r (Fix_F P F r') (Fix_F P F s')
+++++
intros.
-----
Lemma Fix_F_equiv_inv : forall (x : A) (r' s' : Acc R x), r (Fix_F _ F r') (Fix_F _ F s').
Proof.
intro x.
induction (Rwf x).
intros.

*****
r',s' : Acc R x
H0 : forall (y : A) (_ : R y x) (r' s' : Acc R y),\nr (Fix_F P F r') (Fix_F P F s')
H : forall (y : A) (_ : R y x), Acc R y
x : A
Hstep : forall (x : A) (f g : forall (y : A) (_ : R y x), P y)\n (_ : forall (y : A) (p : R y x), r (f y p) (g y p)), \nr (F f) (F g)
r : forall (x : A) (_ : P x) (_ : P x), Prop
F : forall (x : A) (_ : forall (y : A) (_ : R y x), P y), P x
P : forall _ : A, Type
Rwf : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
r (Fix_F P F r') (Fix_F P F s')
+++++
rewrite <- (Fix_F_eq _ F r').
-----
Lemma Fix_F_equiv_inv : forall (x : A) (r' s' : Acc R x), r (Fix_F _ F r') (Fix_F _ F s').
Proof.
intro x.
induction (Rwf x).
intros.
rewrite <- (Fix_F_eq _ F r').

*****
r',s' : Acc R x
H0 : forall (y : A) (_ : R y x) (r' s' : Acc R y),\nr (Fix_F P F r') (Fix_F P F s')
H : forall (y : A) (_ : R y x), Acc R y
x : A
Hstep : forall (x : A) (f g : forall (y : A) (_ : R y x), P y)\n (_ : forall (y : A) (p : R y x), r (f y p) (g y p)), \nr (F f) (F g)
r : forall (x : A) (_ : P x) (_ : P x), Prop
F : forall (x : A) (_ : forall (y : A) (_ : R y x), P y), P x
P : forall _ : A, Type
Rwf : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
r (F (fun (y : A) (p : R y x) => Fix_F P F (Acc_inv r' p))) (Fix_F P F s')
+++++
rewrite <- (Fix_F_eq _ F s').
-----
Lemma Fix_F_equiv_inv : forall (x : A) (r' s' : Acc R x), r (Fix_F _ F r') (Fix_F _ F s').
Proof.
intro x.
induction (Rwf x).
intros.
rewrite <- (Fix_F_eq _ F r').
rewrite <- (Fix_F_eq _ F s').

*****
r',s' : Acc R x
H0 : forall (y : A) (_ : R y x) (r' s' : Acc R y),\nr (Fix_F P F r') (Fix_F P F s')
H : forall (y : A) (_ : R y x), Acc R y
x : A
Hstep : forall (x : A) (f g : forall (y : A) (_ : R y x), P y)\n (_ : forall (y : A) (p : R y x), r (f y p) (g y p)), \nr (F f) (F g)
r : forall (x : A) (_ : P x) (_ : P x), Prop
F : forall (x : A) (_ : forall (y : A) (_ : R y x), P y), P x
P : forall _ : A, Type
Rwf : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
r (F (fun (y : A) (p : R y x) => Fix_F P F (Acc_inv r' p))) (F (fun (y : A) (p : R y x) => Fix_F P F (Acc_inv s' p)))
+++++
intros.
-----
Lemma Fix_F_equiv_inv : forall (x : A) (r' s' : Acc R x), r (Fix_F _ F r') (Fix_F _ F s').
Proof.
intro x.
induction (Rwf x).
intros.
rewrite <- (Fix_F_eq _ F r').
rewrite <- (Fix_F_eq _ F s').
intros.

*****
r',s' : Acc R x
H0 : forall (y : A) (_ : R y x) (r' s' : Acc R y),\nr (Fix_F P F r') (Fix_F P F s')
H : forall (y : A) (_ : R y x), Acc R y
x : A
Hstep : forall (x : A) (f g : forall (y : A) (_ : R y x), P y)\n (_ : forall (y : A) (p : R y x), r (f y p) (g y p)), \nr (F f) (F g)
r : forall (x : A) (_ : P x) (_ : P x), Prop
F : forall (x : A) (_ : forall (y : A) (_ : R y x), P y), P x
P : forall _ : A, Type
Rwf : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
r (F (fun (y : A) (p : R y x) => Fix_F P F (Acc_inv r' p))) (F (fun (y : A) (p : R y x) => Fix_F P F (Acc_inv s' p)))
+++++
eapply Hstep.
-----
Lemma Fix_F_equiv_inv : forall (x : A) (r' s' : Acc R x), r (Fix_F _ F r') (Fix_F _ F s').
Proof.
intro x.
induction (Rwf x).
intros.
rewrite <- (Fix_F_eq _ F r').
rewrite <- (Fix_F_eq _ F s').
intros.
eapply Hstep.

*****
r',s' : Acc R x
H0 : forall (y : A) (_ : R y x) (r' s' : Acc R y),\nr (Fix_F P F r') (Fix_F P F s')
H : forall (y : A) (_ : R y x), Acc R y
x : A
Hstep : forall (x : A) (f g : forall (y : A) (_ : R y x), P y)\n (_ : forall (y : A) (p : R y x), r (f y p) (g y p)), \nr (F f) (F g)
r : forall (x : A) (_ : P x) (_ : P x), Prop
F : forall (x : A) (_ : forall (y : A) (_ : R y x), P y), P x
P : forall _ : A, Type
Rwf : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall (y : A) (p : R y x), r (Fix_F P F (Acc_inv r' p)) (Fix_F P F (Acc_inv s' p))
+++++
eauto.
-----
Lemma Fix_F_equiv_inv : forall (x : A) (r' s' : Acc R x), r (Fix_F _ F r') (Fix_F _ F s').
Proof.
intro x.
induction (Rwf x).
intros.
rewrite <- (Fix_F_eq _ F r').
rewrite <- (Fix_F_eq _ F s').
intros.
eapply Hstep.
eauto.

*****

*****

+++++
Qed.
-----
Theorem Fix_equiv\n  : forall x : A,\n      r (Fix Rwf P F x) (@F x (fun (y : A) (_ : R y x) => Fix Rwf P F y)).
-----
Theorem Fix_equiv : forall x : A, r (Fix Rwf P F x) (@F x (fun (y : A) (_ : R y x) => Fix Rwf P F y)).

*****
Hstep : forall (x : A) (f g : forall (y : A) (_ : R y x), P y)\n (_ : forall (y : A) (p : R y x), r (f y p) (g y p)), \nr (F f) (F g)
r : forall (x : A) (_ : P x) (_ : P x), Prop
F : forall (x : A) (_ : forall (y : A) (_ : R y x), P y), P x
P : forall _ : A, Type
Rwf : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall x : A, r (Fix Rwf P F x) (F (fun (y : A) (_ : R y x) => Fix Rwf P F y))
+++++
Proof.
-----
Theorem Fix_equiv : forall x : A, r (Fix Rwf P F x) (@F x (fun (y : A) (_ : R y x) => Fix Rwf P F y)).
Proof.

*****
Hstep : forall (x : A) (f g : forall (y : A) (_ : R y x), P y)\n (_ : forall (y : A) (p : R y x), r (f y p) (g y p)), \nr (F f) (F g)
r : forall (x : A) (_ : P x) (_ : P x), Prop
F : forall (x : A) (_ : forall (y : A) (_ : R y x), P y), P x
P : forall _ : A, Type
Rwf : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall x : A, r (Fix Rwf P F x) (F (fun (y : A) (_ : R y x) => Fix Rwf P F y))
+++++
intro x.
-----
Theorem Fix_equiv : forall x : A, r (Fix Rwf P F x) (@F x (fun (y : A) (_ : R y x) => Fix Rwf P F y)).
Proof.
intro x.

*****
x : A
Hstep : forall (x : A) (f g : forall (y : A) (_ : R y x), P y)\n (_ : forall (y : A) (p : R y x), r (f y p) (g y p)), \nr (F f) (F g)
r : forall (x : A) (_ : P x) (_ : P x), Prop
F : forall (x : A) (_ : forall (y : A) (_ : R y x), P y), P x
P : forall _ : A, Type
Rwf : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
r (Fix Rwf P F x) (F (fun (y : A) (_ : R y x) => Fix Rwf P F y))
+++++
unfold Fix.
-----
Theorem Fix_equiv : forall x : A, r (Fix Rwf P F x) (@F x (fun (y : A) (_ : R y x) => Fix Rwf P F y)).
Proof.
intro x.
unfold Fix.

*****
x : A
Hstep : forall (x : A) (f g : forall (y : A) (_ : R y x), P y)\n (_ : forall (y : A) (p : R y x), r (f y p) (g y p)), \nr (F f) (F g)
r : forall (x : A) (_ : P x) (_ : P x), Prop
F : forall (x : A) (_ : forall (y : A) (_ : R y x), P y), P x
P : forall _ : A, Type
Rwf : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
r (Fix_F P F (Rwf x)) (F (fun (y : A) (_ : R y x) => Fix_F P F (Rwf y)))
+++++
rewrite <- Fix_F_eq.
-----
Theorem Fix_equiv : forall x : A, r (Fix Rwf P F x) (@F x (fun (y : A) (_ : R y x) => Fix Rwf P F y)).
Proof.
intro x.
unfold Fix.
rewrite <- Fix_F_eq.

*****
x : A
Hstep : forall (x : A) (f g : forall (y : A) (_ : R y x), P y)\n (_ : forall (y : A) (p : R y x), r (f y p) (g y p)), \nr (F f) (F g)
r : forall (x : A) (_ : P x) (_ : P x), Prop
F : forall (x : A) (_ : forall (y : A) (_ : R y x), P y), P x
P : forall _ : A, Type
Rwf : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
r (F (fun (y : A) (p : R y x) => Fix_F P F (Acc_inv (Rwf x) p))) (F (fun (y : A) (_ : R y x) => Fix_F P F (Rwf y)))
+++++
apply Hstep.
-----
Theorem Fix_equiv : forall x : A, r (Fix Rwf P F x) (@F x (fun (y : A) (_ : R y x) => Fix Rwf P F y)).
Proof.
intro x.
unfold Fix.
rewrite <- Fix_F_eq.
apply Hstep.

*****
x : A
Hstep : forall (x : A) (f g : forall (y : A) (_ : R y x), P y)\n (_ : forall (y : A) (p : R y x), r (f y p) (g y p)), \nr (F f) (F g)
r : forall (x : A) (_ : P x) (_ : P x), Prop
F : forall (x : A) (_ : forall (y : A) (_ : R y x), P y), P x
P : forall _ : A, Type
Rwf : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
forall (y : A) (p : R y x), r (Fix_F P F (Acc_inv (Rwf x) p)) (Fix_F P F (Rwf y))
+++++
intros.
-----
Theorem Fix_equiv : forall x : A, r (Fix Rwf P F x) (@F x (fun (y : A) (_ : R y x) => Fix Rwf P F y)).
Proof.
intro x.
unfold Fix.
rewrite <- Fix_F_eq.
apply Hstep.
intros.

*****
p : R y x
x,y : A
Hstep : forall (x : A) (f g : forall (y : A) (_ : R y x), P y)\n (_ : forall (y : A) (p : R y x), r (f y p) (g y p)), \nr (F f) (F g)
r : forall (x : A) (_ : P x) (_ : P x), Prop
F : forall (x : A) (_ : forall (y : A) (_ : R y x), P y), P x
P : forall _ : A, Type
Rwf : well_founded R
R : forall (_ : A) (_ : A), Prop
A : Type
*****
r (Fix_F P F (Acc_inv (Rwf x) p)) (Fix_F P F (Rwf y))
+++++
apply Fix_F_equiv_inv.
-----
Theorem Fix_equiv : forall x : A, r (Fix Rwf P F x) (@F x (fun (y : A) (_ : R y x) => Fix Rwf P F y)).
Proof.
intro x.
unfold Fix.
rewrite <- Fix_F_eq.
apply Hstep.
intros.
apply Fix_F_equiv_inv.

*****

*****

+++++
Qed.
-----
End setoid_fix.
-----
