Require Import ExtLib.Structures.Monad.
-----
Require Import ExtLib.Structures.Monoid.
-----
Set Universe Polymorphism.
-----
Set Printing Universes.
-----
Class MonadWriter@{d c s} (T : Type@{s}) (M : Monoid T)\n            (m : Type@{d} -> Type@{c}) : Type :=\n{ tell : T -> m unit\n; listen : forall {A : Type@{d}}, m A -> m (A * T)%type\n; pass : forall {A : Type@{d}}, m (A * (T -> T))%type -> m A\n}.
-----
Arguments tell {T MT m _} _ : rename.
-----
Arguments listen {T MT m _ _} _ : rename.
-----
Arguments pass {T MT m _} {_} _ : rename.
-----
Arguments MonadWriter {T} MT _ : rename.
-----
Definition listens@{d c s}\n           {m : Type@{d} -> Type@{c}}\n           {S : Type@{s}}\n           {Monad_m : Monad m}\n           {Monoid_S : Monoid S}\n           {Writer_m : MonadWriter Monoid_S m}\n           {A B : Type@{d}} (f : S -> B) (c : m A) : m (A * B)%type :=\n  liftM (fun x => (fst x, f (snd x))) (listen c).
-----
Definition censor@{d c s}\n           {m : Type@{d} -> Type@{c}}\n           {S : Type@{s}}\n           {Monad_m : Monad m}\n           {Monoid_S : Monoid S}\n           {Writer_m : MonadWriter Monoid_S m}\n           {A : Type@{d}} (f : S -> S) (c : m A) : m A :=\n  pass (liftM (fun x => (x, f)) c).
-----
