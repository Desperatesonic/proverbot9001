Require Export GeoCoq.Elements.OriginalProofs.lemma_ray1.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_raystrict.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_ray4.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_ray5 : \n   forall A B C, \n   Out A B C ->\n   Out A C B.
-----
Lemma lemma_ray5 : forall A B C, Out A B C -> Out A C B.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C : Point) (_ : Out A B C), Out A C B
+++++
Proof.
-----
Lemma lemma_ray5 : forall A B C, Out A B C -> Out A C B.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C : Point) (_ : Out A B C), Out A C B
+++++
intros.
-----
Lemma lemma_ray5 : forall A B C, Out A B C -> Out A C B.
Proof.
intros.

*****
H : Out A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out A C B
+++++
assert ((BetS A C B \/ eq B C \/ BetS A B C)).
-----
Lemma lemma_ray5 : forall A B C, Out A B C -> Out A C B.
Proof.
intros.
assert ((BetS A C B \\/ eq B C \\/ BetS A B C)).

*****
H : Out A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
or (BetS A C B) (or (eq B C) (BetS A B C))
+++++
conclude lemma_ray1.
-----
Lemma lemma_ray5 : forall A B C, Out A B C -> Out A C B.
Proof.
intros.
assert ((BetS A C B \\/ eq B C \\/ BetS A B C)).

*****
H0 : or (BetS A C B) (or (eq B C) (BetS A B C))
H : Out A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out A C B
+++++
idtac.
-----
Lemma lemma_ray5 : forall A B C, Out A B C -> Out A C B.
Proof.
intros.
assert ((BetS A C B \\/ eq B C \\/ BetS A B C)).
idtac.

*****
H0 : or (BetS A C B) (or (eq B C) (BetS A B C))
H : Out A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out A C B
+++++
assert (neq A C).
-----
Lemma lemma_ray5 : forall A B C, Out A B C -> Out A C B.
Proof.
intros.
assert ((BetS A C B \\/ eq B C \\/ BetS A B C)).
idtac.
assert (neq A C).

*****
H0 : or (BetS A C B) (or (eq B C) (BetS A B C))
H : Out A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
neq A C
+++++
conclude lemma_raystrict.
-----
Lemma lemma_ray5 : forall A B C, Out A B C -> Out A C B.
Proof.
intros.
assert ((BetS A C B \\/ eq B C \\/ BetS A B C)).
idtac.
assert (neq A C).

*****
H1 : neq A C
H0 : or (BetS A C B) (or (eq B C) (BetS A B C))
H : Out A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out A C B
+++++
idtac.
-----
Lemma lemma_ray5 : forall A B C, Out A B C -> Out A C B.
Proof.
intros.
assert ((BetS A C B \\/ eq B C \\/ BetS A B C)).
idtac.
assert (neq A C).
idtac.

*****
H1 : neq A C
H0 : or (BetS A C B) (or (eq B C) (BetS A B C))
H : Out A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out A C B
+++++
assert (Out A C B).
-----
Lemma lemma_ray5 : forall A B C, Out A B C -> Out A C B.
Proof.
intros.
assert ((BetS A C B \\/ eq B C \\/ BetS A B C)).
idtac.
assert (neq A C).
idtac.
assert (Out A C B).

*****
H1 : neq A C
H0 : or (BetS A C B) (or (eq B C) (BetS A B C))
H : Out A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out A C B
+++++
conclude lemma_ray4.
-----
Lemma lemma_ray5 : forall A B C, Out A B C -> Out A C B.
Proof.
intros.
assert ((BetS A C B \\/ eq B C \\/ BetS A B C)).
idtac.
assert (neq A C).
idtac.
assert (Out A C B).

*****
H2 : Out A C B
H1 : neq A C
H0 : or (BetS A C B) (or (eq B C) (BetS A B C))
H : Out A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out A C B
+++++
idtac.
-----
Lemma lemma_ray5 : forall A B C, Out A B C -> Out A C B.
Proof.
intros.
assert ((BetS A C B \\/ eq B C \\/ BetS A B C)).
idtac.
assert (neq A C).
idtac.
assert (Out A C B).
idtac.

*****
H2 : Out A C B
H1 : neq A C
H0 : or (BetS A C B) (or (eq B C) (BetS A B C))
H : Out A B C
A,B,C : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out A C B
+++++
close.
-----
Lemma lemma_ray5 : forall A B C, Out A B C -> Out A C B.
Proof.
intros.
assert ((BetS A C B \\/ eq B C \\/ BetS A B C)).

*****

*****

+++++
Qed.
-----
End Euclid.
-----
