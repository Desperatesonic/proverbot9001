Require Export GeoCoq.Highschool.bisector.
-----
Require Export GeoCoq.Tarski_dev.Ch13_1.
-----
Section InCenter.
-----
Context `{TE:Tarski_euclidean}.
-----
Definition is_incenter I A B C :=\n ~ Col A B C /\ CongA B A I I A C /\ CongA A B I I B C /\ CongA A C I I C B.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (Col A B C)), ex (fun I : Tpoint => is_incenter I A B C)
+++++
Proof.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (Col A B C)), ex (fun I : Tpoint => is_incenter I A B C)
+++++
intros A B C HNCOL.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.

*****
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct (bisector_existence A B C) as [IB HCONA].
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].

*****
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
assert_diffs;auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.

*****
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
assert_diffs;auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.

*****
HCONA : and (InAngle IB A B C) (CongA A B IB IB B C)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct (bisector_existence B A C) as [IA HCONB].
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].

*****
HCONA : and (InAngle IB A B C) (CongA A B IB IB B C)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
assert_diffs;auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.

*****
HCONA : and (InAngle IB A B C) (CongA A B IB IB B C)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
assert_diffs;auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.

*****
HCONB : and (InAngle IA B A C) (CongA B A IA IA A C)
IA : Tpoint
HCONA : and (InAngle IB A B C) (CongA A B IB IB B C)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct HCONA as [HBINANGLE HCONGAA].
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].

*****
HCONB : and (InAngle IA B A C) (CongA B A IA IA A C)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HBINANGLE : InAngle IB A B C
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct HCONB as [HAINANGLE HCONGBB].
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].

*****
HCONGBB : CongA B A IA IA A C
HAINANGLE : InAngle IA B A C
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HBINANGLE : InAngle IB A B C
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
unfold InAngle in *.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.

*****
HCONGBB : CongA B A IA IA A C
HAINANGLE : and (not (eq B A))\n (and (not (eq C A))\n (and (not (eq IA A))\n (ex\n (fun X : Tpoint =>\n and (Bet B X C) (or (eq X A) (Out A X IA))))))
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HBINANGLE : and (not (eq A B))\n (and (not (eq C B))\n (and (not (eq IB B))\n (ex\n (fun X : Tpoint =>\n and (Bet A X C) (or (eq X B) (Out B X IB))))))
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].

*****
HCONGBB : CongA B A IA IA A C
HAINANGLE : and (not (eq B A))\n (and (not (eq C A))\n (and (not (eq IA A))\n (ex\n (fun X : Tpoint =>\n and (Bet B X C) (or (eq X A) (Out A X IA))))))
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HBEXI : ex (fun X : Tpoint => and (Bet A X C) (or (eq X B) (Out B X IB)))
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].

*****
HCONGBB : CongA B A IA IA A C
HAEXI : ex (fun X : Tpoint => and (Bet B X C) (or (eq X A) (Out A X IA)))
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HBEXI : ex (fun X : Tpoint => and (Bet A X C) (or (eq X B) (Out B X IB)))
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct HAEXI as [XA HXA].
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].

*****
HCONGBB : CongA B A IA IA A C
HXA : and (Bet B XA C) (or (eq XA A) (Out A XA IA))
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HBEXI : ex (fun X : Tpoint => and (Bet A X C) (or (eq X B) (Out B X IB)))
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct HBEXI as [XB HXB].
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].

*****
HCONGBB : CongA B A IA IA A C
HXA : and (Bet B XA C) (or (eq XA A) (Out A XA IA))
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXB : and (Bet A XB C) (or (eq XB B) (Out B XB IB))
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\ Bet XA X A).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).

*****
HCONGBB : CongA B A IA IA A C
HXA : and (Bet B XA C) (or (eq XA A) (Out A XA IA))
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXB : and (Bet A XB C) (or (eq XB B) (Out B XB IB))
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Bet XB X B) (Bet XA X A))
+++++
apply (inner_pasch A B C XB XA).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).

*****
HCONGBB : CongA B A IA IA A C
HXA : and (Bet B XA C) (or (eq XA A) (Out A XA IA))
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXB : and (Bet A XB C) (or (eq XB B) (Out B XB IB))
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A XB C
+++++
destruct HXB; auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.

*****
HCONGBB : CongA B A IA IA A C
HXA : and (Bet B XA C) (or (eq XA A) (Out A XA IA))
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXB : and (Bet A XB C) (or (eq XB B) (Out B XB IB))
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet B XA C
+++++
destruct HXA; auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.

*****
HXEXISTS : ex (fun X : Tpoint => and (Bet XB X B) (Bet XA X A))
HCONGBB : CongA B A IA IA A C
HXA : and (Bet B XA C) (or (eq XA A) (Out A XA IA))
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXB : and (Bet A XB C) (or (eq XB B) (Out B XB IB))
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct HXEXISTS as [X HX].
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].

*****
HX : and (Bet XB X B) (Bet XA X A)
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXA : and (Bet B XA C) (or (eq XA A) (Out A XA IA))
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXB : and (Bet A XB C) (or (eq XB B) (Out B XB IB))
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct HXB as [HXBBET HXBO].
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].

*****
HX : and (Bet XB X B) (Bet XA X A)
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXA : and (Bet B XA C) (or (eq XA A) (Out A XA IA))
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBO : or (eq XB B) (Out B XB IB)
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct HXA as [HXABET HXAO].
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].

*****
HX : and (Bet XB X B) (Bet XA X A)
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAO : or (eq XA A) (Out A XA IA)
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBO : or (eq XB B) (Out B XB IB)
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct HX as [HXBET1 HXBET2].
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].

*****
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAO : or (eq XA A) (Out A XA IA)
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBO : or (eq XB B) (Out B XB IB)
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct HXAO as [HXAEQ | HXAOUT].
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].

*****
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAEQ : eq XA A
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBO : or (eq XB B) (Out B XB IB)
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
subst.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.

*****
HXBET2 : Bet A X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXABET : Bet B A C
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBO : or (eq XB B) (Out B XB IB)
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
elim HNCOL.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.

*****
HXBET2 : Bet A X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXABET : Bet B A C
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBO : or (eq XB B) (Out B XB IB)
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
assert_diffs;ColR.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.

*****
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBO : or (eq XB B) (Out B XB IB)
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct HXBO as [HXBEQ | HXBOUT].
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].

*****
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBEQ : eq XB B
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
subst.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.

*****
HXBET2 : Bet XA X A
HXBET1 : Bet B X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBBET : Bet A B C
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
elim HNCOL.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.

*****
HXBET2 : Bet XA X A
HXBET1 : Bet B X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBBET : Bet A B C
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
assert_diffs;ColR.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.

*****
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).

*****
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).

*****
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).

*****
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).

*****
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).

*****
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).

*****
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).

*****
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.

*****
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.

*****
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.

*****
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => is_incenter I A B C)
+++++
exists X.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.

*****
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_incenter X A B C
+++++
unfold is_incenter.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.

*****
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (CongA B A X X A C) (and (CongA A B X X B C) (CongA A C X X C B)))
+++++
split.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.

*****
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
assumption.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.

*****
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA B A X X A C) (and (CongA A B X X B C) (CongA A C X X C B))
+++++
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).

*****
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA B A X X A C) (and (CongA A B X X B C) (CongA A C X X C B))
+++++
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).

*****
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA B A X X A C) (and (CongA A B X X B C) (CongA A C X X C B))
+++++
assert (CongA B A X X A C).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).

*****
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA B A X X A C
+++++
apply (out_conga B A IA IA A C B X X C);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
apply (out_conga B A IA IA A C B X X C);auto.

*****
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out A B B
+++++
apply (out_trivial A B);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
apply (out_conga B A IA IA A C B X X C);auto.
apply (out_trivial A B);auto.

*****
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out A C C
+++++
apply (out_trivial A C);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).

*****
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA B A X X A C) (and (CongA A B X X B C) (CongA A C X X C B))
+++++
assert (CongA A B X X B C).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).

*****
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B X X B C
+++++
apply (out_conga A B IB IB B C A X X C);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
apply (out_conga A B IB IB B C A X X C);auto.

*****
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A A
+++++
apply (out_trivial B A);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
apply (out_conga A B IB IB B C A X X C);auto.
apply (out_trivial B A);auto.

*****
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C C
+++++
apply (out_trivial B C);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).

*****
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA B A X X A C) (and (CongA A B X X B C) (CongA A C X X C B))
+++++
assert (Coplanar C A B X) by (exists XB; left; split; Col).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).

*****
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA B A X X A C) (and (CongA A B X X B C) (CongA A C X X C B))
+++++
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).

*****
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA B A X X A C) (and (CongA A B X X B C) (CongA A C X X C B))
+++++
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).

*****
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA B A X X A C) (and (CongA A B X X B C) (CongA A C X X C B))
+++++
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA B A X X A C) (and (CongA A B X X B C) (CongA A C X X C B))
+++++
assert (CongA A C X X C B).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A C X X C B
+++++
apply (perp_equality_bisector A C B X HB HA);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A C B)
+++++
intro;elim HNCOL;Col.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle X A C B
+++++
assert (InAngle X A B C).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle X A B C
+++++
unfold InAngle.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq A B)) (and (not (eq C B)) (and (not (eq X B)) (ex (fun X0 : Tpoint => and (Bet A X0 C) (or (eq X0 B) (Out B X0 X))))))
+++++
repeat split.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
assert_diffs;auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C B)
+++++
assert_diffs;auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X B)
+++++
assert_diffs;auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X0 : Tpoint => and (Bet A X0 C) (or (eq X0 B) (Out B X0 X)))
+++++
exists XB.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet A XB C) (or (eq XB B) (Out B XB X))
+++++
split;auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq XB B) (Out B XB X)
+++++
right.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B XB X
+++++
apply (l6_6 B X XB);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B X XB
+++++
apply (bet_out B X XB);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet B X XB
+++++
assert_diffs;auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.

*****
H18 : not (eq X HC)
H17 : not (eq X HB)
H19 : not (eq X HA)
H15 : not (eq XA A)
H14 : not (eq XB B)
H16 : not (eq C X)
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet B X XB
+++++
Between.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.

*****
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle X A C B
+++++
assert (InAngle X B A C).
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).

*****
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle X B A C
+++++
unfold InAngle.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.

*****
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq B A)) (and (not (eq C A)) (and (not (eq X A)) (ex (fun X0 : Tpoint => and (Bet B X0 C) (or (eq X0 A) (Out A X0 X))))))
+++++
repeat split.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.

*****
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
assert_diffs;auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.

*****
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C A)
+++++
assert_diffs;auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.

*****
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X A)
+++++
assert_diffs;auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.

*****
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X0 : Tpoint => and (Bet B X0 C) (or (eq X0 A) (Out A X0 X)))
+++++
exists XA.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.

*****
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Bet B XA C) (or (eq XA A) (Out A XA X))
+++++
split;auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.

*****
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq XA A) (Out A XA X)
+++++
right.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.

*****
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out A XA X
+++++
apply (l6_6 A X XA);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.
apply (l6_6 A X XA);auto.

*****
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out A X XA
+++++
apply (bet_out A X XA);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.
apply (l6_6 A X XA);auto.
apply (bet_out A X XA);auto.

*****
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A X XA
+++++
assert_diffs;auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.
apply (l6_6 A X XA);auto.
apply (bet_out A X XA);auto.
assert_diffs;auto.

*****
H19 : not (eq X HC)
H18 : not (eq X HB)
H20 : not (eq X HA)
H16 : not (eq XA A)
H15 : not (eq XB B)
H17 : not (eq C X)
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A X XA
+++++
Between.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.
apply (l6_6 A X XA);auto.
apply (bet_out A X XA);auto.
assert_diffs;auto.
Between.

*****
H15 : InAngle X B A C
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle X A C B
+++++
apply (os2__inangle A C B X);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.
apply (l6_6 A X XA);auto.
apply (bet_out A X XA);auto.
assert_diffs;auto.
Between.
apply (os2__inangle A C B X);auto.

*****
H15 : InAngle X B A C
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS C A B X
+++++
apply (one_side_symmetry C A X B);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.
apply (l6_6 A X XA);auto.
apply (bet_out A X XA);auto.
assert_diffs;auto.
Between.
apply (os2__inangle A C B X);auto.
apply (one_side_symmetry C A X B);auto.

*****
H15 : InAngle X B A C
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS C A X B
+++++
apply (in_angle_one_side C A B X);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.
apply (l6_6 A X XA);auto.
apply (bet_out A X XA);auto.
assert_diffs;auto.
Between.
apply (os2__inangle A C B X);auto.
apply (one_side_symmetry C A X B);auto.
apply (in_angle_one_side C A B X);auto.

*****
H15 : InAngle X B A C
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C A B)
+++++
assert_diffs;auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.
apply (l6_6 A X XA);auto.
apply (bet_out A X XA);auto.
assert_diffs;auto.
Between.
apply (os2__inangle A C B X);auto.
apply (one_side_symmetry C A X B);auto.
apply (in_angle_one_side C A B X);auto.
assert_diffs;auto.

*****
H20 : not (eq X HC)
H19 : not (eq X HB)
H21 : not (eq X HA)
H17 : not (eq XA A)
H16 : not (eq XB B)
H18 : not (eq C X)
H15 : InAngle X B A C
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C A B)
+++++
intro; elim HNCOL; Col.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.
apply (l6_6 A X XA);auto.
apply (bet_out A X XA);auto.
assert_diffs;auto.
Between.
apply (os2__inangle A C B X);auto.
apply (one_side_symmetry C A X B);auto.
apply (in_angle_one_side C A B X);auto.
assert_diffs;auto.
intro; elim HNCOL; Col.

*****
H15 : InAngle X B A C
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle X C A B
+++++
apply (l11_24 X B A C);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.
apply (l6_6 A X XA);auto.
apply (bet_out A X XA);auto.
assert_diffs;auto.
Between.
apply (os2__inangle A C B X);auto.
apply (one_side_symmetry C A X B);auto.
apply (in_angle_one_side C A B X);auto.
assert_diffs;auto.
intro; elim HNCOL; Col.
apply (l11_24 X B A C);auto.

*****
H15 : InAngle X B A C
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS C B A X
+++++
apply (one_side_symmetry C B X A);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.
apply (l6_6 A X XA);auto.
apply (bet_out A X XA);auto.
assert_diffs;auto.
Between.
apply (os2__inangle A C B X);auto.
apply (one_side_symmetry C A X B);auto.
apply (in_angle_one_side C A B X);auto.
assert_diffs;auto.
intro; elim HNCOL; Col.
apply (l11_24 X B A C);auto.
apply (one_side_symmetry C B X A);auto.

*****
H15 : InAngle X B A C
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS C B X A
+++++
apply (in_angle_one_side C B A X);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.
apply (l6_6 A X XA);auto.
apply (bet_out A X XA);auto.
assert_diffs;auto.
Between.
apply (os2__inangle A C B X);auto.
apply (one_side_symmetry C A X B);auto.
apply (in_angle_one_side C A B X);auto.
assert_diffs;auto.
intro; elim HNCOL; Col.
apply (l11_24 X B A C);auto.
apply (one_side_symmetry C B X A);auto.
apply (in_angle_one_side C B A X);auto.

*****
H15 : InAngle X B A C
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C B A)
+++++
intro; elim HNCOL; Col.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.
apply (l6_6 A X XA);auto.
apply (bet_out A X XA);auto.
assert_diffs;auto.
Between.
apply (os2__inangle A C B X);auto.
apply (one_side_symmetry C A X B);auto.
apply (in_angle_one_side C A B X);auto.
assert_diffs;auto.
intro; elim HNCOL; Col.
apply (l11_24 X B A C);auto.
apply (one_side_symmetry C B X A);auto.
apply (in_angle_one_side C B A X);auto.
intro; elim HNCOL; Col.

*****
H15 : InAngle X B A C
H14 : InAngle X A B C
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle X C B A
+++++
apply (l11_24 X A B C);auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.
apply (l6_6 A X XA);auto.
apply (bet_out A X XA);auto.
assert_diffs;auto.
Between.
apply (os2__inangle A C B X);auto.
apply (one_side_symmetry C A X B);auto.
apply (in_angle_one_side C A B X);auto.
assert_diffs;auto.
intro; elim HNCOL; Col.
apply (l11_24 X B A C);auto.
apply (one_side_symmetry C B X A);auto.
apply (in_angle_one_side C B A X);auto.
intro; elim HNCOL; Col.
apply (l11_24 X A B C);auto.

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C HB A
+++++
Col.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.
apply (l6_6 A X XA);auto.
apply (bet_out A X XA);auto.
assert_diffs;auto.
Between.
apply (os2__inangle A C B X);auto.
apply (one_side_symmetry C A X B);auto.
apply (in_angle_one_side C A B X);auto.
assert_diffs;auto.
intro; elim HNCOL; Col.
apply (l11_24 X B A C);auto.
apply (one_side_symmetry C B X A);auto.
apply (in_angle_one_side C B A X);auto.
intro; elim HNCOL; Col.
apply (l11_24 X A B C);auto.
Col.

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C HA B
+++++
Col.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
apply (perp_equality_bisector A C B X HB HA);auto.
intro;elim HNCOL;Col.
assert (InAngle X A B C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XB.
split;auto.
right.
apply (l6_6 B X XB);auto.
apply (bet_out B X XB);auto.
assert_diffs;auto.
Between.
assert (InAngle X B A C).
unfold InAngle.
repeat split.
assert_diffs;auto.
assert_diffs;auto.
assert_diffs;auto.
exists XA.
split;auto.
right.
apply (l6_6 A X XA);auto.
apply (bet_out A X XA);auto.
assert_diffs;auto.
Between.
apply (os2__inangle A C B X);auto.
apply (one_side_symmetry C A X B);auto.
apply (in_angle_one_side C A B X);auto.
assert_diffs;auto.
intro; elim HNCOL; Col.
apply (l11_24 X B A C);auto.
apply (one_side_symmetry C B X A);auto.
apply (in_angle_one_side C B A X);auto.
intro; elim HNCOL; Col.
apply (l11_24 X A B C);auto.
Col.
Col.

*****
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C B X HA
+++++
Perp.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).

*****
H14 : CongA A C X X C B
H13 : Cong X HB X HA
H12 : Cong X HC X HA
H11 : Cong X HB X HC
H10 : Coplanar C A B X
H9 : CongA A B X X B C
H8 : CongA B A X X A C
H7 : Out B IB X
H6 : Out A IA X
HAC2 : Perp B C X HA
HAC1 : Col B C HA
HA : Tpoint
HBC2 : Perp A C X HB
HBC1 : Col A C HB
HB : Tpoint
HCC2 : Perp A B X HC
HCC1 : Col A B HC
HC : Tpoint
H5 : not (Col B C X)
H4 : not (Col A C X)
H3 : not (Col A B X)
H2 : not (eq X B)
H1 : not (eq X A)
H0 : not (eq XB A)
H : not (eq XA B)
HXBET2 : Bet XA X A
HXBET1 : Bet XB X B
X : Tpoint
HCONGBB : CongA B A IA IA A C
HXAOUT : Out A XA IA
HXABET : Bet B XA C
XA : Tpoint
HAIAA : not (eq IA A)
HACA : not (eq C A)
HABA : not (eq B A)
IA : Tpoint
HCONGAA : CongA A B IB IB B C
HXBOUT : Out B XB IB
HXBBET : Bet A XB C
XB : Tpoint
HBIBB : not (eq IB B)
HBCB : not (eq C B)
HBAB : not (eq A B)
IB : Tpoint
HNCOL : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA B A X X A C) (and (CongA A B X X B C) (CongA A C X X C B))
+++++
split;auto.
-----
Lemma incenter_exists : forall A B C, ~ Col A B C -> exists I, is_incenter I A B C.
Proof.
intros A B C HNCOL.
destruct (bisector_existence A B C) as [IB HCONA].
assert_diffs;auto.
assert_diffs;auto.
destruct (bisector_existence B A C) as [IA HCONB].
assert_diffs;auto.
assert_diffs;auto.
destruct HCONA as [HBINANGLE HCONGAA].
destruct HCONB as [HAINANGLE HCONGBB].
unfold InAngle in *.
destruct HBINANGLE as [HBAB [HBCB [HBIBB HBEXI]]].
destruct HAINANGLE as [HABA [HACA [HAIAA HAEXI]]].
destruct HAEXI as [XA HXA].
destruct HBEXI as [XB HXB].
assert (HXEXISTS : exists X : Tpoint, Bet XB X B /\\ Bet XA X A).
apply (inner_pasch A B C XB XA).
destruct HXB; auto.
destruct HXA; auto.
destruct HXEXISTS as [X HX].
destruct HXB as [HXBBET HXBO].
destruct HXA as [HXABET HXAO].
destruct HX as [HXBET1 HXBET2].
destruct HXAO as [HXAEQ | HXAOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
destruct HXBO as [HXBEQ | HXBOUT].
subst.
elim HNCOL.
assert_diffs;ColR.
assert (XA <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);Col).
assert (XB <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> A) by (intro;subst;elim HNCOL;col_with_conga).
assert (X <> B) by (intro;subst;assert (Col B A C) by (col_with_conga);elim HNCOL;Col).
assert (~ Col A B X) by (intro;elim HNCOL;col_with_conga).
assert (~ Col A C X) by (intro;assert (Col C A B) by (col_with_conga);elim HNCOL;Col).
assert (~ Col B C X) by (intro;assert (Col C B A) by (col_with_conga);elim HNCOL;Col).
destruct (l8_18_existence A B X) as [HC [HCC1 HCC2]];auto.
destruct (l8_18_existence A C X) as [HB [HBC1 HBC2]];auto.
destruct (l8_18_existence B C X) as [HA [HAC1 HAC2]];auto.
exists X.
unfold is_incenter.
split.
assumption.
assert (Out A IA X) by (assert (Bet A X XA) by (Between); assert (Out A X XA) by (apply (bet_out A X XA);auto;assert_diffs;auto); apply (l6_6 A X IA);auto;apply (l6_7 A X XA IA);auto).
assert (Out B IB X) by (assert (Bet B X XB) by (Between); assert (Out B X XB) by (apply (bet_out B X XB);auto;assert_diffs;auto); apply (l6_6 B X IB);auto;apply (l6_7 B X XB IB);auto).
assert (CongA B A X X A C).
assert (CongA A B X X B C).
assert (Coplanar C A B X) by (exists XB; left; split; Col).
assert (Cong X HB X HC) by (apply (bisector_perp_equality C A B X HB HC);Col;Perp;CongA).
assert (Cong X HC X HA) by (apply (bisector_perp_equality A B C X HC HA);Col;Cop).
assert (Cong X HB X HA) by (apply (cong_transitivity X HB X HC X HA);auto).
assert (CongA A C X X C B).
split;auto.

*****

*****

+++++
Qed.
-----
Lemma incenter_permut132 : forall A B C I, is_incenter I A B C -> is_incenter I A C B.
-----
Lemma incenter_permut132 : forall A B C I, is_incenter I A B C -> is_incenter I A C B.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I : Tpoint) (_ : is_incenter I A B C), is_incenter I A C B
+++++
Proof.
-----
Lemma incenter_permut132 : forall A B C I, is_incenter I A B C -> is_incenter I A C B.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I : Tpoint) (_ : is_incenter I A B C), is_incenter I A C B
+++++
intros A B C I HIABC.
-----
Lemma incenter_permut132 : forall A B C I, is_incenter I A B C -> is_incenter I A C B.
Proof.
intros A B C I HIABC.

*****
HIABC : is_incenter I A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_incenter I A C B
+++++
unfold is_incenter in *.
-----
Lemma incenter_permut132 : forall A B C I, is_incenter I A B C -> is_incenter I A C B.
Proof.
intros A B C I HIABC.
unfold is_incenter in *.

*****
HIABC : and (not (Col A B C))\n (and (CongA B A I I A C)\n (and (CongA A B I I B C) (CongA A C I I C B)))
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A C B)) (and (CongA C A I I A B) (and (CongA A C I I C B) (CongA A B I I B C)))
+++++
destruct HIABC as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].
-----
Lemma incenter_permut132 : forall A B C I, is_incenter I A B C -> is_incenter I A C B.
Proof.
intros A B C I HIABC.
unfold is_incenter in *.
destruct HIABC as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGAA : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A C B)) (and (CongA C A I I A B) (and (CongA A C I I C B) (CongA A B I I B C)))
+++++
split.
-----
Lemma incenter_permut132 : forall A B C I, is_incenter I A B C -> is_incenter I A C B.
Proof.
intros A B C I HIABC.
unfold is_incenter in *.
destruct HIABC as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].
split.

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGAA : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A C B)
+++++
intro.
-----
Lemma incenter_permut132 : forall A B C I, is_incenter I A B C -> is_incenter I A C B.
Proof.
intros A B C I HIABC.
unfold is_incenter in *.
destruct HIABC as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].
split.
intro.

*****
H : Col A C B
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGAA : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma incenter_permut132 : forall A B C I, is_incenter I A B C -> is_incenter I A C B.
Proof.
intros A B C I HIABC.
unfold is_incenter in *.
destruct HIABC as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].
split.

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGAA : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA C A I I A B) (and (CongA A C I I C B) (CongA A B I I B C))
+++++
split.
-----
Lemma incenter_permut132 : forall A B C I, is_incenter I A B C -> is_incenter I A C B.
Proof.
intros A B C I HIABC.
unfold is_incenter in *.
destruct HIABC as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].
split.
split.

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGAA : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA C A I I A B
+++++
CongA.
-----
Lemma incenter_permut132 : forall A B C I, is_incenter I A B C -> is_incenter I A C B.
Proof.
intros A B C I HIABC.
unfold is_incenter in *.
destruct HIABC as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].
split.
split.

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGAA : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA A C I I C B) (CongA A B I I B C)
+++++
CongA.
-----
Lemma incenter_permut132 : forall A B C I, is_incenter I A B C -> is_incenter I A C B.
Proof.
intros A B C I HIABC.
unfold is_incenter in *.
destruct HIABC as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].
split.

*****

*****

+++++
Qed.
-----
Lemma incenter_permut213 : forall A B C I, is_incenter I A B C -> is_incenter I B A C.
-----
Lemma incenter_permut213 : forall A B C I, is_incenter I A B C -> is_incenter I B A C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I : Tpoint) (_ : is_incenter I A B C), is_incenter I B A C
+++++
Proof.
-----
Lemma incenter_permut213 : forall A B C I, is_incenter I A B C -> is_incenter I B A C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I : Tpoint) (_ : is_incenter I A B C), is_incenter I B A C
+++++
intros A B C I HIABC.
-----
Lemma incenter_permut213 : forall A B C I, is_incenter I A B C -> is_incenter I B A C.
Proof.
intros A B C I HIABC.

*****
HIABC : is_incenter I A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_incenter I B A C
+++++
unfold is_incenter in *.
-----
Lemma incenter_permut213 : forall A B C I, is_incenter I A B C -> is_incenter I B A C.
Proof.
intros A B C I HIABC.
unfold is_incenter in *.

*****
HIABC : and (not (Col A B C))\n (and (CongA B A I I A C)\n (and (CongA A B I I B C) (CongA A C I I C B)))
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col B A C)) (and (CongA A B I I B C) (and (CongA B A I I A C) (CongA B C I I C A)))
+++++
destruct HIABC as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].
-----
Lemma incenter_permut213 : forall A B C I, is_incenter I A B C -> is_incenter I B A C.
Proof.
intros A B C I HIABC.
unfold is_incenter in *.
destruct HIABC as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGAA : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col B A C)) (and (CongA A B I I B C) (and (CongA B A I I A C) (CongA B C I I C A)))
+++++
split.
-----
Lemma incenter_permut213 : forall A B C I, is_incenter I A B C -> is_incenter I B A C.
Proof.
intros A B C I HIABC.
unfold is_incenter in *.
destruct HIABC as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].
split.

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGAA : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B A C)
+++++
intro.
-----
Lemma incenter_permut213 : forall A B C I, is_incenter I A B C -> is_incenter I B A C.
Proof.
intros A B C I HIABC.
unfold is_incenter in *.
destruct HIABC as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].
split.
intro.

*****
H : Col B A C
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGAA : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
Col.
-----
Lemma incenter_permut213 : forall A B C I, is_incenter I A B C -> is_incenter I B A C.
Proof.
intros A B C I HIABC.
unfold is_incenter in *.
destruct HIABC as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].
split.

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGAA : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA A B I I B C) (and (CongA B A I I A C) (CongA B C I I C A))
+++++
split.
-----
Lemma incenter_permut213 : forall A B C I, is_incenter I A B C -> is_incenter I B A C.
Proof.
intros A B C I HIABC.
unfold is_incenter in *.
destruct HIABC as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].
split.
split.

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGAA : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B I I B C
+++++
CongA.
-----
Lemma incenter_permut213 : forall A B C I, is_incenter I A B C -> is_incenter I B A C.
Proof.
intros A B C I HIABC.
unfold is_incenter in *.
destruct HIABC as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].
split.
split.

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGAA : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA B A I I A C) (CongA B C I I C A)
+++++
CongA.
-----
Lemma incenter_permut213 : forall A B C I, is_incenter I A B C -> is_incenter I B A C.
Proof.
intros A B C I HIABC.
unfold is_incenter in *.
destruct HIABC as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].
split.

*****

*****

+++++
Qed.
-----
Lemma incenter_permut231 : forall A B C I, is_incenter I A B C -> is_incenter I B C A.
-----
Lemma incenter_permut231 : forall A B C I, is_incenter I A B C -> is_incenter I B C A.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I : Tpoint) (_ : is_incenter I A B C), is_incenter I B C A
+++++
Proof.
-----
Lemma incenter_permut231 : forall A B C I, is_incenter I A B C -> is_incenter I B C A.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I : Tpoint) (_ : is_incenter I A B C), is_incenter I B C A
+++++
intros A B C I HIABC.
-----
Lemma incenter_permut231 : forall A B C I, is_incenter I A B C -> is_incenter I B C A.
Proof.
intros A B C I HIABC.

*****
HIABC : is_incenter I A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_incenter I B C A
+++++
apply (incenter_permut132 B A C I).
-----
Lemma incenter_permut231 : forall A B C I, is_incenter I A B C -> is_incenter I B C A.
Proof.
intros A B C I HIABC.
apply (incenter_permut132 B A C I).

*****
HIABC : is_incenter I A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_incenter I B A C
+++++
auto.
-----
Lemma incenter_permut231 : forall A B C I, is_incenter I A B C -> is_incenter I B C A.
Proof.
intros A B C I HIABC.
apply (incenter_permut132 B A C I).
auto.

*****
HIABC : is_incenter I A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_incenter I B A C
+++++
apply (incenter_permut213 A B C I).
-----
Lemma incenter_permut231 : forall A B C I, is_incenter I A B C -> is_incenter I B C A.
Proof.
intros A B C I HIABC.
apply (incenter_permut132 B A C I).
auto.
apply (incenter_permut213 A B C I).

*****
HIABC : is_incenter I A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_incenter I A B C
+++++
auto.
-----
Lemma incenter_permut231 : forall A B C I, is_incenter I A B C -> is_incenter I B C A.
Proof.
intros A B C I HIABC.
apply (incenter_permut132 B A C I).
auto.
apply (incenter_permut213 A B C I).
auto.

*****

*****

+++++
Qed.
-----
Lemma incenter_permut312 : forall A B C I, is_incenter I A B C -> is_incenter I C A B.
-----
Lemma incenter_permut312 : forall A B C I, is_incenter I A B C -> is_incenter I C A B.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I : Tpoint) (_ : is_incenter I A B C), is_incenter I C A B
+++++
Proof.
-----
Lemma incenter_permut312 : forall A B C I, is_incenter I A B C -> is_incenter I C A B.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I : Tpoint) (_ : is_incenter I A B C), is_incenter I C A B
+++++
intros A B C I HIABC.
-----
Lemma incenter_permut312 : forall A B C I, is_incenter I A B C -> is_incenter I C A B.
Proof.
intros A B C I HIABC.

*****
HIABC : is_incenter I A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_incenter I C A B
+++++
apply (incenter_permut213 A C B I).
-----
Lemma incenter_permut312 : forall A B C I, is_incenter I A B C -> is_incenter I C A B.
Proof.
intros A B C I HIABC.
apply (incenter_permut213 A C B I).

*****
HIABC : is_incenter I A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_incenter I A C B
+++++
auto.
-----
Lemma incenter_permut312 : forall A B C I, is_incenter I A B C -> is_incenter I C A B.
Proof.
intros A B C I HIABC.
apply (incenter_permut213 A C B I).
auto.

*****
HIABC : is_incenter I A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_incenter I A C B
+++++
apply (incenter_permut132 A B C I).
-----
Lemma incenter_permut312 : forall A B C I, is_incenter I A B C -> is_incenter I C A B.
Proof.
intros A B C I HIABC.
apply (incenter_permut213 A C B I).
auto.
apply (incenter_permut132 A B C I).

*****
HIABC : is_incenter I A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_incenter I A B C
+++++
auto.
-----
Lemma incenter_permut312 : forall A B C I, is_incenter I A B C -> is_incenter I C A B.
Proof.
intros A B C I HIABC.
apply (incenter_permut213 A C B I).
auto.
apply (incenter_permut132 A B C I).
auto.

*****

*****

+++++
Qed.
-----
Lemma incenter_permut321 : forall A B C I, is_incenter I A B C -> is_incenter I C B A.
-----
Lemma incenter_permut321 : forall A B C I, is_incenter I A B C -> is_incenter I C B A.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I : Tpoint) (_ : is_incenter I A B C), is_incenter I C B A
+++++
Proof.
-----
Lemma incenter_permut321 : forall A B C I, is_incenter I A B C -> is_incenter I C B A.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C I : Tpoint) (_ : is_incenter I A B C), is_incenter I C B A
+++++
intros A B C I HIABC.
-----
Lemma incenter_permut321 : forall A B C I, is_incenter I A B C -> is_incenter I C B A.
Proof.
intros A B C I HIABC.

*****
HIABC : is_incenter I A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_incenter I C B A
+++++
apply (incenter_permut312 B A C I).
-----
Lemma incenter_permut321 : forall A B C I, is_incenter I A B C -> is_incenter I C B A.
Proof.
intros A B C I HIABC.
apply (incenter_permut312 B A C I).

*****
HIABC : is_incenter I A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_incenter I B A C
+++++
auto.
-----
Lemma incenter_permut321 : forall A B C I, is_incenter I A B C -> is_incenter I C B A.
Proof.
intros A B C I HIABC.
apply (incenter_permut312 B A C I).
auto.

*****
HIABC : is_incenter I A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_incenter I B A C
+++++
apply (incenter_permut213 A B C).
-----
Lemma incenter_permut321 : forall A B C I, is_incenter I A B C -> is_incenter I C B A.
Proof.
intros A B C I HIABC.
apply (incenter_permut312 B A C I).
auto.
apply (incenter_permut213 A B C).

*****
HIABC : is_incenter I A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_incenter I A B C
+++++
auto.
-----
Lemma incenter_permut321 : forall A B C I, is_incenter I A B C -> is_incenter I C B A.
Proof.
intros A B C I HIABC.
apply (incenter_permut312 B A C I).
auto.
apply (incenter_permut213 A B C).
auto.

*****

*****

+++++
Qed.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \/ ~ is_incenter I A B C.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall A B C I : Tpoint, or (is_incenter I A B C) (not (is_incenter I A B C))
+++++
Proof.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall A B C I : Tpoint, or (is_incenter I A B C) (not (is_incenter I A B C))
+++++
intros A B C I.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.

*****
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (is_incenter I A B C) (not (is_incenter I A B C))
+++++
destruct (col_dec A B C) as [HCOL | HNCOL].
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].

*****
HCOL : Col A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (is_incenter I A B C) (not (is_incenter I A B C))
+++++
right.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
right.

*****
HCOL : Col A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (is_incenter I A B C)
+++++
unfold is_incenter.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
right.
unfold is_incenter.

*****
HCOL : Col A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B))))
+++++
intro HCOLIN.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
right.
unfold is_incenter.
intro HCOLIN.

*****
HCOLIN : and (not (Col A B C))\n (and (CongA B A I I A C)\n (and (CongA A B I I B C) (CongA A C I I C B)))
HCOL : Col A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HCOLIN as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
right.
unfold is_incenter.
intro HCOLIN.
destruct HCOLIN as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGAA : CongA B A I I A C
HNCOL : not (Col A B C)
HCOL : Col A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim HNCOL.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
right.
unfold is_incenter.
intro HCOLIN.
destruct HCOLIN as [HNCOL [HCONGAA [HCONGAB HCONGAC]]].
elim HNCOL.

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGAA : CongA B A I I A C
HNCOL : not (Col A B C)
HCOL : Col A B C
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
auto.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].

*****
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (is_incenter I A B C) (not (is_incenter I A B C))
+++++
unfold is_incenter.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.

*****
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B)))) (not (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B)))))
+++++
destruct (conga_dec B A I I A C) as [HAC | HANC].
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].

*****
HAC : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B)))) (not (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B)))))
+++++
destruct (conga_dec A B I I B C) as [HBC | HBNC].
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
destruct (conga_dec A B I I B C) as [HBC | HBNC].

*****
HBC : CongA A B I I B C
HAC : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B)))) (not (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B)))))
+++++
destruct (conga_dec A C I I C B) as [HCC | HCNC].
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
destruct (conga_dec A B I I B C) as [HBC | HBNC].
destruct (conga_dec A C I I C B) as [HCC | HCNC].

*****
HCC : CongA A C I I C B
HBC : CongA A B I I B C
HAC : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B)))) (not (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B)))))
+++++
left.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
destruct (conga_dec A B I I B C) as [HBC | HBNC].
destruct (conga_dec A C I I C B) as [HCC | HCNC].
left.

*****
HCC : CongA A C I I C B
HBC : CongA A B I I B C
HAC : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B)))
+++++
split.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
destruct (conga_dec A B I I B C) as [HBC | HBNC].
destruct (conga_dec A C I I C B) as [HCC | HCNC].
left.
split.

*****
HCC : CongA A C I I C B
HBC : CongA A B I I B C
HAC : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
auto.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
destruct (conga_dec A B I I B C) as [HBC | HBNC].
destruct (conga_dec A C I I C B) as [HCC | HCNC].
left.
split.

*****
HCC : CongA A C I I C B
HBC : CongA A B I I B C
HAC : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B))
+++++
auto.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
destruct (conga_dec A B I I B C) as [HBC | HBNC].
destruct (conga_dec A C I I C B) as [HCC | HCNC].

*****
HCNC : not (CongA A C I I C B)
HBC : CongA A B I I B C
HAC : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B)))) (not (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B)))))
+++++
right.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
destruct (conga_dec A B I I B C) as [HBC | HBNC].
destruct (conga_dec A C I I C B) as [HCC | HCNC].
right.

*****
HCNC : not (CongA A C I I C B)
HBC : CongA A B I I B C
HAC : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B))))
+++++
intro HN.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
destruct (conga_dec A B I I B C) as [HBC | HBNC].
destruct (conga_dec A C I I C B) as [HCC | HCNC].
right.
intro HN.

*****
HN : and (not (Col A B C))\n (and (CongA B A I I A C)\n (and (CongA A B I I B C) (CongA A C I I C B)))
HCNC : not (CongA A C I I C B)
HBC : CongA A B I I B C
HAC : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HN as [HNCOL1 [HCONGA [HCONGAB HCONGAC]]].
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
destruct (conga_dec A B I I B C) as [HBC | HBNC].
destruct (conga_dec A C I I C B) as [HCC | HCNC].
right.
intro HN.
destruct HN as [HNCOL1 [HCONGA [HCONGAB HCONGAC]]].

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGA : CongA B A I I A C
HNCOL1 : not (Col A B C)
HCNC : not (CongA A C I I C B)
HBC : CongA A B I I B C
HAC : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim HCNC.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
destruct (conga_dec A B I I B C) as [HBC | HBNC].
destruct (conga_dec A C I I C B) as [HCC | HCNC].
right.
intro HN.
destruct HN as [HNCOL1 [HCONGA [HCONGAB HCONGAC]]].
elim HCNC.

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGA : CongA B A I I A C
HNCOL1 : not (Col A B C)
HCNC : not (CongA A C I I C B)
HBC : CongA A B I I B C
HAC : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A C I I C B
+++++
auto.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
destruct (conga_dec A B I I B C) as [HBC | HBNC].

*****
HBNC : not (CongA A B I I B C)
HAC : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B)))) (not (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B)))))
+++++
right.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
destruct (conga_dec A B I I B C) as [HBC | HBNC].
right.

*****
HBNC : not (CongA A B I I B C)
HAC : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B))))
+++++
intro HN.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
destruct (conga_dec A B I I B C) as [HBC | HBNC].
right.
intro HN.

*****
HN : and (not (Col A B C))\n (and (CongA B A I I A C)\n (and (CongA A B I I B C) (CongA A C I I C B)))
HBNC : not (CongA A B I I B C)
HAC : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HN as [HNCOL1 [HCONGA [HCONGAB HCONGAC]]].
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
destruct (conga_dec A B I I B C) as [HBC | HBNC].
right.
intro HN.
destruct HN as [HNCOL1 [HCONGA [HCONGAB HCONGAC]]].

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGA : CongA B A I I A C
HNCOL1 : not (Col A B C)
HBNC : not (CongA A B I I B C)
HAC : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim HBNC.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
destruct (conga_dec A B I I B C) as [HBC | HBNC].
right.
intro HN.
destruct HN as [HNCOL1 [HCONGA [HCONGAB HCONGAC]]].
elim HBNC.

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGA : CongA B A I I A C
HNCOL1 : not (Col A B C)
HBNC : not (CongA A B I I B C)
HAC : CongA B A I I A C
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B I I B C
+++++
CongA.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].

*****
HANC : not (CongA B A I I A C)
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B)))) (not (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B)))))
+++++
right.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
right.

*****
HANC : not (CongA B A I I A C)
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (and (not (Col A B C)) (and (CongA B A I I A C) (and (CongA A B I I B C) (CongA A C I I C B))))
+++++
intro HN.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
right.
intro HN.

*****
HN : and (not (Col A B C))\n (and (CongA B A I I A C)\n (and (CongA A B I I B C) (CongA A C I I C B)))
HANC : not (CongA B A I I A C)
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HN as [HNCOL1 [HCONGA [HCONGAB HCONGAC]]].
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
right.
intro HN.
destruct HN as [HNCOL1 [HCONGA [HCONGAB HCONGAC]]].

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGA : CongA B A I I A C
HNCOL1 : not (Col A B C)
HANC : not (CongA B A I I A C)
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim HANC.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].
unfold is_incenter.
destruct (conga_dec B A I I A C) as [HAC | HANC].
right.
intro HN.
destruct HN as [HNCOL1 [HCONGA [HCONGAB HCONGAC]]].
elim HANC.

*****
HCONGAC : CongA A C I I C B
HCONGAB : CongA A B I I B C
HCONGA : CongA B A I I A C
HNCOL1 : not (Col A B C)
HANC : not (CongA B A I I A C)
HNCOL : not (Col A B C)
A,B,C,I : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA B A I I A C
+++++
auto.
-----
Lemma incenter_dec : forall A B C I, is_incenter I A B C \\/ ~ is_incenter I A B C.
Proof.
intros A B C I.
destruct (col_dec A B C) as [HCOL | HNCOL].

*****

*****

+++++
Qed.
-----
End InCenter.
-----
