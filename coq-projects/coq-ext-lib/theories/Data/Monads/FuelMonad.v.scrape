Require Import ExtLib.Structures.Monads.
-----
From Coq Require Import BinPos.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Inductive FixResult (T : Type) :=\n| Term : T -> FixResult T\n| Diverge : FixResult T.
-----
Arguments Diverge {_}.
-----
Arguments Term {_} _.
-----
Section gfix.
-----
Inductive GFix (T : Type) : Type := mkGFix\n  { runGFix : N -> FixResult T }.
-----
Global Instance MonadFix_GFix : MonadFix GFix :=\n  { mfix := fun T U f v => mkGFix (fun n : N => \n    match n with\n      | N0 => Diverge\n      | Npos g => \n        let F := fix rec (acc : T -> FixResult U) (gas : positive) (x : T) \n          : FixResult U :=\n          match gas return FixResult U with\n            | xI p => \n              runGFix (f (fun x => mkGFix (fun n => rec (fun x => rec acc p x) p x)) x) n\n            | xO p => \n              rec (fun x => rec acc p x) p x\n            | xH => runGFix (f (fun x => mkGFix (fun _ => acc x)) x) n\n          end\n        in F (fun x => runGFix (f (fun _ => mkGFix (fun _ => Diverge)) x) n) g v\n      end)\n  }.
-----
Global Instance Monad_GFix : Monad GFix :=\n  { ret := fun _ v => mkGFix (fun _ => Term v)\n  ; bind := fun _ _ c1 c2 =>\n    mkGFix (fun gas =>\n      match runGFix c1 gas with\n        | Diverge => Diverge\n        | Term v => runGFix (c2 v) gas\n      end)\n  }.
-----
End gfix.
-----
