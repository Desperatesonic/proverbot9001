Require Import Coq.Lists.List.
-----
Require Import ExtLib.Data.Member.
-----
Require Import ExtLib.Data.HList.
-----
Require Import ExtLib.Generic.Func.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Fixpoint hlist_to_tuple ps (h : hlist (fun x : Type => x) ps) : asTuple ps :=\n  match h in hlist _ ps return asTuple ps with\n    | Hnil => tt\n    | Hcons x h => (x,hlist_to_tuple h)\n  end.
-----
Inductive itype (ps : list Type) : Type :=\n| Inj : Type -> itype ps\n| Rec : hlist (fun x => x) ps -> itype ps\n| Sum : itype ps -> itype ps -> itype ps\n| Prod : itype ps -> itype ps -> itype ps\n| Sig : forall T : Type, (T -> itype ps) -> itype ps\n| Pi : forall T : Type, (T -> itype ps) -> itype ps\n| Get : forall T : Type, member T ps -> (T -> itype ps) -> itype ps\n| Unf : forall T : Type, member T ps -> T -> itype ps -> itype ps.
-----
Definition Unit {ps} := @Inj ps unit.
-----
Section denote.
-----
Variable (ps : list Type).
-----
Fixpoint itypeD (i : itype ps) {struct i}\n  : asFunc ps Type -> asFunc ps Type :=\n    match i return asFunc ps Type -> asFunc ps Type with\n      | Get pf f => fun F => @get ps _ _ pf (fun x => itypeD (f x) F)\n      | Inj _ T => fun _ => const T\n      | Rec h => fun F => const (applyF F (hlist_to_tuple h))\n      | @Sig _ t f => fun F =>\n                     @under _ _ (fun App => @sigT t (fun x' => App _ (itypeD (f x') F)))\n      | @Pi _ t f => fun F =>\n                     @under _ _ (fun App => forall x' : t, App _ (itypeD (f x') F))\n      | Sum a b => fun F => combine sum ps (itypeD a F) (itypeD b F)\n      | Prod a b => fun F => combine prod ps (itypeD a F) (itypeD b F)\n      | @Unf _ T pf v i => fun F =>\n                          @get ps _ _ pf (fun x => combine prod _ (const (x = v : Type)) (replace pf v (itypeD i F)))\n    end%type.
-----
End denote.
-----
Section _match.
-----
Variable ps : list Type.
-----
Variable RecT : asFunc ps Type.
-----
Fixpoint cases (i : itype ps) (k : asFunc ps Type -> asFunc ps Type)\n           {struct i} : asFunc ps Type :=\n    match i with\n      | Inj _ T => k (const T)\n      | Sum a b => combine prod ps (cases a k) (cases b k)\n      | Prod a b =>\n        cases a (fun A => cases b (fun B =>\n                                       under _ _ (fun App => App _ A -> App _ (k B))))\n      | Rec ps => k (const (applyF RecT (hlist_to_tuple ps)))\n      | @Get _ T m f => @get _ _ _ m (fun x => cases (f x) k)\n      | @Sig _ t f => @under _ _ (fun App => forall x' : t, (App _ (cases (f x') k)))\n      | @Pi _ t f => @under _ _ (fun App => @sigT t (fun x' => App _ (cases (f x') k)))\n      | @Unf _ T pf v i => replace pf v (cases i k)\n    end.
-----
End _match.
-----
Fixpoint asPiE ps {struct ps}\n: forall (F : _)\n         (G : forall x : (forall U, asFunc ps U -> U), F x),\n         asPi ps F :=\n  match ps as ps\n        return forall F : (forall U : Type, asFunc ps U -> U) -> Type,\n                 (forall x : forall U : Type, asFunc ps U -> U, F x) -> asPi ps F\n  with\n    | nil => fun _ G => G _\n    | p :: ps => fun _ G => fun x => asPiE _ _ (fun x' => G _)\n  end.
-----
Fixpoint asPi_combine ps {struct ps}\n: forall (F G : _),\n    asPi ps (fun App => F App -> G App) ->\n    asPi ps F -> asPi ps G :=\n  match ps as ps\n        return forall F G : (forall U : Type, asFunc ps U -> U) -> Type,\n                 asPi ps (fun App : forall U : Type, asFunc ps U -> U => F App -> G App) ->\n                 asPi ps F -> asPi ps G\n  with\n    | nil => fun _ _ a b => a b\n    | p :: ps => fun _ _ a b x => asPi_combine _ _ _ (a x) (b x)\n  end.
-----
