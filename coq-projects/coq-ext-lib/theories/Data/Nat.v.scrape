Require Coq.Arith.Arith.
-----
Require Import ExtLib.Core.RelDec.
-----
Require Import ExtLib.Core.Type.
-----
Require Import ExtLib.Structures.Monoid.
-----
Require Import ExtLib.Tactics.Consider.
-----
Require Import ExtLib.Tactics.Injection.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Global Instance RelDec_eq : RelDec (@eq nat) :=\n{ rel_dec := EqNat.beq_nat }.
-----
Global Instance type_nat : type nat :=\n{ equal := @eq nat\n; proper := fun _ => True\n}.
-----
Global Instance typeOk_nat : typeOk type_nat.
-----
Global Instance typeOk_nat : typeOk type_nat.

*****

*****
typeOk type_nat
+++++
Proof.
-----
Global Instance typeOk_nat : typeOk type_nat.
Proof.

*****

*****
typeOk type_nat
+++++
constructor.
-----
Global Instance typeOk_nat : typeOk type_nat.
Proof.
constructor.

*****

*****
forall (x y : nat) (_ : equal x y), and (proper x) (proper y)
+++++
compute.
-----
Global Instance typeOk_nat : typeOk type_nat.
Proof.
constructor.
compute.

*****

*****
forall (x y : nat) (_ : eq x y), and True True
+++++
auto.
-----
Global Instance typeOk_nat : typeOk type_nat.
Proof.
constructor.

*****

*****
Proper.PReflexive proper equal
+++++
compute.
-----
Global Instance typeOk_nat : typeOk type_nat.
Proof.
constructor.
compute.

*****

*****
forall (x : nat) (_ : True), eq x x
+++++
auto.
-----
Global Instance typeOk_nat : typeOk type_nat.
Proof.
constructor.

*****

*****
RelationClasses.Symmetric equal
+++++
compute.
-----
Global Instance typeOk_nat : typeOk type_nat.
Proof.
constructor.
compute.

*****

*****
forall (x y : nat) (_ : eq x y), eq y x
+++++
auto.
-----
Global Instance typeOk_nat : typeOk type_nat.
Proof.
constructor.

*****

*****
RelationClasses.Transitive equal
+++++
compute.
-----
Global Instance typeOk_nat : typeOk type_nat.
Proof.
constructor.
compute.

*****

*****
forall (x y z : nat) (_ : eq x y) (_ : eq y z), eq x z
+++++
intros.
-----
Global Instance typeOk_nat : typeOk type_nat.
Proof.
constructor.
compute.
intros.

*****
H0 : eq y z
H : eq x y
x,y,z : nat
*****
eq x z
+++++
etransitivity.
-----
Global Instance typeOk_nat : typeOk type_nat.
Proof.
constructor.
compute.
intros.
etransitivity.

*****
H0 : eq y z
H : eq x y
x,y,z : nat
*****
eq x ?y
+++++
eauto.
-----
Global Instance typeOk_nat : typeOk type_nat.
Proof.
constructor.
compute.
intros.
etransitivity.

*****
H0 : eq y z
H : eq x y
x,y,z : nat
*****
eq y z
+++++
eauto.
-----
Global Instance typeOk_nat : typeOk type_nat.
Proof.
constructor.

*****

*****

+++++
Qed.
-----
Global Instance nat_proper (n : nat) : proper n.
-----
Global Instance nat_proper (n : nat) : proper n.

*****
n : nat
*****
proper n
+++++
Proof.
-----
Global Instance nat_proper (n : nat) : proper n.
Proof.

*****
n : nat
*****
proper n
+++++
exact I.
-----
Global Instance nat_proper (n : nat) : proper n.
Proof.
exact I.

*****

*****

+++++
Qed.
-----
Require Coq.Numbers.Natural.Peano.NPeano.
-----
Global Instance RelDec_lt : RelDec lt :=\n{ rel_dec := NPeano.Nat.ltb }.
-----
Global Instance RelDec_le : RelDec le :=\n{ rel_dec := NPeano.Nat.leb }.
-----
Global Instance RelDec_gt : RelDec gt :=\n{ rel_dec := fun x y => NPeano.Nat.ltb y x }.
-----
Global Instance RelDec_ge : RelDec ge :=\n{ rel_dec := fun x y => NPeano.Nat.leb y x }.
-----
Global Instance RelDecCorrect_eq : RelDec_Correct RelDec_eq.
-----
Global Instance RelDecCorrect_eq : RelDec_Correct RelDec_eq.

*****

*****
RelDec_Correct RelDec_eq
+++++
Proof.
-----
Global Instance RelDecCorrect_eq : RelDec_Correct RelDec_eq.
Proof.

*****

*****
RelDec_Correct RelDec_eq
+++++
constructor.
-----
Global Instance RelDecCorrect_eq : RelDec_Correct RelDec_eq.
Proof.
constructor.

*****

*****
forall x y : nat, iff (eq (rel_dec x y) true) (eq x y)
+++++
simpl.
-----
Global Instance RelDecCorrect_eq : RelDec_Correct RelDec_eq.
Proof.
constructor.
simpl.

*****

*****
forall x y : nat, iff (eq (rel_dec x y) true) (eq x y)
+++++
apply EqNat.beq_nat_true_iff.
-----
Global Instance RelDecCorrect_eq : RelDec_Correct RelDec_eq.
Proof.
constructor.
simpl.
apply EqNat.beq_nat_true_iff.

*****

*****

+++++
Qed.
-----
Global Instance RelDecCorrect_lt : RelDec_Correct RelDec_lt.
-----
Global Instance RelDecCorrect_lt : RelDec_Correct RelDec_lt.

*****

*****
RelDec_Correct RelDec_lt
+++++
Proof.
-----
Global Instance RelDecCorrect_lt : RelDec_Correct RelDec_lt.
Proof.

*****

*****
RelDec_Correct RelDec_lt
+++++
constructor.
-----
Global Instance RelDecCorrect_lt : RelDec_Correct RelDec_lt.
Proof.
constructor.

*****

*****
forall x y : nat, iff (eq (rel_dec x y) true) (lt x y)
+++++
simpl.
-----
Global Instance RelDecCorrect_lt : RelDec_Correct RelDec_lt.
Proof.
constructor.
simpl.

*****

*****
forall x y : nat, iff (eq (rel_dec x y) true) (lt x y)
+++++
eapply NPeano.Nat.ltb_lt.
-----
Global Instance RelDecCorrect_lt : RelDec_Correct RelDec_lt.
Proof.
constructor.
simpl.
eapply NPeano.Nat.ltb_lt.

*****

*****

+++++
Qed.
-----
Global Instance RelDecCorrect_le : RelDec_Correct RelDec_le.
-----
Global Instance RelDecCorrect_le : RelDec_Correct RelDec_le.

*****

*****
RelDec_Correct RelDec_le
+++++
Proof.
-----
Global Instance RelDecCorrect_le : RelDec_Correct RelDec_le.
Proof.

*****

*****
RelDec_Correct RelDec_le
+++++
constructor.
-----
Global Instance RelDecCorrect_le : RelDec_Correct RelDec_le.
Proof.
constructor.

*****

*****
forall x y : nat, iff (eq (rel_dec x y) true) (le x y)
+++++
simpl.
-----
Global Instance RelDecCorrect_le : RelDec_Correct RelDec_le.
Proof.
constructor.
simpl.

*****

*****
forall x y : nat, iff (eq (rel_dec x y) true) (le x y)
+++++
eapply NPeano.Nat.leb_le.
-----
Global Instance RelDecCorrect_le : RelDec_Correct RelDec_le.
Proof.
constructor.
simpl.
eapply NPeano.Nat.leb_le.

*****

*****

+++++
Qed.
-----
Global Instance RelDecCorrect_gt : RelDec_Correct RelDec_gt.
-----
Global Instance RelDecCorrect_gt : RelDec_Correct RelDec_gt.

*****

*****
RelDec_Correct RelDec_gt
+++++
Proof.
-----
Global Instance RelDecCorrect_gt : RelDec_Correct RelDec_gt.
Proof.

*****

*****
RelDec_Correct RelDec_gt
+++++
constructor.
-----
Global Instance RelDecCorrect_gt : RelDec_Correct RelDec_gt.
Proof.
constructor.

*****

*****
forall x y : nat, iff (eq (rel_dec x y) true) (gt x y)
+++++
simpl.
-----
Global Instance RelDecCorrect_gt : RelDec_Correct RelDec_gt.
Proof.
constructor.
simpl.

*****

*****
forall x y : nat, iff (eq (rel_dec x y) true) (gt x y)
+++++
unfold rel_dec.
-----
Global Instance RelDecCorrect_gt : RelDec_Correct RelDec_gt.
Proof.
constructor.
simpl.
unfold rel_dec.

*****

*****
forall x y : nat, iff (eq ((let (rel_dec) := RelDec_gt in rel_dec) x y) true) (gt x y)
+++++
simpl.
-----
Global Instance RelDecCorrect_gt : RelDec_Correct RelDec_gt.
Proof.
constructor.
simpl.
unfold rel_dec.
simpl.

*****

*****
forall x y : nat, iff (eq (NPeano.Nat.ltb y x) true) (gt x y)
+++++
intros.
-----
Global Instance RelDecCorrect_gt : RelDec_Correct RelDec_gt.
Proof.
constructor.
simpl.
unfold rel_dec.
simpl.
intros.

*****
x,y : nat
*****
iff (eq (NPeano.Nat.ltb y x) true) (gt x y)
+++++
eapply NPeano.Nat.ltb_lt.
-----
Global Instance RelDecCorrect_gt : RelDec_Correct RelDec_gt.
Proof.
constructor.
simpl.
unfold rel_dec.
simpl.
intros.
eapply NPeano.Nat.ltb_lt.

*****

*****

+++++
Qed.
-----
Global Instance RelDecCorrect_ge : RelDec_Correct RelDec_ge.
-----
Global Instance RelDecCorrect_ge : RelDec_Correct RelDec_ge.

*****

*****
RelDec_Correct RelDec_ge
+++++
Proof.
-----
Global Instance RelDecCorrect_ge : RelDec_Correct RelDec_ge.
Proof.

*****

*****
RelDec_Correct RelDec_ge
+++++
constructor.
-----
Global Instance RelDecCorrect_ge : RelDec_Correct RelDec_ge.
Proof.
constructor.

*****

*****
forall x y : nat, iff (eq (rel_dec x y) true) (ge x y)
+++++
simpl.
-----
Global Instance RelDecCorrect_ge : RelDec_Correct RelDec_ge.
Proof.
constructor.
simpl.

*****

*****
forall x y : nat, iff (eq (rel_dec x y) true) (ge x y)
+++++
unfold rel_dec.
-----
Global Instance RelDecCorrect_ge : RelDec_Correct RelDec_ge.
Proof.
constructor.
simpl.
unfold rel_dec.

*****

*****
forall x y : nat, iff (eq ((let (rel_dec) := RelDec_ge in rel_dec) x y) true) (ge x y)
+++++
simpl.
-----
Global Instance RelDecCorrect_ge : RelDec_Correct RelDec_ge.
Proof.
constructor.
simpl.
unfold rel_dec.
simpl.

*****

*****
forall x y : nat, iff (eq (NPeano.Nat.leb y x) true) (ge x y)
+++++
intros.
-----
Global Instance RelDecCorrect_ge : RelDec_Correct RelDec_ge.
Proof.
constructor.
simpl.
unfold rel_dec.
simpl.
intros.

*****
x,y : nat
*****
iff (eq (NPeano.Nat.leb y x) true) (ge x y)
+++++
eapply NPeano.Nat.leb_le.
-----
Global Instance RelDecCorrect_ge : RelDec_Correct RelDec_ge.
Proof.
constructor.
simpl.
unfold rel_dec.
simpl.
intros.
eapply NPeano.Nat.leb_le.

*****

*****

+++++
Qed.
-----
Inductive R_nat_S : nat -> nat -> Prop :=\n| R_S : forall n, R_nat_S n (S n).
-----
Theorem wf_R_S : well_founded R_nat_S.
-----
Theorem wf_R_S : well_founded R_nat_S.

*****

*****
well_founded R_nat_S
+++++
Proof.
-----
Theorem wf_R_S : well_founded R_nat_S.
Proof.

*****

*****
well_founded R_nat_S
+++++
red.
-----
Theorem wf_R_S : well_founded R_nat_S.
Proof.
red.

*****

*****
forall a : nat, Acc R_nat_S a
+++++
induction a.
-----
Theorem wf_R_S : well_founded R_nat_S.
Proof.
red.
induction a.

*****

*****
Acc R_nat_S O
+++++
constructor.
-----
Theorem wf_R_S : well_founded R_nat_S.
Proof.
red.
induction a.
constructor.

*****

*****
forall (y : nat) (_ : R_nat_S y O), Acc R_nat_S y
+++++
intros.
-----
Theorem wf_R_S : well_founded R_nat_S.
Proof.
red.
induction a.
constructor.
intros.

*****
H : R_nat_S y O
y : nat
*****
Acc R_nat_S y
+++++
inversion H.
-----
Theorem wf_R_S : well_founded R_nat_S.
Proof.
red.
induction a.

*****
IHa : Acc R_nat_S a
a : nat
*****
Acc R_nat_S (S a)
+++++
constructor.
-----
Theorem wf_R_S : well_founded R_nat_S.
Proof.
red.
induction a.
constructor.

*****
IHa : Acc R_nat_S a
a : nat
*****
forall (y : nat) (_ : R_nat_S y (S a)), Acc R_nat_S y
+++++
intros.
-----
Theorem wf_R_S : well_founded R_nat_S.
Proof.
red.
induction a.
constructor.
intros.

*****
H : R_nat_S y (S a)
y : nat
IHa : Acc R_nat_S a
a : nat
*****
Acc R_nat_S y
+++++
inversion H.
-----
Theorem wf_R_S : well_founded R_nat_S.
Proof.
red.
induction a.
constructor.
intros.
inversion H.

*****
H2 : eq y a
H0 : eq n y
n : nat
H : R_nat_S y (S a)
y : nat
IHa : Acc R_nat_S a
a : nat
*****
Acc R_nat_S a
+++++
subst.
-----
Theorem wf_R_S : well_founded R_nat_S.
Proof.
red.
induction a.
constructor.
intros.
inversion H.
subst.

*****
H : R_nat_S a (S a)
IHa : Acc R_nat_S a
a : nat
*****
Acc R_nat_S a
+++++
auto.
-----
Theorem wf_R_S : well_founded R_nat_S.
Proof.
red.
induction a.

*****

*****

+++++
Defined.
-----
Inductive R_nat_lt : nat -> nat -> Prop :=\n| R_lt : forall n m, n < m -> R_nat_lt n m.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
-----
Theorem wf_R_lt : well_founded R_nat_lt.

*****

*****
well_founded R_nat_lt
+++++
Proof.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.

*****

*****
well_founded R_nat_lt
+++++
red.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.

*****

*****
forall a : nat, Acc R_nat_lt a
+++++
induction a.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.

*****

*****
Acc R_nat_lt O
+++++
constructor.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.

*****

*****
forall (y : nat) (_ : R_nat_lt y O), Acc R_nat_lt y
+++++
intros.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.

*****
H : R_nat_lt y O
y : nat
*****
Acc R_nat_lt y
+++++
inversion H.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.
inversion H.

*****
H2 : eq m O
H1 : eq n y
H0 : lt y O
n,m : nat
H : R_nat_lt y O
y : nat
*****
Acc R_nat_lt y
+++++
exfalso.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.
inversion H.
exfalso.

*****
H2 : eq m O
H1 : eq n y
H0 : lt y O
n,m : nat
H : R_nat_lt y O
y : nat
*****
False
+++++
subst.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.
inversion H.
exfalso.
subst.

*****
H0 : lt y O
H : R_nat_lt y O
y : nat
*****
False
+++++
inversion H0.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.

*****
IHa : Acc R_nat_lt a
a : nat
*****
Acc R_nat_lt (S a)
+++++
constructor.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.

*****
IHa : Acc R_nat_lt a
a : nat
*****
forall (y : nat) (_ : R_nat_lt y (S a)), Acc R_nat_lt y
+++++
intros.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.

*****
H : R_nat_lt y (S a)
y : nat
IHa : Acc R_nat_lt a
a : nat
*****
Acc R_nat_lt y
+++++
inversion H.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.
inversion H.

*****
H2 : eq m (S a)
H1 : eq n y
H0 : lt y (S a)
n,m : nat
H : R_nat_lt y (S a)
y : nat
IHa : Acc R_nat_lt a
a : nat
*****
Acc R_nat_lt y
+++++
clear H.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.
inversion H.
clear H.

*****
H2 : eq m (S a)
H1 : eq n y
H0 : lt y (S a)
y,n,m : nat
IHa : Acc R_nat_lt a
a : nat
*****
Acc R_nat_lt y
+++++
subst.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.
inversion H.
clear H.
subst.

*****
H0 : lt y (S a)
y : nat
IHa : Acc R_nat_lt a
a : nat
*****
Acc R_nat_lt y
+++++
inversion H0.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.
inversion H.
clear H.
subst.
inversion H0.

*****
H1 : eq y a
H0 : lt y (S a)
y : nat
IHa : Acc R_nat_lt a
a : nat
*****
Acc R_nat_lt a
+++++
clear H0.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.
inversion H.
clear H.
subst.
inversion H0.
clear H0.

*****
H1 : eq y a
y : nat
IHa : Acc R_nat_lt a
a : nat
*****
Acc R_nat_lt a
+++++
subst.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.
inversion H.
clear H.
subst.
inversion H0.
clear H0.
subst.

*****
IHa : Acc R_nat_lt a
a : nat
*****
Acc R_nat_lt a
+++++
auto.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.
inversion H.
clear H.
subst.
inversion H0.

*****
H : eq m a
H1 : le (S y) a
m : nat
H0 : lt y (S a)
y : nat
IHa : Acc R_nat_lt a
a : nat
*****
Acc R_nat_lt y
+++++
clear H0.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.
inversion H.
clear H.
subst.
inversion H0.
clear H0.

*****
H : eq m a
H1 : le (S y) a
y,m : nat
IHa : Acc R_nat_lt a
a : nat
*****
Acc R_nat_lt y
+++++
subst.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.
inversion H.
clear H.
subst.
inversion H0.
clear H0.
subst.

*****
H1 : le (S y) a
y : nat
IHa : Acc R_nat_lt a
a : nat
*****
Acc R_nat_lt y
+++++
auto.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.
inversion H.
clear H.
subst.
inversion H0.
clear H0.
subst.
auto.

*****
H1 : le (S y) a
y : nat
IHa : Acc R_nat_lt a
a : nat
*****
Acc R_nat_lt y
+++++
inversion IHa.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.
inversion H.
clear H.
subst.
inversion H0.
clear H0.
subst.
auto.
inversion IHa.

*****
H : forall (y : nat) (_ : R_nat_lt y a), Acc R_nat_lt y
H1 : le (S y) a
y : nat
IHa : Acc R_nat_lt a
a : nat
*****
Acc R_nat_lt y
+++++
eapply H.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.
inversion H.
clear H.
subst.
inversion H0.
clear H0.
subst.
auto.
inversion IHa.
eapply H.

*****
H : forall (y : nat) (_ : R_nat_lt y a), Acc R_nat_lt y
H1 : le (S y) a
y : nat
IHa : Acc R_nat_lt a
a : nat
*****
R_nat_lt y a
+++++
constructor.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.
constructor.
intros.
inversion H.
clear H.
subst.
inversion H0.
clear H0.
subst.
auto.
inversion IHa.
eapply H.
constructor.

*****
H : forall (y : nat) (_ : R_nat_lt y a), Acc R_nat_lt y
H1 : le (S y) a
y : nat
IHa : Acc R_nat_lt a
a : nat
*****
lt y a
+++++
eapply H1.
-----
Theorem wf_R_lt : well_founded R_nat_lt.
Proof.
red.
induction a.

*****

*****

+++++
Defined.
-----
Definition Monoid_nat_plus : Monoid nat :=\n{| monoid_plus := plus\n ; monoid_unit := 0\n |}.
-----
Definition Monoid_nat_mult : Monoid nat :=\n{| monoid_plus := mult\n ; monoid_unit := 1\n |}.
-----
Global Instance Injective_S (a b : nat) : Injective (S a = S b).
-----
Global Instance Injective_S (a b : nat) : Injective (S a = S b).

*****
a,b : nat
*****
Injective (eq (S a) (S b))
+++++
refine {| result := a = b |}.
-----
Global Instance Injective_S (a b : nat) : Injective (S a = S b).
refine {| result := a = b |}.

*****
a,b : nat
*****
forall _ : eq (S a) (S b), eq a b
+++++
abstract (inversion 1; auto).
-----
Global Instance Injective_S (a b : nat) : Injective (S a = S b).
refine {| result := a = b |}.
abstract (inversion 1; auto).

*****

*****

+++++
Defined.
-----
Definition nat_get_eq (n m : nat) (pf : unit -> n = m) : n = m :=\n  match PeanoNat.Nat.eq_dec n m with\n  | left pf => pf\n  | right bad => match bad (pf tt) with end\n  end.
-----
