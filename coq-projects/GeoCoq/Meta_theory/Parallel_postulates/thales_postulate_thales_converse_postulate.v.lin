2fb8940cc3142d719d1d0c0ee30ec213
Require Import GeoCoq.Axioms.parallel_postulates.
Require Import GeoCoq.Tarski_dev.Annexes.saccheri.
Section thales_postulate_thales_converse_postulate.
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
Lemma thales_postulate__thales_converse_postulate : thales_postulate -> thales_converse_postulate.
Proof.
  intros thales A B C M HNCol HM HPer.
  assert_diffs.
  assert(M <> C).
  {
    intro.
    subst.
    apply HNCol.
    Col.
  }
  {
    idtac.
    destruct (segment_construction_3 M C M A) as [C' [HC' HCong]].
    {
      auto.
    }
    {
      auto.
    }
    {
      auto.
      apply cong_symmetry in HCong.
      elim(eq_dec_points C C').
      {
        intro.
        subst.
        assumption.
      }
      {
        intro.
        exfalso.
        assert_diffs.
        assert(~ Col A B C').
        {
          intro.
          apply HNCol.
          ColR.
        }
        {
          idtac.
          assert(~ Col A C C').
          {
            intro.
            apply HNCol.
            ColR.
          }
          {
            idtac.
            assert(~ Col B C C').
            {
              intro.
              apply HNCol.
              ColR.
            }
            {
              idtac.
              assert_diffs.
              assert(CongA A C B A C' B).
              {
                apply l11_16.
                {
                  auto.
                }
                {
                  auto.
                }
                {
                  auto.
                }
                {
                  auto.
                  apply (thales _ _ _ M).
                  {
                    assumption.
                  }
                  {
                    assumption.
                  }
                  {
                    assumption.
                  }
                }
                {
                  auto.
                }
                {
                  auto.
                }
              }
              {
                assert(OS A B C C').
                {
                  apply (out_one_side_1 _ _ _ _ M).
                  {
                    Col.
                  }
                  {
                    Col.
                  }
                  {
                    Col.
                  }
                }
                {
                  idtac.
                  destruct HC' as [_ [_ [HMCC'|HMC'C]]].
                  {
                    assert(Hlta : LtA A C' B A C B).
                    {
                      apply os3__lta.
                      {
                        Side.
                        apply (one_side_transitivity _ _ _ M).
                        {
                          apply invert_one_side.
                          apply out_one_side.
                          {
                            Col.
                          }
                          {
                            Col.
                            apply l6_6.
                            apply bet_out.
                            {
                              Between.
                            }
                            {
                              Between.
                            }
                          }
                        }
                        {
                          apply out_one_side.
                          {
                            Col.
                          }
                          {
                            Col.
                            apply l6_6.
                            apply bet_out.
                            {
                              Between.
                            }
                            {
                              Between.
                            }
                          }
                        }
                      }
                      {
                        Side.
                      }
                      {
                        Side.
                        apply (one_side_transitivity _ _ _ M).
                        {
                          apply invert_one_side.
                          apply out_one_side.
                          {
                            Col.
                          }
                          {
                            Col.
                            apply l6_6.
                            apply bet_out.
                            {
                              Between.
                            }
                            {
                              Between.
                            }
                          }
                        }
                        {
                          apply out_one_side.
                          {
                            Col.
                          }
                          {
                            Col.
                            apply l6_6.
                            apply bet_out.
                            {
                              Between.
                            }
                            {
                              Between.
                            }
                          }
                        }
                      }
                    }
                    {
                      destruct Hlta.
                      CongA.
                    }
                  }
                  {
                    assert(Hlta : LtA A C B A C' B).
                    {
                      apply os3__lta.
                      {
                        Side.
                        apply (one_side_transitivity _ _ _ M).
                        {
                          apply invert_one_side.
                          apply out_one_side.
                          {
                            Col.
                          }
                          {
                            Col.
                            apply l6_6.
                            apply bet_out.
                            {
                              Between.
                            }
                            {
                              Between.
                            }
                          }
                        }
                        {
                          apply out_one_side.
                          {
                            Col.
                          }
                          {
                            Col.
                            apply l6_6.
                            apply bet_out.
                            {
                              Between.
                            }
                            {
                              Between.
                            }
                          }
                        }
                      }
                      {
                        Side.
                      }
                      {
                        Side.
                        apply (one_side_transitivity _ _ _ M).
                        {
                          apply invert_one_side.
                          apply out_one_side.
                          {
                            Col.
                          }
                          {
                            Col.
                            apply l6_6.
                            apply bet_out.
                            {
                              Between.
                            }
                            {
                              Between.
                            }
                          }
                        }
                        {
                          apply out_one_side.
                          {
                            Col.
                          }
                          {
                            Col.
                            apply l6_6.
                            apply bet_out.
                            {
                              Between.
                            }
                            {
                              Between.
                            }
                          }
                        }
                      }
                    }
                    {
                      destruct Hlta.
                      CongA.
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
Qed.
End thales_postulate_thales_converse_postulate.
