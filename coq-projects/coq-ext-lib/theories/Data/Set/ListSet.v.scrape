From Coq Require Import List.
-----
Require Import ExtLib.Structures.Sets.
-----
Require Import ExtLib.Core.RelDec.
-----
Require Import ExtLib.Data.List.
-----
Require Import ExtLib.Structures.Reducible.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Section ListSet.
-----
Definition lset (T : Type) : Type :=\n    list T.
-----
Variable T : Type.
-----
Variable R_dec : T -> T -> bool.
-----
Fixpoint lset_contains (v : T) (ls : lset T) : bool :=\n    match ls with\n      | nil => false\n      | l :: ls => if R_dec v l then true else lset_contains v ls\n    end.
-----
Definition lset_empty : lset T := nil.
-----
Definition lset_add (v : T) (ls : lset T) : lset T :=\n    if lset_contains v ls then ls else v :: ls.
-----
Definition lset_remove (v : T) : lset T -> lset T :=\n    List.filter (fun x => negb (R_dec v x)).
-----
Definition lset_union (l r : lset T) : lset T :=\n    fold_left (fun x y => lset_add y x) l r.
-----
Definition lset_difference (l r : lset T) : lset T :=\n    List.filter (fun x => negb (lset_contains x r)) l.
-----
Definition lset_intersect (l r : lset T) : lset T :=\n    List.filter (fun x => lset_contains x r) l.
-----
Definition lset_subset (l r : lset T) : bool :=\n    allb (fun x => lset_contains x r) l.
-----
End ListSet.
-----
Global Instance DSet_weak_listset {T} (R : T -> T -> Prop)\n  (R_dec : RelDec R) : DSet (@lset T) T :=\n{ contains  := lset_contains rel_dec\n; empty     := lset_empty T\n; add       := lset_add rel_dec\n; singleton := fun x => lset_add rel_dec x (lset_empty T)\n; remove    := lset_remove rel_dec\n; union     := lset_union rel_dec\n; intersect := lset_intersect rel_dec\n; difference := lset_difference rel_dec\n; subset     := lset_subset rel_dec\n; filter     := @List.filter _\n}.
-----
Global Instance Foldable_listset {T} (R : T -> T -> Prop)\n  : Foldable (lset T) T :=\n  fun _ f a t => List.fold_left (fun x y => f y x) t a.
-----
Require Import ExtLib.Structures.Functor.
-----
Require Import ExtLib.Programming.Eqv.
-----
Global Instance PFunctor_listset : PFunctor lset :=\n{ FunP := fun t => { eqT : Eqv t & RelDec eqv }\n; pfmap := fun _ B eqv_dec f s => \n  List.fold_left (fun acc x => lset_add (@rel_dec B (@eqv B (projT1 eqv_dec)) (projT2 eqv_dec)) (f x) acc) s (@lset_empty _)\n}.
-----
