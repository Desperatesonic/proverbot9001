Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Annexes.perp_bisect.
-----
Require Import GeoCoq.Tarski_dev.Ch12_parallel.
-----
Section bachmann_s_lotschnittaxiom_weak_triangle_circumscription_principle.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle :\n  bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : bachmann_s_lotschnittaxiom, weak_triangle_circumscription_principle
+++++
Proof.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : bachmann_s_lotschnittaxiom, weak_triangle_circumscription_principle
+++++
intro bla.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.

*****
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
weak_triangle_circumscription_principle
+++++
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\ Col D1 D2 I).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).

*****
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint) (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2) (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC) (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD) (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2) (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2) (_ : not (Col IAB IAC IBD)), ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I)), weak_triangle_circumscription_principle
+++++
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.

*****
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : Perp_bisect A1 A2 B C) (_ : Perp_bisect B1 B2 A C) (_ : Coplanar A B C A1) (_ : Coplanar A B C A2) (_ : Coplanar A B C B1) (_ : Coplanar A B C B2), ex (fun I : Tpoint => and (Col A1 A2 I) (Col B1 B2 I))
+++++
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.

*****
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col A1 A2 I) (Col B1 B2 I))
+++++
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].

*****
HCol2 : Col A3 B C
HCol1 : Col A3 A1 A2
HA : not (eq A1 A2)
A3 : Tpoint
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col A1 A2 I) (Col B1 B2 I))
+++++
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].

*****
HCol4 : Col B3 A C
HCol3 : Col B3 B1 B2
HB : not (eq B1 B2)
B3 : Tpoint
HCol2 : Col A3 B C
HCol1 : Col A3 A1 A2
HA : not (eq A1 A2)
A3 : Tpoint
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col A1 A2 I) (Col B1 B2 I))
+++++
assert (Coplanar A B C A3) by (apply col_cop2__cop with A1 A2; Col; Cop).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].
assert (Coplanar A B C A3) by (apply col_cop2__cop with A1 A2; Col; Cop).

*****
H : Coplanar A B C A3
HCol4 : Col B3 A C
HCol3 : Col B3 B1 B2
HB : not (eq B1 B2)
B3 : Tpoint
HCol2 : Col A3 B C
HCol1 : Col A3 A1 A2
HA : not (eq A1 A2)
A3 : Tpoint
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col A1 A2 I) (Col B1 B2 I))
+++++
assert (Coplanar A B C B3) by (apply col_cop2__cop with B1 B2; Col; Cop).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].
assert (Coplanar A B C A3) by (apply col_cop2__cop with A1 A2; Col; Cop).
assert (Coplanar A B C B3) by (apply col_cop2__cop with B1 B2; Col; Cop).

*****
H0 : Coplanar A B C B3
H : Coplanar A B C A3
HCol4 : Col B3 A C
HCol3 : Col B3 B1 B2
HB : not (eq B1 B2)
B3 : Tpoint
HCol2 : Col A3 B C
HCol1 : Col A3 A1 A2
HA : not (eq A1 A2)
A3 : Tpoint
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col A1 A2 I) (Col B1 B2 I))
+++++
destruct (HP B C A C A1 A2 B1 B2 C A3 B3) as [I [? ?]]; try (exists I; Col); try solve[apply perp_right_comm; apply per_perp; assert_diffs; Perp]; try solve[apply perp_sym; apply perp_bisect_perp; auto]; Col; try CopR.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].
assert (Coplanar A B C A3) by (apply col_cop2__cop with A1 A2; Col; Cop).
assert (Coplanar A B C B3) by (apply col_cop2__cop with B1 B2; Col; Cop).
destruct (HP B C A C A1 A2 B1 B2 C A3 B3) as [I [? ?]]; try (exists I; Col); try solve[apply perp_right_comm; apply per_perp; assert_diffs; Perp]; try solve[apply perp_sym; apply perp_bisect_perp; auto]; Col; try CopR.

*****
H0 : Coplanar A B C B3
H : Coplanar A B C A3
HCol4 : Col B3 A C
HCol3 : Col B3 B1 B2
HB : not (eq B1 B2)
B3 : Tpoint
HCol2 : Col A3 B C
HCol1 : Col A3 A1 A2
HA : not (eq A1 A2)
A3 : Tpoint
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C A3 B3)
+++++
assert (C <> A3).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].
assert (Coplanar A B C A3) by (apply col_cop2__cop with A1 A2; Col; Cop).
assert (Coplanar A B C B3) by (apply col_cop2__cop with B1 B2; Col; Cop).
destruct (HP B C A C A1 A2 B1 B2 C A3 B3) as [I [? ?]]; try (exists I; Col); try solve[apply perp_right_comm; apply per_perp; assert_diffs; Perp]; try solve[apply perp_sym; apply perp_bisect_perp; auto]; Col; try CopR.
assert (C <> A3).

*****
H0 : Coplanar A B C B3
H : Coplanar A B C A3
HCol4 : Col B3 A C
HCol3 : Col B3 B1 B2
HB : not (eq B1 B2)
B3 : Tpoint
HCol2 : Col A3 B C
HCol1 : Col A3 A1 A2
HA : not (eq A1 A2)
A3 : Tpoint
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C A3)
+++++
assert (HC' := HPerpB1).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].
assert (Coplanar A B C A3) by (apply col_cop2__cop with A1 A2; Col; Cop).
assert (Coplanar A B C B3) by (apply col_cop2__cop with B1 B2; Col; Cop).
destruct (HP B C A C A1 A2 B1 B2 C A3 B3) as [I [? ?]]; try (exists I; Col); try solve[apply perp_right_comm; apply per_perp; assert_diffs; Perp]; try solve[apply perp_sym; apply perp_bisect_perp; auto]; Col; try CopR.
assert (C <> A3).
assert (HC' := HPerpB1).

*****
HC' : Perp_bisect A1 A2 B C
H0 : Coplanar A B C B3
H : Coplanar A B C A3
HCol4 : Col B3 A C
HCol3 : Col B3 B1 B2
HB : not (eq B1 B2)
B3 : Tpoint
HCol2 : Col A3 B C
HCol1 : Col A3 A1 A2
HA : not (eq A1 A2)
A3 : Tpoint
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C A3)
+++++
destruct HC' as [[[C' [HMid HCol]] _] _].
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].
assert (Coplanar A B C A3) by (apply col_cop2__cop with A1 A2; Col; Cop).
assert (Coplanar A B C B3) by (apply col_cop2__cop with B1 B2; Col; Cop).
destruct (HP B C A C A1 A2 B1 B2 C A3 B3) as [I [? ?]]; try (exists I; Col); try solve[apply perp_right_comm; apply per_perp; assert_diffs; Perp]; try solve[apply perp_sym; apply perp_bisect_perp; auto]; Col; try CopR.
assert (C <> A3).
assert (HC' := HPerpB1).
destruct HC' as [[[C' [HMid HCol]] _] _].

*****
HCol : Col A1 A2 C'
HMid : Midpoint C' C B
C' : Tpoint
H0 : Coplanar A B C B3
H : Coplanar A B C A3
HCol4 : Col B3 A C
HCol3 : Col B3 B1 B2
HB : not (eq B1 B2)
B3 : Tpoint
HCol2 : Col A3 B C
HCol1 : Col A3 A1 A2
HA : not (eq A1 A2)
A3 : Tpoint
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C A3)
+++++
intro; treat_equalities; assert_diffs.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].
assert (Coplanar A B C A3) by (apply col_cop2__cop with A1 A2; Col; Cop).
assert (Coplanar A B C B3) by (apply col_cop2__cop with B1 B2; Col; Cop).
destruct (HP B C A C A1 A2 B1 B2 C A3 B3) as [I [? ?]]; try (exists I; Col); try solve[apply perp_right_comm; apply per_perp; assert_diffs; Perp]; try solve[apply perp_sym; apply perp_bisect_perp; auto]; Col; try CopR.
assert (C <> A3).
assert (HC' := HPerpB1).
destruct HC' as [[[C' [HMid HCol]] _] _].
intro; treat_equalities; assert_diffs.

*****
H5 : not (eq C' B)
H2 : not (eq C' C)
H6 : not (eq A C)
H3 : not (eq B C)
H4 : not (eq A B)
HCol : Col A1 A2 C'
HMid : Midpoint C' C B
C' : Tpoint
H0 : Coplanar A B C B3
H : Coplanar A B C C
HCol4 : Col B3 A C
HCol3 : Col B3 B1 B2
HB : not (eq B1 B2)
B3 : Tpoint
HCol1 : Col C A1 A2
HA : not (eq A1 A2)
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (C = C'); [|treat_equalities; auto].
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].
assert (Coplanar A B C A3) by (apply col_cop2__cop with A1 A2; Col; Cop).
assert (Coplanar A B C B3) by (apply col_cop2__cop with B1 B2; Col; Cop).
destruct (HP B C A C A1 A2 B1 B2 C A3 B3) as [I [? ?]]; try (exists I; Col); try solve[apply perp_right_comm; apply per_perp; assert_diffs; Perp]; try solve[apply perp_sym; apply perp_bisect_perp; auto]; Col; try CopR.
assert (C <> A3).
assert (HC' := HPerpB1).
destruct HC' as [[[C' [HMid HCol]] _] _].
intro; treat_equalities; assert_diffs.
assert (C = C'); [|treat_equalities; auto].

*****
H5 : not (eq C' B)
H2 : not (eq C' C)
H6 : not (eq A C)
H3 : not (eq B C)
H4 : not (eq A B)
HCol : Col A1 A2 C'
HMid : Midpoint C' C B
C' : Tpoint
H0 : Coplanar A B C B3
H : Coplanar A B C C
HCol4 : Col B3 A C
HCol3 : Col B3 B1 B2
HB : not (eq B1 B2)
B3 : Tpoint
HCol1 : Col C A1 A2
HA : not (eq A1 A2)
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq C C'
+++++
elim (perp_not_col2 _ _ _ _ (perp_bisect_perp _ _ _ _ HPerpB1)); intro HNC'; [apply l6_21 with A1 A2 B C|apply l6_21 with A1 A2 C B]; Col.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].
assert (Coplanar A B C A3) by (apply col_cop2__cop with A1 A2; Col; Cop).
assert (Coplanar A B C B3) by (apply col_cop2__cop with B1 B2; Col; Cop).
destruct (HP B C A C A1 A2 B1 B2 C A3 B3) as [I [? ?]]; try (exists I; Col); try solve[apply perp_right_comm; apply per_perp; assert_diffs; Perp]; try solve[apply perp_sym; apply perp_bisect_perp; auto]; Col; try CopR.
assert (C <> A3).

*****
H1 : not (eq C A3)
H0 : Coplanar A B C B3
H : Coplanar A B C A3
HCol4 : Col B3 A C
HCol3 : Col B3 B1 B2
HB : not (eq B1 B2)
B3 : Tpoint
HCol2 : Col A3 B C
HCol1 : Col A3 A1 A2
HA : not (eq A1 A2)
A3 : Tpoint
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C A3 B3)
+++++
assert (C <> B3).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].
assert (Coplanar A B C A3) by (apply col_cop2__cop with A1 A2; Col; Cop).
assert (Coplanar A B C B3) by (apply col_cop2__cop with B1 B2; Col; Cop).
destruct (HP B C A C A1 A2 B1 B2 C A3 B3) as [I [? ?]]; try (exists I; Col); try solve[apply perp_right_comm; apply per_perp; assert_diffs; Perp]; try solve[apply perp_sym; apply perp_bisect_perp; auto]; Col; try CopR.
assert (C <> A3).
assert (C <> B3).

*****
H1 : not (eq C A3)
H0 : Coplanar A B C B3
H : Coplanar A B C A3
HCol4 : Col B3 A C
HCol3 : Col B3 B1 B2
HB : not (eq B1 B2)
B3 : Tpoint
HCol2 : Col A3 B C
HCol1 : Col A3 A1 A2
HA : not (eq A1 A2)
A3 : Tpoint
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C B3)
+++++
assert (HC' := HPerpB2).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].
assert (Coplanar A B C A3) by (apply col_cop2__cop with A1 A2; Col; Cop).
assert (Coplanar A B C B3) by (apply col_cop2__cop with B1 B2; Col; Cop).
destruct (HP B C A C A1 A2 B1 B2 C A3 B3) as [I [? ?]]; try (exists I; Col); try solve[apply perp_right_comm; apply per_perp; assert_diffs; Perp]; try solve[apply perp_sym; apply perp_bisect_perp; auto]; Col; try CopR.
assert (C <> A3).
assert (C <> B3).
assert (HC' := HPerpB2).

*****
HC' : Perp_bisect B1 B2 A C
H1 : not (eq C A3)
H0 : Coplanar A B C B3
H : Coplanar A B C A3
HCol4 : Col B3 A C
HCol3 : Col B3 B1 B2
HB : not (eq B1 B2)
B3 : Tpoint
HCol2 : Col A3 B C
HCol1 : Col A3 A1 A2
HA : not (eq A1 A2)
A3 : Tpoint
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C B3)
+++++
destruct HC' as [[[C' [HMid HCol]] _] _].
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].
assert (Coplanar A B C A3) by (apply col_cop2__cop with A1 A2; Col; Cop).
assert (Coplanar A B C B3) by (apply col_cop2__cop with B1 B2; Col; Cop).
destruct (HP B C A C A1 A2 B1 B2 C A3 B3) as [I [? ?]]; try (exists I; Col); try solve[apply perp_right_comm; apply per_perp; assert_diffs; Perp]; try solve[apply perp_sym; apply perp_bisect_perp; auto]; Col; try CopR.
assert (C <> A3).
assert (C <> B3).
assert (HC' := HPerpB2).
destruct HC' as [[[C' [HMid HCol]] _] _].

*****
HCol : Col B1 B2 C'
HMid : Midpoint C' C A
C' : Tpoint
H1 : not (eq C A3)
H0 : Coplanar A B C B3
H : Coplanar A B C A3
HCol4 : Col B3 A C
HCol3 : Col B3 B1 B2
HB : not (eq B1 B2)
B3 : Tpoint
HCol2 : Col A3 B C
HCol1 : Col A3 A1 A2
HA : not (eq A1 A2)
A3 : Tpoint
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C B3)
+++++
intro; treat_equalities; assert_diffs.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].
assert (Coplanar A B C A3) by (apply col_cop2__cop with A1 A2; Col; Cop).
assert (Coplanar A B C B3) by (apply col_cop2__cop with B1 B2; Col; Cop).
destruct (HP B C A C A1 A2 B1 B2 C A3 B3) as [I [? ?]]; try (exists I; Col); try solve[apply perp_right_comm; apply per_perp; assert_diffs; Perp]; try solve[apply perp_sym; apply perp_bisect_perp; auto]; Col; try CopR.
assert (C <> A3).
assert (C <> B3).
assert (HC' := HPerpB2).
destruct HC' as [[[C' [HMid HCol]] _] _].
intro; treat_equalities; assert_diffs.

*****
H6 : not (eq C' A)
H3 : not (eq C' C)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HCol : Col B1 B2 C'
HMid : Midpoint C' C A
C' : Tpoint
H1 : not (eq C A3)
H0 : Coplanar A B C C
H : Coplanar A B C A3
HCol3 : Col C B1 B2
HB : not (eq B1 B2)
HCol2 : Col A3 B C
HCol1 : Col A3 A1 A2
HA : not (eq A1 A2)
A3 : Tpoint
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (C = C'); [|treat_equalities; auto].
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].
assert (Coplanar A B C A3) by (apply col_cop2__cop with A1 A2; Col; Cop).
assert (Coplanar A B C B3) by (apply col_cop2__cop with B1 B2; Col; Cop).
destruct (HP B C A C A1 A2 B1 B2 C A3 B3) as [I [? ?]]; try (exists I; Col); try solve[apply perp_right_comm; apply per_perp; assert_diffs; Perp]; try solve[apply perp_sym; apply perp_bisect_perp; auto]; Col; try CopR.
assert (C <> A3).
assert (C <> B3).
assert (HC' := HPerpB2).
destruct HC' as [[[C' [HMid HCol]] _] _].
intro; treat_equalities; assert_diffs.
assert (C = C'); [|treat_equalities; auto].

*****
H6 : not (eq C' A)
H3 : not (eq C' C)
H7 : not (eq A C)
H4 : not (eq B C)
H5 : not (eq A B)
HCol : Col B1 B2 C'
HMid : Midpoint C' C A
C' : Tpoint
H1 : not (eq C A3)
H0 : Coplanar A B C C
H : Coplanar A B C A3
HCol3 : Col C B1 B2
HB : not (eq B1 B2)
HCol2 : Col A3 B C
HCol1 : Col A3 A1 A2
HA : not (eq A1 A2)
A3 : Tpoint
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq C C'
+++++
elim (perp_not_col2 _ _ _ _ (perp_bisect_perp _ _ _ _ HPerpB2)); intro HNC'; [apply l6_21 with B1 B2 A C|apply l6_21 with B1 B2 C A]; Col.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
clear bla; intros HP A B C A1 A2 B1 B2 HNC HPer.
intros HPerpB1 HPerpB2 HCop1 HCop2 HCop3 HCop4.
destruct (perp_bisect_perp _ _ _ _ HPerpB1) as [A3 [HA [_ [HCol1 [HCol2 _]]]]].
destruct (perp_bisect_perp _ _ _ _ HPerpB2) as [B3 [HB [_ [HCol3 [HCol4 _]]]]].
assert (Coplanar A B C A3) by (apply col_cop2__cop with A1 A2; Col; Cop).
assert (Coplanar A B C B3) by (apply col_cop2__cop with B1 B2; Col; Cop).
destruct (HP B C A C A1 A2 B1 B2 C A3 B3) as [I [? ?]]; try (exists I; Col); try solve[apply perp_right_comm; apply per_perp; assert_diffs; Perp]; try solve[apply perp_sym; apply perp_bisect_perp; auto]; Col; try CopR.
assert (C <> A3).
assert (C <> B3).

*****
H2 : not (eq C B3)
H1 : not (eq C A3)
H0 : Coplanar A B C B3
H : Coplanar A B C A3
HCol4 : Col B3 A C
HCol3 : Col B3 B1 B2
HB : not (eq B1 B2)
B3 : Tpoint
HCol2 : Col A3 B C
HCol1 : Col A3 A1 A2
HA : not (eq A1 A2)
A3 : Tpoint
HCop4 : Coplanar A B C B2
HCop3 : Coplanar A B C B1
HCop2 : Coplanar A B C A2
HCop1 : Coplanar A B C A1
HPerpB2 : Perp_bisect B1 B2 A C
HPerpB1 : Perp_bisect A1 A2 B C
HPer : Per A C B
HNC : not (Col A B C)
A,B,C,A1,A2,B1,B2 : Tpoint
HP : forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint)\n (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2)\n (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC)\n (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD)\n (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2)\n (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2)\n (_ : not (Col IAB IAC IBD)),\nex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C A3 B3)
+++++
intro; apply HNC; ColR.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).

*****
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD : Tpoint) (_ : Perp A1 A2 B1 B2) (_ : Perp A1 A2 C1 C2) (_ : Perp B1 B2 D1 D2) (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC) (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD) (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2) (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2) (_ : not (Col IAB IAC IBD)), ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.

*****
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : Col A1 A2 IAB) (_ : Col B1 B2 IAB) (_ : Col A1 A2 IAC) (_ : Col C1 C2 IAC) (_ : Col B1 B2 IBD) (_ : Col D1 D2 IBD) (_ : Coplanar IAB IAC IBD C1) (_ : Coplanar IAB IAC IBD C2) (_ : Coplanar IAB IAC IBD D1) (_ : Coplanar IAB IAC IBD D2) (_ : not (Col IAB IAC IBD)), ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.

*****
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
assert (Col IAB IAC A1) by (assert_diffs; ColR).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).

*****
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
assert (Col IAB IAC A2) by (assert_diffs; ColR).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).

*****
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
assert (Col IAB IBD B1) by (assert_diffs; ColR).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).

*****
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
assert (Col IAB IBD B2) by (assert_diffs; ColR).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).

*****
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
assert (Coplanar IAB IAC IBD A1) by Cop.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.

*****
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
assert (Coplanar IAB IAC IBD A2) by Cop.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.

*****
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
assert (Coplanar IAB IAC IBD B1) by Cop.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.

*****
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
assert (Coplanar IAB IAC IBD B2) by Cop.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.

*****
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
assert (HNC2 : ~ Col A1 A2 D1).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).

*****
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A1 A2 D1)
+++++
apply par_strict_not_col_1 with D2; apply par_not_col_strict with IBD; Col; try (intro; apply HNC1; assert_diffs; ColR).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
apply par_strict_not_col_1 with D2; apply par_not_col_strict with IBD; Col; try (intro; apply HNC1; assert_diffs; ColR).

*****
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 D1 D2
+++++
apply l12_9 with B1 B2; Perp; CopR.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).

*****
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
assert (HNC3 : ~ Col B1 B2 C1).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).

*****
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B1 B2 C1)
+++++
apply par_strict_not_col_1 with C2; apply par_not_col_strict with IAC; Col; try (intro; apply HNC1; assert_diffs; ColR).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
apply par_strict_not_col_1 with C2; apply par_not_col_strict with IAC; Col; try (intro; apply HNC1; assert_diffs; ColR).

*****
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 C1 C2
+++++
apply l12_9 with A1 A2; Perp; CopR.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).

*****
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
assert (HParA : Par_strict A1 A2 D1 D2).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).

*****
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict A1 A2 D1 D2
+++++
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.

*****
HParA : Par_strict A1 A2 D1 D2
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
assert (HParB : Par_strict B1 B2 C1 C2).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.
assert (HParB : Par_strict B1 B2 C1 C2).

*****
HParA : Par_strict A1 A2 D1 D2
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict B1 B2 C1 C2
+++++
apply par_not_col_strict with C1; Col; apply l12_9 with A1 A2; Perp; CopR.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.
assert (HParB : Par_strict B1 B2 C1 C2).
apply par_not_col_strict with C1; Col; apply l12_9 with A1 A2; Perp; CopR.

*****
HParB : Par_strict B1 B2 C1 C2
HParA : Par_strict A1 A2 D1 D2
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
assert (HNCol3 : ~ Col IAC B1 B2) by (apply par_not_col with C1 C2; Par; ColR).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.
assert (HParB : Par_strict B1 B2 C1 C2).
apply par_not_col_strict with C1; Col; apply l12_9 with A1 A2; Perp; CopR.
assert (HNCol3 : ~ Col IAC B1 B2) by (apply par_not_col with C1 C2; Par; ColR).

*****
HNCol3 : not (Col IAC B1 B2)
HParB : Par_strict B1 B2 C1 C2
HParA : Par_strict A1 A2 D1 D2
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
assert (HNCol4 : ~ Col IBD A1 A2) by (apply par_not_col with D1 D2; Par; ColR).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.
assert (HParB : Par_strict B1 B2 C1 C2).
apply par_not_col_strict with C1; Col; apply l12_9 with A1 A2; Perp; CopR.
assert (HNCol3 : ~ Col IAC B1 B2) by (apply par_not_col with C1 C2; Par; ColR).
assert (HNCol4 : ~ Col IBD A1 A2) by (apply par_not_col with D1 D2; Par; ColR).

*****
HNCol4 : not (Col IBD A1 A2)
HNCol3 : not (Col IAC B1 B2)
HParB : Par_strict B1 B2 C1 C2
HParA : Par_strict A1 A2 D1 D2
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
assert (HPQ : IAC <> IAB) by (assert_diffs; auto).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.
assert (HParB : Par_strict B1 B2 C1 C2).
apply par_not_col_strict with C1; Col; apply l12_9 with A1 A2; Perp; CopR.
assert (HNCol3 : ~ Col IAC B1 B2) by (apply par_not_col with C1 C2; Par; ColR).
assert (HNCol4 : ~ Col IBD A1 A2) by (apply par_not_col with D1 D2; Par; ColR).
assert (HPQ : IAC <> IAB) by (assert_diffs; auto).

*****
HPQ : not (eq IAC IAB)
HNCol4 : not (Col IBD A1 A2)
HNCol3 : not (Col IAC B1 B2)
HParB : Par_strict B1 B2 C1 C2
HParA : Par_strict A1 A2 D1 D2
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
assert (HQR : IAB <> IBD) by (assert_diffs; auto).
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.
assert (HParB : Par_strict B1 B2 C1 C2).
apply par_not_col_strict with C1; Col; apply l12_9 with A1 A2; Perp; CopR.
assert (HNCol3 : ~ Col IAC B1 B2) by (apply par_not_col with C1 C2; Par; ColR).
assert (HNCol4 : ~ Col IBD A1 A2) by (apply par_not_col with D1 D2; Par; ColR).
assert (HPQ : IAC <> IAB) by (assert_diffs; auto).
assert (HQR : IAB <> IBD) by (assert_diffs; auto).

*****
HQR : not (eq IAB IBD)
HPQ : not (eq IAC IAB)
HNCol4 : not (Col IBD A1 A2)
HNCol3 : not (Col IAC B1 B2)
HParB : Par_strict B1 B2 C1 C2
HParA : Par_strict A1 A2 D1 D2
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
destruct (diff_col_ex3 C1 C2 IAC) as [P1 [HC1P1 [HC2P1 [HPP1 HCP1]]]]; Col.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.
assert (HParB : Par_strict B1 B2 C1 C2).
apply par_not_col_strict with C1; Col; apply l12_9 with A1 A2; Perp; CopR.
assert (HNCol3 : ~ Col IAC B1 B2) by (apply par_not_col with C1 C2; Par; ColR).
assert (HNCol4 : ~ Col IBD A1 A2) by (apply par_not_col with D1 D2; Par; ColR).
assert (HPQ : IAC <> IAB) by (assert_diffs; auto).
assert (HQR : IAB <> IBD) by (assert_diffs; auto).
destruct (diff_col_ex3 C1 C2 IAC) as [P1 [HC1P1 [HC2P1 [HPP1 HCP1]]]]; Col.

*****
HCP1 : Col C1 C2 P1
HPP1 : not (eq IAC P1)
HC2P1 : not (eq C2 P1)
HC1P1 : not (eq C1 P1)
P1 : Tpoint
HQR : not (eq IAB IBD)
HPQ : not (eq IAC IAB)
HNCol4 : not (Col IBD A1 A2)
HNCol3 : not (Col IAC B1 B2)
HParB : Par_strict B1 B2 C1 C2
HParA : Par_strict A1 A2 D1 D2
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
destruct (diff_col_ex3 D1 D2 IBD) as [R1 [HD1R1 [HD2R1 [HRR1 HDR1]]]]; Col.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.
assert (HParB : Par_strict B1 B2 C1 C2).
apply par_not_col_strict with C1; Col; apply l12_9 with A1 A2; Perp; CopR.
assert (HNCol3 : ~ Col IAC B1 B2) by (apply par_not_col with C1 C2; Par; ColR).
assert (HNCol4 : ~ Col IBD A1 A2) by (apply par_not_col with D1 D2; Par; ColR).
assert (HPQ : IAC <> IAB) by (assert_diffs; auto).
assert (HQR : IAB <> IBD) by (assert_diffs; auto).
destruct (diff_col_ex3 C1 C2 IAC) as [P1 [HC1P1 [HC2P1 [HPP1 HCP1]]]]; Col.
destruct (diff_col_ex3 D1 D2 IBD) as [R1 [HD1R1 [HD2R1 [HRR1 HDR1]]]]; Col.

*****
HDR1 : Col D1 D2 R1
HRR1 : not (eq IBD R1)
HD2R1 : not (eq D2 R1)
HD1R1 : not (eq D1 R1)
R1 : Tpoint
HCP1 : Col C1 C2 P1
HPP1 : not (eq IAC P1)
HC2P1 : not (eq C2 P1)
HC1P1 : not (eq C1 P1)
P1 : Tpoint
HQR : not (eq IAB IBD)
HPQ : not (eq IAC IAB)
HNCol4 : not (Col IBD A1 A2)
HNCol3 : not (Col IAC B1 B2)
HParB : Par_strict B1 B2 C1 C2
HParA : Par_strict A1 A2 D1 D2
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
destruct (bla IAC IAB IBD P1 R1) as [I [HI1 HI2]]; auto.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.
assert (HParB : Par_strict B1 B2 C1 C2).
apply par_not_col_strict with C1; Col; apply l12_9 with A1 A2; Perp; CopR.
assert (HNCol3 : ~ Col IAC B1 B2) by (apply par_not_col with C1 C2; Par; ColR).
assert (HNCol4 : ~ Col IBD A1 A2) by (apply par_not_col with D1 D2; Par; ColR).
assert (HPQ : IAC <> IAB) by (assert_diffs; auto).
assert (HQR : IAB <> IBD) by (assert_diffs; auto).
destruct (diff_col_ex3 C1 C2 IAC) as [P1 [HC1P1 [HC2P1 [HPP1 HCP1]]]]; Col.
destruct (diff_col_ex3 D1 D2 IBD) as [R1 [HD1R1 [HD2R1 [HRR1 HDR1]]]]; Col.
destruct (bla IAC IAB IBD P1 R1) as [I [HI1 HI2]]; auto.

*****
HDR1 : Col D1 D2 R1
HRR1 : not (eq IBD R1)
HD2R1 : not (eq D2 R1)
HD1R1 : not (eq D1 R1)
R1 : Tpoint
HCP1 : Col C1 C2 P1
HPP1 : not (eq IAC P1)
HC2P1 : not (eq C2 P1)
HC1P1 : not (eq C1 P1)
P1 : Tpoint
HQR : not (eq IAB IBD)
HPQ : not (eq IAC IAB)
HNCol4 : not (Col IBD A1 A2)
HNCol3 : not (Col IAC B1 B2)
HParB : Par_strict B1 B2 C1 C2
HParA : Par_strict A1 A2 D1 D2
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per IAC IAB IBD
+++++
apply perp_per_2; apply perp_col2 with A1 A2; Col; apply perp_sym; apply perp_col2 with B1 B2; Col; Perp.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.
assert (HParB : Par_strict B1 B2 C1 C2).
apply par_not_col_strict with C1; Col; apply l12_9 with A1 A2; Perp; CopR.
assert (HNCol3 : ~ Col IAC B1 B2) by (apply par_not_col with C1 C2; Par; ColR).
assert (HNCol4 : ~ Col IBD A1 A2) by (apply par_not_col with D1 D2; Par; ColR).
assert (HPQ : IAC <> IAB) by (assert_diffs; auto).
assert (HQR : IAB <> IBD) by (assert_diffs; auto).
destruct (diff_col_ex3 C1 C2 IAC) as [P1 [HC1P1 [HC2P1 [HPP1 HCP1]]]]; Col.
destruct (diff_col_ex3 D1 D2 IBD) as [R1 [HD1R1 [HD2R1 [HRR1 HDR1]]]]; Col.
destruct (bla IAC IAB IBD P1 R1) as [I [HI1 HI2]]; auto.
apply perp_per_2; apply perp_col2 with A1 A2; Col; apply perp_sym; apply perp_col2 with B1 B2; Col; Perp.

*****
HDR1 : Col D1 D2 R1
HRR1 : not (eq IBD R1)
HD2R1 : not (eq D2 R1)
HD1R1 : not (eq D1 R1)
R1 : Tpoint
HCP1 : Col C1 C2 P1
HPP1 : not (eq IAC P1)
HC2P1 : not (eq C2 P1)
HC1P1 : not (eq C1 P1)
P1 : Tpoint
HQR : not (eq IAB IBD)
HPQ : not (eq IAC IAB)
HNCol4 : not (Col IBD A1 A2)
HNCol3 : not (Col IAC B1 B2)
HParB : Par_strict B1 B2 C1 C2
HParA : Par_strict A1 A2 D1 D2
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per IAB IAC P1
+++++
apply perp_per_2; apply perp_col2 with A1 A2; Col; apply perp_sym; apply perp_col2 with C1 C2; Col; Perp.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.
assert (HParB : Par_strict B1 B2 C1 C2).
apply par_not_col_strict with C1; Col; apply l12_9 with A1 A2; Perp; CopR.
assert (HNCol3 : ~ Col IAC B1 B2) by (apply par_not_col with C1 C2; Par; ColR).
assert (HNCol4 : ~ Col IBD A1 A2) by (apply par_not_col with D1 D2; Par; ColR).
assert (HPQ : IAC <> IAB) by (assert_diffs; auto).
assert (HQR : IAB <> IBD) by (assert_diffs; auto).
destruct (diff_col_ex3 C1 C2 IAC) as [P1 [HC1P1 [HC2P1 [HPP1 HCP1]]]]; Col.
destruct (diff_col_ex3 D1 D2 IBD) as [R1 [HD1R1 [HD2R1 [HRR1 HDR1]]]]; Col.
destruct (bla IAC IAB IBD P1 R1) as [I [HI1 HI2]]; auto.
apply perp_per_2; apply perp_col2 with A1 A2; Col; apply perp_sym; apply perp_col2 with B1 B2; Col; Perp.
apply perp_per_2; apply perp_col2 with A1 A2; Col; apply perp_sym; apply perp_col2 with C1 C2; Col; Perp.

*****
HDR1 : Col D1 D2 R1
HRR1 : not (eq IBD R1)
HD2R1 : not (eq D2 R1)
HD1R1 : not (eq D1 R1)
R1 : Tpoint
HCP1 : Col C1 C2 P1
HPP1 : not (eq IAC P1)
HC2P1 : not (eq C2 P1)
HC1P1 : not (eq C1 P1)
P1 : Tpoint
HQR : not (eq IAB IBD)
HPQ : not (eq IAC IAB)
HNCol4 : not (Col IBD A1 A2)
HNCol3 : not (Col IAC B1 B2)
HParB : Par_strict B1 B2 C1 C2
HParA : Par_strict A1 A2 D1 D2
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per IAB IBD R1
+++++
apply perp_per_2; apply perp_col2 with B1 B2; Col; apply perp_sym; apply perp_col2 with D1 D2; Col; Perp.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.
assert (HParB : Par_strict B1 B2 C1 C2).
apply par_not_col_strict with C1; Col; apply l12_9 with A1 A2; Perp; CopR.
assert (HNCol3 : ~ Col IAC B1 B2) by (apply par_not_col with C1 C2; Par; ColR).
assert (HNCol4 : ~ Col IBD A1 A2) by (apply par_not_col with D1 D2; Par; ColR).
assert (HPQ : IAC <> IAB) by (assert_diffs; auto).
assert (HQR : IAB <> IBD) by (assert_diffs; auto).
destruct (diff_col_ex3 C1 C2 IAC) as [P1 [HC1P1 [HC2P1 [HPP1 HCP1]]]]; Col.
destruct (diff_col_ex3 D1 D2 IBD) as [R1 [HD1R1 [HD2R1 [HRR1 HDR1]]]]; Col.
destruct (bla IAC IAB IBD P1 R1) as [I [HI1 HI2]]; auto.
apply perp_per_2; apply perp_col2 with A1 A2; Col; apply perp_sym; apply perp_col2 with B1 B2; Col; Perp.
apply perp_per_2; apply perp_col2 with A1 A2; Col; apply perp_sym; apply perp_col2 with C1 C2; Col; Perp.
apply perp_per_2; apply perp_col2 with B1 B2; Col; apply perp_sym; apply perp_col2 with D1 D2; Col; Perp.

*****
HDR1 : Col D1 D2 R1
HRR1 : not (eq IBD R1)
HD2R1 : not (eq D2 R1)
HD1R1 : not (eq D1 R1)
R1 : Tpoint
HCP1 : Col C1 C2 P1
HPP1 : not (eq IAC P1)
HC2P1 : not (eq C2 P1)
HC1P1 : not (eq C1 P1)
P1 : Tpoint
HQR : not (eq IAB IBD)
HPQ : not (eq IAC IAB)
HNCol4 : not (Col IBD A1 A2)
HNCol3 : not (Col IAC B1 B2)
HParB : Par_strict B1 B2 C1 C2
HParA : Par_strict A1 A2 D1 D2
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar IAC IAB IBD P1
+++++
assert_diffs; apply col_cop2__cop with C1 C2; Col; CopR.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.
assert (HParB : Par_strict B1 B2 C1 C2).
apply par_not_col_strict with C1; Col; apply l12_9 with A1 A2; Perp; CopR.
assert (HNCol3 : ~ Col IAC B1 B2) by (apply par_not_col with C1 C2; Par; ColR).
assert (HNCol4 : ~ Col IBD A1 A2) by (apply par_not_col with D1 D2; Par; ColR).
assert (HPQ : IAC <> IAB) by (assert_diffs; auto).
assert (HQR : IAB <> IBD) by (assert_diffs; auto).
destruct (diff_col_ex3 C1 C2 IAC) as [P1 [HC1P1 [HC2P1 [HPP1 HCP1]]]]; Col.
destruct (diff_col_ex3 D1 D2 IBD) as [R1 [HD1R1 [HD2R1 [HRR1 HDR1]]]]; Col.
destruct (bla IAC IAB IBD P1 R1) as [I [HI1 HI2]]; auto.
apply perp_per_2; apply perp_col2 with A1 A2; Col; apply perp_sym; apply perp_col2 with B1 B2; Col; Perp.
apply perp_per_2; apply perp_col2 with A1 A2; Col; apply perp_sym; apply perp_col2 with C1 C2; Col; Perp.
apply perp_per_2; apply perp_col2 with B1 B2; Col; apply perp_sym; apply perp_col2 with D1 D2; Col; Perp.
assert_diffs; apply col_cop2__cop with C1 C2; Col; CopR.

*****
HDR1 : Col D1 D2 R1
HRR1 : not (eq IBD R1)
HD2R1 : not (eq D2 R1)
HD1R1 : not (eq D1 R1)
R1 : Tpoint
HCP1 : Col C1 C2 P1
HPP1 : not (eq IAC P1)
HC2P1 : not (eq C2 P1)
HC1P1 : not (eq C1 P1)
P1 : Tpoint
HQR : not (eq IAB IBD)
HPQ : not (eq IAC IAB)
HNCol4 : not (Col IBD A1 A2)
HNCol3 : not (Col IAC B1 B2)
HParB : Par_strict B1 B2 C1 C2
HParA : Par_strict A1 A2 D1 D2
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar IAC IAB IBD R1
+++++
assert_diffs; apply col_cop2__cop with D1 D2; Col; CopR.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.
assert (HParB : Par_strict B1 B2 C1 C2).
apply par_not_col_strict with C1; Col; apply l12_9 with A1 A2; Perp; CopR.
assert (HNCol3 : ~ Col IAC B1 B2) by (apply par_not_col with C1 C2; Par; ColR).
assert (HNCol4 : ~ Col IBD A1 A2) by (apply par_not_col with D1 D2; Par; ColR).
assert (HPQ : IAC <> IAB) by (assert_diffs; auto).
assert (HQR : IAB <> IBD) by (assert_diffs; auto).
destruct (diff_col_ex3 C1 C2 IAC) as [P1 [HC1P1 [HC2P1 [HPP1 HCP1]]]]; Col.
destruct (diff_col_ex3 D1 D2 IBD) as [R1 [HD1R1 [HD2R1 [HRR1 HDR1]]]]; Col.
destruct (bla IAC IAB IBD P1 R1) as [I [HI1 HI2]]; auto.
apply perp_per_2; apply perp_col2 with A1 A2; Col; apply perp_sym; apply perp_col2 with B1 B2; Col; Perp.
apply perp_per_2; apply perp_col2 with A1 A2; Col; apply perp_sym; apply perp_col2 with C1 C2; Col; Perp.
apply perp_per_2; apply perp_col2 with B1 B2; Col; apply perp_sym; apply perp_col2 with D1 D2; Col; Perp.
assert_diffs; apply col_cop2__cop with C1 C2; Col; CopR.
assert_diffs; apply col_cop2__cop with D1 D2; Col; CopR.

*****
HI2 : Col IBD R1 I
HI1 : Col IAC P1 I
I : Tpoint
HDR1 : Col D1 D2 R1
HRR1 : not (eq IBD R1)
HD2R1 : not (eq D2 R1)
HD1R1 : not (eq D1 R1)
R1 : Tpoint
HCP1 : Col C1 C2 P1
HPP1 : not (eq IAC P1)
HC2P1 : not (eq C2 P1)
HC1P1 : not (eq C1 P1)
P1 : Tpoint
HQR : not (eq IAB IBD)
HPQ : not (eq IAC IAB)
HNCol4 : not (Col IBD A1 A2)
HNCol3 : not (Col IAC B1 B2)
HParB : Par_strict B1 B2 C1 C2
HParA : Par_strict A1 A2 D1 D2
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (Col C1 C2 I) (Col D1 D2 I))
+++++
exists I.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).
intros A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD HPerpAB HPerpAC HPerpBD.
intros HCol1 HCol2 HCol3 HCol4 HCol5 HCol6 HNCop1 HCop2 HCop3 HCop4 HNC1.
assert (Col IAB IAC A1) by (assert_diffs; ColR).
assert (Col IAB IAC A2) by (assert_diffs; ColR).
assert (Col IAB IBD B1) by (assert_diffs; ColR).
assert (Col IAB IBD B2) by (assert_diffs; ColR).
assert (Coplanar IAB IAC IBD A1) by Cop.
assert (Coplanar IAB IAC IBD A2) by Cop.
assert (Coplanar IAB IAC IBD B1) by Cop.
assert (Coplanar IAB IAC IBD B2) by Cop.
assert (HNC2 : ~ Col A1 A2 D1).
assert (HNC3 : ~ Col B1 B2 C1).
assert (HParA : Par_strict A1 A2 D1 D2).
apply par_not_col_strict with D1; Col; apply l12_9 with B1 B2; Perp; CopR.
assert (HParB : Par_strict B1 B2 C1 C2).
apply par_not_col_strict with C1; Col; apply l12_9 with A1 A2; Perp; CopR.
assert (HNCol3 : ~ Col IAC B1 B2) by (apply par_not_col with C1 C2; Par; ColR).
assert (HNCol4 : ~ Col IBD A1 A2) by (apply par_not_col with D1 D2; Par; ColR).
assert (HPQ : IAC <> IAB) by (assert_diffs; auto).
assert (HQR : IAB <> IBD) by (assert_diffs; auto).
destruct (diff_col_ex3 C1 C2 IAC) as [P1 [HC1P1 [HC2P1 [HPP1 HCP1]]]]; Col.
destruct (diff_col_ex3 D1 D2 IBD) as [R1 [HD1R1 [HD2R1 [HRR1 HDR1]]]]; Col.
destruct (bla IAC IAB IBD P1 R1) as [I [HI1 HI2]]; auto.
apply perp_per_2; apply perp_col2 with A1 A2; Col; apply perp_sym; apply perp_col2 with B1 B2; Col; Perp.
apply perp_per_2; apply perp_col2 with A1 A2; Col; apply perp_sym; apply perp_col2 with C1 C2; Col; Perp.
apply perp_per_2; apply perp_col2 with B1 B2; Col; apply perp_sym; apply perp_col2 with D1 D2; Col; Perp.
assert_diffs; apply col_cop2__cop with C1 C2; Col; CopR.
assert_diffs; apply col_cop2__cop with D1 D2; Col; CopR.
exists I.

*****
HI2 : Col IBD R1 I
HI1 : Col IAC P1 I
I : Tpoint
HDR1 : Col D1 D2 R1
HRR1 : not (eq IBD R1)
HD2R1 : not (eq D2 R1)
HD1R1 : not (eq D1 R1)
R1 : Tpoint
HCP1 : Col C1 C2 P1
HPP1 : not (eq IAC P1)
HC2P1 : not (eq C2 P1)
HC1P1 : not (eq C1 P1)
P1 : Tpoint
HQR : not (eq IAB IBD)
HPQ : not (eq IAC IAB)
HNCol4 : not (Col IBD A1 A2)
HNCol3 : not (Col IAC B1 B2)
HParB : Par_strict B1 B2 C1 C2
HParA : Par_strict A1 A2 D1 D2
HNC3 : not (Col B1 B2 C1)
HNC2 : not (Col A1 A2 D1)
H6 : Coplanar IAB IAC IBD B2
H5 : Coplanar IAB IAC IBD B1
H4 : Coplanar IAB IAC IBD A2
H3 : Coplanar IAB IAC IBD A1
H2 : Col IAB IBD B2
H1 : Col IAB IBD B1
H0 : Col IAB IAC A2
H : Col IAB IAC A1
HNC1 : not (Col IAB IAC IBD)
HCop4 : Coplanar IAB IAC IBD D2
HCop3 : Coplanar IAB IAC IBD D1
HCop2 : Coplanar IAB IAC IBD C2
HNCop1 : Coplanar IAB IAC IBD C1
HCol6 : Col D1 D2 IBD
HCol5 : Col B1 B2 IBD
HCol4 : Col C1 C2 IAC
HCol3 : Col A1 A2 IAC
HCol2 : Col B1 B2 IAB
HCol1 : Col A1 A2 IAB
HPerpBD : Perp B1 B2 D1 D2
HPerpAC : Perp A1 A2 C1 C2
HPerpAB : Perp A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,D1,D2,IAB,IAC,IBD : Tpoint
bla : bachmann_s_lotschnittaxiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 C2 I) (Col D1 D2 I)
+++++
split; assert_diffs; ColR.
-----
Lemma bachmann_s_lotschnittaxiom__weak_triangle_circumscription_principle : bachmann_s_lotschnittaxiom -> weak_triangle_circumscription_principle.
Proof.
intro bla.
cut (forall A1 A2 B1 B2 C1 C2 D1 D2 IAB IAC IBD, Perp A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 -> Col A1 A2 IAB -> Col B1 B2 IAB -> Col A1 A2 IAC -> Col C1 C2 IAC -> Col B1 B2 IBD -> Col D1 D2 IBD -> Coplanar IAB IAC IBD C1 -> Coplanar IAB IAC IBD C2 -> Coplanar IAB IAC IBD D1 -> Coplanar IAB IAC IBD D2 -> ~ Col IAB IAC IBD -> exists I, Col C1 C2 I /\\ Col D1 D2 I).

*****

*****

+++++
Qed.
-----
End bachmann_s_lotschnittaxiom_weak_triangle_circumscription_principle.
-----
