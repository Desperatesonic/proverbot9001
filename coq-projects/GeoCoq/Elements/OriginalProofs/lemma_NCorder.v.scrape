Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearorder.
-----
Section Euclid.
-----
Context `{Ax1:euclidean_neutral}.
-----
Lemma lemma_NCorder : \n   forall A B C, \n   nCol A B C ->\n   nCol B A C /\ nCol B C A /\ nCol C A B /\ nCol A C B /\ nCol C B A.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.

*****
Ax1 : euclidean_neutral
*****
forall (A B C : Point) (_ : nCol A B C), and (nCol B A C) (and (nCol B C A) (and (nCol C A B) (and (nCol A C B) (nCol C B A))))
+++++
Proof.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.

*****
Ax1 : euclidean_neutral
*****
forall (A B C : Point) (_ : nCol A B C), and (nCol B A C) (and (nCol B C A) (and (nCol C A B) (and (nCol A C B) (nCol C B A))))
+++++
intros.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.

*****
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (nCol B A C) (and (nCol B C A) (and (nCol C A B) (and (nCol A C B) (nCol C B A))))
+++++
assert (~ Col B A C).
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).

*****
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
not (Col B A C)
+++++
intro.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
intro.

*****
H0 : Col B A C
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
False
+++++
assert (Col A B C).
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
intro.
assert (Col A B C).

*****
H0 : Col B A C
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
Col A B C
+++++
forward_using lemma_collinearorder.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
intro.
assert (Col A B C).

*****
H1 : Col A B C
H0 : Col B A C
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
intro.
assert (Col A B C).
idtac.

*****
H1 : Col A B C
H0 : Col B A C
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).

*****
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (nCol B A C) (and (nCol B C A) (and (nCol C A B) (and (nCol A C B) (nCol C B A))))
+++++
assert (~ Col B C A).
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).

*****
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
not (Col B C A)
+++++
intro.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
intro.

*****
H1 : Col B C A
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
False
+++++
assert (Col A B C).
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
intro.
assert (Col A B C).

*****
H1 : Col B C A
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
Col A B C
+++++
forward_using lemma_collinearorder.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
intro.
assert (Col A B C).

*****
H2 : Col A B C
H1 : Col B C A
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
intro.
assert (Col A B C).
idtac.

*****
H2 : Col A B C
H1 : Col B C A
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).

*****
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (nCol B A C) (and (nCol B C A) (and (nCol C A B) (and (nCol A C B) (nCol C B A))))
+++++
assert (~ Col C A B).
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).

*****
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
not (Col C A B)
+++++
intro.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).
intro.

*****
H2 : Col C A B
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
False
+++++
assert (Col A B C).
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).
intro.
assert (Col A B C).

*****
H2 : Col C A B
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
Col A B C
+++++
forward_using lemma_collinearorder.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).
intro.
assert (Col A B C).

*****
H3 : Col A B C
H2 : Col C A B
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).
intro.
assert (Col A B C).
idtac.

*****
H3 : Col A B C
H2 : Col C A B
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).

*****
H2 : not (Col C A B)
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (nCol B A C) (and (nCol B C A) (and (nCol C A B) (and (nCol A C B) (nCol C B A))))
+++++
assert (~ Col A C B).
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).
assert (~ Col A C B).

*****
H2 : not (Col C A B)
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
not (Col A C B)
+++++
intro.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).
assert (~ Col A C B).
intro.

*****
H3 : Col A C B
H2 : not (Col C A B)
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
False
+++++
assert (Col A B C).
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).
assert (~ Col A C B).
intro.
assert (Col A B C).

*****
H3 : Col A C B
H2 : not (Col C A B)
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
Col A B C
+++++
forward_using lemma_collinearorder.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).
assert (~ Col A C B).
intro.
assert (Col A B C).

*****
H4 : Col A B C
H3 : Col A C B
H2 : not (Col C A B)
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).
assert (~ Col A C B).
intro.
assert (Col A B C).
idtac.

*****
H4 : Col A B C
H3 : Col A C B
H2 : not (Col C A B)
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).
assert (~ Col A C B).

*****
H3 : not (Col A C B)
H2 : not (Col C A B)
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (nCol B A C) (and (nCol B C A) (and (nCol C A B) (and (nCol A C B) (nCol C B A))))
+++++
assert (~ Col C B A).
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).
assert (~ Col A C B).
assert (~ Col C B A).

*****
H3 : not (Col A C B)
H2 : not (Col C A B)
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
not (Col C B A)
+++++
intro.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).
assert (~ Col A C B).
assert (~ Col C B A).
intro.

*****
H4 : Col C B A
H3 : not (Col A C B)
H2 : not (Col C A B)
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
False
+++++
assert (Col A B C).
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).
assert (~ Col A C B).
assert (~ Col C B A).
intro.
assert (Col A B C).

*****
H4 : Col C B A
H3 : not (Col A C B)
H2 : not (Col C A B)
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
Col A B C
+++++
forward_using lemma_collinearorder.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).
assert (~ Col A C B).
assert (~ Col C B A).
intro.
assert (Col A B C).

*****
H5 : Col A B C
H4 : Col C B A
H3 : not (Col A C B)
H2 : not (Col C A B)
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).
assert (~ Col A C B).
assert (~ Col C B A).
intro.
assert (Col A B C).
idtac.

*****
H5 : Col A B C
H4 : Col C B A
H3 : not (Col A C B)
H2 : not (Col C A B)
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).
assert (~ Col B C A).
assert (~ Col C A B).
assert (~ Col A C B).
assert (~ Col C B A).

*****
H4 : not (Col C B A)
H3 : not (Col A C B)
H2 : not (Col C A B)
H1 : not (Col B C A)
H0 : not (Col B A C)
H : nCol A B C
A,B,C : Point
Ax1 : euclidean_neutral
*****
and (nCol B A C) (and (nCol B C A) (and (nCol C A B) (and (nCol A C B) (nCol C B A))))
+++++
close.
-----
Lemma lemma_NCorder : forall A B C, nCol A B C -> nCol B A C /\\ nCol B C A /\\ nCol C A B /\\ nCol A C B /\\ nCol C B A.
Proof.
intros.
assert (~ Col B A C).

*****

*****

+++++
Qed.
-----
End Euclid.
-----
