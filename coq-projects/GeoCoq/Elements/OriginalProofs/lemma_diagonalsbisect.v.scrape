Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelNC.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_crossimpliesopposite.
-----
Require Export GeoCoq.Elements.OriginalProofs.proposition_34.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_NCdistinct.
-----
Section Euclid.
-----
Context `{Ax:euclidean_euclidean}.
-----
Lemma lemma_diagonalsbisect : \n   forall A B C D, \n   PG A B C D ->\n   exists X, Midpoint A X C /\ Midpoint B X D.
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.

*****
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D : Point) (_ : PG A B C D), ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
Proof.
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.

*****
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D : Point) (_ : PG A B C D), ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
intros.
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.

*****
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.

*****
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert ((Par A B C D /\ Par A D B C)) by (conclude_def PG ).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).

*****
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (neq A C) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).

*****
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (neq B D) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).

*****
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CR A C B D) by (conclude_def CR ).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).

*****
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Par A B C D) by (conclude_def PG ).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).

*****
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Par A B D C) by (forward_using lemma_parallelflip).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).

*****
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (nCol A B D) by (forward_using lemma_parallelNC).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).

*****
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).

*****
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Par B A D C) by (forward_using lemma_parallelflip).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).

*****
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).

*****
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).

*****
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CR B D A C) by (conclude_def CR ).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).

*****
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (nCol A B C) by (forward_using lemma_parallelNC).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).

*****
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (nCol B A C) by (forward_using lemma_NCorder).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).

*****
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).

*****
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Cong A B D C) by (forward_using proposition_34).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).

*****
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).

*****
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (~ Col M A B).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).

*****
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col M A B)
+++++
intro.
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
intro.

*****
H19 : Col M A B
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A M C) by (conclude_def Col ).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
intro.
assert (Col A M C) by (conclude_def Col ).

*****
H20 : Col A M C
H19 : Col M A B
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col M A C) by (forward_using lemma_collinearorder).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
intro.
assert (Col A M C) by (conclude_def Col ).
assert (Col M A C) by (forward_using lemma_collinearorder).

*****
H21 : Col M A C
H20 : Col A M C
H19 : Col M A B
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq A M) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
intro.
assert (Col A M C) by (conclude_def Col ).
assert (Col M A C) by (forward_using lemma_collinearorder).
assert (neq A M) by (forward_using lemma_betweennotequal).

*****
H22 : neq A M
H21 : Col M A C
H20 : Col A M C
H19 : Col M A B
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq M A) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
intro.
assert (Col A M C) by (conclude_def Col ).
assert (Col M A C) by (forward_using lemma_collinearorder).
assert (neq A M) by (forward_using lemma_betweennotequal).
assert (neq M A) by (conclude lemma_inequalitysymmetric).

*****
H23 : neq M A
H22 : neq A M
H21 : Col M A C
H20 : Col A M C
H19 : Col M A B
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (conclude lemma_collinear4).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
intro.
assert (Col A M C) by (conclude_def Col ).
assert (Col M A C) by (forward_using lemma_collinearorder).
assert (neq A M) by (forward_using lemma_betweennotequal).
assert (neq M A) by (conclude lemma_inequalitysymmetric).
assert (Col A B C) by (conclude lemma_collinear4).

*****
H24 : Col A B C
H23 : neq M A
H22 : neq A M
H21 : Col M A C
H20 : Col A M C
H19 : Col M A B
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (nCol A B C) by (forward_using lemma_parallelNC).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
intro.
assert (Col A M C) by (conclude_def Col ).
assert (Col M A C) by (forward_using lemma_collinearorder).
assert (neq A M) by (forward_using lemma_betweennotequal).
assert (neq M A) by (conclude lemma_inequalitysymmetric).
assert (Col A B C) by (conclude lemma_collinear4).
assert (nCol A B C) by (forward_using lemma_parallelNC).

*****
H25 : nCol A B C
H24 : Col A B C
H23 : neq M A
H22 : neq A M
H21 : Col M A C
H20 : Col A M C
H19 : Col M A B
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).

*****
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Triangle M A B) by (conclude_def Triangle ).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).

*****
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (~ Col M C D).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).

*****
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (Col M C D)
+++++
intro.
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
intro.

*****
H21 : Col M C D
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A M C) by (conclude_def Col ).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
intro.
assert (Col A M C) by (conclude_def Col ).

*****
H22 : Col A M C
H21 : Col M C D
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col M C A) by (forward_using lemma_collinearorder).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
intro.
assert (Col A M C) by (conclude_def Col ).
assert (Col M C A) by (forward_using lemma_collinearorder).

*****
H23 : Col M C A
H22 : Col A M C
H21 : Col M C D
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq M C) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
intro.
assert (Col A M C) by (conclude_def Col ).
assert (Col M C A) by (forward_using lemma_collinearorder).
assert (neq M C) by (forward_using lemma_betweennotequal).

*****
H24 : neq M C
H23 : Col M C A
H22 : Col A M C
H21 : Col M C D
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col C D A) by (conclude lemma_collinear4).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
intro.
assert (Col A M C) by (conclude_def Col ).
assert (Col M C A) by (forward_using lemma_collinearorder).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (Col C D A) by (conclude lemma_collinear4).

*****
H25 : Col C D A
H24 : neq M C
H23 : Col M C A
H22 : Col A M C
H21 : Col M C D
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A C D) by (forward_using lemma_collinearorder).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
intro.
assert (Col A M C) by (conclude_def Col ).
assert (Col M C A) by (forward_using lemma_collinearorder).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (Col C D A) by (conclude lemma_collinear4).
assert (Col A C D) by (forward_using lemma_collinearorder).

*****
H26 : Col A C D
H25 : Col C D A
H24 : neq M C
H23 : Col M C A
H22 : Col A M C
H21 : Col M C D
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (nCol A C D) by (forward_using lemma_parallelNC).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
intro.
assert (Col A M C) by (conclude_def Col ).
assert (Col M C A) by (forward_using lemma_collinearorder).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (Col C D A) by (conclude lemma_collinear4).
assert (Col A C D) by (forward_using lemma_collinearorder).
assert (nCol A C D) by (forward_using lemma_parallelNC).

*****
H27 : nCol A C D
H26 : Col A C D
H25 : Col C D A
H24 : neq M C
H23 : Col M C A
H22 : Col A M C
H21 : Col M C D
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).

*****
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Triangle M C D) by (conclude_def Triangle ).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).

*****
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Par B A C D) by (forward_using lemma_parallelflip).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).

*****
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA B A C A C D) by (conclude proposition_29B).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).

*****
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).

*****
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Out A C M) by (conclude lemma_ray4).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).

*****
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (eq B B) by (conclude cn_equalityreflexive).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).

*****
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (nCol A B C) by (forward_using lemma_parallelNC).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).

*****
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (neq A B) by (forward_using lemma_NCdistinct).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).

*****
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Out A B B) by (conclude lemma_ray4).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).

*****
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).

*****
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).

*****
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).

*****
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (eq D D) by (conclude cn_equalityreflexive).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).

*****
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (nCol A C D) by (forward_using lemma_parallelNC).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).

*****
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (neq C D) by (forward_using lemma_NCdistinct).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).

*****
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (neq C A) by (forward_using lemma_NCdistinct).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).

*****
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Out C D D) by (conclude lemma_ray4).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).

*****
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Out C A M) by (conclude lemma_ray4).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).

*****
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).

*****
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).

*****
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).

*****
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (nCol A C D) by (forward_using lemma_parallelNC).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).

*****
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Col A M C) by (conclude_def Col ).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).

*****
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Col A C M) by (forward_using lemma_collinearorder).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).

*****
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (eq C C) by (conclude cn_equalityreflexive).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).

*****
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Col A C C) by (conclude_def Col ).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).

*****
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (neq M C) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).

*****
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (nCol M C D) by (conclude lemma_NChelper).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).

*****
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).

*****
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).

*****
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Par A B D C) by (forward_using lemma_parallelflip).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).

*****
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA A B D B D C) by (conclude proposition_29B).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).

*****
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).

*****
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Out B D M) by (conclude lemma_ray4).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).

*****
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (eq A A) by (conclude cn_equalityreflexive).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).

*****
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (nCol B A D) by (forward_using lemma_parallelNC).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).

*****
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (neq B A) by (forward_using lemma_NCdistinct).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).

*****
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Out B A A) by (conclude lemma_ray4).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).

*****
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).

*****
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).

*****
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).

*****
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (eq C C) by (conclude cn_equalityreflexive).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).

*****
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (nCol B D C) by (forward_using lemma_parallelNC).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).

*****
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (neq D C) by (forward_using lemma_NCdistinct).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).

*****
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (neq D B) by (forward_using lemma_NCdistinct).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).

*****
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Out D C C) by (conclude lemma_ray4).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).

*****
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Out D B M) by (conclude lemma_ray4).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).

*****
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).

*****
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).

*****
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).

*****
H71 : CongA A B M M D C
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (nCol B D C) by (forward_using lemma_parallelNC).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
assert (nCol B D C) by (forward_using lemma_parallelNC).

*****
H72 : nCol B D C
H71 : CongA A B M M D C
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Col B M D) by (conclude_def Col ).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (Col B M D) by (conclude_def Col ).

*****
H73 : Col B M D
H72 : nCol B D C
H71 : CongA A B M M D C
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Col B D M) by (forward_using lemma_collinearorder).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (Col B M D) by (conclude_def Col ).
assert (Col B D M) by (forward_using lemma_collinearorder).

*****
H74 : Col B D M
H73 : Col B M D
H72 : nCol B D C
H71 : CongA A B M M D C
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (eq D D) by (conclude cn_equalityreflexive).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (Col B M D) by (conclude_def Col ).
assert (Col B D M) by (forward_using lemma_collinearorder).
assert (eq D D) by (conclude cn_equalityreflexive).

*****
H75 : eq D D
H74 : Col B D M
H73 : Col B M D
H72 : nCol B D C
H71 : CongA A B M M D C
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Col B D D) by (conclude_def Col ).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (Col B M D) by (conclude_def Col ).
assert (Col B D M) by (forward_using lemma_collinearorder).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col B D D) by (conclude_def Col ).

*****
H76 : Col B D D
H75 : eq D D
H74 : Col B D M
H73 : Col B M D
H72 : nCol B D C
H71 : CongA A B M M D C
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (neq M D) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (Col B M D) by (conclude_def Col ).
assert (Col B D M) by (forward_using lemma_collinearorder).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col B D D) by (conclude_def Col ).
assert (neq M D) by (forward_using lemma_betweennotequal).

*****
H77 : neq M D
H76 : Col B D D
H75 : eq D D
H74 : Col B D M
H73 : Col B M D
H72 : nCol B D C
H71 : CongA A B M M D C
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (nCol M D C) by (conclude lemma_NChelper).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (Col B M D) by (conclude_def Col ).
assert (Col B D M) by (forward_using lemma_collinearorder).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col B D D) by (conclude_def Col ).
assert (neq M D) by (forward_using lemma_betweennotequal).
assert (nCol M D C) by (conclude lemma_NChelper).

*****
H78 : nCol M D C
H77 : neq M D
H76 : Col B D D
H75 : eq D D
H74 : Col B D M
H73 : Col B M D
H72 : nCol B D C
H71 : CongA A B M M D C
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA M D C C D M) by (conclude lemma_ABCequalsCBA).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (Col B M D) by (conclude_def Col ).
assert (Col B D M) by (forward_using lemma_collinearorder).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col B D D) by (conclude_def Col ).
assert (neq M D) by (forward_using lemma_betweennotequal).
assert (nCol M D C) by (conclude lemma_NChelper).
assert (CongA M D C C D M) by (conclude lemma_ABCequalsCBA).

*****
H79 : CongA M D C C D M
H78 : nCol M D C
H77 : neq M D
H76 : Col B D D
H75 : eq D D
H74 : Col B D M
H73 : Col B M D
H72 : nCol B D C
H71 : CongA A B M M D C
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA A B M C D M) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (Col B M D) by (conclude_def Col ).
assert (Col B D M) by (forward_using lemma_collinearorder).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col B D D) by (conclude_def Col ).
assert (neq M D) by (forward_using lemma_betweennotequal).
assert (nCol M D C) by (conclude lemma_NChelper).
assert (CongA M D C C D M) by (conclude lemma_ABCequalsCBA).
assert (CongA A B M C D M) by (conclude lemma_equalanglestransitive).

*****
H80 : CongA A B M C D M
H79 : CongA M D C C D M
H78 : nCol M D C
H77 : neq M D
H76 : Col B D D
H75 : eq D D
H74 : Col B D M
H73 : Col B M D
H72 : nCol B D C
H71 : CongA A B M M D C
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (CongA M A B M C D) by (conclude lemma_equalanglesflip).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (Col B M D) by (conclude_def Col ).
assert (Col B D M) by (forward_using lemma_collinearorder).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col B D D) by (conclude_def Col ).
assert (neq M D) by (forward_using lemma_betweennotequal).
assert (nCol M D C) by (conclude lemma_NChelper).
assert (CongA M D C C D M) by (conclude lemma_ABCequalsCBA).
assert (CongA A B M C D M) by (conclude lemma_equalanglestransitive).
assert (CongA M A B M C D) by (conclude lemma_equalanglesflip).

*****
H81 : CongA M A B M C D
H80 : CongA A B M C D M
H79 : CongA M D C C D M
H78 : nCol M D C
H77 : neq M D
H76 : Col B D D
H75 : eq D D
H74 : Col B D M
H73 : Col B M D
H72 : nCol B D C
H71 : CongA A B M M D C
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert ((Cong M A M C /\ Cong M B M D /\ CongA A M B C M D)) by (conclude proposition_26A).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (Col B M D) by (conclude_def Col ).
assert (Col B D M) by (forward_using lemma_collinearorder).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col B D D) by (conclude_def Col ).
assert (neq M D) by (forward_using lemma_betweennotequal).
assert (nCol M D C) by (conclude lemma_NChelper).
assert (CongA M D C C D M) by (conclude lemma_ABCequalsCBA).
assert (CongA A B M C D M) by (conclude lemma_equalanglestransitive).
assert (CongA M A B M C D) by (conclude lemma_equalanglesflip).
assert ((Cong M A M C /\\ Cong M B M D /\\ CongA A M B C M D)) by (conclude proposition_26A).

*****
H82 : and (Cong M A M C) (and (Cong M B M D) (CongA A M B C M D))
H81 : CongA M A B M C D
H80 : CongA A B M C D M
H79 : CongA M D C C D M
H78 : nCol M D C
H77 : neq M D
H76 : Col B D D
H75 : eq D D
H74 : Col B D M
H73 : Col B M D
H72 : nCol B D C
H71 : CongA A B M M D C
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Cong A M M C) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (Col B M D) by (conclude_def Col ).
assert (Col B D M) by (forward_using lemma_collinearorder).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col B D D) by (conclude_def Col ).
assert (neq M D) by (forward_using lemma_betweennotequal).
assert (nCol M D C) by (conclude lemma_NChelper).
assert (CongA M D C C D M) by (conclude lemma_ABCequalsCBA).
assert (CongA A B M C D M) by (conclude lemma_equalanglestransitive).
assert (CongA M A B M C D) by (conclude lemma_equalanglesflip).
assert ((Cong M A M C /\\ Cong M B M D /\\ CongA A M B C M D)) by (conclude proposition_26A).
assert (Cong A M M C) by (forward_using lemma_congruenceflip).

*****
H83 : Cong A M M C
H82 : and (Cong M A M C) (and (Cong M B M D) (CongA A M B C M D))
H81 : CongA M A B M C D
H80 : CongA A B M C D M
H79 : CongA M D C C D M
H78 : nCol M D C
H77 : neq M D
H76 : Col B D D
H75 : eq D D
H74 : Col B D M
H73 : Col B M D
H72 : nCol B D C
H71 : CongA A B M M D C
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Cong B M M D) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (Col B M D) by (conclude_def Col ).
assert (Col B D M) by (forward_using lemma_collinearorder).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col B D D) by (conclude_def Col ).
assert (neq M D) by (forward_using lemma_betweennotequal).
assert (nCol M D C) by (conclude lemma_NChelper).
assert (CongA M D C C D M) by (conclude lemma_ABCequalsCBA).
assert (CongA A B M C D M) by (conclude lemma_equalanglestransitive).
assert (CongA M A B M C D) by (conclude lemma_equalanglesflip).
assert ((Cong M A M C /\\ Cong M B M D /\\ CongA A M B C M D)) by (conclude proposition_26A).
assert (Cong A M M C) by (forward_using lemma_congruenceflip).
assert (Cong B M M D) by (forward_using lemma_congruenceflip).

*****
H84 : Cong B M M D
H83 : Cong A M M C
H82 : and (Cong M A M C) (and (Cong M B M D) (CongA A M B C M D))
H81 : CongA M A B M C D
H80 : CongA A B M C D M
H79 : CongA M D C C D M
H78 : nCol M D C
H77 : neq M D
H76 : Col B D D
H75 : eq D D
H74 : Col B D M
H73 : Col B M D
H72 : nCol B D C
H71 : CongA A B M M D C
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Midpoint A M C) by (conclude_def Midpoint ).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (Col B M D) by (conclude_def Col ).
assert (Col B D M) by (forward_using lemma_collinearorder).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col B D D) by (conclude_def Col ).
assert (neq M D) by (forward_using lemma_betweennotequal).
assert (nCol M D C) by (conclude lemma_NChelper).
assert (CongA M D C C D M) by (conclude lemma_ABCequalsCBA).
assert (CongA A B M C D M) by (conclude lemma_equalanglestransitive).
assert (CongA M A B M C D) by (conclude lemma_equalanglesflip).
assert ((Cong M A M C /\\ Cong M B M D /\\ CongA A M B C M D)) by (conclude proposition_26A).
assert (Cong A M M C) by (forward_using lemma_congruenceflip).
assert (Cong B M M D) by (forward_using lemma_congruenceflip).
assert (Midpoint A M C) by (conclude_def Midpoint ).

*****
H85 : Midpoint A M C
H84 : Cong B M M D
H83 : Cong A M M C
H82 : and (Cong M A M C) (and (Cong M B M D) (CongA A M B C M D))
H81 : CongA M A B M C D
H80 : CongA A B M C D M
H79 : CongA M D C C D M
H78 : nCol M D C
H77 : neq M D
H76 : Col B D D
H75 : eq D D
H74 : Col B D M
H73 : Col B M D
H72 : nCol B D C
H71 : CongA A B M M D C
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
assert (Midpoint B M D) by (conclude_def Midpoint ).
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (Col B M D) by (conclude_def Col ).
assert (Col B D M) by (forward_using lemma_collinearorder).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col B D D) by (conclude_def Col ).
assert (neq M D) by (forward_using lemma_betweennotequal).
assert (nCol M D C) by (conclude lemma_NChelper).
assert (CongA M D C C D M) by (conclude lemma_ABCequalsCBA).
assert (CongA A B M C D M) by (conclude lemma_equalanglestransitive).
assert (CongA M A B M C D) by (conclude lemma_equalanglesflip).
assert ((Cong M A M C /\\ Cong M B M D /\\ CongA A M B C M D)) by (conclude proposition_26A).
assert (Cong A M M C) by (forward_using lemma_congruenceflip).
assert (Cong B M M D) by (forward_using lemma_congruenceflip).
assert (Midpoint A M C) by (conclude_def Midpoint ).
assert (Midpoint B M D) by (conclude_def Midpoint ).

*****
H86 : Midpoint B M D
H85 : Midpoint A M C
H84 : Cong B M M D
H83 : Cong A M M C
H82 : and (Cong M A M C) (and (Cong M B M D) (CongA A M B C M D))
H81 : CongA M A B M C D
H80 : CongA A B M C D M
H79 : CongA M D C C D M
H78 : nCol M D C
H77 : neq M D
H76 : Col B D D
H75 : eq D D
H74 : Col B D M
H73 : Col B M D
H72 : nCol B D C
H71 : CongA A B M M D C
H70 : CongA B D C M D C
H69 : CongA B D C B D C
H68 : Out D B M
H67 : Out D C C
H66 : neq D B
H65 : neq D C
H64 : nCol B D C
H63 : eq C C
H62 : CongA A B M B D C
H61 : CongA A B M A B D
H60 : CongA A B D A B M
H59 : Out B A A
H58 : neq B A
H57 : nCol B A D
H56 : eq A A
H55 : Out B D M
H54 : CongA A B D A B D
H53 : CongA A B D B D C
H52 : Par A B D C
H51 : CongA B A M D C M
H50 : CongA M C D D C M
H49 : nCol M C D
H48 : neq M C
H47 : Col A C C
H46 : eq C C
H45 : Col A C M
H44 : Col A M C
H43 : nCol A C D
H42 : CongA B A M M C D
H41 : CongA A C D M C D
H40 : CongA A C D A C D
H39 : Out C A M
H38 : Out C D D
H37 : neq C A
H36 : neq C D
H35 : nCol A C D
H34 : eq D D
H33 : CongA B A M A C D
H32 : CongA B A M B A C
H31 : CongA B A C B A M
H30 : Out A B B
H29 : neq A B
H28 : nCol A B C
H27 : eq B B
H26 : Out A C M
H25 : CongA B A C B A C
H24 : CongA B A C A C D
H23 : Par B A C D
H22 : Triangle M C D
H21 : not (Col M C D)
H20 : Triangle M A B
H19 : not (Col M A B)
H18 : Cong A B C D
H17 : Cong A B D C
H16 : TS B A C D
H15 : nCol B A C
H14 : nCol A B C
H13 : CR B D A C
H12 : BetS D M B
H11 : BetS C M A
H10 : Par B A D C
H9 : TS A B D C
H8 : nCol A B D
H7 : Par A B D C
H6 : Par A B C D
H5 : CR A C B D
H4 : neq B D
H3 : neq A C
H2 : and (Par A B C D) (Par A D B C)
H1 : BetS B M D
H0 : BetS A M C
M : Point
H : PG A B C D
A,B,C,D : Point
Ax : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => and (Midpoint A X C) (Midpoint B X D))
+++++
close.
-----
Lemma lemma_diagonalsbisect : forall A B C D, PG A B C D -> exists X, Midpoint A X C /\\ Midpoint B X D.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M C /\\ BetS B M D)) by (conclude lemma_diagonalsmeet);destruct Tf as [M];spliter.
assert ((Par A B C D /\\ Par A D B C)) by (conclude_def PG ).
assert (neq A C) by (forward_using lemma_betweennotequal).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (CR A C B D) by (conclude_def CR ).
assert (Par A B C D) by (conclude_def PG ).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (nCol A B D) by (forward_using lemma_parallelNC).
assert (TS A B D C) by (forward_using lemma_crossimpliesopposite).
assert (Par B A D C) by (forward_using lemma_parallelflip).
assert (BetS C M A) by (conclude axiom_betweennesssymmetry).
assert (BetS D M B) by (conclude axiom_betweennesssymmetry).
assert (CR B D A C) by (conclude_def CR ).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (nCol B A C) by (forward_using lemma_NCorder).
assert (TS B A C D) by (forward_using lemma_crossimpliesopposite).
assert (Cong A B D C) by (forward_using proposition_34).
assert (Cong A B C D) by (forward_using lemma_congruenceflip).
assert (~ Col M A B).
assert (Triangle M A B) by (conclude_def Triangle ).
assert (~ Col M C D).
assert (Triangle M C D) by (conclude_def Triangle ).
assert (Par B A C D) by (forward_using lemma_parallelflip).
assert (CongA B A C A C D) by (conclude proposition_29B).
assert (CongA B A C B A C) by (conclude lemma_equalanglesreflexive).
assert (Out A C M) by (conclude lemma_ray4).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (nCol A B C) by (forward_using lemma_parallelNC).
assert (neq A B) by (forward_using lemma_NCdistinct).
assert (Out A B B) by (conclude lemma_ray4).
assert (CongA B A C B A M) by (conclude lemma_equalangleshelper).
assert (CongA B A M B A C) by (conclude lemma_equalanglessymmetric).
assert (CongA B A M A C D) by (conclude lemma_equalanglestransitive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (neq C D) by (forward_using lemma_NCdistinct).
assert (neq C A) by (forward_using lemma_NCdistinct).
assert (Out C D D) by (conclude lemma_ray4).
assert (Out C A M) by (conclude lemma_ray4).
assert (CongA A C D A C D) by (conclude lemma_equalanglesreflexive).
assert (CongA A C D M C D) by (conclude lemma_equalangleshelper).
assert (CongA B A M M C D) by (conclude lemma_equalanglestransitive).
assert (nCol A C D) by (forward_using lemma_parallelNC).
assert (Col A M C) by (conclude_def Col ).
assert (Col A C M) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col A C C) by (conclude_def Col ).
assert (neq M C) by (forward_using lemma_betweennotequal).
assert (nCol M C D) by (conclude lemma_NChelper).
assert (CongA M C D D C M) by (conclude lemma_ABCequalsCBA).
assert (CongA B A M D C M) by (conclude lemma_equalanglestransitive).
assert (Par A B D C) by (forward_using lemma_parallelflip).
assert (CongA A B D B D C) by (conclude proposition_29B).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (Out B D M) by (conclude lemma_ray4).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (nCol B A D) by (forward_using lemma_parallelNC).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M B D C) by (conclude lemma_equalanglestransitive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (neq D C) by (forward_using lemma_NCdistinct).
assert (neq D B) by (forward_using lemma_NCdistinct).
assert (Out D C C) by (conclude lemma_ray4).
assert (Out D B M) by (conclude lemma_ray4).
assert (CongA B D C B D C) by (conclude lemma_equalanglesreflexive).
assert (CongA B D C M D C) by (conclude lemma_equalangleshelper).
assert (CongA A B M M D C) by (conclude lemma_equalanglestransitive).
assert (nCol B D C) by (forward_using lemma_parallelNC).
assert (Col B M D) by (conclude_def Col ).
assert (Col B D M) by (forward_using lemma_collinearorder).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (Col B D D) by (conclude_def Col ).
assert (neq M D) by (forward_using lemma_betweennotequal).
assert (nCol M D C) by (conclude lemma_NChelper).
assert (CongA M D C C D M) by (conclude lemma_ABCequalsCBA).
assert (CongA A B M C D M) by (conclude lemma_equalanglestransitive).
assert (CongA M A B M C D) by (conclude lemma_equalanglesflip).
assert ((Cong M A M C /\\ Cong M B M D /\\ CongA A M B C M D)) by (conclude proposition_26A).
assert (Cong A M M C) by (forward_using lemma_congruenceflip).
assert (Cong B M M D) by (forward_using lemma_congruenceflip).
assert (Midpoint A M C) by (conclude_def Midpoint ).
assert (Midpoint B M D) by (conclude_def Midpoint ).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
