Require Import Coq.Lists.List.
-----
Require Import Events.
-----
Import ListNotations.
-----
Module Signature.
-----
Definition t := list Type.
-----
End Signature.
-----
Module Memory.
-----
Inductive t : Signature.t -> Type :=\n  | Nil : t []\n  | Cons : forall (A : Type) (sig : Signature.t), A -> t sig -> t (A :: sig).
-----
Definition head {A : Type} {sig : Signature.t} (mem : t (A :: sig)) : A :=\n    match mem with\n    | Cons _ _ x _ => x\n    end.
-----
Definition tail {A : Type} {sig : Signature.t} (mem : t (A :: sig)) : t sig :=\n    match mem with\n    | Cons _ _ _ mem => mem\n    end.
-----
End Memory.
-----
Module Ref.
-----
Class C (A : Type) (sig : Signature.t) : Type := New {\n    read : Memory.t sig -> A;\n    write : Memory.t sig -> A -> Memory.t sig }.
-----
Instance cons_left (A : Type) (sig : Signature.t) : C A (A :: sig) := {\n    read mem := Memory.head mem;\n    write mem x := Memory.Cons _ _ x (Memory.tail mem) }.
-----
Instance cons_right (A B : Type) (sig : Signature.t) (I : C A sig)\n    : C A (B :: sig) := {\n    read mem := read (Memory.tail mem);\n    write mem x :=\n      Memory.Cons _ _ (Memory.head mem) (write (Memory.tail mem) x) }.
-----
End Ref.
-----
Module C.
-----
Inductive t (sig : Signature.t) : Type -> Type :=\n  | Ret : forall (A : Type), A -> t sig A\n  | Bind : forall (A B : Type), t sig A -> (A -> t sig B) -> t sig B\n  | Read : forall (A : Type), `{Ref.C A sig} -> t sig A\n    \n  | Write : forall (A : Type), `{Ref.C A sig} -> A -> t sig unit\n    \n  | Send : forall (A : Type) (command : Command.t), Command.request command ->\n    A -> (A -> Command.answer command -> t sig (option A)) -> t sig unit\n    \n  | Exit : forall (A : Type), t sig A.
-----
Arguments Ret {sig A} _.
-----
Arguments Bind {sig A B} _ _.
-----
Arguments Read {sig A} _.
-----
Arguments Write {sig A} _.
-----
Arguments Send {sig A} _ _ _ _.
-----
Arguments Exit {sig A}.
-----
Module Notations.
-----
Notation "'let!' X ':=' A 'in' B" := (Bind A (fun X => B))\n      (at level 200, X ident, A at level 100, B at level 200).
-----
Notation "'let!' X ':' T ':=' A 'in' B" := (Bind (A := T) A (fun X => B))\n      (at level 200, X ident, A at level 100, T at level 200, B at level 200).
-----
Notation "'do!' A 'in' B" := (Bind A (fun _ => B))\n      (at level 200, B at level 200).
-----
End Notations.
-----
End C.
-----
