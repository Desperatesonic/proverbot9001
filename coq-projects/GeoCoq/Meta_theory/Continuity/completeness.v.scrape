Require Import GeoCoq.Axioms.continuity_axioms.
-----
Require Import GeoCoq.Meta_theory.Dimension_axioms.upper_dim_2.
-----
Require Import GeoCoq.Meta_theory.Dimension_axioms.upper_dim_3.
-----
Require Import GeoCoq.Tarski_dev.Ch10_line_reflexivity_2.
-----
Section Completeness.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless}\n  (f : @Tpoint Tn -> @Tpoint Tm) P Q,\n  P <> Q -> extension f -> line_extension f P Q.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint) (_ : not (eq P Q)) (_ : extension f), line_extension f P Q
+++++
Proof.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint) (_ : not (eq P Q)) (_ : extension f), line_extension f P Q
+++++
unfold extension.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.
Proof.
unfold extension.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint) (_ : not (eq P Q)) (_ : and (inj f) (and (pres_bet f) (pres_cong f))), line_extension f P Q
+++++
unfold inj.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.
Proof.
unfold extension.
unfold inj.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint) (_ : not (eq P Q)) (_ : and (forall (A B : Tpoint) (_ : eq (f A) (f B)), eq A B) (and (pres_bet f) (pres_cong f))), line_extension f P Q
+++++
unfold pres_bet.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.
Proof.
unfold extension.
unfold inj.
unfold pres_bet.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint) (_ : not (eq P Q)) (_ : and (forall (A B : Tpoint) (_ : eq (f A) (f B)), eq A B) (and (forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)) (pres_cong f))), line_extension f P Q
+++++
unfold pres_cong.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.
Proof.
unfold extension.
unfold inj.
unfold pres_bet.
unfold pres_cong.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint) (_ : not (eq P Q)) (_ : and (forall (A B : Tpoint) (_ : eq (f A) (f B)), eq A B) (and (forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)) (forall (A B C D : Tpoint) (_ : Cong A B C D), Cong (f A) (f B) (f C) (f D)))), line_extension f P Q
+++++
unfold line_extension.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.
Proof.
unfold extension.
unfold inj.
unfold pres_bet.
unfold pres_cong.
unfold line_extension.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint) (_ : not (eq P Q)) (_ : and (forall (A B : Tpoint) (_ : eq (f A) (f B)), eq A B) (and (forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)) (forall (A B C D : Tpoint) (_ : Cong A B C D), Cong (f A) (f B) (f C) (f D)))), and (not (eq P Q)) (and (inj_line f P Q) (and (pres_bet_line f P Q) (pres_cong_line f P Q)))
+++++
unfold inj_line.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.
Proof.
unfold extension.
unfold inj.
unfold pres_bet.
unfold pres_cong.
unfold line_extension.
unfold inj_line.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint) (_ : not (eq P Q)) (_ : and (forall (A B : Tpoint) (_ : eq (f A) (f B)), eq A B) (and (forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)) (forall (A B C D : Tpoint) (_ : Cong A B C D), Cong (f A) (f B) (f C) (f D)))), and (not (eq P Q)) (and (forall (A B : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : eq (f A) (f B)), eq A B) (and (pres_bet_line f P Q) (pres_cong_line f P Q)))
+++++
unfold pres_bet_line.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.
Proof.
unfold extension.
unfold inj.
unfold pres_bet.
unfold pres_cong.
unfold line_extension.
unfold inj_line.
unfold pres_bet_line.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint) (_ : not (eq P Q)) (_ : and (forall (A B : Tpoint) (_ : eq (f A) (f B)), eq A B) (and (forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)) (forall (A B C D : Tpoint) (_ : Cong A B C D), Cong (f A) (f B) (f C) (f D)))), and (not (eq P Q)) (and (forall (A B : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : eq (f A) (f B)), eq A B) (and (forall (A B C : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : Col P Q C) (_ : Bet A B C), Bet (f A) (f B) (f C)) (pres_cong_line f P Q)))
+++++
unfold pres_cong_line.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.
Proof.
unfold extension.
unfold inj.
unfold pres_bet.
unfold pres_cong.
unfold line_extension.
unfold inj_line.
unfold pres_bet_line.
unfold pres_cong_line.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint) (_ : not (eq P Q)) (_ : and (forall (A B : Tpoint) (_ : eq (f A) (f B)), eq A B) (and (forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)) (forall (A B C D : Tpoint) (_ : Cong A B C D), Cong (f A) (f B) (f C) (f D)))), and (not (eq P Q)) (and (forall (A B : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : eq (f A) (f B)), eq A B) (and (forall (A B C : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : Col P Q C) (_ : Bet A B C), Bet (f A) (f B) (f C)) (forall (A B C D : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : Col P Q C) (_ : Col P Q D) (_ : Cong A B C D), Cong (f A) (f B) (f C) (f D))))
+++++
intros Tm f P Q HPQ fext.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.
Proof.
unfold extension.
unfold inj.
unfold pres_bet.
unfold pres_cong.
unfold line_extension.
unfold inj_line.
unfold pres_bet_line.
unfold pres_cong_line.
intros Tm f P Q HPQ fext.

*****
fext : and (forall (A B : Tpoint) (_ : eq (f A) (f B)), eq A B)\n (and (forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C))\n (forall (A B C D : Tpoint) (_ : Cong A B C D),\n Cong (f A) (f B) (f C) (f D)))
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq P Q)) (and (forall (A B : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : eq (f A) (f B)), eq A B) (and (forall (A B C : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : Col P Q C) (_ : Bet A B C), Bet (f A) (f B) (f C)) (forall (A B C D : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : Col P Q C) (_ : Col P Q D) (_ : Cong A B C D), Cong (f A) (f B) (f C) (f D))))
+++++
spliter.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.
Proof.
unfold extension.
unfold inj.
unfold pres_bet.
unfold pres_cong.
unfold line_extension.
unfold inj_line.
unfold pres_bet_line.
unfold pres_cong_line.
intros Tm f P Q HPQ fext.
spliter.

*****
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : forall (A B : Tpoint) (_ : eq (f A) (f B)), eq A B
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq P Q)) (and (forall (A B : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : eq (f A) (f B)), eq A B) (and (forall (A B C : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : Col P Q C) (_ : Bet A B C), Bet (f A) (f B) (f C)) (forall (A B C D : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : Col P Q C) (_ : Col P Q D) (_ : Cong A B C D), Cong (f A) (f B) (f C) (f D))))
+++++
repeat split.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.
Proof.
unfold extension.
unfold inj.
unfold pres_bet.
unfold pres_cong.
unfold line_extension.
unfold inj_line.
unfold pres_bet_line.
unfold pres_cong_line.
intros Tm f P Q HPQ fext.
spliter.
repeat split.

*****
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : forall (A B : Tpoint) (_ : eq (f A) (f B)), eq A B
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Q)
+++++
auto.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.
Proof.
unfold extension.
unfold inj.
unfold pres_bet.
unfold pres_cong.
unfold line_extension.
unfold inj_line.
unfold pres_bet_line.
unfold pres_cong_line.
intros Tm f P Q HPQ fext.
spliter.
repeat split.

*****
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : forall (A B : Tpoint) (_ : eq (f A) (f B)), eq A B
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : eq (f A) (f B)), eq A B
+++++
auto.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.
Proof.
unfold extension.
unfold inj.
unfold pres_bet.
unfold pres_cong.
unfold line_extension.
unfold inj_line.
unfold pres_bet_line.
unfold pres_cong_line.
intros Tm f P Q HPQ fext.
spliter.
repeat split.

*****
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : forall (A B : Tpoint) (_ : eq (f A) (f B)), eq A B
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : Col P Q C) (_ : Bet A B C), Bet (f A) (f B) (f C)
+++++
auto.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.
Proof.
unfold extension.
unfold inj.
unfold pres_bet.
unfold pres_cong.
unfold line_extension.
unfold inj_line.
unfold pres_bet_line.
unfold pres_cong_line.
intros Tm f P Q HPQ fext.
spliter.
repeat split.

*****
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : forall (A B : Tpoint) (_ : eq (f A) (f B)), eq A B
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : Col P Q C) (_ : Col P Q D) (_ : Cong A B C D), Cong (f A) (f B) (f C) (f D)
+++++
auto.
-----
Lemma extension__line_extension : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, P <> Q -> extension f -> line_extension f P Q.
Proof.
unfold extension.
unfold inj.
unfold pres_bet.
unfold pres_cong.
unfold line_extension.
unfold inj_line.
unfold pres_bet_line.
unfold pres_cong_line.
intros Tm f P Q HPQ fext.
spliter.
repeat split.

*****

*****

+++++
Qed.
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless}\n  {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm}\n  (f : @Tpoint Tn -> @Tpoint Tm),\n  extension f ->\n  forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : forall _ : Tpoint, Tpoint) (_ : extension f) (A B C : Tpoint) (_ : Bet (f A) (f B) (f C)), Bet A B C
+++++
Proof.
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : forall _ : Tpoint, Tpoint) (_ : extension f) (A B C : Tpoint) (_ : Bet (f A) (f B) (f C)), Bet A B C
+++++
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.

*****
HBet : Bet (f A) (f B) (f C)
A,B,C : Tpoint
fCong : pres_cong f
fBet : pres_bet f
finj : inj f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
destruct (eq_dec_points (f A) (f B)) as [Heq|].
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|].

*****
Heq : eq (f A) (f B)
HBet : Bet (f A) (f B) (f C)
A,B,C : Tpoint
fCong : pres_cong f
fBet : pres_bet f
finj : inj f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
apply finj in Heq.
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|].
apply finj in Heq.

*****
Heq : eq A B
HBet : Bet (f A) (f B) (f C)
A,B,C : Tpoint
fCong : pres_cong f
fBet : pres_bet f
finj : inj f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
subst.
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|].
apply finj in Heq.
subst.

*****
HBet : Bet (f B) (f B) (f C)
B,C : Tpoint
fCong : pres_cong f
fBet : pres_bet f
finj : inj f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet B B C
+++++
Between.
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|].

*****
H : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
A,B,C : Tpoint
fCong : pres_cong f
fBet : pres_bet f
finj : inj f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
destruct (segment_construction A B B C) as [D [HD1 HD2]].
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|].
destruct (segment_construction A B B C) as [D [HD1 HD2]].

*****
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
A,B,C : Tpoint
fCong : pres_cong f
fBet : pres_bet f
finj : inj f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
assert (C = D).
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|].
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).

*****
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
A,B,C : Tpoint
fCong : pres_cong f
fBet : pres_bet f
finj : inj f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq C D
+++++
idtac.
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|].
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.

*****
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
A,B,C : Tpoint
fCong : pres_cong f
fBet : pres_bet f
finj : inj f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq C D
+++++
apply finj.
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|].
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
apply finj.

*****
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
A,B,C : Tpoint
fCong : pres_cong f
fBet : pres_bet f
finj : inj f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f C) (f D)
+++++
apply between_cong_3 with (f A) (f B).
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|].
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
apply finj.
apply between_cong_3 with (f A) (f B).

*****
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
A,B,C : Tpoint
fCong : pres_cong f
fBet : pres_bet f
finj : inj f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f A) (f B))
+++++
Cong.
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|].
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
apply finj.
apply between_cong_3 with (f A) (f B).

*****
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
A,B,C : Tpoint
fCong : pres_cong f
fBet : pres_bet f
finj : inj f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f A) (f B) (f C)
+++++
Cong.
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|].
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
apply finj.
apply between_cong_3 with (f A) (f B).

*****
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
A,B,C : Tpoint
fCong : pres_cong f
fBet : pres_bet f
finj : inj f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f A) (f B) (f D)
+++++
Cong.
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|].
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
apply finj.
apply between_cong_3 with (f A) (f B).

*****
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
A,B,C : Tpoint
fCong : pres_cong f
fBet : pres_bet f
finj : inj f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong (f B) (f C) (f B) (f D)
+++++
Cong.
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|].
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).

*****
H0 : eq C D
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
A,B,C : Tpoint
fCong : pres_cong f
fBet : pres_bet f
finj : inj f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
subst.
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|].
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
subst.

*****
HD2 : Cong B D B D
HD1 : Bet A B D
H : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f D)
A,B,D : Tpoint
fCong : pres_cong f
fBet : pres_bet f
finj : inj f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B D
+++++
auto.
-----
Lemma extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f [finj [fBet fCong]] A B C HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|].

*****

*****

+++++
Qed.
-----
Lemma extension_reverse_col : forall {Tm: Tarski_neutral_dimensionless}\n  {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm}\n  (f : @Tpoint Tn -> @Tpoint Tm),\n  extension f ->\n  forall A B C, Col (f A) (f B) (f C) -> Col A B C.
-----
Lemma extension_reverse_col : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Col (f A) (f B) (f C) -> Col A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : forall _ : Tpoint, Tpoint) (_ : extension f) (A B C : Tpoint) (_ : Col (f A) (f B) (f C)), Col A B C
+++++
Proof.
-----
Lemma extension_reverse_col : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Col (f A) (f B) (f C) -> Col A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : forall _ : Tpoint, Tpoint) (_ : extension f) (A B C : Tpoint) (_ : Col (f A) (f B) (f C)), Col A B C
+++++
unfold Col.
-----
Lemma extension_reverse_col : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Col (f A) (f B) (f C) -> Col A B C.
Proof.
unfold Col.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : forall _ : Tpoint, Tpoint) (_ : extension f) (A B C : Tpoint) (_ : or (Bet (f A) (f B) (f C)) (or (Bet (f B) (f C) (f A)) (Bet (f C) (f A) (f B)))), or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intros Tm Tm2 f fext A B C HCol.
-----
Lemma extension_reverse_col : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Col (f A) (f B) (f C) -> Col A B C.
Proof.
unfold Col.
intros Tm Tm2 f fext A B C HCol.

*****
HCol : or (Bet (f A) (f B) (f C))\n (or (Bet (f B) (f C) (f A)) (Bet (f C) (f A) (f B)))
A,B,C : Tpoint
fext : extension f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
assert (fBetInv := extension_reverse_bet f fext).
-----
Lemma extension_reverse_col : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Col (f A) (f B) (f C) -> Col A B C.
Proof.
unfold Col.
intros Tm Tm2 f fext A B C HCol.
assert (fBetInv := extension_reverse_bet f fext).

*****
fBetInv : forall (A B C : Tpoint) (_ : Bet (f A) (f B) (f C)), Bet A B C
HCol : or (Bet (f A) (f B) (f C))\n (or (Bet (f B) (f C) (f A)) (Bet (f C) (f A) (f B)))
A,B,C : Tpoint
fext : extension f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
destruct HCol as [|[|]].
-----
Lemma extension_reverse_col : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Col (f A) (f B) (f C) -> Col A B C.
Proof.
unfold Col.
intros Tm Tm2 f fext A B C HCol.
assert (fBetInv := extension_reverse_bet f fext).
destruct HCol as [|[|]].

*****
fBetInv : forall (A B C : Tpoint) (_ : Bet (f A) (f B) (f C)), Bet A B C
H : Bet (f A) (f B) (f C)
A,B,C : Tpoint
fext : extension f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
auto.
-----
Lemma extension_reverse_col : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Col (f A) (f B) (f C) -> Col A B C.
Proof.
unfold Col.
intros Tm Tm2 f fext A B C HCol.
assert (fBetInv := extension_reverse_bet f fext).
destruct HCol as [|[|]].

*****
fBetInv : forall (A B C : Tpoint) (_ : Bet (f A) (f B) (f C)), Bet A B C
H : Bet (f B) (f C) (f A)
A,B,C : Tpoint
fext : extension f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
auto.
-----
Lemma extension_reverse_col : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Col (f A) (f B) (f C) -> Col A B C.
Proof.
unfold Col.
intros Tm Tm2 f fext A B C HCol.
assert (fBetInv := extension_reverse_bet f fext).
destruct HCol as [|[|]].

*****
fBetInv : forall (A B C : Tpoint) (_ : Bet (f A) (f B) (f C)), Bet A B C
H : Bet (f C) (f A) (f B)
A,B,C : Tpoint
fext : extension f
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
auto.
-----
Lemma extension_reverse_col : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> forall A B C, Col (f A) (f B) (f C) -> Col A B C.
Proof.
unfold Col.
intros Tm Tm2 f fext A B C HCol.
assert (fBetInv := extension_reverse_bet f fext).
destruct HCol as [|[|]].

*****

*****

+++++
Qed.
-----
Lemma line_completeness_aux : line_completeness ->\n  forall (Tm: Tarski_neutral_dimensionless)\n  (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm)\n  (f : @Tpoint Tn -> @Tpoint Tm),\n  @archimedes_axiom Tm ->\n  extension f ->\n  forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A ->\n    exists B, Coplanar P Q R B /\ f B = A.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : line_completeness) (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : forall _ : Tpoint, Tpoint) (_ : archimedes_axiom) (_ : extension f) (A P Q R : Tpoint) (_ : not (Col P Q R)) (_ : Coplanar (f P) (f Q) (f R) A), ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
Proof.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : line_completeness) (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : forall _ : Tpoint, Tpoint) (_ : archimedes_axiom) (_ : extension f) (A P Q R : Tpoint) (_ : not (Col P Q R)) (_ : Coplanar (f P) (f Q) (f R) A), ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.

*****
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
assert (fext' := fext).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).

*****
fext' : extension f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).

*****
fext' : extension f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
+++++
intros.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
intros.

*****
H : not (eq X Y)
X,Y : Tpoint
fext' : extension f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
line_extension f X Y
+++++
apply extension__line_extension.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
intros.
apply extension__line_extension.

*****
H : not (eq X Y)
X,Y : Tpoint
fext' : extension f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X Y)
+++++
assumption.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
intros.
apply extension__line_extension.

*****
H : not (eq X Y)
X,Y : Tpoint
fext' : extension f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
extension f
+++++
assumption.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).

*****
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
fext' : extension f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
unfold extension in fext'.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.

*****
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
fext' : and (inj f) (and (pres_bet f) (pres_cong f))
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
unfold inj.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.

*****
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
fext' : and (inj f) (and (pres_bet f) (pres_cong f))
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
unfold pres_bet in fext'.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.

*****
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
fext' : and (inj f)\n (and (forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C))\n (pres_cong f))
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
unfold pres_cong in fext'.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.

*****
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
fext' : and (inj f)\n (and (forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C))\n (forall (A B C D : Tpoint) (_ : Cong A B C D),\n Cong (f A) (f B) (f C) (f D)))
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
spliter.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.

*****
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].

*****
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
assert_diffs.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.

*****
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
destruct (col_dec (f R) (f S) A).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).

*****
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
assert (HB : exists B, Col R S B /\ f B = A).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).

*****
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Col R S B) (eq (f B) A))
+++++
assert (R <> S).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
assert (R <> S).

*****
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq R S)
+++++
intro.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
assert (R <> S).
intro.

*****
H8 : eq R S
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
assert (R <> S).
intro.
subst.

*****
H2 : Col (f S) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H4 : not (eq Q S)
H7 : not (eq P S)
H5 : not (eq P Q)
HS : Midpoint S P Q
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HNCol : not (Col P Q S)
HCop : Coplanar (f P) (f Q) (f S) A
P,Q,S : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
assert (R <> S).
intro.
subst.
apply HNCol.

*****
H2 : Col (f S) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H4 : not (eq Q S)
H7 : not (eq P S)
H5 : not (eq P Q)
HS : Midpoint S P Q
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HNCol : not (Col P Q S)
HCop : Coplanar (f P) (f Q) (f S) A
P,Q,S : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q S
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
assert (R <> S).

*****
H8 : not (eq R S)
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Col R S B) (eq (f B) A))
+++++
idtac.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
assert (R <> S).
idtac.

*****
H8 : not (eq R S)
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Col R S B) (eq (f B) A))
+++++
apply lc.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
assert (R <> S).
idtac.
apply lc.

*****
H8 : not (eq R S)
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Tarski_neutral_dimensionless_with_decidable_point_equality Tm
+++++
auto.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
assert (R <> S).
idtac.
apply lc.

*****
H8 : not (eq R S)
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
archimedes_axiom
+++++
auto.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
assert (R <> S).
idtac.
apply lc.

*****
H8 : not (eq R S)
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
line_extension f R S
+++++
auto.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
assert (R <> S).
idtac.
apply lc.

*****
H8 : not (eq R S)
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f R) (f S) A
+++++
auto.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).

*****
HB : ex (fun B : Tpoint => and (Col R S B) (eq (f B) A))
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
destruct HB as [B []].
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
destruct HB as [B []].

*****
H9 : eq (f B) A
H8 : Col R S B
B : Tpoint
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
exists B.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
destruct HB as [B []].
exists B.

*****
H9 : eq (f B) A
H8 : Col R S B
B : Tpoint
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Coplanar P Q R B) (eq (f B) A)
+++++
split.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
destruct HB as [B []].
exists B.
split.

*****
H9 : eq (f B) A
H8 : Col R S B
B : Tpoint
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q R B
+++++
exists S.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
destruct HB as [B []].
exists B.
split.
exists S.

*****
H9 : eq (f B) A
H8 : Col R S B
B : Tpoint
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (and (Col P Q S) (Col R B S)) (or (and (Col P R S) (Col Q B S)) (and (Col P B S) (Col Q R S)))
+++++
left.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
destruct HB as [B []].
exists B.
split.
exists S.
left.

*****
H9 : eq (f B) A
H8 : Col R S B
B : Tpoint
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q S) (Col R B S)
+++++
split.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
destruct HB as [B []].
exists B.
split.
exists S.
left.
split.

*****
H9 : eq (f B) A
H8 : Col R S B
B : Tpoint
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q S
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
destruct HB as [B []].
exists B.
split.
exists S.
left.
split.

*****
H9 : eq (f B) A
H8 : Col R S B
B : Tpoint
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col R B S
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
destruct HB as [B []].
exists B.
split.

*****
H9 : eq (f B) A
H8 : Col R S B
B : Tpoint
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f B) A
+++++
idtac.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
assert (HB : exists B, Col R S B /\\ f B = A).
destruct HB as [B []].
exists B.
split.
idtac.

*****
H9 : eq (f B) A
H8 : Col R S B
B : Tpoint
H2 : Col (f R) (f S) A
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f B) A
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).

*****
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
destruct (col_dec (f P) (f Q) A).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).

*****
H8 : Col (f P) (f Q) A
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
assert (HB : exists B, Col P Q B /\ f B = A).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
assert (HB : exists B, Col P Q B /\\ f B = A).

*****
H8 : Col (f P) (f Q) A
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Col P Q B) (eq (f B) A))
+++++
apply lc.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
assert (HB : exists B, Col P Q B /\\ f B = A).
apply lc.

*****
H8 : Col (f P) (f Q) A
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Tarski_neutral_dimensionless_with_decidable_point_equality Tm
+++++
auto.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
assert (HB : exists B, Col P Q B /\\ f B = A).
apply lc.

*****
H8 : Col (f P) (f Q) A
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
archimedes_axiom
+++++
auto.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
assert (HB : exists B, Col P Q B /\\ f B = A).
apply lc.

*****
H8 : Col (f P) (f Q) A
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
line_extension f P Q
+++++
auto.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
assert (HB : exists B, Col P Q B /\\ f B = A).
apply lc.

*****
H8 : Col (f P) (f Q) A
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) A
+++++
auto.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
assert (HB : exists B, Col P Q B /\\ f B = A).

*****
HB : ex (fun B : Tpoint => and (Col P Q B) (eq (f B) A))
H8 : Col (f P) (f Q) A
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
idtac.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
assert (HB : exists B, Col P Q B /\\ f B = A).
idtac.

*****
HB : ex (fun B : Tpoint => and (Col P Q B) (eq (f B) A))
H8 : Col (f P) (f Q) A
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
destruct HB as [B []].
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
assert (HB : exists B, Col P Q B /\\ f B = A).
idtac.
destruct HB as [B []].

*****
H10 : eq (f B) A
H9 : Col P Q B
B : Tpoint
H8 : Col (f P) (f Q) A
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
exists B.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
assert (HB : exists B, Col P Q B /\\ f B = A).
idtac.
destruct HB as [B []].
exists B.

*****
H10 : eq (f B) A
H9 : Col P Q B
B : Tpoint
H8 : Col (f P) (f Q) A
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Coplanar P Q R B) (eq (f B) A)
+++++
split.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
assert (HB : exists B, Col P Q B /\\ f B = A).
idtac.
destruct HB as [B []].
exists B.
split.

*****
H10 : eq (f B) A
H9 : Col P Q B
B : Tpoint
H8 : Col (f P) (f Q) A
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q R B
+++++
Cop.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
assert (HB : exists B, Col P Q B /\\ f B = A).
idtac.
destruct HB as [B []].
exists B.
split.

*****
H10 : eq (f B) A
H9 : Col P Q B
B : Tpoint
H8 : Col (f P) (f Q) A
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f B) A
+++++
Cop.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).

*****
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].

*****
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar (f P) (f Q) (f R) A
+++++
trivial.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].

*****
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col (f R) (f S) A)
+++++
trivial.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].

*****
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col (f P) (f Q) A)
+++++
trivial.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].

*****
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetS (f P) (f S) (f Q)
+++++
trivial.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.

*****
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
BetS (f P) (f S) (f Q)
+++++
repeat split.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
repeat split.

*****
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) (f S) (f Q)
+++++
Between.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
repeat split.

*****
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f P) (f S))
+++++
Between.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
repeat split.

*****
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f S) (f Q))
+++++
Between.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].

*****
HX2 : or (BetS (f P) X (f R)) (BetS (f Q) X (f R))
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
trivial.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.

*****
HX2 : or (BetS (f P) X (f R)) (BetS (f Q) X (f R))
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
assert (HY : exists Y, Coplanar P Q R Y /\ f Y = X).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).

*****
HX2 : or (BetS (f P) X (f R)) (BetS (f Q) X (f R))
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Coplanar P Q R Y) (eq (f Y) X))
+++++
destruct HX2 as [[]|[]].
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].

*****
H10 : and (not (eq (f P) X)) (not (eq X (f R)))
H9 : Bet (f P) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Coplanar P Q R Y) (eq (f Y) X))
+++++
assert (HY : exists Y, Col P R Y /\ f Y = X).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col P R Y /\\ f Y = X).

*****
H10 : and (not (eq (f P) X)) (not (eq X (f R)))
H9 : Bet (f P) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Col P R Y) (eq (f Y) X))
+++++
try apply lc.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col P R Y /\\ f Y = X).
try apply lc.

*****
H10 : and (not (eq (f P) X)) (not (eq X (f R)))
H9 : Bet (f P) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Tarski_neutral_dimensionless_with_decidable_point_equality Tm
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col P R Y /\\ f Y = X).
try apply lc.

*****
H10 : and (not (eq (f P) X)) (not (eq X (f R)))
H9 : Bet (f P) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
archimedes_axiom
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col P R Y /\\ f Y = X).
try apply lc.

*****
H10 : and (not (eq (f P) X)) (not (eq X (f R)))
H9 : Bet (f P) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
line_extension f P R
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col P R Y /\\ f Y = X).
try apply lc.

*****
H10 : and (not (eq (f P) X)) (not (eq X (f R)))
H9 : Bet (f P) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f R) X
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col P R Y /\\ f Y = X).

*****
HY : ex (fun Y : Tpoint => and (Col P R Y) (eq (f Y) X))
H10 : and (not (eq (f P) X)) (not (eq X (f R)))
H9 : Bet (f P) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Coplanar P Q R Y) (eq (f Y) X))
+++++
try apply lc.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col P R Y /\\ f Y = X).
try apply lc.

*****
HY : ex (fun Y : Tpoint => and (Col P R Y) (eq (f Y) X))
H10 : and (not (eq (f P) X)) (not (eq X (f R)))
H9 : Bet (f P) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Coplanar P Q R Y) (eq (f Y) X))
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col P R Y /\\ f Y = X).
try apply lc.
Col.

*****
HY : ex (fun Y : Tpoint => and (Col P R Y) (eq (f Y) X))
H10 : and (not (eq (f P) X)) (not (eq X (f R)))
H9 : Bet (f P) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Coplanar P Q R Y) (eq (f Y) X))
+++++
destruct HY as [Y []].
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col P R Y /\\ f Y = X).
try apply lc.
Col.
destruct HY as [Y []].

*****
H12 : eq (f Y) X
H11 : Col P R Y
Y : Tpoint
H10 : and (not (eq (f P) X)) (not (eq X (f R)))
H9 : Bet (f P) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Coplanar P Q R Y) (eq (f Y) X))
+++++
exists Y.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col P R Y /\\ f Y = X).
try apply lc.
Col.
destruct HY as [Y []].
exists Y.

*****
H12 : eq (f Y) X
H11 : Col P R Y
Y : Tpoint
H10 : and (not (eq (f P) X)) (not (eq X (f R)))
H9 : Bet (f P) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Coplanar P Q R Y) (eq (f Y) X)
+++++
split.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col P R Y /\\ f Y = X).
try apply lc.
Col.
destruct HY as [Y []].
exists Y.
split.

*****
H12 : eq (f Y) X
H11 : Col P R Y
Y : Tpoint
H10 : and (not (eq (f P) X)) (not (eq X (f R)))
H9 : Bet (f P) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q R Y
+++++
Cop.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col P R Y /\\ f Y = X).
try apply lc.
Col.
destruct HY as [Y []].
exists Y.
split.

*****
H12 : eq (f Y) X
H11 : Col P R Y
Y : Tpoint
H10 : and (not (eq (f P) X)) (not (eq X (f R)))
H9 : Bet (f P) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f Y) X
+++++
Cop.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].

*****
H10 : and (not (eq (f Q) X)) (not (eq X (f R)))
H9 : Bet (f Q) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Coplanar P Q R Y) (eq (f Y) X))
+++++
assert (HY : exists Y, Col Q R Y /\ f Y = X).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col Q R Y /\\ f Y = X).

*****
H10 : and (not (eq (f Q) X)) (not (eq X (f R)))
H9 : Bet (f Q) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Col Q R Y) (eq (f Y) X))
+++++
try apply lc.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col Q R Y /\\ f Y = X).
try apply lc.

*****
H10 : and (not (eq (f Q) X)) (not (eq X (f R)))
H9 : Bet (f Q) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Tarski_neutral_dimensionless_with_decidable_point_equality Tm
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col Q R Y /\\ f Y = X).
try apply lc.

*****
H10 : and (not (eq (f Q) X)) (not (eq X (f R)))
H9 : Bet (f Q) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
archimedes_axiom
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col Q R Y /\\ f Y = X).
try apply lc.

*****
H10 : and (not (eq (f Q) X)) (not (eq X (f R)))
H9 : Bet (f Q) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
line_extension f Q R
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col Q R Y /\\ f Y = X).
try apply lc.

*****
H10 : and (not (eq (f Q) X)) (not (eq X (f R)))
H9 : Bet (f Q) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f Q) (f R) X
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col Q R Y /\\ f Y = X).

*****
HY : ex (fun Y : Tpoint => and (Col Q R Y) (eq (f Y) X))
H10 : and (not (eq (f Q) X)) (not (eq X (f R)))
H9 : Bet (f Q) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Coplanar P Q R Y) (eq (f Y) X))
+++++
try apply lc.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col Q R Y /\\ f Y = X).
try apply lc.

*****
HY : ex (fun Y : Tpoint => and (Col Q R Y) (eq (f Y) X))
H10 : and (not (eq (f Q) X)) (not (eq X (f R)))
H9 : Bet (f Q) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Coplanar P Q R Y) (eq (f Y) X))
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col Q R Y /\\ f Y = X).
try apply lc.
Col.

*****
HY : ex (fun Y : Tpoint => and (Col Q R Y) (eq (f Y) X))
H10 : and (not (eq (f Q) X)) (not (eq X (f R)))
H9 : Bet (f Q) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Coplanar P Q R Y) (eq (f Y) X))
+++++
destruct HY as [Y []].
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col Q R Y /\\ f Y = X).
try apply lc.
Col.
destruct HY as [Y []].

*****
H12 : eq (f Y) X
H11 : Col Q R Y
Y : Tpoint
H10 : and (not (eq (f Q) X)) (not (eq X (f R)))
H9 : Bet (f Q) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Coplanar P Q R Y) (eq (f Y) X))
+++++
exists Y.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col Q R Y /\\ f Y = X).
try apply lc.
Col.
destruct HY as [Y []].
exists Y.

*****
H12 : eq (f Y) X
H11 : Col Q R Y
Y : Tpoint
H10 : and (not (eq (f Q) X)) (not (eq X (f R)))
H9 : Bet (f Q) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Coplanar P Q R Y) (eq (f Y) X)
+++++
split.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col Q R Y /\\ f Y = X).
try apply lc.
Col.
destruct HY as [Y []].
exists Y.
split.

*****
H12 : eq (f Y) X
H11 : Col Q R Y
Y : Tpoint
H10 : and (not (eq (f Q) X)) (not (eq X (f R)))
H9 : Bet (f Q) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q R Y
+++++
Cop.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HX2 as [[]|[]].
assert (HY : exists Y, Col Q R Y /\\ f Y = X).
try apply lc.
Col.
destruct HY as [Y []].
exists Y.
split.

*****
H12 : eq (f Y) X
H11 : Col Q R Y
Y : Tpoint
H10 : and (not (eq (f Q) X)) (not (eq X (f R)))
H9 : Bet (f Q) X (f R)
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f Y) X
+++++
Cop.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).

*****
HY : ex (fun Y : Tpoint => and (Coplanar P Q R Y) (eq (f Y) X))
HX2 : or (BetS (f P) X (f R)) (BetS (f Q) X (f R))
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
destruct HY as [Y []].
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].

*****
H10 : eq (f Y) X
H9 : Coplanar P Q R Y
Y : Tpoint
HX2 : or (BetS (f P) X (f R)) (BetS (f Q) X (f R))
HX1 : Col A (f S) X
X : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
subst X.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.

*****
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
assert (S <> Y).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).

*****
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq S Y)
+++++
intro.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.

*****
H10 : eq S Y
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
treat_equalities.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.

*****
HX2 : or (BetS (f P) (f S) (f R)) (BetS (f Q) (f S) (f R))
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.

*****
HX2 : or (BetS (f P) (f S) (f R)) (BetS (f Q) (f S) (f R))
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q R
+++++
apply (extension_reverse_col f).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).

*****
HX2 : or (BetS (f P) (f S) (f R)) (BetS (f Q) (f S) (f R))
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
extension f
+++++
auto.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).

*****
HX2 : or (BetS (f P) (f S) (f R)) (BetS (f Q) (f S) (f R))
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) (f R)
+++++
auto.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.

*****
HX2 : or (BetS (f P) (f S) (f R)) (BetS (f Q) (f S) (f R))
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) (f R)
+++++
assert (Bet P S Q).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.
assert (Bet P S Q).

*****
HX2 : or (BetS (f P) (f S) (f R)) (BetS (f Q) (f S) (f R))
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P S Q
+++++
Between.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.
assert (Bet P S Q).

*****
H10 : Bet P S Q
HX2 : or (BetS (f P) (f S) (f R)) (BetS (f Q) (f S) (f R))
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) (f R)
+++++
idtac.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.
assert (Bet P S Q).
idtac.

*****
H10 : Bet P S Q
HX2 : or (BetS (f P) (f S) (f R)) (BetS (f Q) (f S) (f R))
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) (f R)
+++++
assert (Bet (f P) (f S) (f Q)).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.
assert (Bet P S Q).
idtac.
assert (Bet (f P) (f S) (f Q)).

*****
H10 : Bet P S Q
HX2 : or (BetS (f P) (f S) (f R)) (BetS (f Q) (f S) (f R))
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) (f S) (f Q)
+++++
auto.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.
assert (Bet P S Q).
idtac.
assert (Bet (f P) (f S) (f Q)).

*****
H11 : Bet (f P) (f S) (f Q)
H10 : Bet P S Q
HX2 : or (BetS (f P) (f S) (f R)) (BetS (f Q) (f S) (f R))
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) (f R)
+++++
idtac.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.
assert (Bet P S Q).
idtac.
assert (Bet (f P) (f S) (f Q)).
idtac.

*****
H11 : Bet (f P) (f S) (f Q)
H10 : Bet P S Q
HX2 : or (BetS (f P) (f S) (f R)) (BetS (f Q) (f S) (f R))
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) (f R)
+++++
destruct HX2 as [[HBet []]|[HBet []]].
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.
assert (Bet P S Q).
idtac.
assert (Bet (f P) (f S) (f Q)).
idtac.
destruct HX2 as [[HBet []]|[HBet []]].

*****
H11 : Bet (f P) (f S) (f Q)
H10 : Bet P S Q
H13 : not (eq (f S) (f R))
H12 : not (eq (f P) (f S))
HBet : Bet (f P) (f S) (f R)
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) (f R)
+++++
idtac.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.
assert (Bet P S Q).
idtac.
assert (Bet (f P) (f S) (f Q)).
idtac.
destruct HX2 as [[HBet []]|[HBet []]].
idtac.

*****
H11 : Bet (f P) (f S) (f Q)
H10 : Bet P S Q
H13 : not (eq (f S) (f R))
H12 : not (eq (f P) (f S))
HBet : Bet (f P) (f S) (f R)
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) (f R)
+++++
apply (col_transitivity_2 (f S)).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.
assert (Bet P S Q).
idtac.
assert (Bet (f P) (f S) (f Q)).
idtac.
destruct HX2 as [[HBet []]|[HBet []]].
idtac.
apply (col_transitivity_2 (f S)).

*****
H11 : Bet (f P) (f S) (f Q)
H10 : Bet P S Q
H13 : not (eq (f S) (f R))
H12 : not (eq (f P) (f S))
HBet : Bet (f P) (f S) (f R)
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f S) (f P))
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.
assert (Bet P S Q).
idtac.
assert (Bet (f P) (f S) (f Q)).
idtac.
destruct HX2 as [[HBet []]|[HBet []]].
idtac.
apply (col_transitivity_2 (f S)).

*****
H11 : Bet (f P) (f S) (f Q)
H10 : Bet P S Q
H13 : not (eq (f S) (f R))
H12 : not (eq (f P) (f S))
HBet : Bet (f P) (f S) (f R)
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f S) (f P) (f Q)
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.
assert (Bet P S Q).
idtac.
assert (Bet (f P) (f S) (f Q)).
idtac.
destruct HX2 as [[HBet []]|[HBet []]].
idtac.
apply (col_transitivity_2 (f S)).

*****
H11 : Bet (f P) (f S) (f Q)
H10 : Bet P S Q
H13 : not (eq (f S) (f R))
H12 : not (eq (f P) (f S))
HBet : Bet (f P) (f S) (f R)
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f S) (f P) (f R)
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.
assert (Bet P S Q).
idtac.
assert (Bet (f P) (f S) (f Q)).
idtac.
destruct HX2 as [[HBet []]|[HBet []]].

*****
H11 : Bet (f P) (f S) (f Q)
H10 : Bet P S Q
H13 : not (eq (f S) (f R))
H12 : not (eq (f Q) (f S))
HBet : Bet (f Q) (f S) (f R)
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) (f R)
+++++
apply col_permutation_4.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.
assert (Bet P S Q).
idtac.
assert (Bet (f P) (f S) (f Q)).
idtac.
destruct HX2 as [[HBet []]|[HBet []]].
apply col_permutation_4.

*****
H11 : Bet (f P) (f S) (f Q)
H10 : Bet P S Q
H13 : not (eq (f S) (f R))
H12 : not (eq (f Q) (f S))
HBet : Bet (f Q) (f S) (f R)
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f Q) (f P) (f R)
+++++
apply (col_transitivity_2 (f S)).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.
assert (Bet P S Q).
idtac.
assert (Bet (f P) (f S) (f Q)).
idtac.
destruct HX2 as [[HBet []]|[HBet []]].
apply col_permutation_4.
apply (col_transitivity_2 (f S)).

*****
H11 : Bet (f P) (f S) (f Q)
H10 : Bet P S Q
H13 : not (eq (f S) (f R))
H12 : not (eq (f Q) (f S))
HBet : Bet (f Q) (f S) (f R)
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f S) (f Q))
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.
assert (Bet P S Q).
idtac.
assert (Bet (f P) (f S) (f Q)).
idtac.
destruct HX2 as [[HBet []]|[HBet []]].
apply col_permutation_4.
apply (col_transitivity_2 (f S)).

*****
H11 : Bet (f P) (f S) (f Q)
H10 : Bet P S Q
H13 : not (eq (f S) (f R))
H12 : not (eq (f Q) (f S))
HBet : Bet (f Q) (f S) (f R)
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f S) (f Q) (f P)
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
intro.
treat_equalities.
apply HNCol.
apply (extension_reverse_col f).
auto.
assert (Bet P S Q).
idtac.
assert (Bet (f P) (f S) (f Q)).
idtac.
destruct HX2 as [[HBet []]|[HBet []]].
apply col_permutation_4.
apply (col_transitivity_2 (f S)).

*****
H11 : Bet (f P) (f S) (f Q)
H10 : Bet P S Q
H13 : not (eq (f S) (f R))
H12 : not (eq (f Q) (f S))
HBet : Bet (f Q) (f S) (f R)
H9 : Coplanar P Q R S
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f S) (f Q) (f R)
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).

*****
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
assert (HB : exists B, Col S Y B /\ f B = A).
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
assert (HB : exists B, Col S Y B /\\ f B = A).

*****
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Col S Y B) (eq (f B) A))
+++++
apply lc.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
assert (HB : exists B, Col S Y B /\\ f B = A).
apply lc.

*****
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Tarski_neutral_dimensionless_with_decidable_point_equality Tm
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
assert (HB : exists B, Col S Y B /\\ f B = A).
apply lc.

*****
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
archimedes_axiom
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
assert (HB : exists B, Col S Y B /\\ f B = A).
apply lc.

*****
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
line_extension f S Y
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
assert (HB : exists B, Col S Y B /\\ f B = A).
apply lc.

*****
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f S) (f Y) A
+++++
Col.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
assert (HB : exists B, Col S Y B /\\ f B = A).

*****
HB : ex (fun B : Tpoint => and (Col S Y B) (eq (f B) A))
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
idtac.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
assert (HB : exists B, Col S Y B /\\ f B = A).
idtac.

*****
HB : ex (fun B : Tpoint => and (Col S Y B) (eq (f B) A))
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
destruct HB as [B []].
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
assert (HB : exists B, Col S Y B /\\ f B = A).
idtac.
destruct HB as [B []].

*****
H12 : eq (f B) A
H11 : Col S Y B
B : Tpoint
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))
+++++
exists B.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
assert (HB : exists B, Col S Y B /\\ f B = A).
idtac.
destruct HB as [B []].
exists B.

*****
H12 : eq (f B) A
H11 : Col S Y B
B : Tpoint
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Coplanar P Q R B) (eq (f B) A)
+++++
split.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
assert (HB : exists B, Col S Y B /\\ f B = A).
idtac.
destruct HB as [B []].
exists B.
split.

*****
H12 : eq (f B) A
H11 : Col S Y B
B : Tpoint
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q R B
+++++
apply col_cop2__cop with S Y.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
assert (HB : exists B, Col S Y B /\\ f B = A).
idtac.
destruct HB as [B []].
exists B.
split.
apply col_cop2__cop with S Y.

*****
H12 : eq (f B) A
H11 : Col S Y B
B : Tpoint
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq S Y)
+++++
Cop.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
assert (HB : exists B, Col S Y B /\\ f B = A).
idtac.
destruct HB as [B []].
exists B.
split.
apply col_cop2__cop with S Y.

*****
H12 : eq (f B) A
H11 : Col S Y B
B : Tpoint
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q R S
+++++
Cop.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
assert (HB : exists B, Col S Y B /\\ f B = A).
idtac.
destruct HB as [B []].
exists B.
split.
apply col_cop2__cop with S Y.

*****
H12 : eq (f B) A
H11 : Col S Y B
B : Tpoint
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q R Y
+++++
Cop.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
assert (HB : exists B, Col S Y B /\\ f B = A).
idtac.
destruct HB as [B []].
exists B.
split.
apply col_cop2__cop with S Y.

*****
H12 : eq (f B) A
H11 : Col S Y B
B : Tpoint
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col S Y B
+++++
Cop.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
assert (HB : exists B, Col S Y B /\\ f B = A).
idtac.
destruct HB as [B []].
exists B.
split.

*****
H12 : eq (f B) A
H11 : Col S Y B
B : Tpoint
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f B) A
+++++
idtac.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).
unfold extension in fext'.
unfold inj.
unfold pres_bet in fext'.
unfold pres_cong in fext'.
spliter.
destruct (@midpoint_existence Tn TnEQD P Q) as [S HS].
assert_diffs.
destruct (col_dec (f R) (f S) A).
destruct (col_dec (f P) (f Q) A).
destruct (hilbert_s_version_of_pasch (f P) (f Q) (f R) A (f S)) as [X [HX1 HX2]].
trivial.
assert (HY : exists Y, Coplanar P Q R Y /\\ f Y = X).
destruct HY as [Y []].
subst X.
assert (S <> Y).
assert (HB : exists B, Col S Y B /\\ f B = A).
idtac.
destruct HB as [B []].
exists B.
split.
idtac.

*****
H12 : eq (f B) A
H11 : Col S Y B
B : Tpoint
H10 : not (eq S Y)
H9 : Coplanar P Q R Y
HX1 : Col A (f S) (f Y)
HX2 : or (BetS (f P) (f Y) (f R)) (BetS (f Q) (f Y) (f R))
Y : Tpoint
H8 : not (Col (f P) (f Q) A)
H2 : not (Col (f R) (f S) A)
H6 : not (eq S Q)
H3 : not (eq S P)
H7 : not (eq P R)
H4 : not (eq Q R)
H5 : not (eq P Q)
HS : Midpoint S P Q
S : Tpoint
Haux : forall (X Y : Tpoint) (_ : not (eq X Y)), line_extension f X Y
H1 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : forall (A B C : Tpoint) (_ : Bet A B C), Bet (f A) (f B) (f C)
H : inj f
HCop : Coplanar (f P) (f Q) (f R) A
HNCol : not (Col P Q R)
P,Q,R : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f B) A
+++++
Cop.
-----
Lemma line_completeness_aux : line_completeness -> forall (Tm: Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> extension f -> forall A P Q R, ~ Col P Q R -> Coplanar (f P) (f Q) (f R) A -> exists B, Coplanar P Q R B /\\ f B = A.
Proof.
intros lc Tm Tm2 f archi fext A P Q R HNCol HCop.
assert (fext' := fext).
assert (Haux : forall X Y, X <> Y -> line_extension f X Y).

*****

*****

+++++
Qed.
-----
Lemma line_completeness__completeness_for_planes : line_completeness -> completeness_for_planes.
-----
Lemma line_completeness__completeness_for_planes : line_completeness -> completeness_for_planes.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : line_completeness, completeness_for_planes
+++++
Proof.
-----
Lemma line_completeness__completeness_for_planes : line_completeness -> completeness_for_planes.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : line_completeness, completeness_for_planes
+++++
intros lc Tm Tm2 M f archi fext A.
-----
Lemma line_completeness__completeness_for_planes : line_completeness -> completeness_for_planes.
Proof.
intros lc Tm Tm2 M f archi fext A.

*****
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => eq (f B) A)
+++++
assert (HB : exists B, Coplanar PA PB PC B /\ f B = A).
-----
Lemma line_completeness__completeness_for_planes : line_completeness -> completeness_for_planes.
Proof.
intros lc Tm Tm2 M f archi fext A.
assert (HB : exists B, Coplanar PA PB PC B /\\ f B = A).

*****
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Coplanar PA PB PC B) (eq (f B) A))
+++++
apply line_completeness_aux; trivial; [exact lower_dim|apply all_coplanar].
-----
Lemma line_completeness__completeness_for_planes : line_completeness -> completeness_for_planes.
Proof.
intros lc Tm Tm2 M f archi fext A.
assert (HB : exists B, Coplanar PA PB PC B /\\ f B = A).
apply line_completeness_aux; trivial; [exact lower_dim|apply all_coplanar].

*****
HB : ex (fun B : Tpoint => and (Coplanar PA PB PC B) (eq (f B) A))
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => eq (f B) A)
+++++
destruct HB as [B []].
-----
Lemma line_completeness__completeness_for_planes : line_completeness -> completeness_for_planes.
Proof.
intros lc Tm Tm2 M f archi fext A.
assert (HB : exists B, Coplanar PA PB PC B /\\ f B = A).
apply line_completeness_aux; trivial; [exact lower_dim|apply all_coplanar].
destruct HB as [B []].

*****
H0 : eq (f B) A
H : Coplanar PA PB PC B
B : Tpoint
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => eq (f B) A)
+++++
exists B; assumption.
-----
Lemma line_completeness__completeness_for_planes : line_completeness -> completeness_for_planes.
Proof.
intros lc Tm Tm2 M f archi fext A.
assert (HB : exists B, Coplanar PA PB PC B /\\ f B = A).
apply line_completeness_aux; trivial; [exact lower_dim|apply all_coplanar].
destruct HB as [B []].
exists B; assumption.

*****

*****

+++++
Qed.
-----
Lemma completeness_aux : forall {Tm: Tarski_neutral_dimensionless}\n  P Q R (f : @Tpoint Tn -> @Tpoint Tm) A,\n  (exists B, Coplanar P Q R B /\ f B = A) -> exists B, f B = A.
-----
Lemma completeness_aux : forall {Tm: Tarski_neutral_dimensionless} P Q R (f : @Tpoint Tn -> @Tpoint Tm) A, (exists B, Coplanar P Q R B /\\ f B = A) -> exists B, f B = A.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (P Q R : Tpoint) (f : forall _ : Tpoint, Tpoint) (A : Tpoint) (_ : ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))), ex (fun B : Tpoint => eq (f B) A)
+++++
Proof.
-----
Lemma completeness_aux : forall {Tm: Tarski_neutral_dimensionless} P Q R (f : @Tpoint Tn -> @Tpoint Tm) A, (exists B, Coplanar P Q R B /\\ f B = A) -> exists B, f B = A.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (P Q R : Tpoint) (f : forall _ : Tpoint, Tpoint) (A : Tpoint) (_ : ex (fun B : Tpoint => and (Coplanar P Q R B) (eq (f B) A))), ex (fun B : Tpoint => eq (f B) A)
+++++
intros Tm P Q R f A [B []].
-----
Lemma completeness_aux : forall {Tm: Tarski_neutral_dimensionless} P Q R (f : @Tpoint Tn -> @Tpoint Tm) A, (exists B, Coplanar P Q R B /\\ f B = A) -> exists B, f B = A.
Proof.
intros Tm P Q R f A [B []].

*****
H0 : eq (f B) A
H : Coplanar P Q R B
B : Tpoint
A : Tpoint
f : forall _ : Tpoint, Tpoint
P,Q,R : Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => eq (f B) A)
+++++
exists B.
-----
Lemma completeness_aux : forall {Tm: Tarski_neutral_dimensionless} P Q R (f : @Tpoint Tn -> @Tpoint Tm) A, (exists B, Coplanar P Q R B /\\ f B = A) -> exists B, f B = A.
Proof.
intros Tm P Q R f A [B []].
exists B.

*****
H0 : eq (f B) A
H : Coplanar P Q R B
B : Tpoint
A : Tpoint
f : forall _ : Tpoint, Tpoint
P,Q,R : Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f B) A
+++++
assumption.
-----
Lemma completeness_aux : forall {Tm: Tarski_neutral_dimensionless} P Q R (f : @Tpoint Tn -> @Tpoint Tm) A, (exists B, Coplanar P Q R B /\\ f B = A) -> exists B, f B = A.
Proof.
intros Tm P Q R f A [B []].
exists B.
assumption.

*****

*****

+++++
Qed.
-----
Lemma line_completeness__completeness_for_3d_spaces :\n  (exists P Q R S, ~ Coplanar P Q R S) ->\n  line_completeness -> completeness_for_3d_spaces.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : ex (fun P : Tpoint => ex (fun Q : Tpoint => ex (fun R : Tpoint => ex (fun S : Tpoint => not (Coplanar P Q R S)))))) (_ : line_completeness), completeness_for_3d_spaces
+++++
Proof.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : ex (fun P : Tpoint => ex (fun Q : Tpoint => ex (fun R : Tpoint => ex (fun S : Tpoint => not (Coplanar P Q R S)))))) (_ : line_completeness), completeness_for_3d_spaces
+++++
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.

*****
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => eq (f B) A)
+++++
assert (~ Col P Q R).
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).

*****
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P Q R)
+++++
apply ncop__ncol with S, HNCop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).

*****
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => eq (f B) A)
+++++
destruct (col_dec (f P) (f Q) A).
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).

*****
H0 : Col (f P) (f Q) A
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => eq (f B) A)
+++++
apply (completeness_aux P Q R), line_completeness_aux.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
apply (completeness_aux P Q R), line_completeness_aux.

*****
H0 : Col (f P) (f Q) A
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
line_completeness
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
apply (completeness_aux P Q R), line_completeness_aux.

*****
H0 : Col (f P) (f Q) A
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Tarski_neutral_dimensionless_with_decidable_point_equality Tm
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
apply (completeness_aux P Q R), line_completeness_aux.

*****
H0 : Col (f P) (f Q) A
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
archimedes_axiom
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
apply (completeness_aux P Q R), line_completeness_aux.

*****
H0 : Col (f P) (f Q) A
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
extension f
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
apply (completeness_aux P Q R), line_completeness_aux.

*****
H0 : Col (f P) (f Q) A
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P Q R)
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
apply (completeness_aux P Q R), line_completeness_aux.

*****
H0 : Col (f P) (f Q) A
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar (f P) (f Q) (f R) A
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).

*****
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => eq (f B) A)
+++++
assert (pi : plane_intersection_axiom).
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).

*****
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
plane_intersection_axiom
+++++
cut upper_dim_3_axiom.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
cut upper_dim_3_axiom.

*****
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : upper_dim_3_axiom, plane_intersection_axiom
+++++
apply upper_dim_3_equivalent_axioms.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
cut upper_dim_3_axiom.
apply upper_dim_3_equivalent_axioms.

*****
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
List.In plane_intersection_axiom (cons upper_dim_3_axiom (cons orthonormal_family_axiom (cons space_separation_axiom (cons plane_intersection_axiom (cons median_planes_axiom nil)))))
+++++
simpl.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
cut upper_dim_3_axiom.
apply upper_dim_3_equivalent_axioms.
simpl.

*****
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq upper_dim_3_axiom plane_intersection_axiom) (or (eq orthonormal_family_axiom plane_intersection_axiom) (or (eq space_separation_axiom plane_intersection_axiom) (or (eq plane_intersection_axiom plane_intersection_axiom) (or (eq median_planes_axiom plane_intersection_axiom) False))))
+++++
tauto.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
cut upper_dim_3_axiom.
apply upper_dim_3_equivalent_axioms.

*****
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
List.In upper_dim_3_axiom (cons upper_dim_3_axiom (cons orthonormal_family_axiom (cons space_separation_axiom (cons plane_intersection_axiom (cons median_planes_axiom nil)))))
+++++
simpl.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
cut upper_dim_3_axiom.
apply upper_dim_3_equivalent_axioms.
simpl.

*****
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (eq upper_dim_3_axiom upper_dim_3_axiom) (or (eq orthonormal_family_axiom upper_dim_3_axiom) (or (eq space_separation_axiom upper_dim_3_axiom) (or (eq plane_intersection_axiom upper_dim_3_axiom) (or (eq median_planes_axiom upper_dim_3_axiom) False))))
+++++
tauto.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
cut upper_dim_3_axiom.

*****
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
upper_dim_3_axiom
+++++
unfold upper_dim_3_axiom.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
cut upper_dim_3_axiom.
unfold upper_dim_3_axiom.

*****
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C P Q R : Tpoint) (_ : not (eq P Q)) (_ : not (eq Q R)) (_ : not (eq P R)) (_ : Cong A P A Q) (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Cong A P A R) (_ : Cong B P B R) (_ : Cong C P C R), or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
exact upper_dim_3.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).

*****
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => eq (f B) A)
+++++
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].

*****
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar (f P) (f Q) A (f P)
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].

*****
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar (f P) (f R) (f S) (f P)
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].

*****
HX3 : not (eq (f P) X)
HX2 : Coplanar (f P) (f R) (f S) X
HX1 : Coplanar (f P) (f Q) A X
X : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => eq (f B) A)
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.

*****
HX3 : not (eq (f P) X)
HX2 : Coplanar (f P) (f R) (f S) X
HX1 : Coplanar (f P) (f Q) A X
X : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => eq (f B) A)
+++++
assert (HY : exists Y, Coplanar P R S Y /\ f Y = X).
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).

*****
HX3 : not (eq (f P) X)
HX2 : Coplanar (f P) (f R) (f S) X
HX1 : Coplanar (f P) (f Q) A X
X : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Coplanar P R S Y) (eq (f Y) X))
+++++
apply line_completeness_aux.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
apply line_completeness_aux.

*****
HX3 : not (eq (f P) X)
HX2 : Coplanar (f P) (f R) (f S) X
HX1 : Coplanar (f P) (f Q) A X
X : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
line_completeness
+++++
trivial.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
apply line_completeness_aux.

*****
HX3 : not (eq (f P) X)
HX2 : Coplanar (f P) (f R) (f S) X
HX1 : Coplanar (f P) (f Q) A X
X : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Tarski_neutral_dimensionless_with_decidable_point_equality Tm
+++++
trivial.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
apply line_completeness_aux.

*****
HX3 : not (eq (f P) X)
HX2 : Coplanar (f P) (f R) (f S) X
HX1 : Coplanar (f P) (f Q) A X
X : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
archimedes_axiom
+++++
trivial.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
apply line_completeness_aux.

*****
HX3 : not (eq (f P) X)
HX2 : Coplanar (f P) (f R) (f S) X
HX1 : Coplanar (f P) (f Q) A X
X : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
extension f
+++++
trivial.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
apply line_completeness_aux.

*****
HX3 : not (eq (f P) X)
HX2 : Coplanar (f P) (f R) (f S) X
HX1 : Coplanar (f P) (f Q) A X
X : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P R S)
+++++
trivial.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
apply line_completeness_aux.
trivial.

*****
HX3 : not (eq (f P) X)
HX2 : Coplanar (f P) (f R) (f S) X
HX1 : Coplanar (f P) (f Q) A X
X : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P R S)
+++++
apply ncop__ncol with Q.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
apply line_completeness_aux.
trivial.
apply ncop__ncol with Q.

*****
HX3 : not (eq (f P) X)
HX2 : Coplanar (f P) (f R) (f S) X
HX1 : Coplanar (f P) (f Q) A X
X : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Coplanar P R S Q)
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
apply line_completeness_aux.

*****
HX3 : not (eq (f P) X)
HX2 : Coplanar (f P) (f R) (f S) X
HX1 : Coplanar (f P) (f Q) A X
X : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar (f P) (f R) (f S) X
+++++
trivial.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).

*****
HY : ex (fun Y : Tpoint => and (Coplanar P R S Y) (eq (f Y) X))
HX3 : not (eq (f P) X)
HX2 : Coplanar (f P) (f R) (f S) X
HX1 : Coplanar (f P) (f Q) A X
X : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => eq (f B) A)
+++++
destruct HY as [Y []].
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].

*****
H2 : eq (f Y) X
H1 : Coplanar P R S Y
Y : Tpoint
HX3 : not (eq (f P) X)
HX2 : Coplanar (f P) (f R) (f S) X
HX1 : Coplanar (f P) (f Q) A X
X : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => eq (f B) A)
+++++
subst.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.

*****
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => eq (f B) A)
+++++
apply completeness_aux with P Q Y, line_completeness_aux.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.

*****
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
line_completeness
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.

*****
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Tarski_neutral_dimensionless_with_decidable_point_equality Tm
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.

*****
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
archimedes_axiom
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.

*****
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
extension f
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.

*****
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P Q Y)
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.
Cop.

*****
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P Q Y)
+++++
intro.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.
Cop.
intro.

*****
H2 : Col P Q Y
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.
Cop.
intro.
apply HNCop.

*****
H2 : Col P Q Y
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q R S
+++++
apply coplanar_perm_16, col_cop__cop with Y.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.
Cop.
intro.
apply HNCop.
apply coplanar_perm_16, col_cop__cop with Y.

*****
H2 : Col P Q Y
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar R S P Y
+++++
Col.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.
Cop.
intro.
apply HNCop.
apply coplanar_perm_16, col_cop__cop with Y.
Col.

*****
H2 : Col P Q Y
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar R S P Y
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.
Cop.
intro.
apply HNCop.
apply coplanar_perm_16, col_cop__cop with Y.

*****
H2 : Col P Q Y
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Y)
+++++
Col.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.
Cop.
intro.
apply HNCop.
apply coplanar_perm_16, col_cop__cop with Y.
Col.

*****
H2 : Col P Q Y
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Y)
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.
Cop.
intro.
apply HNCop.
apply coplanar_perm_16, col_cop__cop with Y.
Col.
Cop.

*****
H2 : Col P Q Y
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Y)
+++++
intro.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.
Cop.
intro.
apply HNCop.
apply coplanar_perm_16, col_cop__cop with Y.
Col.
Cop.
intro.

*****
H3 : eq P Y
H2 : Col P Q Y
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.
Cop.
intro.
apply HNCop.
apply coplanar_perm_16, col_cop__cop with Y.
Col.
Cop.
intro.
subst.

*****
pi : plane_intersection_axiom
H : not (Col Y Q R)
H0 : not (Col (f Y) (f Q) A)
fext : extension f
archi : archimedes_axiom
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
lc : line_completeness
HNCop : not (Coplanar Y Q R S)
HX3 : not (eq (f Y) (f Y))
HX2 : Coplanar (f Y) (f R) (f S) (f Y)
HX1 : Coplanar (f Y) (f Q) A (f Y)
A : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
H1 : Coplanar Y R S Y
H2 : Col Y Q Y
Q,R,S,Y : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HX3.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.
Cop.
intro.
apply HNCop.
apply coplanar_perm_16, col_cop__cop with Y.
Col.
Cop.
intro.
subst.
apply HX3.

*****
pi : plane_intersection_axiom
H : not (Col Y Q R)
H0 : not (Col (f Y) (f Q) A)
fext : extension f
archi : archimedes_axiom
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
lc : line_completeness
HNCop : not (Coplanar Y Q R S)
HX3 : not (eq (f Y) (f Y))
HX2 : Coplanar (f Y) (f R) (f S) (f Y)
HX1 : Coplanar (f Y) (f Q) A (f Y)
A : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
H1 : Coplanar Y R S Y
H2 : Col Y Q Y
Q,R,S,Y : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f Y) (f Y)
+++++
reflexivity.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.
Cop.
intro.
apply HNCop.
apply coplanar_perm_16, col_cop__cop with Y.

*****
H2 : Col P Q Y
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Y Q
+++++
Col.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).
destruct (col_dec (f P) (f Q) A).
assert (pi : plane_intersection_axiom).
destruct (pi (f P) (f Q) A (f P) (f R) (f S) (f P)) as [X [HX1 [HX2 HX3]]].
Cop.
assert (HY : exists Y, Coplanar P R S Y /\\ f Y = X).
destruct HY as [Y []].
subst.
apply completeness_aux with P Q Y, line_completeness_aux.

*****
H1 : Coplanar P R S Y
HX1 : Coplanar (f P) (f Q) A (f Y)
HX2 : Coplanar (f P) (f R) (f S) (f Y)
HX3 : not (eq (f P) (f Y))
Y : Tpoint
pi : plane_intersection_axiom
H0 : not (Col (f P) (f Q) A)
H : not (Col P Q R)
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lc : line_completeness
HNCop : not (Coplanar P Q R S)
P,Q,R,S : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar (f P) (f Q) (f Y) A
+++++
Cop.
-----
Lemma line_completeness__completeness_for_3d_spaces : (exists P Q R S, ~ Coplanar P Q R S) -> line_completeness -> completeness_for_3d_spaces.
Proof.
intros [P [Q [R [S HNCop]]]] lc Tm Tm2 M f archi fext A.
assert (~ Col P Q R).

*****

*****

+++++
Qed.
-----
End Completeness.
-----
Section Dimension.
-----
Context `{Tn:Tarski_neutral_dimensionless}.
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless}\n  {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm}\n  {M : Tarski_2D Tm2}\n  (f : @Tpoint Tn -> @Tpoint Tm),\n  extension f ->\n  @upper_dim_axiom Tn.
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_2D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_axiom Tn.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (_ : Tarski_2D Tm2) (f : forall _ : Tpoint, Tpoint) (_ : extension f), upper_dim_axiom
+++++
Proof.
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_2D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_axiom Tn.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (_ : Tarski_2D Tm2) (f : forall _ : Tpoint, Tpoint) (_ : extension f), upper_dim_axiom
+++++
intros Tm Tm2 M f fext A B C P Q HPQ H1 H2 H3.
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_2D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q HPQ H1 H2 H3.

*****
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
fext : extension f
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
apply (extension_reverse_col f).
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_2D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q HPQ H1 H2 H3.
apply (extension_reverse_col f).

*****
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
fext : extension f
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
extension f
+++++
trivial.
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_2D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q HPQ H1 H2 H3.
apply (extension_reverse_col f).

*****
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
fext : extension f
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
trivial.
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_2D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q HPQ H1 H2 H3.
apply (extension_reverse_col f).
trivial.

*****
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
fext : extension f
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
unfold extension in fext.
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_2D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q HPQ H1 H2 H3.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.

*****
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
fext : and (inj f) (and (pres_bet f) (pres_cong f))
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
unfold inj.
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_2D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q HPQ H1 H2 H3.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.

*****
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
fext : and (inj f) (and (pres_bet f) (pres_cong f))
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
unfold pres_cong in fext.
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_2D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q HPQ H1 H2 H3.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.

*****
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
fext : and (inj f)\n (and (pres_bet f)\n (forall (A B C D : Tpoint) (_ : Cong A B C D),\n Cong (f A) (f B) (f C) (f D)))
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
spliter.
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_2D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q HPQ H1 H2 H3.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.

*****
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
H4 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : pres_bet f
H : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
unfold Col.
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_2D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q HPQ H1 H2 H3.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.
unfold Col.

*****
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
H4 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : pres_bet f
H : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
or (Bet (f A) (f B) (f C)) (or (Bet (f B) (f C) (f A)) (Bet (f C) (f A) (f B)))
+++++
apply upper_dim with (f P) (f Q).
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_2D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q HPQ H1 H2 H3.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.
unfold Col.
apply upper_dim with (f P) (f Q).

*****
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
H4 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : pres_bet f
H : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
not (eq (f P) (f Q))
+++++
auto.
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_2D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q HPQ H1 H2 H3.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.
unfold Col.
apply upper_dim with (f P) (f Q).

*****
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
H4 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : pres_bet f
H : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Cong (f A) (f P) (f A) (f Q)
+++++
auto.
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_2D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q HPQ H1 H2 H3.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.
unfold Col.
apply upper_dim with (f P) (f Q).

*****
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
H4 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : pres_bet f
H : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Cong (f B) (f P) (f B) (f Q)
+++++
auto.
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_2D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q HPQ H1 H2 H3.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.
unfold Col.
apply upper_dim with (f P) (f Q).

*****
H3 : Cong C P C Q
H2 : Cong B P B Q
H1 : Cong A P A Q
HPQ : not (eq P Q)
A,B,C,P,Q : Tpoint
H4 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H0 : pres_bet f
H : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Cong (f C) (f P) (f C) (f Q)
+++++
auto.
-----
Lemma extension_to_plane__plane : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_2D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q HPQ H1 H2 H3.
apply (extension_reverse_col f).

*****

*****

+++++
Qed.
-----
Lemma nupper_dim__completeness_for_planes : ~ upper_dim_axiom -> completeness_for_planes.
-----
Lemma nupper_dim__completeness_for_planes : ~ upper_dim_axiom -> completeness_for_planes.

*****
Tn : Tarski_neutral_dimensionless
*****
forall _ : not upper_dim_axiom, completeness_for_planes
+++++
Proof.
-----
Lemma nupper_dim__completeness_for_planes : ~ upper_dim_axiom -> completeness_for_planes.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall _ : not upper_dim_axiom, completeness_for_planes
+++++
intros lowerdim Tm Tm2 M f archi fext A.
-----
Lemma nupper_dim__completeness_for_planes : ~ upper_dim_axiom -> completeness_for_planes.
Proof.
intros lowerdim Tm Tm2 M f archi fext A.

*****
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lowerdim : not upper_dim_axiom
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => eq (f B) A)
+++++
exfalso.
-----
Lemma nupper_dim__completeness_for_planes : ~ upper_dim_axiom -> completeness_for_planes.
Proof.
intros lowerdim Tm Tm2 M f archi fext A.
exfalso.

*****
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lowerdim : not upper_dim_axiom
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply lowerdim.
-----
Lemma nupper_dim__completeness_for_planes : ~ upper_dim_axiom -> completeness_for_planes.
Proof.
intros lowerdim Tm Tm2 M f archi fext A.
exfalso.
apply lowerdim.

*****
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lowerdim : not upper_dim_axiom
Tn : Tarski_neutral_dimensionless
*****
upper_dim_axiom
+++++
apply extension_to_plane__plane with f.
-----
Lemma nupper_dim__completeness_for_planes : ~ upper_dim_axiom -> completeness_for_planes.
Proof.
intros lowerdim Tm Tm2 M f archi fext A.
exfalso.
apply lowerdim.
apply extension_to_plane__plane with f.

*****
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_2D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lowerdim : not upper_dim_axiom
Tn : Tarski_neutral_dimensionless
*****
extension f
+++++
trivial.
-----
Lemma nupper_dim__completeness_for_planes : ~ upper_dim_axiom -> completeness_for_planes.
Proof.
intros lowerdim Tm Tm2 M f archi fext A.
exfalso.
apply lowerdim.
apply extension_to_plane__plane with f.
trivial.

*****

*****

+++++
Qed.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless}\n  {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm}\n  {M : Tarski_3D Tm2}\n  (f : @Tpoint Tn -> @Tpoint Tm),\n  extension f ->\n  @upper_dim_3_axiom Tn.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (_ : Tarski_3D Tm2) (f : forall _ : Tpoint, Tpoint) (_ : extension f), upper_dim_3_axiom
+++++
Proof.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (_ : Tarski_3D Tm2) (f : forall _ : Tpoint, Tpoint) (_ : extension f), upper_dim_3_axiom
+++++
intros Tm Tm2 M f fext A B C P Q R.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.

*****
A,B,C,P,Q,R : Tpoint
fext : extension f
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
forall (_ : not (eq P Q)) (_ : not (eq Q R)) (_ : not (eq P R)) (_ : Cong A P A Q) (_ : Cong B P B Q) (_ : Cong C P C Q) (_ : Cong A P A R) (_ : Cong B P B R) (_ : Cong C P C R), or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
intros.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
fext : extension f
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
or (Bet A B C) (or (Bet B C A) (Bet C A B))
+++++
apply (extension_reverse_col f).
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
fext : extension f
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
extension f
+++++
trivial.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
fext : extension f
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
trivial.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).
trivial.

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
fext : extension f
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
unfold extension in fext.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
fext : and (inj f) (and (pres_bet f) (pres_cong f))
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
unfold inj.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
fext : and (inj f) (and (pres_bet f) (pres_cong f))
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
unfold pres_cong in fext.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
fext : and (inj f)\n (and (pres_bet f)\n (forall (A B C D : Tpoint) (_ : Cong A B C D),\n Cong (f A) (f B) (f C) (f D)))
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
spliter.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
H10 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H9 : pres_bet f
H8 : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
unfold Col.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.
unfold Col.

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
H10 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H9 : pres_bet f
H8 : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
or (Bet (f A) (f B) (f C)) (or (Bet (f B) (f C) (f A)) (Bet (f C) (f A) (f B)))
+++++
apply upper_dim_3 with (f P) (f Q) (f R).
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.
unfold Col.
apply upper_dim_3 with (f P) (f Q) (f R).

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
H10 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H9 : pres_bet f
H8 : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
not (eq (f P) (f Q))
+++++
auto.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.
unfold Col.
apply upper_dim_3 with (f P) (f Q) (f R).

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
H10 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H9 : pres_bet f
H8 : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
not (eq (f Q) (f R))
+++++
auto.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.
unfold Col.
apply upper_dim_3 with (f P) (f Q) (f R).

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
H10 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H9 : pres_bet f
H8 : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
not (eq (f P) (f R))
+++++
auto.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.
unfold Col.
apply upper_dim_3 with (f P) (f Q) (f R).

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
H10 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H9 : pres_bet f
H8 : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Cong (f A) (f P) (f A) (f Q)
+++++
auto.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.
unfold Col.
apply upper_dim_3 with (f P) (f Q) (f R).

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
H10 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H9 : pres_bet f
H8 : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Cong (f B) (f P) (f B) (f Q)
+++++
auto.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.
unfold Col.
apply upper_dim_3 with (f P) (f Q) (f R).

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
H10 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H9 : pres_bet f
H8 : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Cong (f C) (f P) (f C) (f Q)
+++++
auto.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.
unfold Col.
apply upper_dim_3 with (f P) (f Q) (f R).

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
H10 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H9 : pres_bet f
H8 : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Cong (f A) (f P) (f A) (f R)
+++++
auto.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.
unfold Col.
apply upper_dim_3 with (f P) (f Q) (f R).

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
H10 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H9 : pres_bet f
H8 : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Cong (f B) (f P) (f B) (f R)
+++++
auto.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).
trivial.
unfold extension in fext.
unfold inj.
unfold pres_cong in fext.
spliter.
unfold Col.
apply upper_dim_3 with (f P) (f Q) (f R).

*****
H7 : Cong C P C R
H6 : Cong B P B R
H5 : Cong A P A R
H4 : Cong C P C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : not (eq P R)
H0 : not (eq Q R)
H : not (eq P Q)
A,B,C,P,Q,R : Tpoint
H10 : forall (A B C D : Tpoint) (_ : Cong A B C D),\nCong (f A) (f B) (f C) (f D)
H9 : pres_bet f
H8 : inj f
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tn,Tm : Tarski_neutral_dimensionless
*****
Cong (f C) (f P) (f C) (f R)
+++++
auto.
-----
Lemma extension_to_3d__upper_dim_3 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} {M : Tarski_3D Tm2} (f : @Tpoint Tn -> @Tpoint Tm), extension f -> @upper_dim_3_axiom Tn.
Proof.
intros Tm Tm2 M f fext A B C P Q R.
intros.
apply (extension_reverse_col f).

*****

*****

+++++
Qed.
-----
Lemma nupper_dim_3__completeness_for_3d_spaces : ~ upper_dim_3_axiom -> completeness_for_3d_spaces.
-----
Lemma nupper_dim_3__completeness_for_3d_spaces : ~ upper_dim_3_axiom -> completeness_for_3d_spaces.

*****
Tn : Tarski_neutral_dimensionless
*****
forall _ : not upper_dim_3_axiom, completeness_for_3d_spaces
+++++
Proof.
-----
Lemma nupper_dim_3__completeness_for_3d_spaces : ~ upper_dim_3_axiom -> completeness_for_3d_spaces.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall _ : not upper_dim_3_axiom, completeness_for_3d_spaces
+++++
intros lowerdim Tm Tm2 M f archi fext A.
-----
Lemma nupper_dim_3__completeness_for_3d_spaces : ~ upper_dim_3_axiom -> completeness_for_3d_spaces.
Proof.
intros lowerdim Tm Tm2 M f archi fext A.

*****
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lowerdim : not upper_dim_3_axiom
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => eq (f B) A)
+++++
exfalso.
-----
Lemma nupper_dim_3__completeness_for_3d_spaces : ~ upper_dim_3_axiom -> completeness_for_3d_spaces.
Proof.
intros lowerdim Tm Tm2 M f archi fext A.
exfalso.

*****
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lowerdim : not upper_dim_3_axiom
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply lowerdim.
-----
Lemma nupper_dim_3__completeness_for_3d_spaces : ~ upper_dim_3_axiom -> completeness_for_3d_spaces.
Proof.
intros lowerdim Tm Tm2 M f archi fext A.
exfalso.
apply lowerdim.

*****
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lowerdim : not upper_dim_3_axiom
Tn : Tarski_neutral_dimensionless
*****
upper_dim_3_axiom
+++++
apply extension_to_3d__upper_dim_3 with f.
-----
Lemma nupper_dim_3__completeness_for_3d_spaces : ~ upper_dim_3_axiom -> completeness_for_3d_spaces.
Proof.
intros lowerdim Tm Tm2 M f archi fext A.
exfalso.
apply lowerdim.
apply extension_to_3d__upper_dim_3 with f.

*****
A : Tpoint
fext : extension f
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
M : Tarski_3D Tm2
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
lowerdim : not upper_dim_3_axiom
Tn : Tarski_neutral_dimensionless
*****
extension f
+++++
trivial.
-----
Lemma nupper_dim_3__completeness_for_3d_spaces : ~ upper_dim_3_axiom -> completeness_for_3d_spaces.
Proof.
intros lowerdim Tm Tm2 M f archi fext A.
exfalso.
apply lowerdim.
apply extension_to_3d__upper_dim_3 with f.
trivial.

*****

*****

+++++
Qed.
-----
End Dimension.
-----
Section Dimension'.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma ncompleteness_for_planes__upper_dim : ~ completeness_for_planes -> upper_dim_axiom.
-----
Lemma ncompleteness_for_planes__upper_dim : ~ completeness_for_planes -> upper_dim_axiom.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not completeness_for_planes, upper_dim_axiom
+++++
Proof.
-----
Lemma ncompleteness_for_planes__upper_dim : ~ completeness_for_planes -> upper_dim_axiom.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not completeness_for_planes, upper_dim_axiom
+++++
intro nc.
-----
Lemma ncompleteness_for_planes__upper_dim : ~ completeness_for_planes -> upper_dim_axiom.
Proof.
intro nc.

*****
nc : not completeness_for_planes
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
upper_dim_axiom
+++++
apply upper_dim_stab.
-----
Lemma ncompleteness_for_planes__upper_dim : ~ completeness_for_planes -> upper_dim_axiom.
Proof.
intro nc.
apply upper_dim_stab.

*****
nc : not completeness_for_planes
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (not upper_dim_axiom)
+++++
intro nupper.
-----
Lemma ncompleteness_for_planes__upper_dim : ~ completeness_for_planes -> upper_dim_axiom.
Proof.
intro nc.
apply upper_dim_stab.
intro nupper.

*****
nupper : not upper_dim_axiom
nc : not completeness_for_planes
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply nc, (nupper_dim__completeness_for_planes nupper).
-----
Lemma ncompleteness_for_planes__upper_dim : ~ completeness_for_planes -> upper_dim_axiom.
Proof.
intro nc.
apply upper_dim_stab.
intro nupper.
apply nc, (nupper_dim__completeness_for_planes nupper).

*****

*****

+++++
Qed.
-----
Lemma ncompleteness_for_3d_spaces__upper_dim_3 : ~ completeness_for_3d_spaces -> upper_dim_3_axiom.
-----
Lemma ncompleteness_for_3d_spaces__upper_dim_3 : ~ completeness_for_3d_spaces -> upper_dim_3_axiom.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not completeness_for_3d_spaces, upper_dim_3_axiom
+++++
Proof.
-----
Lemma ncompleteness_for_3d_spaces__upper_dim_3 : ~ completeness_for_3d_spaces -> upper_dim_3_axiom.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not completeness_for_3d_spaces, upper_dim_3_axiom
+++++
intro nc.
-----
Lemma ncompleteness_for_3d_spaces__upper_dim_3 : ~ completeness_for_3d_spaces -> upper_dim_3_axiom.
Proof.
intro nc.

*****
nc : not completeness_for_3d_spaces
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
upper_dim_3_axiom
+++++
apply upper_dim_3_stab.
-----
Lemma ncompleteness_for_3d_spaces__upper_dim_3 : ~ completeness_for_3d_spaces -> upper_dim_3_axiom.
Proof.
intro nc.
apply upper_dim_3_stab.

*****
nc : not completeness_for_3d_spaces
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (not upper_dim_3_axiom)
+++++
intro nupper.
-----
Lemma ncompleteness_for_3d_spaces__upper_dim_3 : ~ completeness_for_3d_spaces -> upper_dim_3_axiom.
Proof.
intro nc.
apply upper_dim_3_stab.
intro nupper.

*****
nupper : not upper_dim_3_axiom
nc : not completeness_for_3d_spaces
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply nc, (nupper_dim_3__completeness_for_3d_spaces nupper).
-----
Lemma ncompleteness_for_3d_spaces__upper_dim_3 : ~ completeness_for_3d_spaces -> upper_dim_3_axiom.
Proof.
intro nc.
apply upper_dim_3_stab.
intro nupper.
apply nc, (nupper_dim_3__completeness_for_3d_spaces nupper).

*****

*****

+++++
Qed.
-----
End Dimension'.
-----
