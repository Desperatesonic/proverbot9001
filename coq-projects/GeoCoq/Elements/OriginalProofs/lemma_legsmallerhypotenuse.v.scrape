Require Export GeoCoq.Elements.OriginalProofs.proposition_19.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_lessthancongruence2.
-----
Section Euclid.
-----
Context `{Ax1:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_legsmallerhypotenuse : \n   forall A B C, \n   Per A B C ->\n   Lt A B A C /\ Lt B C A C.
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.

*****
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
forall (A B C : Point) (_ : Per A B C), and (Lt A B A C) (Lt B C A C)
+++++
Proof.
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.

*****
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
forall (A B C : Point) (_ : Per A B C), and (Lt A B A C) (Lt B C A C)
+++++
intros.
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.

*****
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (Per C B A) by (conclude lemma_8_2).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).

*****
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\ Cong C B D B /\ Cong C A D A /\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.

*****
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (nCol A B C) by (conclude lemma_rightangleNC).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).

*****
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (Triangle A B C) by (conclude_def Triangle ).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).

*****
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (~ Col A C B).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).

*****
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (Col A C B)
+++++
intro.
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
intro.

*****
H7 : Col A C B
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (forward_using lemma_collinearorder).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
intro.
assert (Col A B C) by (forward_using lemma_collinearorder).

*****
H8 : Col A B C
H7 : Col A C B
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).

*****
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (Triangle A C B) by (conclude_def Triangle ).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).

*****
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert ((LtA C A B A B D /\ LtA B C A A B D)) by (conclude proposition_16).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).

*****
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (eq A A) by (conclude cn_equalityreflexive).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).

*****
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (eq C C) by (conclude cn_equalityreflexive).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).

*****
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (eq D D) by (conclude cn_equalityreflexive).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).

*****
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (~ eq B C).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).

*****
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (eq B C)
+++++
intro.
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
intro.

*****
H13 : eq B C
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (conclude_def Col ).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
intro.
assert (Col A B C) by (conclude_def Col ).

*****
H14 : Col A B C
H13 : eq B C
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).

*****
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (neq B D) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).

*****
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (Out B A A) by (conclude lemma_ray4).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).

*****
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (Out B C C) by (conclude lemma_ray4).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).

*****
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (Out B D D) by (conclude lemma_ray4).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).

*****
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (Cong B A B A) by (conclude cn_congruencereflexive).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).

*****
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (Cong B D B C) by (forward_using lemma_doublereverse).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).

*****
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (Cong A D A C) by (forward_using lemma_doublereverse).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).

*****
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (~ Col A B D).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).

*****
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (Col A B D)
+++++
intro.
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
intro.

*****
H21 : Col A B D
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col C B D) by (conclude_def Col ).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
intro.
assert (Col C B D) by (conclude_def Col ).

*****
H22 : Col C B D
H21 : Col A B D
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col D B C) by (forward_using lemma_collinearorder).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
intro.
assert (Col C B D) by (conclude_def Col ).
assert (Col D B C) by (forward_using lemma_collinearorder).

*****
H23 : Col D B C
H22 : Col C B D
H21 : Col A B D
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col D B A) by (forward_using lemma_collinearorder).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
intro.
assert (Col C B D) by (conclude_def Col ).
assert (Col D B C) by (forward_using lemma_collinearorder).
assert (Col D B A) by (forward_using lemma_collinearorder).

*****
H24 : Col D B A
H23 : Col D B C
H22 : Col C B D
H21 : Col A B D
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (neq B D) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
intro.
assert (Col C B D) by (conclude_def Col ).
assert (Col D B C) by (forward_using lemma_collinearorder).
assert (Col D B A) by (forward_using lemma_collinearorder).
assert (neq B D) by (forward_using lemma_betweennotequal).

*****
H25 : neq B D
H24 : Col D B A
H23 : Col D B C
H22 : Col C B D
H21 : Col A B D
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (neq D B) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
intro.
assert (Col C B D) by (conclude_def Col ).
assert (Col D B C) by (forward_using lemma_collinearorder).
assert (Col D B A) by (forward_using lemma_collinearorder).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (neq D B) by (conclude lemma_inequalitysymmetric).

*****
H26 : neq D B
H25 : neq B D
H24 : Col D B A
H23 : Col D B C
H22 : Col C B D
H21 : Col A B D
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col B C A) by (conclude lemma_collinear4).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
intro.
assert (Col C B D) by (conclude_def Col ).
assert (Col D B C) by (forward_using lemma_collinearorder).
assert (Col D B A) by (forward_using lemma_collinearorder).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (neq D B) by (conclude lemma_inequalitysymmetric).
assert (Col B C A) by (conclude lemma_collinear4).

*****
H27 : Col B C A
H26 : neq D B
H25 : neq B D
H24 : Col D B A
H23 : Col D B C
H22 : Col C B D
H21 : Col A B D
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (forward_using lemma_collinearorder).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
intro.
assert (Col C B D) by (conclude_def Col ).
assert (Col D B C) by (forward_using lemma_collinearorder).
assert (Col D B A) by (forward_using lemma_collinearorder).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (neq D B) by (conclude lemma_inequalitysymmetric).
assert (Col B C A) by (conclude lemma_collinear4).
assert (Col A B C) by (forward_using lemma_collinearorder).

*****
H28 : Col A B C
H27 : Col B C A
H26 : neq D B
H25 : neq B D
H24 : Col D B A
H23 : Col D B C
H22 : Col C B D
H21 : Col A B D
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).

*****
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (CongA A B D A B C) by (conclude_def CongA ).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).

*****
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).

*****
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).

*****
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (Lt A B A C) by (conclude proposition_19).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).

*****
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).

*****
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (~ Col B A C).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).

*****
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (Col B A C)
+++++
intro.
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
intro.

*****
H27 : Col B A C
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (forward_using lemma_collinearorder).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
intro.
assert (Col A B C) by (forward_using lemma_collinearorder).

*****
H28 : Col A B C
H27 : Col B A C
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).

*****
H27 : not (Col B A C)
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (CongA B A C C A B) by (conclude lemma_ABCequalsCBA).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
assert (CongA B A C C A B) by (conclude lemma_ABCequalsCBA).

*****
H28 : CongA B A C C A B
H27 : not (Col B A C)
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (LtA B A C A B C) by (conclude lemma_angleorderrespectscongruence2).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
assert (CongA B A C C A B) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C A B C) by (conclude lemma_angleorderrespectscongruence2).

*****
H29 : LtA B A C A B C
H28 : CongA B A C C A B
H27 : not (Col B A C)
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (~ Col C B A).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
assert (CongA B A C C A B) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C A B C) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Col C B A).

*****
H29 : LtA B A C A B C
H28 : CongA B A C C A B
H27 : not (Col B A C)
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (Col C B A)
+++++
intro.
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
assert (CongA B A C C A B) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C A B C) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Col C B A).
intro.

*****
H30 : Col C B A
H29 : LtA B A C A B C
H28 : CongA B A C C A B
H27 : not (Col B A C)
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col A B C) by (forward_using lemma_collinearorder).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
assert (CongA B A C C A B) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C A B C) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Col C B A).
intro.
assert (Col A B C) by (forward_using lemma_collinearorder).

*****
H31 : Col A B C
H30 : Col C B A
H29 : LtA B A C A B C
H28 : CongA B A C C A B
H27 : not (Col B A C)
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
assert (CongA B A C C A B) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C A B C) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Col C B A).

*****
H30 : not (Col C B A)
H29 : LtA B A C A B C
H28 : CongA B A C C A B
H27 : not (Col B A C)
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (Triangle C B A) by (conclude_def Triangle ).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
assert (CongA B A C C A B) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C A B C) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Col C B A).
assert (Triangle C B A) by (conclude_def Triangle ).

*****
H31 : Triangle C B A
H30 : not (Col C B A)
H29 : LtA B A C A B C
H28 : CongA B A C C A B
H27 : not (Col B A C)
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (CongA C B A A B C) by (conclude lemma_ABCequalsCBA).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
assert (CongA B A C C A B) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C A B C) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Col C B A).
assert (Triangle C B A) by (conclude_def Triangle ).
assert (CongA C B A A B C) by (conclude lemma_ABCequalsCBA).

*****
H32 : CongA C B A A B C
H31 : Triangle C B A
H30 : not (Col C B A)
H29 : LtA B A C A B C
H28 : CongA B A C C A B
H27 : not (Col B A C)
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (LtA B A C C B A) by (conclude lemma_angleorderrespectscongruence).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
assert (CongA B A C C A B) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C A B C) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Col C B A).
assert (Triangle C B A) by (conclude_def Triangle ).
assert (CongA C B A A B C) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C C B A) by (conclude lemma_angleorderrespectscongruence).

*****
H33 : LtA B A C C B A
H32 : CongA C B A A B C
H31 : Triangle C B A
H30 : not (Col C B A)
H29 : LtA B A C A B C
H28 : CongA B A C C A B
H27 : not (Col B A C)
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (Lt C B C A) by (conclude proposition_19).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
assert (CongA B A C C A B) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C A B C) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Col C B A).
assert (Triangle C B A) by (conclude_def Triangle ).
assert (CongA C B A A B C) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C C B A) by (conclude lemma_angleorderrespectscongruence).
assert (Lt C B C A) by (conclude proposition_19).

*****
H34 : Lt C B C A
H33 : LtA B A C C B A
H32 : CongA C B A A B C
H31 : Triangle C B A
H30 : not (Col C B A)
H29 : LtA B A C A B C
H28 : CongA B A C C A B
H27 : not (Col B A C)
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (Cong C B B C) by (conclude cn_equalityreverse).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
assert (CongA B A C C A B) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C A B C) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Col C B A).
assert (Triangle C B A) by (conclude_def Triangle ).
assert (CongA C B A A B C) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C C B A) by (conclude lemma_angleorderrespectscongruence).
assert (Lt C B C A) by (conclude proposition_19).
assert (Cong C B B C) by (conclude cn_equalityreverse).

*****
H35 : Cong C B B C
H34 : Lt C B C A
H33 : LtA B A C C B A
H32 : CongA C B A A B C
H31 : Triangle C B A
H30 : not (Col C B A)
H29 : LtA B A C A B C
H28 : CongA B A C C A B
H27 : not (Col B A C)
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (Lt B C C A) by (conclude lemma_lessthancongruence2).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
assert (CongA B A C C A B) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C A B C) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Col C B A).
assert (Triangle C B A) by (conclude_def Triangle ).
assert (CongA C B A A B C) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C C B A) by (conclude lemma_angleorderrespectscongruence).
assert (Lt C B C A) by (conclude proposition_19).
assert (Cong C B B C) by (conclude cn_equalityreverse).
assert (Lt B C C A) by (conclude lemma_lessthancongruence2).

*****
H36 : Lt B C C A
H35 : Cong C B B C
H34 : Lt C B C A
H33 : LtA B A C C B A
H32 : CongA C B A A B C
H31 : Triangle C B A
H30 : not (Col C B A)
H29 : LtA B A C A B C
H28 : CongA B A C C A B
H27 : not (Col B A C)
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (Cong C A A C) by (conclude cn_equalityreverse).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
assert (CongA B A C C A B) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C A B C) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Col C B A).
assert (Triangle C B A) by (conclude_def Triangle ).
assert (CongA C B A A B C) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C C B A) by (conclude lemma_angleorderrespectscongruence).
assert (Lt C B C A) by (conclude proposition_19).
assert (Cong C B B C) by (conclude cn_equalityreverse).
assert (Lt B C C A) by (conclude lemma_lessthancongruence2).
assert (Cong C A A C) by (conclude cn_equalityreverse).

*****
H37 : Cong C A A C
H36 : Lt B C C A
H35 : Cong C B B C
H34 : Lt C B C A
H33 : LtA B A C C B A
H32 : CongA C B A A B C
H31 : Triangle C B A
H30 : not (Col C B A)
H29 : LtA B A C A B C
H28 : CongA B A C C A B
H27 : not (Col B A C)
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
assert (Lt B C A C) by (conclude lemma_lessthancongruence).
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
assert (CongA B A C C A B) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C A B C) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Col C B A).
assert (Triangle C B A) by (conclude_def Triangle ).
assert (CongA C B A A B C) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C C B A) by (conclude lemma_angleorderrespectscongruence).
assert (Lt C B C A) by (conclude proposition_19).
assert (Cong C B B C) by (conclude cn_equalityreverse).
assert (Lt B C C A) by (conclude lemma_lessthancongruence2).
assert (Cong C A A C) by (conclude cn_equalityreverse).
assert (Lt B C A C) by (conclude lemma_lessthancongruence).

*****
H38 : Lt B C A C
H37 : Cong C A A C
H36 : Lt B C C A
H35 : Cong C B B C
H34 : Lt C B C A
H33 : LtA B A C C B A
H32 : CongA C B A A B C
H31 : Triangle C B A
H30 : not (Col C B A)
H29 : LtA B A C A B C
H28 : CongA B A C C A B
H27 : not (Col B A C)
H26 : LtA C A B A B C
H25 : Lt A B A C
H24 : LtA B C A A B C
H23 : CongA A B C A B D
H22 : CongA A B D A B C
H21 : not (Col A B D)
H20 : Cong A D A C
H19 : Cong B D B C
H18 : Cong B A B A
H17 : Out B D D
H16 : Out B C C
H15 : Out B A A
H14 : neq B D
H13 : not (eq B C)
H12 : eq D D
H11 : eq C C
H10 : eq A A
H9 : and (LtA C A B A B D) (LtA B C A A B D)
H8 : Triangle A C B
H7 : not (Col A C B)
H6 : Triangle A B C
H5 : nCol A B C
H4 : neq B A
H3 : Cong C A D A
H2 : Cong C B D B
H1 : BetS C B D
D : Point
H0 : Per C B A
H : Per A B C
A,B,C : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (Lt A B A C) (Lt B C A C)
+++++
close.
-----
Lemma lemma_legsmallerhypotenuse : forall A B C, Per A B C -> Lt A B A C /\\ Lt B C A C.
Proof.
intros.
assert (Per C B A) by (conclude lemma_8_2).
let Tf:=fresh in assert (Tf:exists D, (BetS C B D /\\ Cong C B D B /\\ Cong C A D A /\\ neq B A)) by (conclude_def Per );destruct Tf as [D];spliter.
assert (nCol A B C) by (conclude lemma_rightangleNC).
assert (Triangle A B C) by (conclude_def Triangle ).
assert (~ Col A C B).
assert (Triangle A C B) by (conclude_def Triangle ).
assert ((LtA C A B A B D /\\ LtA B C A A B D)) by (conclude proposition_16).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (eq D D) by (conclude cn_equalityreflexive).
assert (~ eq B C).
assert (neq B D) by (forward_using lemma_betweennotequal).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B C C) by (conclude lemma_ray4).
assert (Out B D D) by (conclude lemma_ray4).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong B D B C) by (forward_using lemma_doublereverse).
assert (Cong A D A C) by (forward_using lemma_doublereverse).
assert (~ Col A B D).
assert (CongA A B D A B C) by (conclude_def CongA ).
assert (CongA A B C A B D) by (conclude lemma_equalanglessymmetric).
assert (LtA B C A A B C) by (conclude lemma_angleorderrespectscongruence).
assert (Lt A B A C) by (conclude proposition_19).
assert (LtA C A B A B C) by (conclude lemma_angleorderrespectscongruence).
assert (~ Col B A C).
assert (CongA B A C C A B) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C A B C) by (conclude lemma_angleorderrespectscongruence2).
assert (~ Col C B A).
assert (Triangle C B A) by (conclude_def Triangle ).
assert (CongA C B A A B C) by (conclude lemma_ABCequalsCBA).
assert (LtA B A C C B A) by (conclude lemma_angleorderrespectscongruence).
assert (Lt C B C A) by (conclude proposition_19).
assert (Cong C B B C) by (conclude cn_equalityreverse).
assert (Lt B C C A) by (conclude lemma_lessthancongruence2).
assert (Cong C A A C) by (conclude cn_equalityreverse).
assert (Lt B C A C) by (conclude lemma_lessthancongruence).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
