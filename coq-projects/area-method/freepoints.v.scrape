Set Nested Proofs Allowed.
-----
Require Export area_elimination_lemmas.
-----
From Coq Require Import Classical.
-----
Lemma parallel_dec : forall A B C D, parallel A B C D \/ ~ parallel A B C D.
-----
Lemma parallel_dec : forall A B C D, parallel A B C D \\/ ~ parallel A B C D.

*****

*****
forall A B C D : Point, or (parallel A B C D) (not (parallel A B C D))
+++++
Proof.
-----
Lemma parallel_dec : forall A B C D, parallel A B C D \\/ ~ parallel A B C D.
Proof.

*****

*****
forall A B C D : Point, or (parallel A B C D) (not (parallel A B C D))
+++++
intros.
-----
Lemma parallel_dec : forall A B C D, parallel A B C D \\/ ~ parallel A B C D.
Proof.
intros.

*****
A,B,C,D : Point
*****
or (parallel A B C D) (not (parallel A B C D))
+++++
apply classic.
-----
Lemma parallel_dec : forall A B C D, parallel A B C D \\/ ~ parallel A B C D.
Proof.
intros.
apply classic.

*****

*****

+++++
Qed.
-----
Ltac cases_parallel A B C D := elim (parallel_dec A B C D);intros.
-----
Definition Det3 (x1 x2 x3 y1 y2 y3 z1 z2 z3 : F) : F :=\n  x1 * (y2 * z3) - x1 * (y3 * z2) - x2 * (y1 * z3) + x2 * (y3 * z1) +\n  x3 * (y1 * z2) - x3 * (y2 * z1).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V ->\nS O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).

*****

*****
forall (O U V B Y : Point) (_ : not (Col O U V)), eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
Proof.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.

*****

*****
forall (O U V B Y : Point) (_ : not (Col O U V)), eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
intros.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.

*****
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
cases_parallel U V O Y.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.

*****
H0 : parallel U V O Y
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
rename H into T.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.

*****
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (O**Y / U**V = S U O Y / S O V U).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).

*****
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
+++++
apply l2_15.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
apply l2_15.

*****
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
parallel U V O Y
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
apply l2_15.

*****
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
not (Col O V U)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).

*****
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).

*****
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fplus (S O B O) (Fmult (Fdiv (DSeg O Y) (DSeg U V)) (S4 O U B V)))
+++++
apply elim_area_on_parallel.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
apply elim_area_on_parallel.

*****
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
on_parallel Y O U V
+++++
unfold on_parallel.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
apply elim_area_on_parallel.
unfold on_parallel.

*****
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
and (not (eq U V)) (parallel O Y U V)
+++++
repeat split.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
apply elim_area_on_parallel.
unfold on_parallel.
repeat split.

*****
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq U V)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
apply elim_area_on_parallel.
unfold on_parallel.
repeat split.
Geometry.

*****
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq U V)
+++++
eauto with Geom.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
apply elim_area_on_parallel.
unfold on_parallel.
repeat split.

*****
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
parallel O Y U V
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).

*****
H1 : eq (S O B Y)\n (Fplus (S O B O) (Fmult (Fdiv (DSeg O Y) (DSeg U V)) (S4 O U B V)))
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
rewrite H in H1.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
rewrite H in H1.

*****
H1 : eq (S O B Y)\n (Fplus (S O B O) (Fmult (Fdiv (S U O Y) (S O V U)) (S4 O U B V)))
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
basic_simpl.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
rewrite H in H1.
basic_simpl.

*****
H1 : eq (S O B Y) (Fmult (Fdiv (S U O Y) (S O V U)) (S4 O U B V))
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
unfold S4 in *.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
rewrite H in H1.
basic_simpl.
unfold S4 in *.

*****
H1 : eq (S O B Y)\n (Fmult (Fdiv (S U O Y) (S O V U)) (Fplus (S O U B) (S O B V)))
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (parallel O Y U V).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
rewrite H in H1.
basic_simpl.
unfold S4 in *.
assert (parallel O Y U V).

*****
H1 : eq (S O B Y)\n (Fmult (Fdiv (S U O Y) (S O V U)) (Fplus (S O U B) (S O B V)))
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
parallel O Y U V
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
rewrite H in H1.
basic_simpl.
unfold S4 in *.
assert (parallel O Y U V).

*****
H2 : parallel O Y U V
H1 : eq (S O B Y)\n (Fmult (Fdiv (S U O Y) (S O V U)) (Fplus (S O U B) (S O B V)))
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : parallel U V O Y
T : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
unfold parallel in *.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
rewrite H in H1.
basic_simpl.
unfold S4 in *.
assert (parallel O Y U V).
unfold parallel in *.

*****
H2 : eq (S4 O U Y V) F0
H1 : eq (S O B Y)\n (Fmult (Fdiv (S U O Y) (S O V U)) (Fplus (S O U B) (S O B V)))
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : eq (S4 U O V Y) F0
T : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
unfold S4 in *.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
rewrite H in H1.
basic_simpl.
unfold S4 in *.
assert (parallel O Y U V).
unfold parallel in *.
unfold S4 in *.

*****
H2 : eq (Fplus (S O U Y) (S O Y V)) F0
H1 : eq (S O B Y)\n (Fmult (Fdiv (S U O Y) (S O V U)) (Fplus (S O U B) (S O B V)))
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : eq (Fplus (S U O V) (S U V Y)) F0
T : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
IsoleVarRing (S O Y V) H2.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
rewrite H in H1.
basic_simpl.
unfold S4 in *.
assert (parallel O Y U V).
unfold parallel in *.
unfold S4 in *.
IsoleVarRing (S O Y V) H2.

*****
H2 : eq (S O Y V) (Fopp (S O U Y))
H1 : eq (S O B Y)\n (Fmult (Fdiv (S U O Y) (S O V U)) (Fplus (S O U B) (S O B V)))
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : eq (Fplus (S U O V) (S U V Y)) F0
T : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
rewrite H2.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
rewrite H in H1.
basic_simpl.
unfold S4 in *.
assert (parallel O Y U V).
unfold parallel in *.
unfold S4 in *.
IsoleVarRing (S O Y V) H2.
rewrite H2.

*****
H2 : eq (S O Y V) (Fopp (S O U Y))
H1 : eq (S O B Y)\n (Fmult (Fdiv (S U O Y) (S O V U)) (Fplus (S O U B) (S O B V)))
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : eq (Fplus (S U O V) (S U V Y)) F0
T : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (Fopp (S O U Y)))))
+++++
rewrite H1.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
rewrite H in H1.
basic_simpl.
unfold S4 in *.
assert (parallel O Y U V).
unfold parallel in *.
unfold S4 in *.
IsoleVarRing (S O Y V) H2.
rewrite H2.
rewrite H1.

*****
H2 : eq (S O Y V) (Fopp (S O U Y))
H1 : eq (S O B Y)\n (Fmult (Fdiv (S U O Y) (S O V U)) (Fplus (S O U B) (S O B V)))
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S O V U))
H0 : eq (Fplus (S U O V) (S U V Y)) F0
T : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fmult (Fdiv (S U O Y) (S O V U)) (Fplus (S O U B) (S O B V))) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (Fopp (S O U Y)))))
+++++
uniformize_signed_areas.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
rewrite H in H1.
basic_simpl.
unfold S4 in *.
assert (parallel O Y U V).
unfold parallel in *.
unfold S4 in *.
IsoleVarRing (S O Y V) H2.
rewrite H2.
rewrite H1.
uniformize_signed_areas.

*****
H2 : eq (S O Y V) (S U O Y)
H1 : eq (S O B Y)\n (Fmult (Fdiv (S U O Y) (S U O V)) (Fplus (S O U B) (S O B V)))
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S U O V))
H0 : eq (Fplus (S U O V) (S U V Y)) F0
T : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fmult (Fdiv (S U O Y) (S U O V)) (Fplus (S O U B) (S O B V))) (Fmult (Fdiv F1 (Fopp (S U O V))) (Fplus (Fmult (S O B V) (Fopp (S U O Y))) (Fmult (Fopp (S O U B)) (S U O Y))))
+++++
field.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
rewrite H in H1.
basic_simpl.
unfold S4 in *.
assert (parallel O Y U V).
unfold parallel in *.
unfold S4 in *.
IsoleVarRing (S O Y V) H2.
rewrite H2.
rewrite H1.
uniformize_signed_areas.
field.

*****
H2 : eq (S O Y V) (S U O Y)
H1 : eq (S O B Y)\n (Fmult (Fdiv (S U O Y) (S U O V)) (Fplus (S O U B) (S O B V)))
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S U O V))
H0 : eq (Fplus (S U O V) (S U V Y)) F0
T : not (Col O U V)
O,U,V,B,Y : Point
*****
and (not (eq (Fopp (S U O V)) F0)) (not (eq (S U O V) F0))
+++++
split.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
rewrite H in H1.
basic_simpl.
unfold S4 in *.
assert (parallel O Y U V).
unfold parallel in *.
unfold S4 in *.
IsoleVarRing (S O Y V) H2.
rewrite H2.
rewrite H1.
uniformize_signed_areas.
field.
split.

*****
H2 : eq (S O Y V) (S U O Y)
H1 : eq (S O B Y)\n (Fmult (Fdiv (S U O Y) (S U O V)) (Fplus (S O U B) (S O B V)))
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S U O V))
H0 : eq (Fplus (S U O V) (S U V Y)) F0
T : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq (Fopp (S U O V)) F0)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
rename H into T.
assert (O**Y / U**V = S U O Y / S O V U).
assert (S O B Y = S O B O + (O**Y/U**V) * S4 O U B V).
rewrite H in H1.
basic_simpl.
unfold S4 in *.
assert (parallel O Y U V).
unfold parallel in *.
unfold S4 in *.
IsoleVarRing (S O Y V) H2.
rewrite H2.
rewrite H1.
uniformize_signed_areas.
field.
split.

*****
H2 : eq (S O Y V) (S U O Y)
H1 : eq (S O B Y)\n (Fmult (Fdiv (S U O Y) (S U O V)) (Fplus (S O U B) (S O B V)))
H : eq (Fdiv (DSeg O Y) (DSeg U V)) (Fdiv (S U O Y) (S U O V))
H0 : eq (Fplus (S U O V) (S U V Y)) F0
T : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq (S U O V) F0)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.

*****
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (exists W, inter_ll W U V O Y).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).

*****
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
ex (fun W : Point => inter_ll W U V O Y)
+++++
apply inter_ll_ex.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
apply inter_ll_ex.

*****
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (parallel U V O Y)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).

*****
H1 : ex (fun W : Point => inter_ll W U V O Y)
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
DecompEx H1 W.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.

*****
H2 : inter_ll W U V O Y
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
cases_equality W O.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.

*****
H1 : eq W O
H2 : inter_ll W U V O Y
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
subst W.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
subst W.

*****
H2 : inter_ll O U V O Y
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
unfold inter_ll in *.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
subst W.
unfold inter_ll in *.

*****
H2 : and (Col O U V) (and (Col O O Y) (not (parallel U V O Y)))
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
intuition.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.

*****
H1 : not (eq W O)
H2 : inter_ll W U V O Y
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
rename H1 into Hdiff.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.

*****
Hdiff : not (eq W O)
H2 : inter_ll W U V O Y
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).

*****
Hdiff : not (eq W O)
H2 : inter_ll W U V O Y
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S B O W) (Fmult (Fdiv F1 (S4 U O V Y)) (Fplus (Fmult (S U O Y) (S B O V)) (Fmult (S V Y O) (S B O U))))
+++++
apply elim_area_inter_ll.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
apply elim_area_inter_ll.

*****
Hdiff : not (eq W O)
H2 : inter_ll W U V O Y
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
inter_ll W U V O Y
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).

*****
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (S4 U O V Y))\n (Fplus (Fmult (S U O Y) (S B O V)) (Fmult (S V Y O) (S B O U))))
Hdiff : not (eq W O)
H2 : inter_ll W U V O Y
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.

*****
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S U O Y) (S B O V)) (Fmult (S V Y O) (S B O U))))
Hdiff : not (eq W O)
H2 : inter_ll W U V O Y
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.

*****
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
H2 : inter_ll W U V O Y
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
unfold inter_ll in *.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.

*****
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
H2 : and (Col W U V) (and (Col W O Y) (not (parallel U V O Y)))
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
DecompAndAll.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.

*****
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).

*****
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
+++++
apply co_side_ter.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
apply co_side_ter.

*****
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (parallel O Y U V)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
apply co_side_ter.

*****
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col U V W
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
apply co_side_ter.

*****
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O Y W
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).

*****
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
cases_col B O W.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.

*****
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
cases_equality V W.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.

*****
H7 : eq V W
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
subst W.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
subst W.

*****
H2 : eq (Fdiv (DSeg O V) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H4 : Col B O V
H6 : not (parallel U V O Y)
Hdiff : not (eq V O)
H1 : eq (S B O V)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
H3 : Col V U V
H5 : Col V O Y
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (Col O Y B).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
subst W.
assert (Col O Y B).

*****
H2 : eq (Fdiv (DSeg O V) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H4 : Col B O V
H6 : not (parallel U V O Y)
Hdiff : not (eq V O)
H1 : eq (S B O V)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
H3 : Col V U V
H5 : Col V O Y
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O Y B
+++++
eapply col_trans_1 with (B:=V).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
subst W.
assert (Col O Y B).
eapply col_trans_1 with (B:=V).

*****
H2 : eq (Fdiv (DSeg O V) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H4 : Col B O V
H6 : not (parallel U V O Y)
Hdiff : not (eq V O)
H1 : eq (S B O V)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
H3 : Col V U V
H5 : Col V O Y
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq O V)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
subst W.
assert (Col O Y B).
eapply col_trans_1 with (B:=V).

*****
H2 : eq (Fdiv (DSeg O V) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H4 : Col B O V
H6 : not (parallel U V O Y)
Hdiff : not (eq V O)
H1 : eq (S B O V)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
H3 : Col V U V
H5 : Col V O Y
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O V Y
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
subst W.
assert (Col O Y B).
eapply col_trans_1 with (B:=V).

*****
H2 : eq (Fdiv (DSeg O V) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H4 : Col B O V
H6 : not (parallel U V O Y)
Hdiff : not (eq V O)
H1 : eq (S B O V)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
H3 : Col V U V
H5 : Col V O Y
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O V B
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
subst W.
assert (Col O Y B).

*****
H7 : Col O Y B
H2 : eq (Fdiv (DSeg O V) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H4 : Col B O V
H6 : not (parallel U V O Y)
Hdiff : not (eq V O)
H1 : eq (S B O V)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
H3 : Col V U V
H5 : Col V O Y
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
unfold Col in *.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
subst W.
assert (Col O Y B).
unfold Col in *.

*****
H7 : eq (S O Y B) F0
H2 : eq (Fdiv (DSeg O V) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H4 : eq (S B O V) F0
H6 : not (parallel U V O Y)
Hdiff : not (eq V O)
H1 : eq (S B O V)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
H3 : eq (S V U V) F0
H5 : eq (S V O Y) F0
H0 : not (parallel U V O Y)
H : not (eq (S O U V) F0)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
uniformize_signed_areas.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
subst W.
assert (Col O Y B).
unfold Col in *.
uniformize_signed_areas.

*****
H7 : eq (S O Y B) F0
H2 : eq (Fdiv (DSeg O V) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H4 : eq (S B O V) F0
H1 : eq (S B O V)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (Fopp (S B O V)) (S O U Y))\n (Fmult (S O B U) (S V O Y))))
H3 : eq F0 F0
H5 : eq (S V O Y) F0
H : not (eq (S O U V) F0)
H6 : not (parallel U V O Y)
Hdiff : not (eq V O)
H0 : not (parallel U V O Y)
O,U,V,B,Y : Point
*****
eq (Fopp (S O Y B)) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (Fopp (S B O V)) (S O U Y)) (Fmult (S O B U) (S V O Y))))
+++++
rewrite H4.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
subst W.
assert (Col O Y B).
unfold Col in *.
uniformize_signed_areas.
rewrite H4.

*****
H7 : eq (S O Y B) F0
H2 : eq (Fdiv (DSeg O V) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H4 : eq (S B O V) F0
H1 : eq (S B O V)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (Fopp (S B O V)) (S O U Y))\n (Fmult (S O B U) (S V O Y))))
H3 : eq F0 F0
H5 : eq (S V O Y) F0
H : not (eq (S O U V) F0)
H6 : not (parallel U V O Y)
Hdiff : not (eq V O)
H0 : not (parallel U V O Y)
O,U,V,B,Y : Point
*****
eq (Fopp (S O Y B)) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (Fopp F0) (S O U Y)) (Fmult (S O B U) (S V O Y))))
+++++
rewrite H5.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
subst W.
assert (Col O Y B).
unfold Col in *.
uniformize_signed_areas.
rewrite H4.
rewrite H5.

*****
H7 : eq (S O Y B) F0
H2 : eq (Fdiv (DSeg O V) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H4 : eq (S B O V) F0
H1 : eq (S B O V)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (Fopp (S B O V)) (S O U Y))\n (Fmult (S O B U) (S V O Y))))
H3 : eq F0 F0
H5 : eq (S V O Y) F0
H : not (eq (S O U V) F0)
H6 : not (parallel U V O Y)
Hdiff : not (eq V O)
H0 : not (parallel U V O Y)
O,U,V,B,Y : Point
*****
eq (Fopp (S O Y B)) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (Fopp F0) (S O U Y)) (Fmult (S O B U) F0)))
+++++
rewrite H7.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
subst W.
assert (Col O Y B).
unfold Col in *.
uniformize_signed_areas.
rewrite H4.
rewrite H5.
rewrite H7.

*****
H7 : eq (S O Y B) F0
H2 : eq (Fdiv (DSeg O V) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H4 : eq (S B O V) F0
H1 : eq (S B O V)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (Fopp (S B O V)) (S O U Y))\n (Fmult (S O B U) (S V O Y))))
H3 : eq F0 F0
H5 : eq (S V O Y) F0
H : not (eq (S O U V) F0)
H6 : not (parallel U V O Y)
Hdiff : not (eq V O)
H0 : not (parallel U V O Y)
O,U,V,B,Y : Point
*****
eq (Fopp F0) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (Fopp F0) (S O U Y)) (Fmult (S O B U) F0)))
+++++
ring.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.

*****
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
cases_equality O B.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.

*****
H8 : eq O B
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
subst B.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
subst B.

*****
H7 : not (eq V W)
H4 : Col O O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S O O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O O V) (S O U Y)) (Fmult (S O O U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,Y : Point
*****
eq (S O O Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O O V) (S O U Y)) (Fmult (S O O U) (S O Y V))))
+++++
basic_simpl.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
subst B.
basic_simpl.

*****
H7 : not (eq V W)
H4 : Col O O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq F0 F0
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,Y : Point
*****
eq F0 F0
+++++
ring.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.

*****
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
cases_col V O B.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.

*****
H9 : Col V O B
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (Col O Y B).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (Col O Y B).

*****
H9 : Col V O B
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O Y B
+++++
eapply col_trans_1 with (B:= W).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (Col O Y B).
eapply col_trans_1 with (B:= W).

*****
H9 : Col V O B
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq O W)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (Col O Y B).
eapply col_trans_1 with (B:= W).

*****
H9 : Col V O B
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O W Y
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (Col O Y B).
eapply col_trans_1 with (B:= W).

*****
H9 : Col V O B
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O W B
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (Col O Y B).

*****
H10 : Col O Y B
H9 : Col V O B
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (Col O Y V).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (Col O Y B).
assert (Col O Y V).

*****
H10 : Col O Y B
H9 : Col V O B
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O Y V
+++++
eapply col_trans_1 with (B:= B).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (Col O Y B).
assert (Col O Y V).
eapply col_trans_1 with (B:= B).

*****
H10 : Col O Y B
H9 : Col V O B
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq O B)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (Col O Y B).
assert (Col O Y V).
eapply col_trans_1 with (B:= B).

*****
H10 : Col O Y B
H9 : Col V O B
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O B Y
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (Col O Y B).
assert (Col O Y V).
eapply col_trans_1 with (B:= B).

*****
H10 : Col O Y B
H9 : Col V O B
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O B V
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (Col O Y B).
assert (Col O Y V).

*****
H11 : Col O Y V
H10 : Col O Y B
H9 : Col V O B
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
unfold Col in *.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (Col O Y B).
assert (Col O Y V).
unfold Col in *.

*****
H11 : eq (S O Y V) F0
H10 : eq (S O Y B) F0
H9 : eq (S V O B) F0
H8 : not (eq O B)
H7 : not (eq V W)
H4 : eq (S B O W) F0
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : eq (S W O Y) F0
H3 : eq (S W U V) F0
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (eq (S O U V) F0)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
uniformize_signed_areas.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (Col O Y B).
assert (Col O Y V).
unfold Col in *.
uniformize_signed_areas.

*****
H11 : eq (S O Y V) F0
H10 : eq (S O Y B) F0
H9 : eq (S O B V) F0
H4 : eq (S B O W) F0
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H5 : eq (S W O Y) F0
H3 : eq (S W U V) F0
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
H : not (eq (S O U V) F0)
H8 : not (eq O B)
H7 : not (eq V W)
H6 : not (parallel U V O Y)
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
O,U,V,B,Y : Point
*****
eq (Fopp (S O Y B)) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
rewrite H9.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (Col O Y B).
assert (Col O Y V).
unfold Col in *.
uniformize_signed_areas.
rewrite H9.

*****
H11 : eq (S O Y V) F0
H10 : eq (S O Y B) F0
H9 : eq (S O B V) F0
H4 : eq (S B O W) F0
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H5 : eq (S W O Y) F0
H3 : eq (S W U V) F0
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
H : not (eq (S O U V) F0)
H8 : not (eq O B)
H7 : not (eq V W)
H6 : not (parallel U V O Y)
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
O,U,V,B,Y : Point
*****
eq (Fopp (S O Y B)) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult F0 (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
rewrite H10.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (Col O Y B).
assert (Col O Y V).
unfold Col in *.
uniformize_signed_areas.
rewrite H9.
rewrite H10.

*****
H11 : eq (S O Y V) F0
H10 : eq (S O Y B) F0
H9 : eq (S O B V) F0
H4 : eq (S B O W) F0
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H5 : eq (S W O Y) F0
H3 : eq (S W U V) F0
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
H : not (eq (S O U V) F0)
H8 : not (eq O B)
H7 : not (eq V W)
H6 : not (parallel U V O Y)
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
O,U,V,B,Y : Point
*****
eq (Fopp F0) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult F0 (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
rewrite H11.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (Col O Y B).
assert (Col O Y V).
unfold Col in *.
uniformize_signed_areas.
rewrite H9.
rewrite H10.
rewrite H11.

*****
H11 : eq (S O Y V) F0
H10 : eq (S O Y B) F0
H9 : eq (S O B V) F0
H4 : eq (S B O W) F0
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H5 : eq (S W O Y) F0
H3 : eq (S W U V) F0
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
H : not (eq (S O U V) F0)
H8 : not (eq O B)
H7 : not (eq V W)
H6 : not (parallel U V O Y)
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
O,U,V,B,Y : Point
*****
eq (Fopp F0) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult F0 (S O U Y)) (Fmult (S O B U) F0)))
+++++
ring.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.

*****
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (U**W/V**W = S U O B / S V O B).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).

*****
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
+++++
apply co_side.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
apply co_side.

*****
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (Col V O B)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
apply co_side.

*****
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq V W)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
apply co_side.

*****
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O B W
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
apply co_side.

*****
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col U V W
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).

*****
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
cases_col V O Y.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.

*****
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
cases_equality Y O.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.

*****
H12 : eq Y O
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
subst Y.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
subst Y.

*****
H11 : Col V O O
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H5 : Col W O O
H6 : not (parallel U V O O)
H2 : eq (Fdiv (DSeg O W) (DSeg O O)) (Fdiv (S O U V) (S4 O U O V))
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U O V)))\n (Fplus (Fmult (S O B V) (S O U O)) (Fmult (S O B U) (S O O V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O O)
H : not (Col O U V)
O,U,V,B : Point
*****
eq (S O B O) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U O)) (Fmult (S O B U) (S O O V))))
+++++
basic_simpl.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
subst Y.
basic_simpl.

*****
H11 : Col V O O
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H5 : Col W O O
H6 : not (parallel U V O O)
H2 : eq (Fdiv (DSeg O W) F0) (Fdiv (S O U V) F0)
H3 : Col W U V
H1 : eq (S B O W) F0
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O O)
H : not (Col O U V)
O,U,V,B : Point
*****
eq F0 F0
+++++
ring.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.

*****
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (Col Y W V).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).

*****
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col Y W V
+++++
eapply col_trans_1 with (B:= O).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
eapply col_trans_1 with (B:= O).

*****
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq Y O)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
eapply col_trans_1 with (B:= O).

*****
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col Y O W
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
eapply col_trans_1 with (B:= O).

*****
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col Y O V
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).

*****
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (Col W U Y).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).

*****
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col W U Y
+++++
eapply col_trans_1 with (B:= V).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
eapply col_trans_1 with (B:= V).

*****
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq W V)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
eapply col_trans_1 with (B:= V).

*****
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col W V U
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
eapply col_trans_1 with (B:= V).

*****
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col W V Y
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).

*****
H14 : Col W U Y
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
cases_equality Y W.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.

*****
H15 : eq Y W
H14 : Col W U Y
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
Unset Regular Subst Tactic.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
Unset Regular Subst Tactic.

*****
H15 : eq Y W
H14 : Col W U Y
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
subst W.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
Unset Regular Subst Tactic.
subst W.

*****
H14 : Col Y U Y
H13 : Col Y Y V
H10 : eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S U O B) (S V O B))
H7 : not (eq V Y)
H4 : Col B O Y
H2 : eq (Fdiv (DSeg O Y) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H5 : Col Y O Y
H3 : Col Y U V
H1 : eq (S B O Y)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
H12,Hdiff : not (eq Y O)
H11 : Col V O Y
H9 : not (Col V O B)
H8 : not (eq O B)
H0,H6 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
Set Regular Subst Tactic.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
Unset Regular Subst Tactic.
subst W.
Set Regular Subst Tactic.

*****
H14 : Col Y U Y
H13 : Col Y Y V
H10 : eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S U O B) (S V O B))
H7 : not (eq V Y)
H4 : Col B O Y
H2 : eq (Fdiv (DSeg O Y) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H5 : Col Y O Y
H3 : Col Y U V
H1 : eq (S B O Y)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
H12,Hdiff : not (eq Y O)
H11 : Col V O Y
H9 : not (Col V O B)
H8 : not (eq O B)
H0,H6 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
clear H13 H12 H5.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
Unset Regular Subst Tactic.
subst W.
Set Regular Subst Tactic.
clear H13 H12 H5.

*****
H14 : Col Y U Y
H10 : eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S U O B) (S V O B))
H7 : not (eq V Y)
H4 : Col B O Y
H2 : eq (Fdiv (DSeg O Y) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H3 : Col Y U V
H1 : eq (S B O Y)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq Y O)
H11 : Col V O Y
H9 : not (Col V O B)
H8 : not (eq O B)
H0,H6 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (Col O V B).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
Unset Regular Subst Tactic.
subst W.
Set Regular Subst Tactic.
clear H13 H12 H5.
assert (Col O V B).

*****
H14 : Col Y U Y
H10 : eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S U O B) (S V O B))
H7 : not (eq V Y)
H4 : Col B O Y
H2 : eq (Fdiv (DSeg O Y) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H3 : Col Y U V
H1 : eq (S B O Y)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq Y O)
H11 : Col V O Y
H9 : not (Col V O B)
H8 : not (eq O B)
H0,H6 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O V B
+++++
eapply col_trans_1 with (B:= Y).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
Unset Regular Subst Tactic.
subst W.
Set Regular Subst Tactic.
clear H13 H12 H5.
assert (Col O V B).
eapply col_trans_1 with (B:= Y).

*****
H14 : Col Y U Y
H10 : eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S U O B) (S V O B))
H7 : not (eq V Y)
H4 : Col B O Y
H2 : eq (Fdiv (DSeg O Y) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H3 : Col Y U V
H1 : eq (S B O Y)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq Y O)
H11 : Col V O Y
H9 : not (Col V O B)
H8 : not (eq O B)
H0,H6 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq O Y)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
Unset Regular Subst Tactic.
subst W.
Set Regular Subst Tactic.
clear H13 H12 H5.
assert (Col O V B).
eapply col_trans_1 with (B:= Y).

*****
H14 : Col Y U Y
H10 : eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S U O B) (S V O B))
H7 : not (eq V Y)
H4 : Col B O Y
H2 : eq (Fdiv (DSeg O Y) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H3 : Col Y U V
H1 : eq (S B O Y)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq Y O)
H11 : Col V O Y
H9 : not (Col V O B)
H8 : not (eq O B)
H0,H6 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O Y V
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
Unset Regular Subst Tactic.
subst W.
Set Regular Subst Tactic.
clear H13 H12 H5.
assert (Col O V B).
eapply col_trans_1 with (B:= Y).

*****
H14 : Col Y U Y
H10 : eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S U O B) (S V O B))
H7 : not (eq V Y)
H4 : Col B O Y
H2 : eq (Fdiv (DSeg O Y) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H3 : Col Y U V
H1 : eq (S B O Y)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq Y O)
H11 : Col V O Y
H9 : not (Col V O B)
H8 : not (eq O B)
H0,H6 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O Y B
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
Unset Regular Subst Tactic.
subst W.
Set Regular Subst Tactic.
clear H13 H12 H5.
assert (Col O V B).

*****
H5 : Col O V B
H14 : Col Y U Y
H10 : eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S U O B) (S V O B))
H7 : not (eq V Y)
H4 : Col B O Y
H2 : eq (Fdiv (DSeg O Y) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H3 : Col Y U V
H1 : eq (S B O Y)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq Y O)
H11 : Col V O Y
H9 : not (Col V O B)
H8 : not (eq O B)
H0,H6 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
unfold Col in *.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
Unset Regular Subst Tactic.
subst W.
Set Regular Subst Tactic.
clear H13 H12 H5.
assert (Col O V B).
unfold Col in *.

*****
H5 : eq (S O V B) F0
H14 : eq (S Y U Y) F0
H10 : eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S U O B) (S V O B))
H7 : not (eq V Y)
H4 : eq (S B O Y) F0
H2 : eq (Fdiv (DSeg O Y) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H3 : eq (S Y U V) F0
H1 : eq (S B O Y)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq Y O)
H11 : eq (S V O Y) F0
H9 : not (eq (S V O B) F0)
H8 : not (eq O B)
H0,H6 : not (parallel U V O Y)
H : not (eq (S O U V) F0)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
uniformize_signed_areas.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
Unset Regular Subst Tactic.
subst W.
Set Regular Subst Tactic.
clear H13 H12 H5.
assert (Col O V B).
unfold Col in *.
uniformize_signed_areas.

*****
H5 : eq (Fopp (S V O B)) F0
H14 : eq F0 F0
H10 : eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S O B U) (S V O B))
H4 : eq (S B O Y) F0
H2 : eq (Fdiv (DSeg O Y) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H3 : eq (S Y U V) F0
H1 : eq (S B O Y)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S V O B) (S O U Y)) (Fmult (S O B U) (S V O Y))))
H11 : eq (S V O Y) F0
H9 : not (eq (S V O B) F0)
H : not (eq (S O U V) F0)
H7 : not (eq V Y)
Hdiff : not (eq Y O)
H8 : not (eq O B)
H0,H6 : not (parallel U V O Y)
O,U,V,B,Y : Point
*****
eq (Fopp (S B O Y)) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S V O B) (S O U Y)) (Fmult (S O B U) (S V O Y))))
+++++
rewrite H4.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
Unset Regular Subst Tactic.
subst W.
Set Regular Subst Tactic.
clear H13 H12 H5.
assert (Col O V B).
unfold Col in *.
uniformize_signed_areas.
rewrite H4.

*****
H5 : eq (Fopp (S V O B)) F0
H14 : eq F0 F0
H10 : eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S O B U) (S V O B))
H4 : eq (S B O Y) F0
H2 : eq (Fdiv (DSeg O Y) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H3 : eq (S Y U V) F0
H1 : eq (S B O Y)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S V O B) (S O U Y)) (Fmult (S O B U) (S V O Y))))
H11 : eq (S V O Y) F0
H9 : not (eq (S V O B) F0)
H : not (eq (S O U V) F0)
H7 : not (eq V Y)
Hdiff : not (eq Y O)
H8 : not (eq O B)
H0,H6 : not (parallel U V O Y)
O,U,V,B,Y : Point
*****
eq (Fopp F0) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S V O B) (S O U Y)) (Fmult (S O B U) (S V O Y))))
+++++
replace (S V O B) with (-0).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
Unset Regular Subst Tactic.
subst W.
Set Regular Subst Tactic.
clear H13 H12 H5.
assert (Col O V B).
unfold Col in *.
uniformize_signed_areas.
rewrite H4.
replace (S V O B) with (-0).

*****
H5 : eq (Fopp (S V O B)) F0
H14 : eq F0 F0
H10 : eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S O B U) (S V O B))
H4 : eq (S B O Y) F0
H2 : eq (Fdiv (DSeg O Y) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H3 : eq (S Y U V) F0
H1 : eq (S B O Y)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S V O B) (S O U Y)) (Fmult (S O B U) (S V O Y))))
H11 : eq (S V O Y) F0
H9 : not (eq (S V O B) F0)
H : not (eq (S O U V) F0)
H7 : not (eq V Y)
Hdiff : not (eq Y O)
H8 : not (eq O B)
H0,H6 : not (parallel U V O Y)
O,U,V,B,Y : Point
*****
eq (Fopp F0) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (Fopp F0) (S O U Y)) (Fmult (S O B U) (S V O Y))))
+++++
rewrite H11.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
Unset Regular Subst Tactic.
subst W.
Set Regular Subst Tactic.
clear H13 H12 H5.
assert (Col O V B).
unfold Col in *.
uniformize_signed_areas.
rewrite H4.
replace (S V O B) with (-0).
rewrite H11.

*****
H5 : eq (Fopp (S V O B)) F0
H14 : eq F0 F0
H10 : eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S O B U) (S V O B))
H4 : eq (S B O Y) F0
H2 : eq (Fdiv (DSeg O Y) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H3 : eq (S Y U V) F0
H1 : eq (S B O Y)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S V O B) (S O U Y)) (Fmult (S O B U) (S V O Y))))
H11 : eq (S V O Y) F0
H9 : not (eq (S V O B) F0)
H : not (eq (S O U V) F0)
H7 : not (eq V Y)
Hdiff : not (eq Y O)
H8 : not (eq O B)
H0,H6 : not (parallel U V O Y)
O,U,V,B,Y : Point
*****
eq (Fopp F0) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (Fopp F0) (S O U Y)) (Fmult (S O B U) F0)))
+++++
ring.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
Unset Regular Subst Tactic.
subst W.
Set Regular Subst Tactic.
clear H13 H12 H5.
assert (Col O V B).
unfold Col in *.
uniformize_signed_areas.
rewrite H4.
replace (S V O B) with (-0).

*****
H5 : eq (Fopp (S V O B)) F0
H14 : eq F0 F0
H10 : eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S O B U) (S V O B))
H4 : eq (S B O Y) F0
H2 : eq (Fdiv (DSeg O Y) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H3 : eq (S Y U V) F0
H1 : eq (S B O Y)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S V O B) (S O U Y)) (Fmult (S O B U) (S V O Y))))
H11 : eq (S V O Y) F0
H9 : not (eq (S V O B) F0)
H : not (eq (S O U V) F0)
H7 : not (eq V Y)
Hdiff : not (eq Y O)
H8 : not (eq O B)
H0,H6 : not (parallel U V O Y)
O,U,V,B,Y : Point
*****
eq (Fopp F0) (S V O B)
+++++
rewrite <- H5.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
Unset Regular Subst Tactic.
subst W.
Set Regular Subst Tactic.
clear H13 H12 H5.
assert (Col O V B).
unfold Col in *.
uniformize_signed_areas.
rewrite H4.
replace (S V O B) with (-0).
rewrite <- H5.

*****
H5 : eq (Fopp (S V O B)) F0
H14 : eq F0 F0
H10 : eq (Fdiv (DSeg U Y) (DSeg V Y)) (Fdiv (S O B U) (S V O B))
H4 : eq (S B O Y) F0
H2 : eq (Fdiv (DSeg O Y) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H3 : eq (S Y U V) F0
H1 : eq (S B O Y)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S V O B) (S O U Y)) (Fmult (S O B U) (S V O Y))))
H11 : eq (S V O Y) F0
H9 : not (eq (S V O B) F0)
H : not (eq (S O U V) F0)
H7 : not (eq V Y)
Hdiff : not (eq Y O)
H8 : not (eq O B)
H0,H6 : not (parallel U V O Y)
O,U,V,B,Y : Point
*****
eq (Fopp (Fopp (S V O B))) (S V O B)
+++++
ring.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.

*****
H15 : not (eq Y W)
H14 : Col W U Y
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (Col Y U O).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
assert (Col Y U O).

*****
H15 : not (eq Y W)
H14 : Col W U Y
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col Y U O
+++++
eapply col_trans_1 with (B:= W).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
assert (Col Y U O).
eapply col_trans_1 with (B:= W).

*****
H15 : not (eq Y W)
H14 : Col W U Y
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq Y W)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
assert (Col Y U O).
eapply col_trans_1 with (B:= W).

*****
H15 : not (eq Y W)
H14 : Col W U Y
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col Y W U
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
assert (Col Y U O).
eapply col_trans_1 with (B:= W).

*****
H15 : not (eq Y W)
H14 : Col W U Y
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col Y W O
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
assert (Col Y U O).

*****
H16 : Col Y U O
H15 : not (eq Y W)
H14 : Col W U Y
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (Col O U V).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
assert (Col Y U O).
assert (Col O U V).

*****
H16 : Col Y U O
H15 : not (eq Y W)
H14 : Col W U Y
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O U V
+++++
eapply col_trans_1 with (B:= Y).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
assert (Col Y U O).
assert (Col O U V).
eapply col_trans_1 with (B:= Y).

*****
H16 : Col Y U O
H15 : not (eq Y W)
H14 : Col W U Y
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq O Y)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
assert (Col Y U O).
assert (Col O U V).
eapply col_trans_1 with (B:= Y).

*****
H16 : Col Y U O
H15 : not (eq Y W)
H14 : Col W U Y
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O Y U
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
assert (Col Y U O).
assert (Col O U V).
eapply col_trans_1 with (B:= Y).

*****
H16 : Col Y U O
H15 : not (eq Y W)
H14 : Col W U Y
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O Y V
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
cases_equality Y O.
assert (Col Y W V).
assert (Col W U Y).
cases_equality Y W.
assert (Col Y U O).
assert (Col O U V).

*****
H17 : Col O U V
H16 : Col Y U O
H15 : not (eq Y W)
H14 : Col W U Y
H13 : Col Y W V
H12 : not (eq Y O)
H11 : Col V O Y
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
intuition.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.

*****
H11 : not (Col V O Y)
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (U**W/V**W = S U O Y / S V O Y).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).

*****
H11 : not (Col V O Y)
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O Y) (S V O Y))
+++++
apply co_side.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
apply co_side.

*****
H11 : not (Col V O Y)
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (Col V O Y)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
apply co_side.

*****
H11 : not (Col V O Y)
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq V W)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
apply co_side.

*****
H11 : not (Col V O Y)
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O Y W
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
apply co_side.

*****
H11 : not (Col V O Y)
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col U V W
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).

*****
H12 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O Y) (S V O Y))
H11 : not (Col V O Y)
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
rewrite H10 in H12.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
rewrite H10 in H12.

*****
H12 : eq (Fdiv (S U O B) (S V O B)) (Fdiv (S U O Y) (S V O Y))
H11 : not (Col V O Y)
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (Col O B Y).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
rewrite H10 in H12.
assert (Col O B Y).

*****
H12 : eq (Fdiv (S U O B) (S V O B)) (Fdiv (S U O Y) (S V O Y))
H11 : not (Col V O Y)
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O B Y
+++++
eapply col_trans_1 with (B:= W).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
rewrite H10 in H12.
assert (Col O B Y).
eapply col_trans_1 with (B:= W).

*****
H12 : eq (Fdiv (S U O B) (S V O B)) (Fdiv (S U O Y) (S V O Y))
H11 : not (Col V O Y)
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq O W)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
rewrite H10 in H12.
assert (Col O B Y).
eapply col_trans_1 with (B:= W).

*****
H12 : eq (Fdiv (S U O B) (S V O B)) (Fdiv (S U O Y) (S V O Y))
H11 : not (Col V O Y)
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O W B
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
rewrite H10 in H12.
assert (Col O B Y).
eapply col_trans_1 with (B:= W).

*****
H12 : eq (Fdiv (S U O B) (S V O B)) (Fdiv (S U O Y) (S V O Y))
H11 : not (Col V O Y)
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O W Y
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
rewrite H10 in H12.
assert (Col O B Y).

*****
H13 : Col O B Y
H12 : eq (Fdiv (S U O B) (S V O B)) (Fdiv (S U O Y) (S V O Y))
H11 : not (Col V O Y)
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
rewrite H13.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
rewrite H10 in H12.
assert (Col O B Y).
rewrite H13.

*****
H13 : Col O B Y
H12 : eq (Fdiv (S U O B) (S V O B)) (Fdiv (S U O Y) (S V O Y))
H11 : not (Col V O Y)
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S U O B) (S V O B))
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq F0 (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
uniformize_signed_areas.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
rewrite H10 in H12.
assert (Col O B Y).
rewrite H13.
uniformize_signed_areas.

*****
H12 : eq (Fdiv (S O B U) (S O B V)) (Fdiv (Fopp (S O U Y)) (S O Y V))
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (S O B U) (S O B V))
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
H13 : Col O B Y
H11 : not (Col V O Y)
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq F0 (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
RewriteVar (S O B U) H12.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
rewrite H10 in H12.
assert (Col O B Y).
rewrite H13.
uniformize_signed_areas.
RewriteVar (S O B U) H12.

*****
H12 : eq (S O B U) (Fmult (S O B V) (Fdiv (Fopp (S O U Y)) (S O Y V)))
H14 : not (eq (S O B V) F0)
H10 : eq (Fdiv (DSeg U W) (DSeg V W))\n (Fdiv (Fmult (S O B V) (Fdiv (Fopp (S O U Y)) (S O Y V))) (S O B V))
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y))\n (Fmult (Fmult (S O B V) (Fdiv (Fopp (S O U Y)) (S O Y V)))\n (S O Y V))))
H13 : Col O B Y
H11 : not (Col V O Y)
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq F0 (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (Fmult (S O B V) (Fdiv (Fopp (S O U Y)) (S O Y V))) (S O Y V))))
+++++
field.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
rewrite H10 in H12.
assert (Col O B Y).
rewrite H13.
uniformize_signed_areas.
RewriteVar (S O B U) H12.
field.

*****
H12 : eq (S O B U) (Fmult (S O B V) (Fdiv (Fopp (S O U Y)) (S O Y V)))
H14 : not (eq (S O B V) F0)
H10 : eq (Fdiv (DSeg U W) (DSeg V W))\n (Fdiv (Fmult (S O B V) (Fdiv (Fopp (S O U Y)) (S O Y V))) (S O B V))
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y))\n (Fmult (Fmult (S O B V) (Fdiv (Fopp (S O U Y)) (S O Y V)))\n (S O Y V))))
H13 : Col O B Y
H11 : not (Col V O Y)
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
and (not (eq (S O Y V) F0)) (not (eq (S O U V) F0))
+++++
split.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
rewrite H10 in H12.
assert (Col O B Y).
rewrite H13.
uniformize_signed_areas.
RewriteVar (S O B U) H12.
field.
split.

*****
H12 : eq (S O B U) (Fmult (S O B V) (Fdiv (Fopp (S O U Y)) (S O Y V)))
H14 : not (eq (S O B V) F0)
H10 : eq (Fdiv (DSeg U W) (DSeg V W))\n (Fdiv (Fmult (S O B V) (Fdiv (Fopp (S O U Y)) (S O Y V))) (S O B V))
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y))\n (Fmult (Fmult (S O B V) (Fdiv (Fopp (S O U Y)) (S O Y V)))\n (S O Y V))))
H13 : Col O B Y
H11 : not (Col V O Y)
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq (S O Y V) F0)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
rewrite H10 in H12.
assert (Col O B Y).
rewrite H13.
uniformize_signed_areas.
RewriteVar (S O B U) H12.
field.
split.

*****
H12 : eq (S O B U) (Fmult (S O B V) (Fdiv (Fopp (S O U Y)) (S O Y V)))
H14 : not (eq (S O B V) F0)
H10 : eq (Fdiv (DSeg U W) (DSeg V W))\n (Fdiv (Fmult (S O B V) (Fdiv (Fopp (S O U Y)) (S O Y V))) (S O B V))
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y))\n (Fmult (Fmult (S O B V) (Fdiv (Fopp (S O U Y)) (S O Y V)))\n (S O Y V))))
H13 : Col O B Y
H11 : not (Col V O Y)
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq (S O U V) F0)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
cases_equality V W.
cases_equality O B.
cases_col V O B.
assert (U**W/V**W = S U O B / S V O B).
cases_col V O Y.
assert (U**W/V**W = S U O Y / S V O Y).
rewrite H10 in H12.
assert (Col O B Y).
rewrite H13.
uniformize_signed_areas.
RewriteVar (S O B U) H12.

*****
H12 : eq (Fdiv (S O B U) (S O B V)) (Fdiv (Fopp (S O U Y)) (S O Y V))
H10 : eq (Fdiv (DSeg U W) (DSeg V W)) (Fdiv (Fopp (S O U Y)) (S O Y V))
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
H13 : Col O B Y
H11 : not (Col V O Y)
H9 : not (Col V O B)
H8 : not (eq O B)
H7 : not (eq V W)
H4 : Col B O W
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq (S O B V) F0)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.

*****
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (O**Y / O**W = S B O Y / S B O W).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).

*****
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
+++++
apply A6.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
apply A6.

*****
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq O W)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
apply A6.

*****
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (Col B O W)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
apply A6.

*****
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O Y W
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).

*****
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
assert (O**Y / O**W = S4 O U Y V / S O U V).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).

*****
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S4 O U Y V) (S O U V))
+++++
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).

*****
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fdiv F1 (Fdiv (DSeg O W) (DSeg O Y))) (Fdiv (S4 O U Y V) (S O U V))
+++++
rewrite H2.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).
rewrite H2.

*****
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fdiv F1 (Fdiv (S O U V) (S4 O U Y V))) (Fdiv (S4 O U Y V) (S O U V))
+++++
field.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).
rewrite H2.
field.

*****
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
and (not (eq (S O U V) F0)) (not (eq (S4 O U Y V) F0))
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).

*****
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fdiv F1 (Fdiv (DSeg O W) (DSeg O Y))) (Fdiv (DSeg O Y) (DSeg O W))
+++++
repeat apply nonzeromult.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).
repeat apply nonzeromult.

*****
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fdiv F1 (Fdiv (DSeg O W) (DSeg O Y))) (Fdiv (DSeg O Y) (DSeg O W))
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).
repeat apply nonzeromult.
Geometry.

*****
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fdiv F1 (Fdiv (DSeg O W) (DSeg O Y))) (Fdiv (DSeg O Y) (DSeg O W))
+++++
field.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).
repeat apply nonzeromult.
Geometry.
field.

*****
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
and (not (eq (DSeg O W) F0)) (not (eq (DSeg O Y) F0))
+++++
split.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).
repeat apply nonzeromult.
Geometry.
field.
split.

*****
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq (DSeg O W) F0)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).
repeat apply nonzeromult.
Geometry.
field.
split.

*****
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq (DSeg O Y) F0)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).
repeat apply nonzeromult.
Geometry.
field.
split.
Geometry.

*****
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq (DSeg O Y) F0)
+++++
unfold not.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).
repeat apply nonzeromult.
Geometry.
field.
split.
Geometry.
unfold not.

*****
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
forall _ : eq (DSeg O Y) F0, False
+++++
intro.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).
repeat apply nonzeromult.
Geometry.
field.
split.
Geometry.
unfold not.
intro.

*****
H8 : eq (DSeg O Y) F0
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
False
+++++
assert (O=Y).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).
repeat apply nonzeromult.
Geometry.
field.
split.
Geometry.
unfold not.
intro.
assert (O=Y).

*****
H8 : eq (DSeg O Y) F0
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq O Y
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).
repeat apply nonzeromult.
Geometry.
field.
split.
Geometry.
unfold not.
intro.
assert (O=Y).

*****
H9 : eq O Y
H8 : eq (DSeg O Y) F0
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
False
+++++
subst Y.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).
repeat apply nonzeromult.
Geometry.
field.
split.
Geometry.
unfold not.
intro.
assert (O=Y).
subst Y.

*****
H7 : eq (Fdiv (DSeg O O) (DSeg O W)) (Fdiv (S B O O) (S B O W))
H8 : eq (DSeg O O) F0
H4 : not (Col B O W)
H5 : Col W O O
H6 : not (parallel U V O O)
H2 : eq (Fdiv (DSeg O W) (DSeg O O)) (Fdiv (S O U V) (S4 O U O V))
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U O V)))\n (Fplus (Fmult (S O B V) (S O U O)) (Fmult (S O B U) (S O O V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O O)
H : not (Col O U V)
O,U,V,B : Point
*****
False
+++++
assert (parallel U V O O).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).
repeat apply nonzeromult.
Geometry.
field.
split.
Geometry.
unfold not.
intro.
assert (O=Y).
subst Y.
assert (parallel U V O O).

*****
H7 : eq (Fdiv (DSeg O O) (DSeg O W)) (Fdiv (S B O O) (S B O W))
H8 : eq (DSeg O O) F0
H4 : not (Col B O W)
H5 : Col W O O
H6 : not (parallel U V O O)
H2 : eq (Fdiv (DSeg O W) (DSeg O O)) (Fdiv (S O U V) (S4 O U O V))
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U O V)))\n (Fplus (Fmult (S O B V) (S O U O)) (Fmult (S O B U) (S O O V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O O)
H : not (Col O U V)
O,U,V,B : Point
*****
parallel U V O O
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
replace (O ** Y / O ** W) with (1/(O ** W / O ** Y)).
repeat apply nonzeromult.
Geometry.
field.
split.
Geometry.
unfold not.
intro.
assert (O=Y).
subst Y.
assert (parallel U V O O).

*****
H9 : parallel U V O O
H7 : eq (Fdiv (DSeg O O) (DSeg O W)) (Fdiv (S B O O) (S B O W))
H8 : eq (DSeg O O) F0
H4 : not (Col B O W)
H5 : Col W O O
H6 : not (parallel U V O O)
H2 : eq (Fdiv (DSeg O W) (DSeg O O)) (Fdiv (S O U V) (S4 O U O V))
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U O V)))\n (Fplus (Fmult (S O B V) (S O U O)) (Fmult (S O B U) (S O O V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O O)
H : not (Col O U V)
O,U,V,B : Point
*****
False
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).

*****
H8 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
rewrite H7 in H8.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.

*****
H8 : eq (Fdiv (S B O Y) (S B O W)) (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
set (S O B V * S O U Y + S O B U * S O Y V) in *.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.

*****
H8 : eq (Fdiv (S B O Y) (S B O W)) (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) f)
+++++
rewrite H1 in H8.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.

*****
H8 : eq (Fdiv (S B O Y) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) f)
+++++
replace (S B O Y) with (-S O B Y) in H8.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.

*****
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) f)
+++++
RewriteVar (S O B Y) H8.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.

*****
H8 : eq (S O B Y)\n (Fmult (Fmult (Fopp (Fdiv F1 (Fopp (S4 O U Y V)))) f)\n (Fdiv (S4 O U Y V) (S O U V)))
H9 : not (eq (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f) F0)
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fmult (Fmult (Fopp (Fdiv F1 (Fopp (S4 O U Y V)))) f) (Fdiv (S4 O U Y V) (S O U V))) (Fmult (Fdiv F1 (S O U V)) f)
+++++
field.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
field.

*****
H8 : eq (S O B Y)\n (Fmult (Fmult (Fopp (Fdiv F1 (Fopp (S4 O U Y V)))) f)\n (Fdiv (S4 O U Y V) (S O U V)))
H9 : not (eq (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f) F0)
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
and (not (eq (S O U V) F0)) (not (eq (Fopp (S4 O U Y V)) F0))
+++++
split.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
field.
split.

*****
H8 : eq (S O B Y)\n (Fmult (Fmult (Fopp (Fdiv F1 (Fopp (S4 O U Y V)))) f)\n (Fdiv (S4 O U Y V) (S O U V)))
H9 : not (eq (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f) F0)
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq (S O U V) F0)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
field.
split.

*****
H8 : eq (S O B Y)\n (Fmult (Fmult (Fopp (Fdiv F1 (Fopp (S4 O U Y V)))) f)\n (Fdiv (S4 O U Y V) (S O U V)))
H9 : not (eq (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f) F0)
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq (Fopp (S4 O U Y V)) F0)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.

*****
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f) F0)
+++++
apply nonzeromult.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
apply nonzeromult.

*****
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq (Fdiv F1 (Fopp (S4 O U Y V))) F0)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
apply nonzeromult.
Geometry.

*****
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq (Fdiv F1 (Fopp (S4 O U Y V))) F0)
+++++
apply nonzerodiv.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
apply nonzeromult.
Geometry.
apply nonzerodiv.

*****
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq F1 F0)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
apply nonzeromult.
Geometry.
apply nonzerodiv.

*****
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq (Fopp (S4 O U Y V)) F0)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
apply nonzeromult.

*****
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq f F0)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
apply nonzeromult.
Geometry.

*****
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq f F0)
+++++
unfold not.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
apply nonzeromult.
Geometry.
unfold not.

*****
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
forall _ : eq f F0, False
+++++
intro.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
apply nonzeromult.
Geometry.
unfold not.
intro.

*****
H9 : eq f F0
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
False
+++++
rewrite H9 in H1.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
apply nonzeromult.
Geometry.
unfold not.
intro.
rewrite H9 in H1.

*****
H9 : eq f F0
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) F0)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
False
+++++
basic_simpl.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
apply nonzeromult.
Geometry.
unfold not.
intro.
rewrite H9 in H1.
basic_simpl.

*****
H9 : eq f F0
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) F0
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
False
+++++
assert (Col O Y B).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
apply nonzeromult.
Geometry.
unfold not.
intro.
rewrite H9 in H1.
basic_simpl.
assert (Col O Y B).

*****
H9 : eq f F0
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) F0
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O Y B
+++++
eapply col_trans_1 with (B:=W).
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
apply nonzeromult.
Geometry.
unfold not.
intro.
rewrite H9 in H1.
basic_simpl.
assert (Col O Y B).
eapply col_trans_1 with (B:=W).

*****
H9 : eq f F0
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) F0
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
not (eq O W)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
apply nonzeromult.
Geometry.
unfold not.
intro.
rewrite H9 in H1.
basic_simpl.
assert (Col O Y B).
eapply col_trans_1 with (B:=W).

*****
H9 : eq f F0
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) F0
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O W Y
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
apply nonzeromult.
Geometry.
unfold not.
intro.
rewrite H9 in H1.
basic_simpl.
assert (Col O Y B).
eapply col_trans_1 with (B:=W).

*****
H9 : eq f F0
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) F0
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
Col O W B
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.
RewriteVar (S O B Y) H8.
apply nonzeromult.
Geometry.
unfold not.
intro.
rewrite H9 in H1.
basic_simpl.
assert (Col O Y B).

*****
H10 : Col O Y B
H9 : eq f F0
H8 : eq (Fdiv (Fopp (S O B Y)) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) F0
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
False
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
unfold inter_ll in *.
DecompAndAll.
assert (O ** W / O ** Y = S O U V / S4 O U Y V).
cases_col B O W.
assert (O**Y / O**W = S B O Y / S B O W).
assert (O**Y / O**W = S4 O U Y V / S O U V).
rewrite H7 in H8.
set (S O B V * S O U Y + S O B U * S O Y V) in *.
rewrite H1 in H8.
replace (S B O Y) with (-S O B Y) in H8.

*****
H8 : eq (Fdiv (S B O Y) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f))\n (Fdiv (S4 O U Y V) (S O U V))
H7 : eq (Fdiv (DSeg O Y) (DSeg O W)) (Fdiv (S B O Y) (S B O W))
H4 : not (Col B O W)
H2 : eq (Fdiv (DSeg O W) (DSeg O Y)) (Fdiv (S O U V) (S4 O U Y V))
H6 : not (parallel U V O Y)
H5 : Col W O Y
H3 : Col W U V
H1 : eq (S B O W) (Fmult (Fdiv F1 (Fopp (S4 O U Y V))) f)
f : F
Hdiff : not (eq W O)
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fopp (S O B Y)) (S B O Y)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.

*****
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S U O Y) (S B O V)) (Fmult (S V Y O) (S B O U))))
Hdiff : not (eq W O)
H2 : inter_ll W U V O Y
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))) (Fplus (Fmult (S U O Y) (S B O V)) (Fmult (S V Y O) (S B O U)))
+++++
uniformize_signed_areas.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.
replace ((S U O Y * S B O V + S V Y O * S B O U)) with (S O B V * S O U Y + S O B U * S O Y V) in H1.
uniformize_signed_areas.

*****
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (Fopp (S4 O U Y V)))\n (Fplus (Fmult (S U O Y) (S B O V)) (Fmult (S V Y O) (S B O U))))
Hdiff : not (eq W O)
H2 : inter_ll W U V O Y
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fplus (Fmult (Fopp (S B O V)) (Fopp (S U O Y))) (Fmult (Fopp (S B O U)) (Fopp (S V Y O)))) (Fplus (Fmult (S U O Y) (S B O V)) (Fmult (S V Y O) (S B O U)))
+++++
field.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.
assert (exists W, inter_ll W U V O Y).
DecompEx H1 W.
cases_equality W O.
rename H1 into Hdiff.
assert (S B O W = 1 / S4 U O V Y * (S U O Y * S B O V + S V Y O * S B O U)).
replace (S4 U O V Y) with (- S4 O U Y V) in H1.

*****
H1 : eq (S B O W)\n (Fmult (Fdiv F1 (S4 U O V Y))\n (Fplus (Fmult (S U O Y) (S B O V)) (Fmult (S V Y O) (S B O U))))
Hdiff : not (eq W O)
H2 : inter_ll W U V O Y
W : Point
H0 : not (parallel U V O Y)
H : not (Col O U V)
O,U,V,B,Y : Point
*****
eq (Fopp (S4 O U Y V)) (S4 U O V Y)
+++++
Geometry.
-----
Lemma freepoint_elimination_aux : forall O U V B Y:Point, ~ Col O U V -> S O B Y = 1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V).
Proof.
intros.
cases_parallel U V O Y.

*****

*****

+++++
Qed.
-----
Lemma  free_points_area_elimination :\n    forall O U V A B Y : Point, \n    S O U V <> 0 ->\n    S A B Y =\n    Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 /\n    S O U V.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.

*****

*****
forall (O U V A B Y : Point) (_ : not (eq (S O U V) F0)), eq (S A B Y) (Fdiv (Det3 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1 (S O U Y) (S O V Y) F1) (S O U V))
+++++
Proof.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.

*****

*****
forall (O U V A B Y : Point) (_ : not (eq (S O U V) F0)), eq (S A B Y) (Fdiv (Det3 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1 (S O U Y) (S O V Y) F1) (S O U V))
+++++
intros.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (S A B Y) (Fdiv (Det3 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1 (S O U Y) (S O V Y) F1) (S O U V))
+++++
unfold Det3.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U A) (Fmult (S O V B) F1)) (Fmult (S O U A) (Fmult F1 (S O V Y)))) (Fmult (S O V A) (Fmult (S O U B) F1))) (Fmult (S O V A) (Fmult F1 (S O U Y)))) (Fmult F1 (Fmult (S O U B) (S O V Y)))) (Fmult F1 (Fmult (S O V B) (S O U Y)))) (S O U V))
+++++
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (Fplus (Fplus (S A B O) (S A O Y)) (S O B Y)) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U A) (Fmult (S O V B) F1)) (Fmult (S O U A) (Fmult F1 (S O V Y)))) (Fmult (S O V A) (Fmult (S O U B) F1))) (Fmult (S O V A) (Fmult F1 (S O U Y)))) (Fmult F1 (Fmult (S O U B) (S O V Y)))) (Fmult F1 (Fmult (S O V B) (S O U Y)))) (S O U V))
+++++
Geometry.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (Fplus (Fplus (S A B O) (S A O Y)) (S O B Y)) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U A) (Fmult (S O V B) F1)) (Fmult (S O U A) (Fmult F1 (S O V Y)))) (Fmult (S O V A) (Fmult (S O U B) F1))) (Fmult (S O V A) (Fmult F1 (S O U Y)))) (Fmult F1 (Fmult (S O U B) (S O V Y)))) (Fmult F1 (Fmult (S O V B) (S O U Y)))) (S O U V))
+++++
replace (S A O Y) with (- S O A Y).
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (Fplus (Fplus (S A B O) (Fopp (S O A Y))) (S O B Y)) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U A) (Fmult (S O V B) F1)) (Fmult (S O U A) (Fmult F1 (S O V Y)))) (Fmult (S O V A) (Fmult (S O U B) F1))) (Fmult (S O V A) (Fmult F1 (S O U Y)))) (Fmult F1 (Fmult (S O U B) (S O V Y)))) (Fmult F1 (Fmult (S O V B) (S O U Y)))) (S O U V))
+++++
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (Fplus (Fplus (S A B O) (Fopp (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O A V) (S O U Y)) (Fmult (S O A U) (S O Y V)))))) (S O B Y)) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U A) (Fmult (S O V B) F1)) (Fmult (S O U A) (Fmult F1 (S O V Y)))) (Fmult (S O V A) (Fmult (S O U B) F1))) (Fmult (S O V A) (Fmult F1 (S O U Y)))) (Fmult F1 (Fmult (S O U B) (S O V Y)))) (Fmult F1 (Fmult (S O V B) (S O U Y)))) (S O U V))
+++++
replace (S O B Y) with (1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V)).
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).
replace (S O B Y) with (1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V)).

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (Fplus (Fplus (S A B O) (Fopp (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O A V) (S O U Y)) (Fmult (S O A U) (S O Y V)))))) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U A) (Fmult (S O V B) F1)) (Fmult (S O U A) (Fmult F1 (S O V Y)))) (Fmult (S O V A) (Fmult (S O U B) F1))) (Fmult (S O V A) (Fmult F1 (S O U Y)))) (Fmult F1 (Fmult (S O U B) (S O V Y)))) (Fmult F1 (Fmult (S O V B) (S O U Y)))) (S O U V))
+++++
replace (S A B O) with (S O A B).
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).
replace (S O B Y) with (1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V)).
replace (S A B O) with (S O A B).

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (Fplus (Fplus (S O A B) (Fopp (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O A V) (S O U Y)) (Fmult (S O A U) (S O Y V)))))) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U A) (Fmult (S O V B) F1)) (Fmult (S O U A) (Fmult F1 (S O V Y)))) (Fmult (S O V A) (Fmult (S O U B) F1))) (Fmult (S O V A) (Fmult F1 (S O U Y)))) (Fmult F1 (Fmult (S O U B) (S O V Y)))) (Fmult F1 (Fmult (S O V B) (S O U Y)))) (S O U V))
+++++
replace (S O A B) with (1/ (S O U V) * (S O A V * S O U B + S O A U * S O B V)).
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).
replace (S O B Y) with (1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V)).
replace (S A B O) with (S O A B).
replace (S O A B) with (1/ (S O U V) * (S O A V * S O U B + S O A U * S O B V)).

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (Fplus (Fplus (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O A V) (S O U B)) (Fmult (S O A U) (S O B V)))) (Fopp (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O A V) (S O U Y)) (Fmult (S O A U) (S O Y V)))))) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U A) (Fmult (S O V B) F1)) (Fmult (S O U A) (Fmult F1 (S O V Y)))) (Fmult (S O V A) (Fmult (S O U B) F1))) (Fmult (S O V A) (Fmult F1 (S O U Y)))) (Fmult F1 (Fmult (S O U B) (S O V Y)))) (Fmult F1 (Fmult (S O V B) (S O U Y)))) (S O U V))
+++++
uniformize_signed_areas.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).
replace (S O B Y) with (1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V)).
replace (S A B O) with (S O A B).
replace (S O A B) with (1/ (S O U V) * (S O A V * S O U B + S O A U * S O B V)).
uniformize_signed_areas.

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (Fplus (Fplus (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O A V) (S O U B)) (Fmult (S O A U) (S O B V)))) (Fopp (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O A V) (S O U Y)) (Fmult (S O A U) (S O Y V)))))) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (Fopp (S O U B)) (S O Y V))))) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (Fopp (S O A U)) (Fmult (Fopp (S O B V)) F1)) (Fmult (Fopp (S O A U)) (Fmult F1 (Fopp (S O Y V))))) (Fmult (Fopp (S O A V)) (Fmult (S O U B) F1))) (Fmult (Fopp (S O A V)) (Fmult F1 (S O U Y)))) (Fmult F1 (Fmult (S O U B) (Fopp (S O Y V))))) (Fmult F1 (Fmult (Fopp (S O B V)) (S O U Y)))) (S O U V))
+++++
field.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).
replace (S O B Y) with (1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V)).
replace (S A B O) with (S O A B).
replace (S O A B) with (1/ (S O U V) * (S O A V * S O U B + S O A U * S O B V)).
uniformize_signed_areas.
field.

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
not (eq (S O U V) F0)
+++++
Geometry.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).
replace (S O B Y) with (1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V)).
replace (S A B O) with (S O A B).
replace (S O A B) with (1/ (S O U V) * (S O A V * S O U B + S O A U * S O B V)).

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O A V) (S O U B)) (Fmult (S O A U) (S O B V)))) (S O A B)
+++++
symmetry.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).
replace (S O B Y) with (1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V)).
replace (S A B O) with (S O A B).
replace (S O A B) with (1/ (S O U V) * (S O A V * S O U B + S O A U * S O B V)).
symmetry.

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (S O A B) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O A V) (S O U B)) (Fmult (S O A U) (S O B V))))
+++++
eapply freepoint_elimination_aux.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).
replace (S O B Y) with (1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V)).
replace (S A B O) with (S O A B).
replace (S O A B) with (1/ (S O U V) * (S O A V * S O U B + S O A U * S O B V)).
symmetry.
eapply freepoint_elimination_aux.

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
not (Col O U V)
+++++
Geometry.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).
replace (S O B Y) with (1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V)).
replace (S A B O) with (S O A B).

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (S O A B) (S A B O)
+++++
Geometry.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).
replace (S O B Y) with (1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V)).

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V)))) (S O B Y)
+++++
symmetry.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).
replace (S O B Y) with (1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V)).
symmetry.

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (S O B Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O B V) (S O U Y)) (Fmult (S O B U) (S O Y V))))
+++++
eapply freepoint_elimination_aux.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).
replace (S O B Y) with (1/ (S O U V) * (S O B V * S O U Y + S O B U * S O Y V)).
symmetry.
eapply freepoint_elimination_aux.

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
not (Col O U V)
+++++
Geometry.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O A V) (S O U Y)) (Fmult (S O A U) (S O Y V)))) (S O A Y)
+++++
symmetry.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).
symmetry.

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (S O A Y) (Fmult (Fdiv F1 (S O U V)) (Fplus (Fmult (S O A V) (S O U Y)) (Fmult (S O A U) (S O Y V))))
+++++
eapply freepoint_elimination_aux.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
replace (S O A Y) with (1/ (S O U V) * (S O A V * S O U Y + S O A U * S O Y V)).
symmetry.
eapply freepoint_elimination_aux.

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
not (Col O U V)
+++++
Geometry.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (Fopp (S O A Y)) (S A O Y)
+++++
symmetry.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).
Geometry.
replace (S A O Y) with (- S O A Y).
symmetry.

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (S A O Y) (Fopp (S O A Y))
+++++
Geometry.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).

*****
H : not (eq (S O U V) F0)
O,U,V,A,B,Y : Point
*****
eq (Fplus (Fplus (S A B O) (S A O Y)) (S O B Y)) (S A B Y)
+++++
Geometry.
-----
Lemma free_points_area_elimination : forall O U V A B Y : Point, S O U V <> 0 -> S A B Y = Det3 (S O U A) (S O V A) 1 (S O U B) (S O V B) 1 (S O U Y) (S O V Y) 1 / S O U V.
Proof.
intros.
unfold Det3.
replace (S A B Y) with (S A B O + S A O Y + S O B Y).

*****

*****

+++++
Qed.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point,\n  parallel A B C D ->\n  C<>D ->\n  S O U V <> 0 ->\n  S U A B <> 0 ->\n  A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B -\n S O U B * S O U V) /\n(S O U A * S O V D - S O U A * S O V C + S O V A * S O U C -\n S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)) (_ : not (eq (S O U V) F0)) (_ : not (eq (S U A B) F0)), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
Proof.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)) (_ : not (eq (S O U V) F0)) (_ : not (eq (S U A B) F0)), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
intros.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.

*****
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
cases_equality A B.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.

*****
H3 : eq A B
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
subst.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
subst.

*****
H2 : not (eq (S U B B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel B B C D
O,U,V,B,C,D : Point
*****
eq (Fdiv (DSeg B B) (DSeg C D)) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U B) (S O V B)) (Fmult (S O U B) (S O U V))) (Fmult (S O V B) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U B) (S O V D)) (Fmult (S O U B) (S O V C))) (Fmult (S O V B) (S O U C))) (Fmult (S O V B) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
basic_simpl.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
subst.
basic_simpl.

*****
H2 : not (eq F0 F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel B B C D
O,U,V,B,C,D : Point
*****
eq (Fdiv F0 (DSeg C D)) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U B) (S O V B)) (Fmult (S O U B) (S O U V))) (Fmult (S O V B) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U B) (S O V D)) (Fmult (S O U B) (S O V C))) (Fmult (S O V B) (S O U C))) (Fmult (S O V B) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
intuition.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.

*****
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\ (S U C D - S A C D) <> 0 ).
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).

*****
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D)))) (not (eq (Fminus (S U C D) (S A C D)) F0))
+++++
elim (on_line_dex_spec_strong_f A B C D H H3).
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).

*****
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
forall (x : Point) (_ : and (Col x A B) (and (eq (DSeg A x) (DSeg C D)) (weak_3_parallelogram A x D C))), and (eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D)))) (not (eq (Fminus (S U C D) (S A C D)) F0))
+++++
intros D' Hn.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.

*****
Hn : and (Col D' A B)\n (and (eq (DSeg A D') (DSeg C D)) (weak_3_parallelogram A D' D C))
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D)))) (not (eq (Fminus (S U C D) (S A C D)) F0))
+++++
decompose [and] Hn.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.

*****
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
Hn : and (Col D' A B)\n (and (eq (DSeg A D') (DSeg C D)) (weak_3_parallelogram A D' D C))
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D)))) (not (eq (Fminus (S U C D) (S A C D)) F0))
+++++
clear Hn.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.

*****
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D)))) (not (eq (Fminus (S U C D) (S A C D)) F0))
+++++
rewrite <- H6.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.

*****
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (DSeg A B) (DSeg A D')) (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D)))) (not (eq (Fminus (S U C D) (S A C D)) F0))
+++++
assert (A<>D').
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').

*****
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq A D')
+++++
intro.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
intro.

*****
H5 : eq A D'
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
subst.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
intro.
subst.

*****
H2 : not (eq (S U D' B) F0)
H3 : not (eq D' B)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel D' B C D
H4 : Col D' D' B
H6 : eq (DSeg D' D') (DSeg C D)
H7 : weak_3_parallelogram D' D' D C
O,U,V,B,C,D,D' : Point
*****
False
+++++
basic_simpl.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
intro.
subst.
basic_simpl.

*****
H2 : not (eq (S U D' B) F0)
H3 : not (eq D' B)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel D' B C D
H4 : Col D' D' B
H6 : eq F0 (DSeg C D)
H7 : weak_3_parallelogram D' D' D C
O,U,V,B,C,D,D' : Point
*****
False
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').

*****
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (DSeg A B) (DSeg A D')) (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D)))) (not (eq (Fminus (S U C D) (S A C D)) F0))
+++++
assert (~ Col U A D').
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').

*****
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col U A D')
+++++
intro.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
intro.

*****
H8 : Col U A D'
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
assert (Col A B U).
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
intro.
assert (Col A B U).

*****
H8 : Col U A D'
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col A B U
+++++
eapply (col_trans_1).
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
intro.
assert (Col A B U).
eapply (col_trans_1).

*****
H8 : Col U A D'
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq A ?B)
+++++
eauto with Geom.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
intro.
assert (Col A B U).
eapply (col_trans_1).

*****
H8 : Col U A D'
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col A D' B
+++++
eauto with Geom.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
intro.
assert (Col A B U).
eapply (col_trans_1).

*****
H8 : Col U A D'
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col A D' U
+++++
eauto with Geom.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
intro.
assert (Col A B U).

*****
H9 : Col A B U
H8 : Col U A D'
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
assert (Col U A B).
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
intro.
assert (Col A B U).
assert (Col U A B).

*****
H9 : Col A B U
H8 : Col U A D'
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col U A B
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
intro.
assert (Col A B U).
assert (Col U A B).

*****
H10 : Col U A B
H9 : Col A B U
H8 : Col U A D'
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').

*****
H8 : not (Col U A D')
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (DSeg A B) (DSeg A D')) (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D)))) (not (eq (Fminus (S U C D) (S A C D)) F0))
+++++
rewrite (A6 A B D' U H5 H8).
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
rewrite (A6 A B D' U H5 H8).

*****
H8 : not (Col U A D')
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (S U A B) (S U A D')) (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D)))) (not (eq (Fminus (S U C D) (S A C D)) F0))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
rewrite (A6 A B D' U H5 H8).
idtac.

*****
H8 : not (Col U A D')
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (S U A B) (S U A D')) (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D)))) (not (eq (Fminus (S U C D) (S A C D)) F0))
+++++
rewrite (A5 U A B O).
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
rewrite (A6 A B D' U H5 H8).
idtac.
rewrite (A5 U A B O).

*****
H8 : not (Col U A D')
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (Fplus (Fplus (S U A O) (S U O B)) (S O A B)) (S U A D')) (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D)))) (not (eq (Fminus (S U C D) (S A C D)) F0))
+++++
assert (S U A D' = S U C D - S A C D).
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
rewrite (A6 A B D' U H5 H8).
idtac.
rewrite (A5 U A B O).
assert (S U A D' = S U C D - S A C D).

*****
H8 : not (Col U A D')
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (S U A D') (Fminus (S U C D) (S A C D))
+++++
apply (l2_12a_strong_3 A D' D C U).
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
rewrite (A6 A B D' U H5 H8).
idtac.
rewrite (A5 U A B O).
assert (S U A D' = S U C D - S A C D).
apply (l2_12a_strong_3 A D' D C U).

*****
H8 : not (Col U A D')
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
weak_3_parallelogram A D' D C
+++++
auto.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
rewrite (A6 A B D' U H5 H8).
idtac.
rewrite (A5 U A B O).
assert (S U A D' = S U C D - S A C D).

*****
H9 : eq (S U A D') (Fminus (S U C D) (S A C D))
H8 : not (Col U A D')
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (Fplus (Fplus (S U A O) (S U O B)) (S O A B)) (S U A D')) (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D)))) (not (eq (Fminus (S U C D) (S A C D)) F0))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
rewrite (A6 A B D' U H5 H8).
idtac.
rewrite (A5 U A B O).
assert (S U A D' = S U C D - S A C D).
idtac.

*****
H9 : eq (S U A D') (Fminus (S U C D) (S A C D))
H8 : not (Col U A D')
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (Fplus (Fplus (S U A O) (S U O B)) (S O A B)) (S U A D')) (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D)))) (not (eq (Fminus (S U C D) (S A C D)) F0))
+++++
split.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
rewrite (A6 A B D' U H5 H8).
idtac.
rewrite (A5 U A B O).
assert (S U A D' = S U C D - S A C D).
idtac.
split.

*****
H9 : eq (S U A D') (Fminus (S U C D) (S A C D))
H8 : not (Col U A D')
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fplus (Fplus (S U A O) (S U O B)) (S O A B)) (S U A D')) (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D)))
+++++
uniformize_signed_areas.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
rewrite (A6 A B D' U H5 H8).
idtac.
rewrite (A5 U A B O).
assert (S U A D' = S U C D - S A C D).
idtac.
split.
uniformize_signed_areas.

*****
H9 : eq (S U A D') (Fminus (S U C D) (S A C D))
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H8 : not (Col U A D')
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fplus (Fplus (S U A O) (S U O B)) (S O A B)) (S U A D')) (Fdiv (Fminus (Fplus (S O A B) (S U A O)) (Fopp (S U O B))) (Fminus (S U C D) (S A C D)))
+++++
rewrite H9.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
rewrite (A6 A B D' U H5 H8).
idtac.
rewrite (A5 U A B O).
assert (S U A D' = S U C D - S A C D).
idtac.
split.
uniformize_signed_areas.
rewrite H9.

*****
H9 : eq (S U A D') (Fminus (S U C D) (S A C D))
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H8 : not (Col U A D')
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fplus (Fplus (S U A O) (S U O B)) (S O A B)) (Fminus (S U C D) (S A C D))) (Fdiv (Fminus (Fplus (S O A B) (S U A O)) (Fopp (S U O B))) (Fminus (S U C D) (S A C D)))
+++++
field.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
rewrite (A6 A B D' U H5 H8).
idtac.
rewrite (A5 U A B O).
assert (S U A D' = S U C D - S A C D).
idtac.
split.
uniformize_signed_areas.
rewrite H9.
field.

*****
H9 : eq (S U A D') (Fminus (S U C D) (S A C D))
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H8 : not (Col U A D')
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (S U C D) (S A C D)) F0)
+++++
rewrite <- H9.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
rewrite (A6 A B D' U H5 H8).
idtac.
rewrite (A5 U A B O).
assert (S U A D' = S U C D - S A C D).
idtac.
split.
uniformize_signed_areas.
rewrite H9.
field.
rewrite <- H9.

*****
H9 : eq (S U A D') (Fminus (S U C D) (S A C D))
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H8 : not (Col U A D')
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S U A D') F0)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
rewrite (A6 A B D' U H5 H8).
idtac.
rewrite (A5 U A B O).
assert (S U A D' = S U C D - S A C D).
idtac.
split.

*****
H9 : eq (S U A D') (Fminus (S U C D) (S A C D))
H8 : not (Col U A D')
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (S U C D) (S A C D)) F0)
+++++
rewrite <- H9.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
rewrite (A6 A B D' U H5 H8).
idtac.
rewrite (A5 U A B O).
assert (S U A D' = S U C D - S A C D).
idtac.
split.
rewrite <- H9.

*****
H9 : eq (S U A D') (Fminus (S U C D) (S A C D))
H8 : not (Col U A D')
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S U A D') F0)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
elim (on_line_dex_spec_strong_f A B C D H H3).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H6.
assert (A<>D').
assert (~ Col U A D').
rewrite (A6 A B D' U H5 H8).

*****
H8 : not (Col U A D')
H5 : not (eq A D')
H7 : weak_3_parallelogram A D' D C
H6 : eq (DSeg A D') (DSeg C D)
H4 : Col D' A B
D' : Point
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col A B D'
+++++
auto with Geom .
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).

*****
H4 : and\n (eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B))\n (Fminus (S U C D) (S A C D))))\n (not (eq (Fminus (S U C D) (S A C D)) F0))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
use H4.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.

*****
H6 : not (eq (Fminus (S U C D) (S A C D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B))\n (Fminus (S U C D) (S A C D)))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
rewrite H5.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.

*****
H6 : not (eq (Fminus (S U C D) (S A C D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B))\n (Fminus (S U C D) (S A C D)))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D))) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
rewrite (free_points_area_elimination O U V O A B) in *.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.

*****
H6 : not (eq (Fminus (S U C D) (S A C D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)) (S O U A)) (S O U B))\n (Fminus (S U C D) (S A C D)))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fplus (Fdiv (Det3 (S O U O) (S O V O) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D))) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.

*****
H6 : not (eq (Fminus (S U C D) (S A C D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)) (S O U A)) (S O U B))\n (Fminus (S U C D) (S A C D)))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fplus (Fdiv (Det3 (S O U O) (S O V O) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (S O U A)) (S O U B)) (Fminus (S U C D) (S A C D))) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
rewrite (free_points_area_elimination O U V U C D) in *.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.

*****
H6 : not\n (eq\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V)) (S A C D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)) (S O U A)) (S O U B))\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V)) (S A C D)))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fplus (Fdiv (Det3 (S O U O) (S O V O) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (S O U A)) (S O U B)) (Fminus (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U C) (S O V C) F1 (S O U D) (S O V D) F1) (S O U V)) (S A C D))) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.

*****
H6 : not\n (eq\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V)) (S A C D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)) (S O U A)) (S O U B))\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V)) (S A C D)))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fplus (Fdiv (Det3 (S O U O) (S O V O) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (S O U A)) (S O U B)) (Fminus (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U C) (S O V C) F1 (S O U D) (S O V D) F1) (S O U V)) (S A C D))) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
rewrite (free_points_area_elimination O U V A C D) in *.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.

*****
H6 : not\n (eq\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V))\n (Fdiv\n (Det3 (S O U A) (S O V A) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V))) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)) (S O U A)) (S O U B))\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V))\n (Fdiv\n (Det3 (S O U A) (S O V A) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V))))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fplus (Fdiv (Det3 (S O U O) (S O V O) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (S O U A)) (S O U B)) (Fminus (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U C) (S O V C) F1 (S O U D) (S O V D) F1) (S O U V)) (Fdiv (Det3 (S O U A) (S O V A) F1 (S O U C) (S O V C) F1 (S O U D) (S O V D) F1) (S O U V)))) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.
idtac.

*****
H6 : not\n (eq\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V))\n (Fdiv\n (Det3 (S O U A) (S O V A) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V))) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)) (S O U A)) (S O U B))\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V))\n (Fdiv\n (Det3 (S O U A) (S O V A) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V))))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fplus (Fdiv (Det3 (S O U O) (S O V O) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (S O U A)) (S O U B)) (Fminus (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U C) (S O V C) F1 (S O U D) (S O V D) F1) (S O U V)) (Fdiv (Det3 (S O U A) (S O V A) F1 (S O U C) (S O V C) F1 (S O U D) (S O V D) F1) (S O U V)))) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
unfold Det3 in *.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.
idtac.
unfold Det3 in *.

*****
H6 : not\n (eq\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U U) (Fmult (S O V C) F1))\n (Fmult (S O U U) (Fmult F1 (S O V D))))\n (Fmult (S O V U) (Fmult (S O U C) F1)))\n (Fmult (S O V U) (Fmult F1 (S O U D))))\n (Fmult F1 (Fmult (S O U C) (S O V D))))\n (Fmult F1 (Fmult (S O V C) (S O U D)))) \n (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (Fmult (S O V C) F1))\n (Fmult (S O U A) (Fmult F1 (S O V D))))\n (Fmult (S O V A) (Fmult (S O U C) F1)))\n (Fmult (S O V A) (Fmult F1 (S O U D))))\n (Fmult F1 (Fmult (S O U C) (S O V D))))\n (Fmult F1 (Fmult (S O V C) (S O U D)))) \n (S O U V))) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus\n (Fmult (S O U O) (Fmult (S O V A) F1))\n (Fmult (S O U O) (Fmult F1 (S O V B))))\n (Fmult (S O V O) (Fmult (S O U A) F1)))\n (Fmult (S O V O) (Fmult F1 (S O U B))))\n (Fmult F1 (Fmult (S O U A) (S O V B))))\n (Fmult F1 (Fmult (S O V A) (S O U B)))) \n (S O U V)) (S O U A)) (S O U B))\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U U) (Fmult (S O V C) F1))\n (Fmult (S O U U) (Fmult F1 (S O V D))))\n (Fmult (S O V U) (Fmult (S O U C) F1)))\n (Fmult (S O V U) (Fmult F1 (S O U D))))\n (Fmult F1 (Fmult (S O U C) (S O V D))))\n (Fmult F1 (Fmult (S O V C) (S O U D)))) \n (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (Fmult (S O V C) F1))\n (Fmult (S O U A) (Fmult F1 (S O V D))))\n (Fmult (S O V A) (Fmult (S O U C) F1)))\n (Fmult (S O V A) (Fmult F1 (S O U D))))\n (Fmult F1 (Fmult (S O U C) (S O V D))))\n (Fmult F1 (Fmult (S O V C) (S O U D)))) \n (S O U V))))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fplus (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U O) (Fmult (S O V A) F1)) (Fmult (S O U O) (Fmult F1 (S O V B)))) (Fmult (S O V O) (Fmult (S O U A) F1))) (Fmult (S O V O) (Fmult F1 (S O U B)))) (Fmult F1 (Fmult (S O U A) (S O V B)))) (Fmult F1 (Fmult (S O V A) (S O U B)))) (S O U V)) (S O U A)) (S O U B)) (Fminus (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U U) (Fmult (S O V C) F1)) (Fmult (S O U U) (Fmult F1 (S O V D)))) (Fmult (S O V U) (Fmult (S O U C) F1))) (Fmult (S O V U) (Fmult F1 (S O U D)))) (Fmult F1 (Fmult (S O U C) (S O V D)))) (Fmult F1 (Fmult (S O V C) (S O U D)))) (S O U V)) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U A) (Fmult (S O V C) F1)) (Fmult (S O U A) (Fmult F1 (S O V D)))) (Fmult (S O V A) (Fmult (S O U C) F1))) (Fmult (S O V A) (Fmult F1 (S O U D)))) (Fmult F1 (Fmult (S O U C) (S O V D)))) (Fmult F1 (Fmult (S O V C) (S O U D)))) (S O U V)))) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
replace (S O V U) with (- S O U V) in * by auto with Geom.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.

*****
H6 : not\n (eq\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U U) (Fmult (S O V C) F1))\n (Fmult (S O U U) (Fmult F1 (S O V D))))\n (Fmult (Fopp (S O U V)) (Fmult (S O U C) F1)))\n (Fmult (Fopp (S O U V)) (Fmult F1 (S O U D))))\n (Fmult F1 (Fmult (S O U C) (S O V D))))\n (Fmult F1 (Fmult (S O V C) (S O U D)))) \n (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (Fmult (S O V C) F1))\n (Fmult (S O U A) (Fmult F1 (S O V D))))\n (Fmult (S O V A) (Fmult (S O U C) F1)))\n (Fmult (S O V A) (Fmult F1 (S O U D))))\n (Fmult F1 (Fmult (S O U C) (S O V D))))\n (Fmult F1 (Fmult (S O V C) (S O U D)))) \n (S O U V))) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus\n (Fmult (S O U O) (Fmult (S O V A) F1))\n (Fmult (S O U O) (Fmult F1 (S O V B))))\n (Fmult (S O V O) (Fmult (S O U A) F1)))\n (Fmult (S O V O) (Fmult F1 (S O U B))))\n (Fmult F1 (Fmult (S O U A) (S O V B))))\n (Fmult F1 (Fmult (S O V A) (S O U B)))) \n (S O U V)) (S O U A)) (S O U B))\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U U) (Fmult (S O V C) F1))\n (Fmult (S O U U) (Fmult F1 (S O V D))))\n (Fmult (Fopp (S O U V)) (Fmult (S O U C) F1)))\n (Fmult (Fopp (S O U V)) (Fmult F1 (S O U D))))\n (Fmult F1 (Fmult (S O U C) (S O V D))))\n (Fmult F1 (Fmult (S O V C) (S O U D)))) \n (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (Fmult (S O V C) F1))\n (Fmult (S O U A) (Fmult F1 (S O V D))))\n (Fmult (S O V A) (Fmult (S O U C) F1)))\n (Fmult (S O V A) (Fmult F1 (S O U D))))\n (Fmult F1 (Fmult (S O U C) (S O V D))))\n (Fmult F1 (Fmult (S O V C) (S O U D)))) \n (S O U V))))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fplus (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U O) (Fmult (S O V A) F1)) (Fmult (S O U O) (Fmult F1 (S O V B)))) (Fmult (S O V O) (Fmult (S O U A) F1))) (Fmult (S O V O) (Fmult F1 (S O U B)))) (Fmult F1 (Fmult (S O U A) (S O V B)))) (Fmult F1 (Fmult (S O V A) (S O U B)))) (S O U V)) (S O U A)) (S O U B)) (Fminus (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U U) (Fmult (S O V C) F1)) (Fmult (S O U U) (Fmult F1 (S O V D)))) (Fmult (Fopp (S O U V)) (Fmult (S O U C) F1))) (Fmult (Fopp (S O U V)) (Fmult F1 (S O U D)))) (Fmult F1 (Fmult (S O U C) (S O V D)))) (Fmult F1 (Fmult (S O V C) (S O U D)))) (S O U V)) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U A) (Fmult (S O V C) F1)) (Fmult (S O U A) (Fmult F1 (S O V D)))) (Fmult (S O V A) (Fmult (S O U C) F1))) (Fmult (S O V A) (Fmult F1 (S O U D)))) (Fmult F1 (Fmult (S O U C) (S O V D)))) (Fmult F1 (Fmult (S O V C) (S O U D)))) (S O U V)))) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
basic_simpl.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.

*****
H6 : not\n (eq\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U C))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (S O V C))\n (Fmult (S O U A) (S O V D)))\n (Fmult (S O V A) (S O U C)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Fminus (Fmult (S O U A) (S O V B))\n (Fmult (S O V A) (S O U B))) (S O U V)) \n (S O U A)) (S O U B))\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U C))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (S O V C))\n (Fmult (S O U A) (S O V D)))\n (Fmult (S O V A) (S O U C)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fplus (Fdiv (Fminus (Fmult (S O U A) (S O V B)) (Fmult (S O V A) (S O U B))) (S O U V)) (S O U A)) (S O U B)) (Fminus (Fdiv (Fminus (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U C)))) (Fmult (S O U V) (S O U D))) (Fmult (S O U C) (S O V D))) (Fmult (S O V C) (S O U D))) (S O U V)) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U A) (S O V C)) (Fmult (S O U A) (S O V D))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U C) (S O V D))) (Fmult (S O V C) (S O U D))) (S O U V)))) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O U A) (S O V B)) (Fmult (S O U A) (S O U V))) (Fmult (S O V A) (S O U B))) (Fmult (S O U B) (S O U V))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))))
+++++
field.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.

*****
H6 : not\n (eq\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U C))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (S O V C))\n (Fmult (S O U A) (S O V D)))\n (Fmult (S O V A) (S O U C)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Fminus (Fmult (S O U A) (S O V B))\n (Fmult (S O V A) (S O U B))) (S O U V)) \n (S O U A)) (S O U B))\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U C))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (S O V C))\n (Fmult (S O U A) (S O V D)))\n (Fmult (S O V A) (S O U C)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (not (eq (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))) F0)) (not (eq (S O U V) F0))
+++++
split.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.

*****
H6 : not\n (eq\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U C))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (S O V C))\n (Fmult (S O U A) (S O V D)))\n (Fmult (S O V A) (S O U C)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Fminus (Fmult (S O U A) (S O V B))\n (Fmult (S O V A) (S O U B))) (S O U V)) \n (S O U A)) (S O U B))\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U C))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (S O V C))\n (Fmult (S O U A) (S O V D)))\n (Fmult (S O V A) (S O U C)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))) F0)
+++++
auto.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.
auto.

*****
H6 : not\n (eq\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U C))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (S O V C))\n (Fmult (S O U A) (S O V D)))\n (Fmult (S O V A) (S O U C)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Fminus (Fmult (S O U A) (S O V B))\n (Fmult (S O V A) (S O U B))) (S O U V)) \n (S O U A)) (S O U B))\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U C))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (S O V C))\n (Fmult (S O U A) (S O V D)))\n (Fmult (S O V A) (S O U C)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))) F0)
+++++
clear H5.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.
auto.
clear H5.

*****
H6 : not\n (eq\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U C))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (S O V C))\n (Fmult (S O U A) (S O V D)))\n (Fmult (S O V A) (S O U C)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))) F0)
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))) F0)
+++++
replace ((0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D) / S O U V - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D) / S O U V ) with ((0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D)) / S O U V) in H6 by (field;auto).
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.
auto.
clear H5.
replace ((0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D) / S O U V - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D) / S O U V ) with ((0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D)) / S O U V) in H6 by (field;auto).

*****
H6 : not\n (eq\n (Fdiv\n (Fminus\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U C))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D)))\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (S O V C))\n (Fmult (S O U A) (S O V D)))\n (Fmult (S O V A) (S O U C)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D)))) (S O U V)) F0)
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))) F0)
+++++
replace (0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D)) with (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D) in H6 by ring.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.
auto.
clear H5.
replace ((0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D) / S O U V - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D) / S O U V ) with ((0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D)) / S O U V) in H6 by (field;auto).
replace (0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D)) with (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D) in H6 by ring.

*****
H6 : not\n (eq\n (Fdiv\n (Fminus\n (Fplus\n (Fminus\n (Fplus\n (Fminus (Fmult (S O U A) (S O V D))\n (Fmult (S O U A) (S O V C)))\n (Fmult (S O V A) (S O U C)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D)))\n (S O U V)) F0)
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U A) (S O V D)) (Fmult (S O U A) (S O V C))) (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))) F0)
+++++
intro Hx.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.
auto.
clear H5.
replace ((0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D) / S O U V - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D) / S O U V ) with ((0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D)) / S O U V) in H6 by (field;auto).
replace (0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D)) with (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D) in H6 by ring.
intro Hx.

*****
Hx : eq\n (Fminus\n (Fplus\n (Fminus\n (Fplus\n (Fminus (Fmult (S O U A) (S O V D))\n (Fmult (S O U A) (S O V C)))\n (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D)))\n (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))) F0
H6 : not\n (eq\n (Fdiv\n (Fminus\n (Fplus\n (Fminus\n (Fplus\n (Fminus (Fmult (S O U A) (S O V D))\n (Fmult (S O U A) (S O V C)))\n (Fmult (S O V A) (S O U C)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D)))\n (S O U V)) F0)
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
rewrite Hx in H6.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.
auto.
clear H5.
replace ((0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D) / S O U V - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D) / S O U V ) with ((0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D)) / S O U V) in H6 by (field;auto).
replace (0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D)) with (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D) in H6 by ring.
intro Hx.
rewrite Hx in H6.

*****
Hx : eq\n (Fminus\n (Fplus\n (Fminus\n (Fplus\n (Fminus (Fmult (S O U A) (S O V D))\n (Fmult (S O U A) (S O V C)))\n (Fmult (S O V A) (S O U C))) (Fmult (S O V A) (S O U D)))\n (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O U D))) F0
H6 : not (eq (Fdiv F0 (S O U V)) F0)
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
clear Hx.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.
auto.
clear H5.
replace ((0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D) / S O U V - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D) / S O U V ) with ((0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D)) / S O U V) in H6 by (field;auto).
replace (0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D)) with (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D) in H6 by ring.
intro Hx.
rewrite Hx in H6.
clear Hx.

*****
H6 : not (eq (Fdiv F0 (S O U V)) F0)
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
basic_simpl.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.
auto.
clear H5.
replace ((0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D) / S O U V - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D) / S O U V ) with ((0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D)) / S O U V) in H6 by (field;auto).
replace (0 - - (S O U V * S O U C) - S O U V * S O U D + S O U C * S O V D - S O V C * S O U D - (S O U A * S O V C - S O U A * S O V D - S O V A * S O U C + S O V A * S O U D + S O U C * S O V D - S O V C * S O U D)) with (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D) in H6 by ring.
intro Hx.
rewrite Hx in H6.
clear Hx.
basic_simpl.

*****
H6 : not (eq F0 F0)
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
intuition.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.

*****
H6 : not\n (eq\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U C))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (S O V C))\n (Fmult (S O U A) (S O V D)))\n (Fmult (S O V A) (S O U C)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Fminus (Fmult (S O U A) (S O V B))\n (Fmult (S O V A) (S O U B))) (S O U V)) \n (S O U A)) (S O U B))\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U C))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (S O V C))\n (Fmult (S O U A) (S O V D)))\n (Fmult (S O V A) (S O U C)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V C) (S O U D))) (S O U V))))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
auto.
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.

*****
H6 : not\n (eq\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V))\n (Fdiv\n (Det3 (S O U A) (S O V A) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V))) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)) (S O U A)) (S O U B))\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V)) (S A C D)))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.

*****
H6 : not\n (eq\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V)) (S A C D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)) (S O U A)) (S O U B))\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V)) (S A C D)))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.
idtac.
rewrite (free_points_area_elimination O U V A C D) in *.

*****
H6 : not\n (eq\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V)) (S A C D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)) (S O U A)) (S O U B))\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V)) (S A C D)))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.

*****
H6 : not\n (eq\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V)) (S A C D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)) (S O U A)) (S O U B))\n (Fminus (S U C D) (S A C D)))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.

*****
H6 : not (eq (Fminus (S U C D) (S A C D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)) (S O U A)) (S O U B))\n (Fminus (S U C D) (S A C D)))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V U C D) in *.

*****
H6 : not (eq (Fminus (S U C D) (S A C D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)) (S O U A)) (S O U B))\n (Fminus (S U C D) (S A C D)))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.

*****
H6 : not (eq (Fminus (S U C D) (S A C D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B))\n (Fminus (S U C D) (S A C D)))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.
assert (A**B / C**D = (S O A B + S O U A - S O U B) / (S U C D - S A C D) /\\ (S U C D - S A C D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V O A B) in *.

*****
H6 : not (eq (Fminus (S U C D) (S A C D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv (Fminus (Fplus (S O A B) (S O U A)) (S O U B))\n (Fminus (S U C D) (S A C D)))
H3 : not (eq A B)
H2 : not (eq (S U A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_1 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S U A B <> 0 -> A**B / C**D = (S O U A * S O V B + S O U A * S O U V - S O V A * S O U B - S O U B * S O U V) / (S O U A * S O V D - S O U A * S O V C + S O V A * S O U C - S O V A * S O U D + S O U V * S O U C - S O U V * S O U D).
Proof.
intros.
cases_equality A B.

*****

*****

+++++
Qed.
-----
Lemma free_point_ratio_elimination_2 : forall O U V A B C D : Point,\n  parallel A B C D ->\n  C<>D ->\n  S O U V <> 0 ->\n  S V A B <> 0 ->\n  A**B / C**D = (S O V A * S O U B + S O V A * S O V U - S O U A * S O V B -\n S O V B * S O V U) /\n(S O V A * S O U D - S O V A * S O U C + S O U A * S O V C -\n S O U A * S O V D + S O V U * S O V C - S O V U * S O V D).
-----
Lemma free_point_ratio_elimination_2 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S V A B <> 0 -> A**B / C**D = (S O V A * S O U B + S O V A * S O V U - S O U A * S O V B - S O V B * S O V U) / (S O V A * S O U D - S O V A * S O U C + S O U A * S O V C - S O U A * S O V D + S O V U * S O V C - S O V U * S O V D).

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)) (_ : not (eq (S O U V) F0)) (_ : not (eq (S V A B) F0)), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O V A) (S O U B)) (Fmult (S O V A) (S O V U))) (Fmult (S O U A) (S O V B))) (Fmult (S O V B) (S O V U))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O V A) (S O U D)) (Fmult (S O V A) (S O U C))) (Fmult (S O U A) (S O V C))) (Fmult (S O U A) (S O V D))) (Fmult (S O V U) (S O V C))) (Fmult (S O V U) (S O V D))))
+++++
Proof.
-----
Lemma free_point_ratio_elimination_2 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S V A B <> 0 -> A**B / C**D = (S O V A * S O U B + S O V A * S O V U - S O U A * S O V B - S O V B * S O V U) / (S O V A * S O U D - S O V A * S O U C + S O U A * S O V C - S O U A * S O V D + S O V U * S O V C - S O V U * S O V D).
Proof.

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)) (_ : not (eq (S O U V) F0)) (_ : not (eq (S V A B) F0)), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O V A) (S O U B)) (Fmult (S O V A) (S O V U))) (Fmult (S O U A) (S O V B))) (Fmult (S O V B) (S O V U))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O V A) (S O U D)) (Fmult (S O V A) (S O U C))) (Fmult (S O U A) (S O V C))) (Fmult (S O U A) (S O V D))) (Fmult (S O V U) (S O V C))) (Fmult (S O V U) (S O V D))))
+++++
intros.
-----
Lemma free_point_ratio_elimination_2 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S V A B <> 0 -> A**B / C**D = (S O V A * S O U B + S O V A * S O V U - S O U A * S O V B - S O V B * S O V U) / (S O V A * S O U D - S O V A * S O U C + S O U A * S O V C - S O U A * S O V D + S O V U * S O V C - S O V U * S O V D).
Proof.
intros.

*****
H2 : not (eq (S V A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O V A) (S O U B)) (Fmult (S O V A) (S O V U))) (Fmult (S O U A) (S O V B))) (Fmult (S O V B) (S O V U))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O V A) (S O U D)) (Fmult (S O V A) (S O U C))) (Fmult (S O U A) (S O V C))) (Fmult (S O U A) (S O V D))) (Fmult (S O V U) (S O V C))) (Fmult (S O V U) (S O V D))))
+++++
assert (S O V U <> 0).
-----
Lemma free_point_ratio_elimination_2 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S V A B <> 0 -> A**B / C**D = (S O V A * S O U B + S O V A * S O V U - S O U A * S O V B - S O V B * S O V U) / (S O V A * S O U D - S O V A * S O U C + S O U A * S O V C - S O U A * S O V D + S O V U * S O V C - S O V U * S O V D).
Proof.
intros.
assert (S O V U <> 0).

*****
H2 : not (eq (S V A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O V U) F0)
+++++
intro.
-----
Lemma free_point_ratio_elimination_2 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S V A B <> 0 -> A**B / C**D = (S O V A * S O U B + S O V A * S O V U - S O U A * S O V B - S O V B * S O V U) / (S O V A * S O U D - S O V A * S O U C + S O U A * S O V C - S O U A * S O V D + S O V U * S O V C - S O V U * S O V D).
Proof.
intros.
assert (S O V U <> 0).
intro.

*****
H3 : eq (S O V U) F0
H2 : not (eq (S V A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
apply H1.
-----
Lemma free_point_ratio_elimination_2 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S V A B <> 0 -> A**B / C**D = (S O V A * S O U B + S O V A * S O V U - S O U A * S O V B - S O V B * S O V U) / (S O V A * S O U D - S O V A * S O U C + S O U A * S O V C - S O U A * S O V D + S O V U * S O V C - S O V U * S O V D).
Proof.
intros.
assert (S O V U <> 0).
intro.
apply H1.

*****
H3 : eq (S O V U) F0
H2 : not (eq (S V A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (S O U V) F0
+++++
uniformize_signed_areas.
-----
Lemma free_point_ratio_elimination_2 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S V A B <> 0 -> A**B / C**D = (S O V A * S O U B + S O V A * S O V U - S O U A * S O V B - S O V B * S O V U) / (S O V A * S O U D - S O V A * S O U C + S O U A * S O V C - S O U A * S O V D + S O V U * S O V C - S O V U * S O V D).
Proof.
intros.
assert (S O V U <> 0).
intro.
apply H1.
uniformize_signed_areas.

*****
H3 : eq (Fopp (S O U V)) F0
H2 : not (eq (S V A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (S O U V) F0
+++++
auto with Geom.
-----
Lemma free_point_ratio_elimination_2 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S V A B <> 0 -> A**B / C**D = (S O V A * S O U B + S O V A * S O V U - S O U A * S O V B - S O V B * S O V U) / (S O V A * S O U D - S O V A * S O U C + S O U A * S O V C - S O U A * S O V D + S O V U * S O V C - S O V U * S O V D).
Proof.
intros.
assert (S O V U <> 0).

*****
H3 : not (eq (S O V U) F0)
H2 : not (eq (S V A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O V A) (S O U B)) (Fmult (S O V A) (S O V U))) (Fmult (S O U A) (S O V B))) (Fmult (S O V B) (S O V U))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O V A) (S O U D)) (Fmult (S O V A) (S O U C))) (Fmult (S O U A) (S O V C))) (Fmult (S O U A) (S O V D))) (Fmult (S O V U) (S O V C))) (Fmult (S O V U) (S O V D))))
+++++
rewrite (free_points_ratio_elimination_1 O V U A B C D).
-----
Lemma free_point_ratio_elimination_2 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S V A B <> 0 -> A**B / C**D = (S O V A * S O U B + S O V A * S O V U - S O U A * S O V B - S O V B * S O V U) / (S O V A * S O U D - S O V A * S O U C + S O U A * S O V C - S O U A * S O V D + S O V U * S O V C - S O V U * S O V D).
Proof.
intros.
assert (S O V U <> 0).
rewrite (free_points_ratio_elimination_1 O V U A B C D).

*****
H3 : not (eq (S O V U) F0)
H2 : not (eq (S V A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fminus (Fplus (Fmult (S O V A) (S O U B)) (Fmult (S O V A) (S O V U))) (Fmult (S O U A) (S O V B))) (Fmult (S O V B) (S O V U))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O V A) (S O U D)) (Fmult (S O V A) (S O U C))) (Fmult (S O U A) (S O V C))) (Fmult (S O U A) (S O V D))) (Fmult (S O V U) (S O V C))) (Fmult (S O V U) (S O V D)))) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O V A) (S O U B)) (Fmult (S O V A) (S O V U))) (Fmult (S O U A) (S O V B))) (Fmult (S O V B) (S O V U))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O V A) (S O U D)) (Fmult (S O V A) (S O U C))) (Fmult (S O U A) (S O V C))) (Fmult (S O U A) (S O V D))) (Fmult (S O V U) (S O V C))) (Fmult (S O V U) (S O V D))))
+++++
idtac.
-----
Lemma free_point_ratio_elimination_2 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S V A B <> 0 -> A**B / C**D = (S O V A * S O U B + S O V A * S O V U - S O U A * S O V B - S O V B * S O V U) / (S O V A * S O U D - S O V A * S O U C + S O U A * S O V C - S O U A * S O V D + S O V U * S O V C - S O V U * S O V D).
Proof.
intros.
assert (S O V U <> 0).
rewrite (free_points_ratio_elimination_1 O V U A B C D).
idtac.

*****
H3 : not (eq (S O V U) F0)
H2 : not (eq (S V A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fminus (Fplus (Fmult (S O V A) (S O U B)) (Fmult (S O V A) (S O V U))) (Fmult (S O U A) (S O V B))) (Fmult (S O V B) (S O V U))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O V A) (S O U D)) (Fmult (S O V A) (S O U C))) (Fmult (S O U A) (S O V C))) (Fmult (S O U A) (S O V D))) (Fmult (S O V U) (S O V C))) (Fmult (S O V U) (S O V D)))) (Fdiv (Fminus (Fminus (Fplus (Fmult (S O V A) (S O U B)) (Fmult (S O V A) (S O V U))) (Fmult (S O U A) (S O V B))) (Fmult (S O V B) (S O V U))) (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O V A) (S O U D)) (Fmult (S O V A) (S O U C))) (Fmult (S O U A) (S O V C))) (Fmult (S O U A) (S O V D))) (Fmult (S O V U) (S O V C))) (Fmult (S O V U) (S O V D))))
+++++
reflexivity.
-----
Lemma free_point_ratio_elimination_2 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S V A B <> 0 -> A**B / C**D = (S O V A * S O U B + S O V A * S O V U - S O U A * S O V B - S O V B * S O V U) / (S O V A * S O U D - S O V A * S O U C + S O U A * S O V C - S O U A * S O V D + S O V U * S O V C - S O V U * S O V D).
Proof.
intros.
assert (S O V U <> 0).
rewrite (free_points_ratio_elimination_1 O V U A B C D).

*****
H3 : not (eq (S O V U) F0)
H2 : not (eq (S V A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
parallel A B C D
+++++
auto .
-----
Lemma free_point_ratio_elimination_2 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S V A B <> 0 -> A**B / C**D = (S O V A * S O U B + S O V A * S O V U - S O U A * S O V B - S O V B * S O V U) / (S O V A * S O U D - S O V A * S O U C + S O U A * S O V C - S O U A * S O V D + S O V U * S O V C - S O V U * S O V D).
Proof.
intros.
assert (S O V U <> 0).
rewrite (free_points_ratio_elimination_1 O V U A B C D).

*****
H3 : not (eq (S O V U) F0)
H2 : not (eq (S V A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq C D)
+++++
auto .
-----
Lemma free_point_ratio_elimination_2 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S V A B <> 0 -> A**B / C**D = (S O V A * S O U B + S O V A * S O V U - S O U A * S O V B - S O V B * S O V U) / (S O V A * S O U D - S O V A * S O U C + S O U A * S O V C - S O U A * S O V D + S O V U * S O V C - S O V U * S O V D).
Proof.
intros.
assert (S O V U <> 0).
rewrite (free_points_ratio_elimination_1 O V U A B C D).

*****
H3 : not (eq (S O V U) F0)
H2 : not (eq (S V A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O V U) F0)
+++++
auto .
-----
Lemma free_point_ratio_elimination_2 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S V A B <> 0 -> A**B / C**D = (S O V A * S O U B + S O V A * S O V U - S O U A * S O V B - S O V B * S O V U) / (S O V A * S O U D - S O V A * S O U C + S O U A * S O V C - S O U A * S O V D + S O V U * S O V C - S O V U * S O V D).
Proof.
intros.
assert (S O V U <> 0).
rewrite (free_points_ratio_elimination_1 O V U A B C D).

*****
H3 : not (eq (S O V U) F0)
H2 : not (eq (S V A B) F0)
H1 : not (eq (S O U V) F0)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S V A B) F0)
+++++
auto .
-----
Lemma free_point_ratio_elimination_2 : forall O U V A B C D : Point, parallel A B C D -> C<>D -> S O U V <> 0 -> S V A B <> 0 -> A**B / C**D = (S O V A * S O U B + S O V A * S O V U - S O U A * S O V B - S O V B * S O V U) / (S O V A * S O U D - S O V A * S O U C + S O U A * S O V C - S O U A * S O V D + S O V U * S O V C - S O V U * S O V D).
Proof.
intros.
assert (S O V U <> 0).

*****

*****

+++++
Qed.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point,\n  parallel A B C D ->\n  A<>B ->\n  C<>D ->\n  S O U V <> 0 ->\n  S U C D <> 0 ->\n  A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A -\n  S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/\n  (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D -\n  S O U D * S O U V).
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq A B)) (_ : not (eq C D)) (_ : not (eq (S O U V) F0)) (_ : not (eq (S U C D) F0)), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U C) (S O V B)) (Fmult (S O U C) (S O V A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O U B))) (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))))
+++++
Proof.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq A B)) (_ : not (eq C D)) (_ : not (eq (S O U V) F0)) (_ : not (eq (S U C D) F0)), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U C) (S O V B)) (Fmult (S O U C) (S O V A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O U B))) (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))))
+++++
intros.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.

*****
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U C) (S O V B)) (Fmult (S O U C) (S O V A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O U B))) (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))))
+++++
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\ (S O C D + S O U C - S O U D) <> 0 ).
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).

*****
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))) (not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0))
+++++
assert (parallel C D A B).
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).

*****
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
parallel C D A B
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).

*****
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))) (not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.

*****
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))) (not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0))
+++++
elim (on_line_dex_spec_strong_f C D A B H4 H1).
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).

*****
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
forall (x : Point) (_ : and (Col x C D) (and (eq (DSeg C x) (DSeg A B)) (weak_3_parallelogram C x B A))), and (eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))) (not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0))
+++++
intros D' Hn.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.

*****
Hn : and (Col D' C D)\n (and (eq (DSeg C D') (DSeg A B)) (weak_3_parallelogram C D' B A))
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))) (not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0))
+++++
decompose [and] Hn.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.

*****
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
Hn : and (Col D' C D)\n (and (eq (DSeg C D') (DSeg A B)) (weak_3_parallelogram C D' B A))
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))) (not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0))
+++++
clear Hn.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.

*****
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))) (not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0))
+++++
rewrite <- H7.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.

*****
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (DSeg C D') (DSeg C D)) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))) (not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0))
+++++
assert (C<>D').
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').

*****
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq C D')
+++++
intro.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
intro.

*****
H6 : eq C D'
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
subst.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
intro.
subst.

*****
H3 : not (eq (S U D' D) F0)
H4 : parallel D' D A B
H2 : not (eq (S O U V) F0)
H1 : not (eq D' D)
H0 : not (eq A B)
H : parallel A B D' D
H5 : Col D' D' D
H7 : eq (DSeg D' D') (DSeg A B)
H8 : weak_3_parallelogram D' D' B A
O,U,V,A,B,D,D' : Point
*****
False
+++++
basic_simpl.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
intro.
subst.
basic_simpl.

*****
H3 : not (eq (S U D' D) F0)
H4 : parallel D' D A B
H2 : not (eq (S O U V) F0)
H1 : not (eq D' D)
H0 : not (eq A B)
H : parallel A B D' D
H5 : Col D' D' D
H7 : eq F0 (DSeg A B)
H8 : weak_3_parallelogram D' D' B A
O,U,V,A,B,D,D' : Point
*****
False
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').

*****
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (DSeg C D') (DSeg C D)) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))) (not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0))
+++++
rewrite (A6 C D' D U H1).
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).

*****
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (S U C D') (S U C D)) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))) (not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).
idtac.

*****
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (S U C D') (S U C D)) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))) (not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0))
+++++
rewrite (A5 U C D O).
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).
idtac.
rewrite (A5 U C D O).

*****
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (S U C D') (Fplus (Fplus (S U C O) (S U O D)) (S O C D))) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))) (not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0))
+++++
assert (T:=A5 U C D O).
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).
idtac.
rewrite (A5 U C D O).
assert (T:=A5 U C D O).

*****
T : eq (S U C D) (Fplus (Fplus (S U C O) (S U O D)) (S O C D))
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (S U C D') (Fplus (Fplus (S U C O) (S U O D)) (S O C D))) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))) (not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0))
+++++
assert (S U C D' = S U A B - S C A B).
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).
idtac.
rewrite (A5 U C D O).
assert (T:=A5 U C D O).
assert (S U C D' = S U A B - S C A B).

*****
T : eq (S U C D) (Fplus (Fplus (S U C O) (S U O D)) (S O C D))
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (S U C D') (Fminus (S U A B) (S C A B))
+++++
apply (l2_12a_strong_3 C D' B A U).
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).
idtac.
rewrite (A5 U C D O).
assert (T:=A5 U C D O).
assert (S U C D' = S U A B - S C A B).
apply (l2_12a_strong_3 C D' B A U).

*****
T : eq (S U C D) (Fplus (Fplus (S U C O) (S U O D)) (S O C D))
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
weak_3_parallelogram C D' B A
+++++
auto.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).
idtac.
rewrite (A5 U C D O).
assert (T:=A5 U C D O).
assert (S U C D' = S U A B - S C A B).

*****
H9 : eq (S U C D') (Fminus (S U A B) (S C A B))
T : eq (S U C D) (Fplus (Fplus (S U C O) (S U O D)) (S O C D))
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (S U C D') (Fplus (Fplus (S U C O) (S U O D)) (S O C D))) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))) (not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).
idtac.
rewrite (A5 U C D O).
assert (T:=A5 U C D O).
assert (S U C D' = S U A B - S C A B).
idtac.

*****
H9 : eq (S U C D') (Fminus (S U A B) (S C A B))
T : eq (S U C D) (Fplus (Fplus (S U C O) (S U O D)) (S O C D))
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (eq (Fdiv (S U C D') (Fplus (Fplus (S U C O) (S U O D)) (S O C D))) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))) (not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0))
+++++
split.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).
idtac.
rewrite (A5 U C D O).
assert (T:=A5 U C D O).
assert (S U C D' = S U A B - S C A B).
idtac.
split.

*****
H9 : eq (S U C D') (Fminus (S U A B) (S C A B))
T : eq (S U C D) (Fplus (Fplus (S U C O) (S U O D)) (S O C D))
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (S U C D') (Fplus (Fplus (S U C O) (S U O D)) (S O C D))) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))
+++++
uniformize_signed_areas.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).
idtac.
rewrite (A5 U C D O).
assert (T:=A5 U C D O).
assert (S U C D' = S U A B - S C A B).
idtac.
split.
uniformize_signed_areas.

*****
H9 : eq (S U C D') (Fminus (S U A B) (S C A B))
T : eq (S U C D) (Fplus (Fplus (S U C O) (S U O D)) (S O C D))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (S U C D') (Fplus (Fplus (S U C O) (S U O D)) (S O C D))) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S U C O)) (Fopp (S U O D))))
+++++
rewrite H9.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).
idtac.
rewrite (A5 U C D O).
assert (T:=A5 U C D O).
assert (S U C D' = S U A B - S C A B).
idtac.
split.
uniformize_signed_areas.
rewrite H9.

*****
H9 : eq (S U C D') (Fminus (S U A B) (S C A B))
T : eq (S U C D) (Fplus (Fplus (S U C O) (S U O D)) (S O C D))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (S U A B) (S C A B)) (Fplus (Fplus (S U C O) (S U O D)) (S O C D))) (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S U C O)) (Fopp (S U O D))))
+++++
field.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).
idtac.
rewrite (A5 U C D O).
assert (T:=A5 U C D O).
assert (S U C D' = S U A B - S C A B).
idtac.
split.
uniformize_signed_areas.
rewrite H9.
field.

*****
H9 : eq (S U C D') (Fminus (S U A B) (S C A B))
T : eq (S U C D) (Fplus (Fplus (S U C O) (S U O D)) (S O C D))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fplus (S O C D) (S U C O)) (Fopp (S U O D))) F0)
+++++
replace (S O C D + S U C O - - S U O D) with (S U C O + S U O D + S O C D) by ring.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).
idtac.
rewrite (A5 U C D O).
assert (T:=A5 U C D O).
assert (S U C D' = S U A B - S C A B).
idtac.
split.
uniformize_signed_areas.
rewrite H9.
field.
replace (S O C D + S U C O - - S U O D) with (S U C O + S U O D + S O C D) by ring.

*****
H9 : eq (S U C D') (Fminus (S U A B) (S C A B))
T : eq (S U C D) (Fplus (Fplus (S U C O) (S U O D)) (S O C D))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fplus (S U C O) (S U O D)) (S O C D)) F0)
+++++
rewrite <- T.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).
idtac.
rewrite (A5 U C D O).
assert (T:=A5 U C D O).
assert (S U C D' = S U A B - S C A B).
idtac.
split.
uniformize_signed_areas.
rewrite H9.
field.
replace (S O C D + S U C O - - S U O D) with (S U C O + S U O D + S O C D) by ring.
rewrite <- T.

*****
H9 : eq (S U C D') (Fminus (S U A B) (S C A B))
T : eq (S U C D) (Fplus (Fplus (S U C O) (S U O D)) (S O C D))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S U C D) F0)
+++++
auto.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).
idtac.
rewrite (A5 U C D O).
assert (T:=A5 U C D O).
assert (S U C D' = S U A B - S C A B).
idtac.
split.

*****
H9 : eq (S U C D') (Fminus (S U A B) (S C A B))
T : eq (S U C D) (Fplus (Fplus (S U C O) (S U O D)) (S O C D))
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0)
+++++
replace (S O C D + S O U C - S O U D) with (S U C O + S U O D + S O C D) by (uniformize_signed_areas;ring).
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).
idtac.
rewrite (A5 U C D O).
assert (T:=A5 U C D O).
assert (S U C D' = S U A B - S C A B).
idtac.
split.
replace (S O C D + S O U C - S O U D) with (S U C O + S U O D + S O C D) by (uniformize_signed_areas;ring).

*****
H9 : eq (S U C D') (Fminus (S U A B) (S C A B))
T : eq (S U C D) (Fplus (Fplus (S U C O) (S U O D)) (S O C D))
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fplus (S U C O) (S U O D)) (S O C D)) F0)
+++++
rewrite <- T.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).
idtac.
rewrite (A5 U C D O).
assert (T:=A5 U C D O).
assert (S U C D' = S U A B - S C A B).
idtac.
split.
replace (S O C D + S O U C - S O U D) with (S U C O + S U O D + S O C D) by (uniformize_signed_areas;ring).
rewrite <- T.

*****
H9 : eq (S U C D') (Fminus (S U A B) (S C A B))
T : eq (S U C D) (Fplus (Fplus (S U C O) (S U O D)) (S O C D))
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S U C D) F0)
+++++
auto.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).

*****
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col U C D)
+++++
auto with Geom .
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
assert (parallel C D A B).
idtac.
elim (on_line_dex_spec_strong_f C D A B H4 H1).
intros D' Hn.
decompose [and] Hn.
clear Hn.
rewrite <- H7.
assert (C<>D').
rewrite (A6 C D' D U H1).

*****
H6 : not (eq C D')
H8 : weak_3_parallelogram C D' B A
H7 : eq (DSeg C D') (DSeg A B)
H5 : Col D' C D
D' : Point
H4 : parallel C D A B
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col C D' D
+++++
auto with Geom .
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).

*****
H4 : and\n (eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv (Fminus (S U A B) (S C A B))\n (Fminus (Fplus (S O C D) (S O U C)) (S O U D))))\n (not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U C) (S O V B)) (Fmult (S O U C) (S O V A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O U B))) (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))))
+++++
use H4.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.

*****
H6 : not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv (Fminus (S U A B) (S C A B))\n (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U C) (S O V B)) (Fmult (S O U C) (S O V A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O U B))) (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))))
+++++
rewrite H5.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.

*****
H6 : not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv (Fminus (S U A B) (S C A B))\n (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (S U A B) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D))) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U C) (S O V B)) (Fmult (S O U C) (S O V A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O U B))) (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))))
+++++
rewrite (free_points_area_elimination O U V U A B) in *.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.

*****
H6 : not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)) (S C A B))\n (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D))) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U C) (S O V B)) (Fmult (S O U C) (S O V A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O U B))) (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.

*****
H6 : not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)) (S C A B))\n (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (S C A B)) (Fminus (Fplus (S O C D) (S O U C)) (S O U D))) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U C) (S O V B)) (Fmult (S O U C) (S O V A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O U B))) (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))))
+++++
rewrite (free_points_area_elimination O U V C A B) in *.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.

*****
H6 : not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V))\n (Fdiv\n (Det3 (S O U C) (S O V C) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V))) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (Fdiv (Det3 (S O U C) (S O V C) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V))) (Fminus (Fplus (S O C D) (S O U C)) (S O U D))) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U C) (S O V B)) (Fmult (S O U C) (S O V A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O U B))) (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.

*****
H6 : not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V))\n (Fdiv\n (Det3 (S O U C) (S O V C) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V))) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (Fdiv (Det3 (S O U C) (S O V C) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V))) (Fminus (Fplus (S O C D) (S O U C)) (S O U D))) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U C) (S O V B)) (Fmult (S O U C) (S O V A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O U B))) (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))))
+++++
rewrite (free_points_area_elimination O U V O C D) in *.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.

*****
H6 : not\n (eq\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V)) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V))\n (Fdiv\n (Det3 (S O U C) (S O V C) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)))\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V)) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (Fdiv (Det3 (S O U C) (S O V C) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V))) (Fminus (Fplus (Fdiv (Det3 (S O U O) (S O V O) F1 (S O U C) (S O V C) F1 (S O U D) (S O V D) F1) (S O U V)) (S O U C)) (S O U D))) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U C) (S O V B)) (Fmult (S O U C) (S O V A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O U B))) (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.

*****
H6 : not\n (eq\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V)) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V))\n (Fdiv\n (Det3 (S O U C) (S O V C) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)))\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V)) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (Fdiv (Det3 (S O U C) (S O V C) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V))) (Fminus (Fplus (Fdiv (Det3 (S O U O) (S O V O) F1 (S O U C) (S O V C) F1 (S O U D) (S O V D) F1) (S O U V)) (S O U C)) (S O U D))) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U C) (S O V B)) (Fmult (S O U C) (S O V A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O U B))) (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))))
+++++
unfold Det3 in *.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.

*****
H6 : not\n (eq\n (Fminus\n (Fplus\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus\n (Fmult (S O U O) (Fmult (S O V C) F1))\n (Fmult (S O U O) (Fmult F1 (S O V D))))\n (Fmult (S O V O) (Fmult (S O U C) F1)))\n (Fmult (S O V O) (Fmult F1 (S O U D))))\n (Fmult F1 (Fmult (S O U C) (S O V D))))\n (Fmult F1 (Fmult (S O V C) (S O U D)))) \n (S O U V)) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U U) (Fmult (S O V A) F1))\n (Fmult (S O U U) (Fmult F1 (S O V B))))\n (Fmult (S O V U) (Fmult (S O U A) F1)))\n (Fmult (S O V U) (Fmult F1 (S O U B))))\n (Fmult F1 (Fmult (S O U A) (S O V B))))\n (Fmult F1 (Fmult (S O V A) (S O U B)))) \n (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U C) (Fmult (S O V A) F1))\n (Fmult (S O U C) (Fmult F1 (S O V B))))\n (Fmult (S O V C) (Fmult (S O U A) F1)))\n (Fmult (S O V C) (Fmult F1 (S O U B))))\n (Fmult F1 (Fmult (S O U A) (S O V B))))\n (Fmult F1 (Fmult (S O V A) (S O U B)))) \n (S O U V)))\n (Fminus\n (Fplus\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus\n (Fmult (S O U O) (Fmult (S O V C) F1))\n (Fmult (S O U O) (Fmult F1 (S O V D))))\n (Fmult (S O V O) (Fmult (S O U C) F1)))\n (Fmult (S O V O) (Fmult F1 (S O U D))))\n (Fmult F1 (Fmult (S O U C) (S O V D))))\n (Fmult F1 (Fmult (S O V C) (S O U D)))) \n (S O U V)) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U U) (Fmult (S O V A) F1)) (Fmult (S O U U) (Fmult F1 (S O V B)))) (Fmult (S O V U) (Fmult (S O U A) F1))) (Fmult (S O V U) (Fmult F1 (S O U B)))) (Fmult F1 (Fmult (S O U A) (S O V B)))) (Fmult F1 (Fmult (S O V A) (S O U B)))) (S O U V)) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U C) (Fmult (S O V A) F1)) (Fmult (S O U C) (Fmult F1 (S O V B)))) (Fmult (S O V C) (Fmult (S O U A) F1))) (Fmult (S O V C) (Fmult F1 (S O U B)))) (Fmult F1 (Fmult (S O U A) (S O V B)))) (Fmult F1 (Fmult (S O V A) (S O U B)))) (S O U V))) (Fminus (Fplus (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U O) (Fmult (S O V C) F1)) (Fmult (S O U O) (Fmult F1 (S O V D)))) (Fmult (S O V O) (Fmult (S O U C) F1))) (Fmult (S O V O) (Fmult F1 (S O U D)))) (Fmult F1 (Fmult (S O U C) (S O V D)))) (Fmult F1 (Fmult (S O V C) (S O U D)))) (S O U V)) (S O U C)) (S O U D))) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U C) (S O V B)) (Fmult (S O U C) (S O V A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O U B))) (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))))
+++++
replace (S O V U) with (- S O U V) in * by auto with Geom.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.

*****
H6 : not\n (eq\n (Fminus\n (Fplus\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus\n (Fmult (S O U O) (Fmult (S O V C) F1))\n (Fmult (S O U O) (Fmult F1 (S O V D))))\n (Fmult (S O V O) (Fmult (S O U C) F1)))\n (Fmult (S O V O) (Fmult F1 (S O U D))))\n (Fmult F1 (Fmult (S O U C) (S O V D))))\n (Fmult F1 (Fmult (S O V C) (S O U D)))) \n (S O U V)) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U U) (Fmult (S O V A) F1))\n (Fmult (S O U U) (Fmult F1 (S O V B))))\n (Fmult (Fopp (S O U V)) (Fmult (S O U A) F1)))\n (Fmult (Fopp (S O U V)) (Fmult F1 (S O U B))))\n (Fmult F1 (Fmult (S O U A) (S O V B))))\n (Fmult F1 (Fmult (S O V A) (S O U B)))) \n (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U C) (Fmult (S O V A) F1))\n (Fmult (S O U C) (Fmult F1 (S O V B))))\n (Fmult (S O V C) (Fmult (S O U A) F1)))\n (Fmult (S O V C) (Fmult F1 (S O U B))))\n (Fmult F1 (Fmult (S O U A) (S O V B))))\n (Fmult F1 (Fmult (S O V A) (S O U B)))) \n (S O U V)))\n (Fminus\n (Fplus\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus\n (Fmult (S O U O) (Fmult (S O V C) F1))\n (Fmult (S O U O) (Fmult F1 (S O V D))))\n (Fmult (S O V O) (Fmult (S O U C) F1)))\n (Fmult (S O V O) (Fmult F1 (S O U D))))\n (Fmult F1 (Fmult (S O U C) (S O V D))))\n (Fmult F1 (Fmult (S O V C) (S O U D)))) \n (S O U V)) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U U) (Fmult (S O V A) F1)) (Fmult (S O U U) (Fmult F1 (S O V B)))) (Fmult (Fopp (S O U V)) (Fmult (S O U A) F1))) (Fmult (Fopp (S O U V)) (Fmult F1 (S O U B)))) (Fmult F1 (Fmult (S O U A) (S O V B)))) (Fmult F1 (Fmult (S O V A) (S O U B)))) (S O U V)) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U C) (Fmult (S O V A) F1)) (Fmult (S O U C) (Fmult F1 (S O V B)))) (Fmult (S O V C) (Fmult (S O U A) F1))) (Fmult (S O V C) (Fmult F1 (S O U B)))) (Fmult F1 (Fmult (S O U A) (S O V B)))) (Fmult F1 (Fmult (S O V A) (S O U B)))) (S O U V))) (Fminus (Fplus (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U O) (Fmult (S O V C) F1)) (Fmult (S O U O) (Fmult F1 (S O V D)))) (Fmult (S O V O) (Fmult (S O U C) F1))) (Fmult (S O V O) (Fmult F1 (S O U D)))) (Fmult F1 (Fmult (S O U C) (S O V D)))) (Fmult F1 (Fmult (S O V C) (S O U D)))) (S O U V)) (S O U C)) (S O U D))) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U C) (S O V B)) (Fmult (S O U C) (S O V A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O U B))) (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))))
+++++
basic_simpl.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.

*****
H6 : not\n (eq\n (Fminus\n (Fplus\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D))\n (Fmult (S O V C) (S O U D))) (S O U V)) \n (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U A))))\n (Fmult (S O U V) (S O U B)))\n (Fmult (S O U A) (S O V B)))\n (Fmult (S O V A) (S O U B))) (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U C) (S O V A))\n (Fmult (S O U C) (S O V B)))\n (Fmult (S O V C) (S O U A)))\n (Fmult (S O V C) (S O U B)))\n (Fmult (S O U A) (S O V B)))\n (Fmult (S O V A) (S O U B))) (S O U V)))\n (Fminus\n (Fplus\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D))\n (Fmult (S O V C) (S O U D))) (S O U V)) \n (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fdiv (Fminus (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U A)))) (Fmult (S O U V) (S O U B))) (Fmult (S O U A) (S O V B))) (Fmult (S O V A) (S O U B))) (S O U V)) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V B))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fmult (S O U A) (S O V B))) (Fmult (S O V A) (S O U B))) (S O U V))) (Fminus (Fplus (Fdiv (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) (S O U V)) (S O U C)) (S O U D))) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O U C) (S O V B)) (Fmult (S O U C) (S O V A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O U B))) (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))))
+++++
field.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.

*****
H6 : not\n (eq\n (Fminus\n (Fplus\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D))\n (Fmult (S O V C) (S O U D))) (S O U V)) \n (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U A))))\n (Fmult (S O U V) (S O U B)))\n (Fmult (S O U A) (S O V B)))\n (Fmult (S O V A) (S O U B))) (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U C) (S O V A))\n (Fmult (S O U C) (S O V B)))\n (Fmult (S O V C) (S O U A)))\n (Fmult (S O V C) (S O U B)))\n (Fmult (S O U A) (S O V B)))\n (Fmult (S O V A) (S O U B))) (S O U V)))\n (Fminus\n (Fplus\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D))\n (Fmult (S O V C) (S O U D))) (S O U V)) \n (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (not (eq (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))) F0)) (not (eq (S O U V) F0))
+++++
split.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.

*****
H6 : not\n (eq\n (Fminus\n (Fplus\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D))\n (Fmult (S O V C) (S O U D))) (S O U V)) \n (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U A))))\n (Fmult (S O U V) (S O U B)))\n (Fmult (S O U A) (S O V B)))\n (Fmult (S O V A) (S O U B))) (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U C) (S O V A))\n (Fmult (S O U C) (S O V B)))\n (Fmult (S O V C) (S O U A)))\n (Fmult (S O V C) (S O U B)))\n (Fmult (S O U A) (S O V B)))\n (Fmult (S O V A) (S O U B))) (S O U V)))\n (Fminus\n (Fplus\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D))\n (Fmult (S O V C) (S O U D))) (S O U V)) \n (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))) F0)
+++++
auto.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.
auto.

*****
H6 : not\n (eq\n (Fminus\n (Fplus\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D))\n (Fmult (S O V C) (S O U D))) (S O U V)) \n (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U A))))\n (Fmult (S O U V) (S O U B)))\n (Fmult (S O U A) (S O V B)))\n (Fmult (S O V A) (S O U B))) (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U C) (S O V A))\n (Fmult (S O U C) (S O V B)))\n (Fmult (S O V C) (S O U A)))\n (Fmult (S O V C) (S O U B)))\n (Fmult (S O U A) (S O V B)))\n (Fmult (S O V A) (S O U B))) (S O U V)))\n (Fminus\n (Fplus\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D))\n (Fmult (S O V C) (S O U D))) (S O U V)) \n (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))) F0)
+++++
clear H5.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.
auto.
clear H5.

*****
H6 : not\n (eq\n (Fminus\n (Fplus\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D))\n (Fmult (S O V C) (S O U D))) (S O U V)) \n (S O U C)) (S O U D)) F0)
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))) F0)
+++++
replace ((S O U C * S O V D - S O V C * S O U D) / S O U V + S O U C - S O U D) with ((S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V) / (S O U V)) in H6 by (field;auto).
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.
auto.
clear H5.
replace ((S O U C * S O V D - S O V C * S O U D) / S O U V + S O U C - S O U D) with ((S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V) / (S O U V)) in H6 by (field;auto).

*****
H6 : not\n (eq\n (Fdiv\n (Fminus\n (Fminus\n (Fplus (Fmult (S O U C) (S O V D))\n (Fmult (S O U C) (S O U V)))\n (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V)))\n (S O U V)) F0)
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fminus (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V))) (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))) F0)
+++++
intro.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.
auto.
clear H5.
replace ((S O U C * S O V D - S O V C * S O U D) / S O U V + S O U C - S O U D) with ((S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V) / (S O U V)) in H6 by (field;auto).
intro.

*****
H4 : eq\n (Fminus\n (Fminus\n (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V)))\n (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))) F0
H6 : not\n (eq\n (Fdiv\n (Fminus\n (Fminus\n (Fplus (Fmult (S O U C) (S O V D))\n (Fmult (S O U C) (S O U V)))\n (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V)))\n (S O U V)) F0)
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
rewrite H4 in H6.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.
auto.
clear H5.
replace ((S O U C * S O V D - S O V C * S O U D) / S O U V + S O U C - S O U D) with ((S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V) / (S O U V)) in H6 by (field;auto).
intro.
rewrite H4 in H6.

*****
H4 : eq\n (Fminus\n (Fminus\n (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V)))\n (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))) F0
H6 : not (eq (Fdiv F0 (S O U V)) F0)
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
basic_simpl.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.
auto.
clear H5.
replace ((S O U C * S O V D - S O V C * S O U D) / S O U V + S O U C - S O U D) with ((S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V) / (S O U V)) in H6 by (field;auto).
intro.
rewrite H4 in H6.
basic_simpl.

*****
H4 : eq\n (Fminus\n (Fminus\n (Fplus (Fmult (S O U C) (S O V D)) (Fmult (S O U C) (S O U V)))\n (Fmult (S O V C) (S O U D))) (Fmult (S O U D) (S O U V))) F0
H6 : not (eq F0 F0)
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
intuition.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
replace (S O V U) with (- S O U V) in * by auto with Geom.
basic_simpl.
field.
split.

*****
H6 : not\n (eq\n (Fminus\n (Fplus\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D))\n (Fmult (S O V C) (S O U D))) (S O U V)) \n (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Fminus\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U A))))\n (Fmult (S O U V) (S O U B)))\n (Fmult (S O U A) (S O V B)))\n (Fmult (S O V A) (S O U B))) (S O U V))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U C) (S O V A))\n (Fmult (S O U C) (S O V B)))\n (Fmult (S O V C) (S O U A)))\n (Fmult (S O V C) (S O U B)))\n (Fmult (S O U A) (S O V B)))\n (Fmult (S O V A) (S O U B))) (S O U V)))\n (Fminus\n (Fplus\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D))\n (Fmult (S O V C) (S O U D))) (S O U V)) \n (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
auto.
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.

*****
H6 : not\n (eq\n (Fminus\n (Fplus\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U C) \n (S O V C) F1 (S O U D) (S O V D) F1) \n (S O U V)) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V))\n (Fdiv\n (Det3 (S O U C) (S O V C) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V))) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.

*****
H6 : not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V))\n (Fdiv\n (Det3 (S O U C) (S O V C) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V))) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.

*****
H6 : not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V))\n (Fdiv\n (Det3 (S O U C) (S O V C) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V))) (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.

*****
H6 : not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)) (S C A B))\n (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.
idtac.
rewrite (free_points_area_elimination O U V C A B) in *.

*****
H6 : not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv\n (Fminus\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U A) \n (S O V A) F1 (S O U B) (S O V B) F1) \n (S O U V)) (S C A B))\n (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.

*****
H6 : not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv (Fminus (S U A B) (S C A B))\n (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).
use H4.
rewrite H5.
rewrite (free_points_area_elimination O U V U A B) in *.

*****
H6 : not (eq (Fminus (Fplus (S O C D) (S O U C)) (S O U D)) F0)
H5 : eq (Fdiv (DSeg A B) (DSeg C D))\n (Fdiv (Fminus (S U A B) (S C A B))\n (Fminus (Fplus (S O C D) (S O U C)) (S O U D)))
H3 : not (eq (S U C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_3 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S U C D <> 0 -> A**B / C**D = (S O U C * S O V B - S O U C * S O V A + S O V C * S O U A - S O V C * S O U B + S O U V * S O U A - S O U V * S O U B)/ (S O U C * S O V D + S O U C * S O U V - S O V C * S O U D - S O U D * S O U V).
Proof.
intros.
assert (A**B / C**D = (S U A B - S C A B) / (S O C D + S O U C - S O U D) /\\ (S O C D + S O U C - S O U D) <> 0 ).

*****

*****

+++++
Qed.
-----
Lemma free_points_ratio_elimination_4 : forall O U V A B C D : Point,\n  parallel A B C D ->\n  A<>B ->\n  C<>D ->\n  S O U V <> 0 ->\n  S V C D <> 0 ->\n  A**B / C**D = (S O V C * S O U B - S O V C * S O U A + S O U C * S O V A -\n S O U C * S O V B + S O V U * S O V A - S O V U * S O V B) /\n(S O V C * S O U D + S O V C * S O V U - S O U C * S O V D -\n S O V D * S O V U).
-----
Lemma free_points_ratio_elimination_4 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S V C D <> 0 -> A**B / C**D = (S O V C * S O U B - S O V C * S O U A + S O U C * S O V A - S O U C * S O V B + S O V U * S O V A - S O V U * S O V B) / (S O V C * S O U D + S O V C * S O V U - S O U C * S O V D - S O V D * S O V U).

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq A B)) (_ : not (eq C D)) (_ : not (eq (S O U V) F0)) (_ : not (eq (S V C D) F0)), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O V C) (S O U B)) (Fmult (S O V C) (S O U A))) (Fmult (S O U C) (S O V A))) (Fmult (S O U C) (S O V B))) (Fmult (S O V U) (S O V A))) (Fmult (S O V U) (S O V B))) (Fminus (Fminus (Fplus (Fmult (S O V C) (S O U D)) (Fmult (S O V C) (S O V U))) (Fmult (S O U C) (S O V D))) (Fmult (S O V D) (S O V U))))
+++++
intros.
-----
Lemma free_points_ratio_elimination_4 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S V C D <> 0 -> A**B / C**D = (S O V C * S O U B - S O V C * S O U A + S O U C * S O V A - S O U C * S O V B + S O V U * S O V A - S O V U * S O V B) / (S O V C * S O U D + S O V C * S O V U - S O U C * S O V D - S O V D * S O V U).
intros.

*****
H3 : not (eq (S V C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O V C) (S O U B)) (Fmult (S O V C) (S O U A))) (Fmult (S O U C) (S O V A))) (Fmult (S O U C) (S O V B))) (Fmult (S O V U) (S O V A))) (Fmult (S O V U) (S O V B))) (Fminus (Fminus (Fplus (Fmult (S O V C) (S O U D)) (Fmult (S O V C) (S O V U))) (Fmult (S O U C) (S O V D))) (Fmult (S O V D) (S O V U))))
+++++
assert (S O V U <> 0).
-----
Lemma free_points_ratio_elimination_4 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S V C D <> 0 -> A**B / C**D = (S O V C * S O U B - S O V C * S O U A + S O U C * S O V A - S O U C * S O V B + S O V U * S O V A - S O V U * S O V B) / (S O V C * S O U D + S O V C * S O V U - S O U C * S O V D - S O V D * S O V U).
intros.
assert (S O V U <> 0).

*****
H3 : not (eq (S V C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O V U) F0)
+++++
intro; assert (Col O U V) by auto with Geom;intuition.
-----
Lemma free_points_ratio_elimination_4 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S V C D <> 0 -> A**B / C**D = (S O V C * S O U B - S O V C * S O U A + S O U C * S O V A - S O U C * S O V B + S O V U * S O V A - S O V U * S O V B) / (S O V C * S O U D + S O V C * S O V U - S O U C * S O V D - S O V D * S O V U).
intros.
assert (S O V U <> 0).
intro; assert (Col O U V) by auto with Geom;intuition.

*****
H4 : not (eq (S O V U) F0)
H3 : not (eq (S V C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O V C) (S O U B)) (Fmult (S O V C) (S O U A))) (Fmult (S O U C) (S O V A))) (Fmult (S O U C) (S O V B))) (Fmult (S O V U) (S O V A))) (Fmult (S O V U) (S O V B))) (Fminus (Fminus (Fplus (Fmult (S O V C) (S O U D)) (Fmult (S O V C) (S O V U))) (Fmult (S O U C) (S O V D))) (Fmult (S O V D) (S O V U))))
+++++
rewrite (free_points_ratio_elimination_3 O V U A B C D) by auto.
-----
Lemma free_points_ratio_elimination_4 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S V C D <> 0 -> A**B / C**D = (S O V C * S O U B - S O V C * S O U A + S O U C * S O V A - S O U C * S O V B + S O V U * S O V A - S O V U * S O V B) / (S O V C * S O U D + S O V C * S O V U - S O U C * S O V D - S O V D * S O V U).
intros.
assert (S O V U <> 0).
intro; assert (Col O U V) by auto with Geom;intuition.
rewrite (free_points_ratio_elimination_3 O V U A B C D) by auto.

*****
H4 : not (eq (S O V U) F0)
H3 : not (eq (S V C D) F0)
H2 : not (eq (S O U V) F0)
H1 : not (eq C D)
H0 : not (eq A B)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O V C) (S O U B)) (Fmult (S O V C) (S O U A))) (Fmult (S O U C) (S O V A))) (Fmult (S O U C) (S O V B))) (Fmult (S O V U) (S O V A))) (Fmult (S O V U) (S O V B))) (Fminus (Fminus (Fplus (Fmult (S O V C) (S O U D)) (Fmult (S O V C) (S O V U))) (Fmult (S O U C) (S O V D))) (Fmult (S O V D) (S O V U)))) (Fdiv (Fminus (Fplus (Fminus (Fplus (Fminus (Fmult (S O V C) (S O U B)) (Fmult (S O V C) (S O U A))) (Fmult (S O U C) (S O V A))) (Fmult (S O U C) (S O V B))) (Fmult (S O V U) (S O V A))) (Fmult (S O V U) (S O V B))) (Fminus (Fminus (Fplus (Fmult (S O V C) (S O U D)) (Fmult (S O V C) (S O V U))) (Fmult (S O U C) (S O V D))) (Fmult (S O V D) (S O V U))))
+++++
reflexivity.
-----
Lemma free_points_ratio_elimination_4 : forall O U V A B C D : Point, parallel A B C D -> A<>B -> C<>D -> S O U V <> 0 -> S V C D <> 0 -> A**B / C**D = (S O V C * S O U B - S O V C * S O U A + S O U C * S O V A - S O U C * S O V B + S O V U * S O V A - S O V U * S O V B) / (S O V C * S O U D + S O V C * S O V U - S O U C * S O V D - S O V D * S O V U).
intros.
assert (S O V U <> 0).
intro; assert (Col O U V) by auto with Geom;intuition.
rewrite (free_points_ratio_elimination_3 O V U A B C D) by auto.
reflexivity.

*****

*****

+++++
Qed.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point,\n  parallel A B C D ->\n  C<>D ->\n  ~ Col O U V ->\n  ~ Col A C D ->\n  A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B +\n S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) /\n(S O U C * S O V A - S O U C * S O V D - S O V A * S O U D -\n S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)) (_ : not (Col O U V)) (_ : not (Col A C D)), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fplus (Fminus (Fplus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V B))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))))
+++++
Proof.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)) (_ : not (Col O U V)) (_ : not (Col A C D)), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fplus (Fminus (Fplus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V B))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))))
+++++
intros.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.

*****
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fplus (Fminus (Fplus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V B))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))))
+++++
rewrite (l2_15 A B C D).
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).

*****
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (S C A B) (S A D C)) (Fdiv (Fplus (Fminus (Fplus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V B))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.

*****
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (S C A B) (S A D C)) (Fdiv (Fplus (Fminus (Fplus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V B))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))))
+++++
assert (~ Col A D C).
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).

*****
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col A D C)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).

*****
H3 : not (Col A D C)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (S C A B) (S A D C)) (Fdiv (Fplus (Fminus (Fplus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V B))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.

*****
H3 : not (Col A D C)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (S C A B) (S A D C)) (Fdiv (Fplus (Fminus (Fplus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V B))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))))
+++++
unfold Col in H3.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.

*****
H3 : not (eq (S A D C) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (S C A B) (S A D C)) (Fdiv (Fplus (Fminus (Fplus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V B))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))))
+++++
rewrite (free_points_area_elimination O U V C A B) in *.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.

*****
H3 : not (eq (S A D C) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fdiv (Det3 (S O U C) (S O V C) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (S A D C)) (Fdiv (Fplus (Fminus (Fplus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V B))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.

*****
H3 : not (eq (S A D C) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fdiv (Det3 (S O U C) (S O V C) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (S A D C)) (Fdiv (Fplus (Fminus (Fplus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V B))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))))
+++++
rewrite (free_points_area_elimination O U V A D C) in *.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V A D C) in *.

*****
H3 : not\n (eq\n (Fdiv\n (Det3 (S O U A) (S O V A) F1 (S O U D) (S O V D) F1 \n (S O U C) (S O V C) F1) (S O U V)) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fdiv (Det3 (S O U C) (S O V C) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (Fdiv (Det3 (S O U A) (S O V A) F1 (S O U D) (S O V D) F1 (S O U C) (S O V C) F1) (S O U V))) (Fdiv (Fplus (Fminus (Fplus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V B))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V A D C) in *.
idtac.

*****
H3 : not\n (eq\n (Fdiv\n (Det3 (S O U A) (S O V A) F1 (S O U D) (S O V D) F1 \n (S O U C) (S O V C) F1) (S O U V)) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fdiv (Det3 (S O U C) (S O V C) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (Fdiv (Det3 (S O U A) (S O V A) F1 (S O U D) (S O V D) F1 (S O U C) (S O V C) F1) (S O U V))) (Fdiv (Fplus (Fminus (Fplus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V B))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))))
+++++
unfold Det3 in *.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V A D C) in *.
idtac.
unfold Det3 in *.

*****
H3 : not\n (eq\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (Fmult (S O V D) F1))\n (Fmult (S O U A) (Fmult F1 (S O V C))))\n (Fmult (S O V A) (Fmult (S O U D) F1)))\n (Fmult (S O V A) (Fmult F1 (S O U C))))\n (Fmult F1 (Fmult (S O U D) (S O V C))))\n (Fmult F1 (Fmult (S O V D) (S O U C)))) \n (S O U V)) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U C) (Fmult (S O V A) F1)) (Fmult (S O U C) (Fmult F1 (S O V B)))) (Fmult (S O V C) (Fmult (S O U A) F1))) (Fmult (S O V C) (Fmult F1 (S O U B)))) (Fmult F1 (Fmult (S O U A) (S O V B)))) (Fmult F1 (Fmult (S O V A) (S O U B)))) (S O U V)) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U A) (Fmult (S O V D) F1)) (Fmult (S O U A) (Fmult F1 (S O V C)))) (Fmult (S O V A) (Fmult (S O U D) F1))) (Fmult (S O V A) (Fmult F1 (S O U C)))) (Fmult F1 (Fmult (S O U D) (S O V C)))) (Fmult F1 (Fmult (S O V D) (S O U C)))) (S O U V))) (Fdiv (Fplus (Fminus (Fplus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V B))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U B))) (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))))
+++++
field.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V A D C) in *.
idtac.
unfold Det3 in *.
field.

*****
H3 : not\n (eq\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (Fmult (S O V D) F1))\n (Fmult (S O U A) (Fmult F1 (S O V C))))\n (Fmult (S O V A) (Fmult (S O U D) F1)))\n (Fmult (S O V A) (Fmult F1 (S O U C))))\n (Fmult F1 (Fmult (S O U D) (S O V C))))\n (Fmult F1 (Fmult (S O V D) (S O U C)))) \n (S O U V)) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (not (eq (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))) F0)) (not (eq (S O U V) F0))
+++++
split.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V A D C) in *.
idtac.
unfold Det3 in *.
field.
split.

*****
H3 : not\n (eq\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (Fmult (S O V D) F1))\n (Fmult (S O U A) (Fmult F1 (S O V C))))\n (Fmult (S O V A) (Fmult (S O U D) F1)))\n (Fmult (S O V A) (Fmult F1 (S O U C))))\n (Fmult F1 (Fmult (S O U D) (S O V C))))\n (Fmult F1 (Fmult (S O V D) (S O U C)))) \n (S O U V)) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))) F0)
+++++
auto.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V A D C) in *.
idtac.
unfold Det3 in *.
field.
split.
auto.

*****
H3 : not\n (eq\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (Fmult (S O V D) F1))\n (Fmult (S O U A) (Fmult F1 (S O V C))))\n (Fmult (S O V A) (Fmult (S O U D) F1)))\n (Fmult (S O V A) (Fmult F1 (S O U C))))\n (Fmult F1 (Fmult (S O U D) (S O V C))))\n (Fmult F1 (Fmult (S O V D) (S O U C)))) \n (S O U V)) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))) F0)
+++++
basic_simpl.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V A D C) in *.
idtac.
unfold Det3 in *.
field.
split.
auto.
basic_simpl.

*****
H3 : not\n (eq\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (S O V D))\n (Fmult (S O U A) (S O V C)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O V A) (S O U C)))\n (Fmult (S O U D) (S O V C))) (Fmult (S O V D) (S O U C)))\n (S O U V)) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))) F0)
+++++
replace (S O U A * S O V D - S O U A * S O V C - S O V A * S O U D + S O V A * S O U C + S O U D * S O V C - S O V D * S O U C) with (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D) in * by ring.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V A D C) in *.
idtac.
unfold Det3 in *.
field.
split.
auto.
basic_simpl.
replace (S O U A * S O V D - S O U A * S O V C - S O V A * S O U D + S O V A * S O U C + S O U D * S O V C - S O V D * S O U C) with (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D) in * by ring.

*****
H3 : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fminus\n (Fminus\n (Fminus (Fmult (S O U C) (S O V A))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O V C) (S O U A)))\n (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D)))\n (S O U V)) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fplus (Fminus (Fminus (Fminus (Fmult (S O U C) (S O V A)) (Fmult (S O U C) (S O V D))) (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A))) (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))) F0)
+++++
intro Hx.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V A D C) in *.
idtac.
unfold Det3 in *.
field.
split.
auto.
basic_simpl.
replace (S O U A * S O V D - S O U A * S O V C - S O V A * S O U D + S O V A * S O U C + S O U D * S O V C - S O V D * S O U C) with (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D) in * by ring.
intro Hx.

*****
Hx : eq\n (Fplus\n (Fplus\n (Fminus\n (Fminus\n (Fminus (Fmult (S O U C) (S O V A))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A)))\n (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))) F0
H3 : not\n (eq\n (Fdiv\n (Fplus\n (Fplus\n (Fminus\n (Fminus\n (Fminus (Fmult (S O U C) (S O V A))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V A) (S O U D)))\n (Fmult (S O V C) (S O U A)))\n (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D)))\n (S O U V)) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
rewrite Hx in *.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V A D C) in *.
idtac.
unfold Det3 in *.
field.
split.
auto.
basic_simpl.
replace (S O U A * S O V D - S O U A * S O V C - S O V A * S O U D + S O V A * S O U C + S O U D * S O V C - S O V D * S O U C) with (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D) in * by ring.
intro Hx.
rewrite Hx in *.

*****
Hx : eq\n (Fplus\n (Fplus\n (Fminus\n (Fminus\n (Fminus (Fmult (S O U C) (S O V A))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A)))\n (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))) F0
H3 : not (eq (Fdiv F0 (S O U V)) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
replace (0 / S O U V) with 0 in * by (field;auto).
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V A D C) in *.
idtac.
unfold Det3 in *.
field.
split.
auto.
basic_simpl.
replace (S O U A * S O V D - S O U A * S O V C - S O V A * S O U D + S O V A * S O U C + S O U D * S O V C - S O V D * S O U C) with (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D) in * by ring.
intro Hx.
rewrite Hx in *.
replace (0 / S O U V) with 0 in * by (field;auto).

*****
Hx : eq\n (Fplus\n (Fplus\n (Fminus\n (Fminus\n (Fminus (Fmult (S O U C) (S O V A))\n (Fmult (S O U C) (S O V D)))\n (Fmult (S O V A) (S O U D))) (Fmult (S O V C) (S O U A)))\n (Fmult (S O V C) (S O U D))) (Fmult (S O U A) (S O V D))) F0
H3 : not (eq F0 F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
intuition.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V A D C) in *.
idtac.
unfold Det3 in *.
field.
split.

*****
H3 : not\n (eq\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U A) (Fmult (S O V D) F1))\n (Fmult (S O U A) (Fmult F1 (S O V C))))\n (Fmult (S O V A) (Fmult (S O U D) F1)))\n (Fmult (S O V A) (Fmult F1 (S O U C))))\n (Fmult F1 (Fmult (S O U D) (S O V C))))\n (Fmult F1 (Fmult (S O V D) (S O U C)))) \n (S O U V)) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
auto.
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V A D C) in *.

*****
H3 : not (eq (S A D C) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.
idtac.
rewrite (free_points_area_elimination O U V A D C) in *.

*****
H3 : not (eq (S A D C) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).
idtac.
assert (~ Col A D C).
idtac.
unfold Col in H3.
rewrite (free_points_area_elimination O U V C A B) in *.

*****
H3 : not (eq (S A D C) F0)
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).

*****
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
parallel C D A B
+++++
auto with Geom .
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).

*****
H2 : not (Col A C D)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col A D C)
+++++
auto with Geom .
-----
Lemma free_points_ratio_elimination_5 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col A C D -> A**B / C**D = (S O U C * S O V A - S O U C * S O V B - S O V A * S O U B + S O V B * S O U A - S O V C * S O U A + S O V C * S O U B) / (S O U C * S O V A - S O U C * S O V D - S O V A * S O U D - S O V C * S O U A + S O V C * S O U D + S O U A * S O V D).
Proof.
intros.
rewrite (l2_15 A B C D).

*****

*****

+++++
Qed.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point,\n  parallel A B C D ->\n  C<>D ->\n  ~ Col O U V ->\n  ~ Col O A C ->\n  Col A C D ->\n  A**B / C**D = (S O U A * S O V B - S O V A * S O U B) /\n(S O U C * S O V D - S O V C * S O U D).
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)) (_ : not (Col O U V)) (_ : not (Col O A C)) (_ : Col A C D), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fmult (S O U A) (S O V B)) (Fmult (S O V A) (S O U B))) (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))))
+++++
Proof.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)) (_ : not (Col O U V)) (_ : not (Col O A C)) (_ : Col A C D), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fmult (S O U A) (S O V B)) (Fmult (S O V A) (S O U B))) (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))))
+++++
intros.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.

*****
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fmult (S O U A) (S O V B)) (Fmult (S O V A) (S O U B))) (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))))
+++++
assert (~ Col O C D).
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).

*****
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col O C D)
+++++
intro.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
intro.

*****
H4 : Col O C D
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
assert (Col C A O).
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
intro.
assert (Col C A O).

*****
H4 : Col O C D
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col C A O
+++++
apply (col_trans_1 C D A O ).
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
intro.
assert (Col C A O).
apply (col_trans_1 C D A O ).

*****
H4 : Col O C D
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq C D)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
intro.
assert (Col C A O).
apply (col_trans_1 C D A O ).

*****
H4 : Col O C D
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col C D A
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
intro.
assert (Col C A O).
apply (col_trans_1 C D A O ).

*****
H4 : Col O C D
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col C D O
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
intro.
assert (Col C A O).

*****
H5 : Col C A O
H4 : Col O C D
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
intuition.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).

*****
H4 : not (Col O C D)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fmult (S O U A) (S O V B)) (Fmult (S O V A) (S O U B))) (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))))
+++++
assert (Col B C D).
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).

*****
H4 : not (Col O C D)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col B C D
+++++
cut (Col C D B).
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
cut (Col C D B).

*****
H4 : not (Col O C D)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
forall _ : Col C D B, Col B C D
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
cut (Col C D B).

*****
H4 : not (Col O C D)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col C D B
+++++
apply (par_col_col_1 C D A B).
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
cut (Col C D B).
apply (par_col_col_1 C D A B).

*****
H4 : not (Col O C D)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
parallel C D A B
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
cut (Col C D B).
apply (par_col_col_1 C D A B).

*****
H4 : not (Col O C D)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col C D A
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).

*****
H5 : Col B C D
H4 : not (Col O C D)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fmult (S O U A) (S O V B)) (Fmult (S O V A) (S O U B))) (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))))
+++++
rewrite <- (l2_7 C D A B O).
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).

*****
H5 : Col B C D
H4 : not (Col O C D)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (S O A B) (S O C D)) (Fdiv (Fminus (Fmult (S O U A) (S O V B)) (Fmult (S O V A) (S O U B))) (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))))
+++++
auto.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.

*****
H5 : Col B C D
H4 : not (Col O C D)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (S O A B) (S O C D)) (Fdiv (Fminus (Fmult (S O U A) (S O V B)) (Fmult (S O V A) (S O U B))) (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))))
+++++
unfold Col in H4.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.

*****
H5 : Col B C D
H4 : not (eq (S O C D) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (S O A B) (S O C D)) (Fdiv (Fminus (Fmult (S O U A) (S O V B)) (Fmult (S O V A) (S O U B))) (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))))
+++++
rewrite (free_points_area_elimination O U V O A B) in *.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.
rewrite (free_points_area_elimination O U V O A B) in *.

*****
H5 : Col B C D
H4 : not (eq (S O C D) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fdiv (Det3 (S O U O) (S O V O) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (S O C D)) (Fdiv (Fminus (Fmult (S O U A) (S O V B)) (Fmult (S O V A) (S O U B))) (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.

*****
H5 : Col B C D
H4 : not (eq (S O C D) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fdiv (Det3 (S O U O) (S O V O) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (S O C D)) (Fdiv (Fminus (Fmult (S O U A) (S O V B)) (Fmult (S O V A) (S O U B))) (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))))
+++++
rewrite (free_points_area_elimination O U V O C D) in *.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.

*****
H5 : Col B C D
H4 : not\n (eq\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U C) (S O V C) F1 \n (S O U D) (S O V D) F1) (S O U V)) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fdiv (Det3 (S O U O) (S O V O) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (Fdiv (Det3 (S O U O) (S O V O) F1 (S O U C) (S O V C) F1 (S O U D) (S O V D) F1) (S O U V))) (Fdiv (Fminus (Fmult (S O U A) (S O V B)) (Fmult (S O V A) (S O U B))) (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.

*****
H5 : Col B C D
H4 : not\n (eq\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U C) (S O V C) F1 \n (S O U D) (S O V D) F1) (S O U V)) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fdiv (Det3 (S O U O) (S O V O) F1 (S O U A) (S O V A) F1 (S O U B) (S O V B) F1) (S O U V)) (Fdiv (Det3 (S O U O) (S O V O) F1 (S O U C) (S O V C) F1 (S O U D) (S O V D) F1) (S O U V))) (Fdiv (Fminus (Fmult (S O U A) (S O V B)) (Fmult (S O V A) (S O U B))) (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))))
+++++
unfold Det3 in *.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.

*****
H5 : Col B C D
H4 : not\n (eq\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U O) (Fmult (S O V C) F1))\n (Fmult (S O U O) (Fmult F1 (S O V D))))\n (Fmult (S O V O) (Fmult (S O U C) F1)))\n (Fmult (S O V O) (Fmult F1 (S O U D))))\n (Fmult F1 (Fmult (S O U C) (S O V D))))\n (Fmult F1 (Fmult (S O V C) (S O U D)))) \n (S O U V)) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U O) (Fmult (S O V A) F1)) (Fmult (S O U O) (Fmult F1 (S O V B)))) (Fmult (S O V O) (Fmult (S O U A) F1))) (Fmult (S O V O) (Fmult F1 (S O U B)))) (Fmult F1 (Fmult (S O U A) (S O V B)))) (Fmult F1 (Fmult (S O V A) (S O U B)))) (S O U V)) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U O) (Fmult (S O V C) F1)) (Fmult (S O U O) (Fmult F1 (S O V D)))) (Fmult (S O V O) (Fmult (S O U C) F1))) (Fmult (S O V O) (Fmult F1 (S O U D)))) (Fmult F1 (Fmult (S O U C) (S O V D)))) (Fmult F1 (Fmult (S O V C) (S O U D)))) (S O U V))) (Fdiv (Fminus (Fmult (S O U A) (S O V B)) (Fmult (S O V A) (S O U B))) (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))))
+++++
basic_simpl.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
basic_simpl.

*****
H5 : Col B C D
H4 : not\n (eq\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D)))\n (S O U V)) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fdiv (Fminus (Fmult (S O U A) (S O V B)) (Fmult (S O V A) (S O U B))) (S O U V)) (Fdiv (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) (S O U V))) (Fdiv (Fminus (Fmult (S O U A) (S O V B)) (Fmult (S O V A) (S O U B))) (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))))
+++++
field.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
field.

*****
H5 : Col B C D
H4 : not\n (eq\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D)))\n (S O U V)) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (not (eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0)) (not (eq (S O U V) F0))
+++++
split.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
field.
split.

*****
H5 : Col B C D
H4 : not\n (eq\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D)))\n (S O U V)) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0)
+++++
auto.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
field.
split.
auto.

*****
H5 : Col B C D
H4 : not\n (eq\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D)))\n (S O U V)) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0)
+++++
intro Hx.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
field.
split.
auto.
intro Hx.

*****
Hx : eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0
H5 : Col B C D
H4 : not\n (eq\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D)))\n (S O U V)) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
rewrite Hx in *.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
field.
split.
auto.
intro Hx.
rewrite Hx in *.

*****
Hx : eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0
H5 : Col B C D
H4 : not (eq (Fdiv F0 (S O U V)) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
replace (0 / S O U V) with 0 in * by (field;auto).
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
field.
split.
auto.
intro Hx.
rewrite Hx in *.
replace (0 / S O U V) with 0 in * by (field;auto).

*****
Hx : eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0
H5 : Col B C D
H4 : not (eq F0 F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
intuition.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
field.
split.

*****
H5 : Col B C D
H4 : not\n (eq\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D)))\n (S O U V)) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
auto.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.

*****
H5 : Col B C D
H4 : not (eq (S O C D) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.
rewrite (free_points_area_elimination O U V O A B) in *.
idtac.
rewrite (free_points_area_elimination O U V O C D) in *.

*****
H5 : Col B C D
H4 : not (eq (S O C D) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).
auto.
unfold Col in H4.
rewrite (free_points_area_elimination O U V O A B) in *.

*****
H5 : Col B C D
H4 : not (eq (S O C D) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).

*****
H5 : Col B C D
H4 : not (Col O C D)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col A C D
+++++
auto.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).

*****
H5 : Col B C D
H4 : not (Col O C D)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col B C D
+++++
auto.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).

*****
H5 : Col B C D
H4 : not (Col O C D)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col O A C)
+++++
auto.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).

*****
H5 : Col B C D
H4 : not (Col O C D)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col O C D)
+++++
auto.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).
assert (Col B C D).
rewrite <- (l2_7 C D A B O).

*****
H5 : Col B C D
H4 : not (Col O C D)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq C D)
+++++
auto.
-----
Lemma free_points_ratio_elimination_6 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> A**B / C**D = (S O U A * S O V B - S O V A * S O U B) / (S O U C * S O V D - S O V C * S O U D).
Proof.
intros.
assert (~ Col O C D).

*****

*****

+++++
Qed.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point,\n  parallel A B C D ->\n  C<>D ->\n  ~ Col O U V ->\n  ~ Col O A C ->\n  Col A C D ->\n  S O U C * S O V D - S O V C * S O U D <> 0.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)) (_ : not (Col O U V)) (_ : not (Col O A C)) (_ : Col A C D), not (eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0)
+++++
Proof.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)) (_ : not (Col O U V)) (_ : not (Col O A C)) (_ : Col A C D), not (eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0)
+++++
intros.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.

*****
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0)
+++++
assert (~ Col O C D).
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).

*****
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col O C D)
+++++
intro.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).
intro.

*****
H4 : Col O C D
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
assert (Col C A O).
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).
intro.
assert (Col C A O).

*****
H4 : Col O C D
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col C A O
+++++
apply (col_trans_1 C D A O ).
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).
intro.
assert (Col C A O).
apply (col_trans_1 C D A O ).

*****
H4 : Col O C D
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq C D)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).
intro.
assert (Col C A O).
apply (col_trans_1 C D A O ).

*****
H4 : Col O C D
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col C D A
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).
intro.
assert (Col C A O).
apply (col_trans_1 C D A O ).

*****
H4 : Col O C D
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col C D O
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).
intro.
assert (Col C A O).

*****
H5 : Col C A O
H4 : Col O C D
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
intuition.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).

*****
H4 : not (Col O C D)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0)
+++++
unfold Col in H4.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).
unfold Col in H4.

*****
H4 : not (eq (S O C D) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0)
+++++
rewrite (free_points_area_elimination O U V O C D) in *.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).
unfold Col in H4.
rewrite (free_points_area_elimination O U V O C D) in *.

*****
H4 : not\n (eq\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U C) (S O V C) F1 \n (S O U D) (S O V D) F1) (S O U V)) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0)
+++++
idtac.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).
unfold Col in H4.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.

*****
H4 : not\n (eq\n (Fdiv\n (Det3 (S O U O) (S O V O) F1 (S O U C) (S O V C) F1 \n (S O U D) (S O V D) F1) (S O U V)) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0)
+++++
unfold Det3 in *.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).
unfold Col in H4.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.

*****
H4 : not\n (eq\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S O U O) (Fmult (S O V C) F1))\n (Fmult (S O U O) (Fmult F1 (S O V D))))\n (Fmult (S O V O) (Fmult (S O U C) F1)))\n (Fmult (S O V O) (Fmult F1 (S O U D))))\n (Fmult F1 (Fmult (S O U C) (S O V D))))\n (Fmult F1 (Fmult (S O V C) (S O U D)))) \n (S O U V)) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0)
+++++
basic_simpl.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).
unfold Col in H4.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
basic_simpl.

*****
H4 : not\n (eq\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D)))\n (S O U V)) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0)
+++++
intro Hx.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).
unfold Col in H4.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
intro Hx.

*****
Hx : eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0
H4 : not\n (eq\n (Fdiv\n (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D)))\n (S O U V)) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
rewrite Hx in *.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).
unfold Col in H4.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
intro Hx.
rewrite Hx in *.

*****
Hx : eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0
H4 : not (eq (Fdiv F0 (S O U V)) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
replace (0 / S O U V) with 0 in * by (field;auto).
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).
unfold Col in H4.
rewrite (free_points_area_elimination O U V O C D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
intro Hx.
rewrite Hx in *.
replace (0 / S O U V) with 0 in * by (field;auto).

*****
Hx : eq (Fminus (Fmult (S O U C) (S O V D)) (Fmult (S O V C) (S O U D))) F0
H4 : not (eq F0 F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
intuition.
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).
unfold Col in H4.
rewrite (free_points_area_elimination O U V O C D) in *.

*****
H4 : not (eq (S O C D) F0)
H3 : Col A C D
H2 : not (Col O A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_6_non_zero_denom: forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col O A C -> Col A C D -> S O U C * S O V D - S O V C * S O U D <> 0.
Proof.
intros.
assert (~ Col O C D).

*****

*****

+++++
Qed.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point,\n  parallel A B C D ->\n  C<>D ->\n  ~ Col O U V ->\n  ~ Col U A C ->\n  Col A C D ->\n  A**B / C**D = \n (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) /\n (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)) (_ : not (Col O U V)) (_ : not (Col U A C)) (_ : Col A C D), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
Proof.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)) (_ : not (Col O U V)) (_ : not (Col U A C)) (_ : Col A C D), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
intros.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
rewrite (free_points_ratio_elimination_6 U O V A B C D).
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (S U O A) (S U V B)) (Fmult (S U V A) (S U O B))) (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (S U O A) (S U V B)) (Fmult (S U V A) (S U O B))) (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
assert (S U O C * S U V D - S U V C * S U O D <> 0).
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D))) F0)
+++++
apply (free_points_ratio_elimination_6_non_zero_denom U O V A B C D).
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
apply (free_points_ratio_elimination_6_non_zero_denom U O V A B C D).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
parallel A B C D
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
apply (free_points_ratio_elimination_6_non_zero_denom U O V A B C D).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq C D)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
apply (free_points_ratio_elimination_6_non_zero_denom U O V A B C D).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col U O V)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
apply (free_points_ratio_elimination_6_non_zero_denom U O V A B C D).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col U A C)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
apply (free_points_ratio_elimination_6_non_zero_denom U O V A B C D).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col A C D
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).

*****
H4 : not\n (eq (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))\n F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (S U O A) (S U V B)) (Fmult (S U V A) (S U O B))) (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.

*****
H4 : not\n (eq (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))\n F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (S U O A) (S U V B)) (Fmult (S U V A) (S U O B))) (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
rewrite (free_points_area_elimination O U V U V A) in *.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.

*****
H4 : not\n (eq (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))\n F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (S U O A) (S U V B)) (Fmult (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U A) (S O V A) F1) (S O U V)) (S U O B))) (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.

*****
H4 : not\n (eq (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))\n F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (S U O A) (S U V B)) (Fmult (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U A) (S O V A) F1) (S O U V)) (S U O B))) (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
rewrite (free_points_area_elimination O U V U V B) in *.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.

*****
H4 : not\n (eq (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))\n F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (S U O A) (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U B) (S O V B) F1) (S O U V))) (Fmult (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U A) (S O V A) F1) (S O U V)) (S U O B))) (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.

*****
H4 : not\n (eq (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))\n F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (S U O A) (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U B) (S O V B) F1) (S O U V))) (Fmult (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U A) (S O V A) F1) (S O U V)) (S U O B))) (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
rewrite (free_points_area_elimination O U V U V C) in *.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.

*****
H4 : not\n (eq\n (Fminus (Fmult (S U O C) (S U V D))\n (Fmult\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U V) \n (S O V V) F1 (S O U C) (S O V C) F1) \n (S O U V)) (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (S U O A) (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U B) (S O V B) F1) (S O U V))) (Fmult (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U A) (S O V A) F1) (S O U V)) (S U O B))) (Fminus (Fmult (S U O C) (S U V D)) (Fmult (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U C) (S O V C) F1) (S O U V)) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.

*****
H4 : not\n (eq\n (Fminus (Fmult (S U O C) (S U V D))\n (Fmult\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U V) \n (S O V V) F1 (S O U C) (S O V C) F1) \n (S O U V)) (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (S U O A) (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U B) (S O V B) F1) (S O U V))) (Fmult (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U A) (S O V A) F1) (S O U V)) (S U O B))) (Fminus (Fmult (S U O C) (S U V D)) (Fmult (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U C) (S O V C) F1) (S O U V)) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
rewrite (free_points_area_elimination O U V U V D) in *.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (S U O C)\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U V) \n (S O V V) F1 (S O U D) (S O V D) F1) \n (S O U V)))\n (Fmult\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U V) \n (S O V V) F1 (S O U C) (S O V C) F1) \n (S O U V)) (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (S U O A) (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U B) (S O V B) F1) (S O U V))) (Fmult (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U A) (S O V A) F1) (S O U V)) (S U O B))) (Fminus (Fmult (S U O C) (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U D) (S O V D) F1) (S O U V))) (Fmult (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U C) (S O V C) F1) (S O U V)) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (S U O C)\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U V) \n (S O V V) F1 (S O U D) (S O V D) F1) \n (S O U V)))\n (Fmult\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U V) \n (S O V V) F1 (S O U C) (S O V C) F1) \n (S O U V)) (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (S U O A) (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U B) (S O V B) F1) (S O U V))) (Fmult (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U A) (S O V A) F1) (S O U V)) (S U O B))) (Fminus (Fmult (S U O C) (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U D) (S O V D) F1) (S O U V))) (Fmult (Fdiv (Det3 (S O U U) (S O V U) F1 (S O U V) (S O V V) F1 (S O U C) (S O V C) F1) (S O U V)) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
unfold Det3 in *.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (S U O C)\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus\n (Fmult (S O U U) (Fmult (S O V V) F1))\n (Fmult (S O U U) (Fmult F1 (S O V D))))\n (Fmult (S O V U) (Fmult (S O U V) F1)))\n (Fmult (S O V U) (Fmult F1 (S O U D))))\n (Fmult F1 (Fmult (S O U V) (S O V D))))\n (Fmult F1 (Fmult (S O V V) (S O U D)))) \n (S O U V)))\n (Fmult\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus\n (Fmult (S O U U) (Fmult (S O V V) F1))\n (Fmult (S O U U) (Fmult F1 (S O V C))))\n (Fmult (S O V U) (Fmult (S O U V) F1)))\n (Fmult (S O V U) (Fmult F1 (S O U C))))\n (Fmult F1 (Fmult (S O U V) (S O V C))))\n (Fmult F1 (Fmult (S O V V) (S O U C)))) \n (S O U V)) (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (S U O A) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U U) (Fmult (S O V V) F1)) (Fmult (S O U U) (Fmult F1 (S O V B)))) (Fmult (S O V U) (Fmult (S O U V) F1))) (Fmult (S O V U) (Fmult F1 (S O U B)))) (Fmult F1 (Fmult (S O U V) (S O V B)))) (Fmult F1 (Fmult (S O V V) (S O U B)))) (S O U V))) (Fmult (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U U) (Fmult (S O V V) F1)) (Fmult (S O U U) (Fmult F1 (S O V A)))) (Fmult (S O V U) (Fmult (S O U V) F1))) (Fmult (S O V U) (Fmult F1 (S O U A)))) (Fmult F1 (Fmult (S O U V) (S O V A)))) (Fmult F1 (Fmult (S O V V) (S O U A)))) (S O U V)) (S U O B))) (Fminus (Fmult (S U O C) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U U) (Fmult (S O V V) F1)) (Fmult (S O U U) (Fmult F1 (S O V D)))) (Fmult (S O V U) (Fmult (S O U V) F1))) (Fmult (S O V U) (Fmult F1 (S O U D)))) (Fmult F1 (Fmult (S O U V) (S O V D)))) (Fmult F1 (Fmult (S O V V) (S O U D)))) (S O U V))) (Fmult (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S O U U) (Fmult (S O V V) F1)) (Fmult (S O U U) (Fmult F1 (S O V C)))) (Fmult (S O V U) (Fmult (S O U V) F1))) (Fmult (S O V U) (Fmult F1 (S O U C)))) (Fmult F1 (Fmult (S O U V) (S O V C)))) (Fmult F1 (Fmult (S O V V) (S O U C)))) (S O U V)) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
basic_simpl.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (S U O C)\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (S O V U) (S O U V)))\n (Fmult (S O V U) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V)))\n (Fmult\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (S O V U) (S O U V)))\n (Fmult (S O V U) (S O U C)))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (S U O A) (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (S O V U) (S O U V))) (Fmult (S O V U) (S O U B))) (Fmult (S O U V) (S O V B))) (S O U V))) (Fmult (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (S O V U) (S O U V))) (Fmult (S O V U) (S O U A))) (Fmult (S O U V) (S O V A))) (S O U V)) (S U O B))) (Fminus (Fmult (S U O C) (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (S O V U) (S O U V))) (Fmult (S O V U) (S O U D))) (Fmult (S O U V) (S O V D))) (S O U V))) (Fmult (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (S O V U) (S O U V))) (Fmult (S O V U) (S O U C))) (Fmult (S O U V) (S O V C))) (S O U V)) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
replace (S O V U) with (- S O U V) in * by auto with Geom.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (S U O C)\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V)))\n (Fmult\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U C)))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (S U O A) (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U B))) (Fmult (S O U V) (S O V B))) (S O U V))) (Fmult (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U A))) (Fmult (S O U V) (S O V A))) (S O U V)) (S U O B))) (Fminus (Fmult (S U O C) (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U D))) (Fmult (S O U V) (S O V D))) (S O U V))) (Fmult (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U C))) (Fmult (S O U V) (S O V C))) (S O U V)) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
replace (S U O A) with (- S O U A) in * by auto with Geom.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (S U O C)\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V)))\n (Fmult\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U C)))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (Fopp (S O U A)) (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U B))) (Fmult (S O U V) (S O V B))) (S O U V))) (Fmult (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U A))) (Fmult (S O U V) (S O V A))) (S O U V)) (S U O B))) (Fminus (Fmult (S U O C) (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U D))) (Fmult (S O U V) (S O V D))) (S O U V))) (Fmult (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U C))) (Fmult (S O U V) (S O V C))) (S O U V)) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
replace (S U O B) with (- S O U B) in * by auto with Geom.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (S U O C)\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V)))\n (Fmult\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U C)))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (Fopp (S O U A)) (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U B))) (Fmult (S O U V) (S O V B))) (S O U V))) (Fmult (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U A))) (Fmult (S O U V) (S O V A))) (S O U V)) (Fopp (S O U B)))) (Fminus (Fmult (S U O C) (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U D))) (Fmult (S O U V) (S O V D))) (S O U V))) (Fmult (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U C))) (Fmult (S O U V) (S O V C))) (S O U V)) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
replace (S U O C) with (- S O U C) in * by auto with Geom.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (Fopp (S O U C))\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V)))\n (Fmult\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U C)))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (Fopp (S O U A)) (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U B))) (Fmult (S O U V) (S O V B))) (S O U V))) (Fmult (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U A))) (Fmult (S O U V) (S O V A))) (S O U V)) (Fopp (S O U B)))) (Fminus (Fmult (Fopp (S O U C)) (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U D))) (Fmult (S O U V) (S O V D))) (S O U V))) (Fmult (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U C))) (Fmult (S O U V) (S O V C))) (S O U V)) (S U O D)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
replace (S U O D) with (- S O U D) in * by auto with Geom.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (Fopp (S O U C))\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V)))\n (Fmult\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U C)))\n (Fmult (S O U V) (S O V C))) (S O U V))\n (Fopp (S O U D)))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fmult (Fopp (S O U A)) (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U B))) (Fmult (S O U V) (S O V B))) (S O U V))) (Fmult (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U A))) (Fmult (S O U V) (S O V A))) (S O U V)) (Fopp (S O U B)))) (Fminus (Fmult (Fopp (S O U C)) (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U D))) (Fmult (S O U V) (S O V D))) (S O U V))) (Fmult (Fdiv (Fplus (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V))) (Fmult (Fopp (S O U V)) (S O U C))) (Fmult (S O U V) (S O V C))) (S O U V)) (Fopp (S O U D))))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
basic_simpl.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.

*****
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult (S O U C)\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) (S O U C)))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S O U D)))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fopp (Fmult (S O U A) (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) (S O U B))) (Fmult (S O U V) (S O V B))) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O V A))) (S O U V)) (S O U B)))) (Fminus (Fopp (Fmult (S O U C) (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) (S O U D))) (Fmult (S O U V) (S O V D))) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) (S O U C))) (Fmult (S O U V) (S O V C))) (S O U V)) (S O U D))))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
set (xc := S O U C) in *.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.

*****
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xc))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S O U D)))) F0)
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fopp (Fmult (S O U A) (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) (S O U B))) (Fmult (S O U V) (S O V B))) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) (S O U A))) (Fmult (S O U V) (S O V A))) (S O U V)) (S O U B)))) (Fminus (Fopp (Fmult xc (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) (S O U D))) (Fmult (S O U V) (S O V D))) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xc)) (Fmult (S O U V) (S O V C))) (S O U V)) (S O U D))))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) (S O U A))) (Fmult (S O U A) (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) xc)) (Fmult xc (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
set (xa := S O U A) in *.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.

*****
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xc))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S O U D)))) F0)
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fopp (Fmult xa (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) (S O U B))) (Fmult (S O U V) (S O V B))) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xa)) (Fmult (S O U V) (S O V A))) (S O U V)) (S O U B)))) (Fminus (Fopp (Fmult xc (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) (S O U D))) (Fmult (S O U V) (S O V D))) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xc)) (Fmult (S O U V) (S O V C))) (S O U V)) (S O U D))))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U B) xa)) (Fmult xa (S O V B))) (Fmult (S O U B) (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) xc)) (Fmult xc (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
set (xb := S O U B) in *.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.

*****
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xc))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S O U D)))) F0)
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fopp (Fmult xa (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xb)) (Fmult (S O U V) (S O V B))) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xa)) (Fmult (S O U V) (S O V A))) (S O U V)) xb))) (Fminus (Fopp (Fmult xc (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) (S O U D))) (Fmult (S O U V) (S O V D))) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xc)) (Fmult (S O U V) (S O V C))) (S O U V)) (S O U D))))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus xb xa)) (Fmult xa (S O V B))) (Fmult xb (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) xc)) (Fmult xc (S O V D))) (Fmult (S O U D) (S O V C))))
+++++
set (xd := S O U D) in *.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.

*****
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xd))\n (Fmult (S O U V) (S O V D))) (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xc))\n (Fmult (S O U V) (S O V C))) (S O U V)) xd))) F0)
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fopp (Fmult xa (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xb)) (Fmult (S O U V) (S O V B))) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xa)) (Fmult (S O U V) (S O V A))) (S O U V)) xb))) (Fminus (Fopp (Fmult xc (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xd)) (Fmult (S O U V) (S O V D))) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xc)) (Fmult (S O U V) (S O V C))) (S O U V)) xd)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus xb xa)) (Fmult xa (S O V B))) (Fmult xb (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus xd xc)) (Fmult xc (S O V D))) (Fmult xd (S O V C))))
+++++
set (yc := S O V C) in *.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.

*****
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xd))\n (Fmult (S O U V) (S O V D))) (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xc)) (Fmult (S O U V) yc))\n (S O U V)) xd))) F0)
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fopp (Fmult xa (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xb)) (Fmult (S O U V) (S O V B))) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xa)) (Fmult (S O U V) (S O V A))) (S O U V)) xb))) (Fminus (Fopp (Fmult xc (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xd)) (Fmult (S O U V) (S O V D))) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xc)) (Fmult (S O U V) yc)) (S O U V)) xd)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus xb xa)) (Fmult xa (S O V B))) (Fmult xb (S O V A))) (Fplus (Fminus (Fmult (S O U V) (Fminus xd xc)) (Fmult xc (S O V D))) (Fmult xd yc)))
+++++
set (ya := S O V A) in *.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.

*****
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xd))\n (Fmult (S O U V) (S O V D))) (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xc)) (Fmult (S O U V) yc))\n (S O U V)) xd))) F0)
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fopp (Fmult xa (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xb)) (Fmult (S O U V) (S O V B))) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xa)) (Fmult (S O U V) ya)) (S O U V)) xb))) (Fminus (Fopp (Fmult xc (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xd)) (Fmult (S O U V) (S O V D))) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xc)) (Fmult (S O U V) yc)) (S O U V)) xd)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus xb xa)) (Fmult xa (S O V B))) (Fmult xb ya)) (Fplus (Fminus (Fmult (S O U V) (Fminus xd xc)) (Fmult xc (S O V D))) (Fmult xd yc)))
+++++
set (yb := S O V B) in *.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xd))\n (Fmult (S O U V) (S O V D))) (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xc)) (Fmult (S O U V) yc))\n (S O U V)) xd))) F0)
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fopp (Fmult xa (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xb)) (Fmult (S O U V) yb)) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xa)) (Fmult (S O U V) ya)) (S O U V)) xb))) (Fminus (Fopp (Fmult xc (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xd)) (Fmult (S O U V) (S O V D))) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xc)) (Fmult (S O U V) yc)) (S O U V)) xd)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus xb xa)) (Fmult xa yb)) (Fmult xb ya)) (Fplus (Fminus (Fmult (S O U V) (Fminus xd xc)) (Fmult xc (S O V D))) (Fmult xd yc)))
+++++
set (yd := S O V D) in *.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xd)) (Fmult (S O U V) yd))\n (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xc)) (Fmult (S O U V) yc))\n (S O U V)) xd))) F0)
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fopp (Fmult xa (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xb)) (Fmult (S O U V) yb)) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xa)) (Fmult (S O U V) ya)) (S O U V)) xb))) (Fminus (Fopp (Fmult xc (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xd)) (Fmult (S O U V) yd)) (S O U V)))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult (S O U V) (S O U V)))) (Fmult (S O U V) xc)) (Fmult (S O U V) yc)) (S O U V)) xd)))) (Fdiv (Fplus (Fminus (Fmult (S O U V) (Fminus xb xa)) (Fmult xa yb)) (Fmult xb ya)) (Fplus (Fminus (Fmult (S O U V) (Fminus xd xc)) (Fmult xc yd)) (Fmult xd yc)))
+++++
set (X := S O U V) in *.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xd))\n (Fmult X yd)) X)))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xc))\n (Fmult X yc)) X) xd))) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fminus (Fopp (Fmult xa (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xb)) (Fmult X yb)) X))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xa)) (Fmult X ya)) X) xb))) (Fminus (Fopp (Fmult xc (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xd)) (Fmult X yd)) X))) (Fopp (Fmult (Fdiv (Fplus (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xc)) (Fmult X yc)) X) xd)))) (Fdiv (Fplus (Fminus (Fmult X (Fminus xb xa)) (Fmult xa yb)) (Fmult xb ya)) (Fplus (Fminus (Fmult X (Fminus xd xc)) (Fmult xc yd)) (Fmult xd yc)))
+++++
field.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.
field.

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xd))\n (Fmult X yd)) X)))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xc))\n (Fmult X yc)) X) xd))) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (not (eq (Fplus (Fminus (Fmult X (Fminus xd xc)) (Fmult xc yd)) (Fmult xd yc)) F0)) (and (not (eq X F0)) (not (eq (Fminus (Fopp (Fmult xc (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xd)) (Fmult X yd)))) (Fopp (Fmult (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xc)) (Fmult X yc)) xd))) F0)))
+++++
repeat split.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.
field.
repeat split.

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xd))\n (Fmult X yd)) X)))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xc))\n (Fmult X yc)) X) xd))) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult X (Fminus xd xc)) (Fmult xc yd)) (Fmult xd yc)) F0)
+++++
auto.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.
field.
repeat split.
auto.

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xd))\n (Fmult X yd)) X)))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xc))\n (Fmult X yc)) X) xd))) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult X (Fminus xd xc)) (Fmult xc yd)) (Fmult xd yc)) F0)
+++++
replace ((0 - - (X * X) - X * xd + X * yd) / X) with (X -xd +yd) in H4 by (field;auto).
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.
field.
repeat split.
auto.
replace ((0 - - (X * X) - X * xd + X * yd) / X) with (X -xd +yd) in H4 by (field;auto).

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus (Fopp (Fmult xc (Fplus (Fminus X xd) yd)))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xc))\n (Fmult X yc)) X) xd))) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult X (Fminus xd xc)) (Fmult xc yd)) (Fmult xd yc)) F0)
+++++
replace ((0 - - (X * X) - X * xc + X * yc) / X) with (X - xc + yc) in H4 by (field;auto).
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.
field.
repeat split.
auto.
replace ((0 - - (X * X) - X * xd + X * yd) / X) with (X -xd +yd) in H4 by (field;auto).
replace ((0 - - (X * X) - X * xc + X * yc) / X) with (X - xc + yc) in H4 by (field;auto).

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus (Fopp (Fmult xc (Fplus (Fminus X xd) yd)))\n (Fopp (Fmult (Fplus (Fminus X xc) yc) xd))) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult X (Fminus xd xc)) (Fmult xc yd)) (Fmult xd yc)) F0)
+++++
replace (-(xc * (X - xd + yd)) - - ((X - xc + yc) * xd)) with (X * (xd - xc) - xc * yd + xd * yc) in H4 by ring.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.
field.
repeat split.
auto.
replace ((0 - - (X * X) - X * xd + X * yd) / X) with (X -xd +yd) in H4 by (field;auto).
replace ((0 - - (X * X) - X * xc + X * yc) / X) with (X - xc + yc) in H4 by (field;auto).
replace (-(xc * (X - xd + yd)) - - ((X - xc + yc) * xd)) with (X * (xd - xc) - xc * yd + xd * yc) in H4 by ring.

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fplus (Fminus (Fmult X (Fminus xd xc)) (Fmult xc yd))\n (Fmult xd yc)) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult X (Fminus xd xc)) (Fmult xc yd)) (Fmult xd yc)) F0)
+++++
auto.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.
field.
repeat split.

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xd))\n (Fmult X yd)) X)))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xc))\n (Fmult X yc)) X) xd))) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq X F0)
+++++
auto.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.
field.
repeat split.

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xd))\n (Fmult X yd)) X)))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xc))\n (Fmult X yc)) X) xd))) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fopp (Fmult xc (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xd)) (Fmult X yd)))) (Fopp (Fmult (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xc)) (Fmult X yc)) xd))) F0)
+++++
auto.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.
field.
repeat split.
auto.

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xd))\n (Fmult X yd)) X)))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xc))\n (Fmult X yc)) X) xd))) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fopp (Fmult xc (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xd)) (Fmult X yd)))) (Fopp (Fmult (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xc)) (Fmult X yc)) xd))) F0)
+++++
replace (- (xc * ((0 - - (X * X) - X * xd + X * yd) / X)) - - ((0 - - (X * X) - X * xc + X * yc) / X * xd)) with ((- (xc * (- - (X * X) - X * xd + X * yd)) - - ((- - (X * X) - X * xc + X * yc) * xd)) / X) in H4 by (field;auto).
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.
field.
repeat split.
auto.
replace (- (xc * ((0 - - (X * X) - X * xd + X * yd) / X)) - - ((0 - - (X * X) - X * xc + X * yc) / X * xd)) with ((- (xc * (- - (X * X) - X * xd + X * yd)) - - ((- - (X * X) - X * xc + X * yc) * xd)) / X) in H4 by (field;auto).

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fdiv\n (Fminus\n (Fopp\n (Fmult xc\n (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xd))\n (Fmult X yd))))\n (Fopp\n (Fmult\n (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xc))\n (Fmult X yc)) xd))) X) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fopp (Fmult xc (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xd)) (Fmult X yd)))) (Fopp (Fmult (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xc)) (Fmult X yc)) xd))) F0)
+++++
intro Hx.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.
field.
repeat split.
auto.
replace (- (xc * ((0 - - (X * X) - X * xd + X * yd) / X)) - - ((0 - - (X * X) - X * xc + X * yc) / X * xd)) with ((- (xc * (- - (X * X) - X * xd + X * yd)) - - ((- - (X * X) - X * xc + X * yc) * xd)) / X) in H4 by (field;auto).
intro Hx.

*****
Hx : eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xd))\n (Fmult X yd))))\n (Fopp\n (Fmult\n (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xc))\n (Fmult X yc)) xd))) F0
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fdiv\n (Fminus\n (Fopp\n (Fmult xc\n (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xd))\n (Fmult X yd))))\n (Fopp\n (Fmult\n (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xc))\n (Fmult X yc)) xd))) X) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
rewrite Hx in *.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.
field.
repeat split.
auto.
replace (- (xc * ((0 - - (X * X) - X * xd + X * yd) / X)) - - ((0 - - (X * X) - X * xc + X * yc) / X * xd)) with ((- (xc * (- - (X * X) - X * xd + X * yd)) - - ((- - (X * X) - X * xc + X * yc) * xd)) / X) in H4 by (field;auto).
intro Hx.
rewrite Hx in *.

*****
Hx : eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xd))\n (Fmult X yd))))\n (Fopp\n (Fmult\n (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xc))\n (Fmult X yc)) xd))) F0
yb : F
ya : F
xb : F
xa : F
H4 : not (eq (Fdiv F0 X) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
replace (0 / X) with 0 in * by (field;auto).
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.
field.
repeat split.
auto.
replace (- (xc * ((0 - - (X * X) - X * xd + X * yd) / X)) - - ((0 - - (X * X) - X * xc + X * yc) / X * xd)) with ((- (xc * (- - (X * X) - X * xd + X * yd)) - - ((- - (X * X) - X * xc + X * yc) * xd)) / X) in H4 by (field;auto).
intro Hx.
rewrite Hx in *.
replace (0 / X) with 0 in * by (field;auto).

*****
Hx : eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xd))\n (Fmult X yd))))\n (Fopp\n (Fmult\n (Fplus (Fminus (Fopp (Fopp (Fmult X X))) (Fmult X xc))\n (Fmult X yc)) xd))) F0
yb : F
ya : F
xb : F
xa : F
H4 : not (eq F0 F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
False
+++++
intuition.
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.

*****
H4 : not\n (eq\n (Fminus (Fmult (S U O C) (S U V D))\n (Fmult\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U V) \n (S O V V) F1 (S O U C) (S O V C) F1) \n (S O U V)) (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.

*****
H4 : not\n (eq\n (Fminus (Fmult (S U O C) (S U V D))\n (Fmult\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U V) \n (S O V V) F1 (S O U C) (S O V C) F1) \n (S O U V)) (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.

*****
H4 : not\n (eq (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))\n F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.

*****
H4 : not\n (eq (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))\n F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.
idtac.
rewrite (free_points_area_elimination O U V U V B) in *.

*****
H4 : not\n (eq (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))\n F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).
idtac.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V A) in *.

*****
H4 : not\n (eq (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))\n F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
parallel A B C D
+++++
auto with Geom .
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq C D)
+++++
auto with Geom .
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col U O V)
+++++
auto with Geom .
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col U A C)
+++++
auto with Geom .
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col A C D
+++++
auto with Geom .
-----
Lemma free_points_ratio_elimination_7 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> A**B / C**D = (S O U V * (S O U B - S O U A) - S O U A * S O V B + S O U B * S O V A) / (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C).
Proof.
intros.
rewrite (free_points_ratio_elimination_6 U O V A B C D).

*****

*****

+++++
Qed.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : \n  forall O U V A B C D: Point,\n  parallel A B C D ->\n  C<>D ->\n  ~ Col O U V ->\n  ~ Col U A C ->\n  Col A C D ->\n  (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)) (_ : not (Col O U V)) (_ : not (Col U A C)) (_ : Col A C D), not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
Proof.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)) (_ : not (Col O U V)) (_ : not (Col U A C)) (_ : Col A C D), not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
intros.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
assert (S U O C * S U V D - S U V C * S U O D <> 0).
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D))) F0)
+++++
apply (free_points_ratio_elimination_6_non_zero_denom U O V A B C D).
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
apply (free_points_ratio_elimination_6_non_zero_denom U O V A B C D).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
parallel A B C D
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
apply (free_points_ratio_elimination_6_non_zero_denom U O V A B C D).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq C D)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
apply (free_points_ratio_elimination_6_non_zero_denom U O V A B C D).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col U O V)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
apply (free_points_ratio_elimination_6_non_zero_denom U O V A B C D).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col U A C)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
apply (free_points_ratio_elimination_6_non_zero_denom U O V A B C D).

*****
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col A C D
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).

*****
H4 : not\n (eq (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))\n F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
idtac.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.

*****
H4 : not\n (eq (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))\n F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
rewrite (free_points_area_elimination O U V U V C) in *.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.

*****
H4 : not\n (eq\n (Fminus (Fmult (S U O C) (S U V D))\n (Fmult\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U V) \n (S O V V) F1 (S O U C) (S O V C) F1) \n (S O U V)) (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
idtac.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.

*****
H4 : not\n (eq\n (Fminus (Fmult (S U O C) (S U V D))\n (Fmult\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U V) \n (S O V V) F1 (S O U C) (S O V C) F1) \n (S O U V)) (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
rewrite (free_points_area_elimination O U V U V D) in *.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (S U O C)\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U V) \n (S O V V) F1 (S O U D) (S O V D) F1) \n (S O U V)))\n (Fmult\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U V) \n (S O V V) F1 (S O U C) (S O V C) F1) \n (S O U V)) (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
idtac.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (S U O C)\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U V) \n (S O V V) F1 (S O U D) (S O V D) F1) \n (S O U V)))\n (Fmult\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U V) \n (S O V V) F1 (S O U C) (S O V C) F1) \n (S O U V)) (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
unfold Det3 in *.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (S U O C)\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus\n (Fmult (S O U U) (Fmult (S O V V) F1))\n (Fmult (S O U U) (Fmult F1 (S O V D))))\n (Fmult (S O V U) (Fmult (S O U V) F1)))\n (Fmult (S O V U) (Fmult F1 (S O U D))))\n (Fmult F1 (Fmult (S O U V) (S O V D))))\n (Fmult F1 (Fmult (S O V V) (S O U D)))) \n (S O U V)))\n (Fmult\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus\n (Fmult (S O U U) (Fmult (S O V V) F1))\n (Fmult (S O U U) (Fmult F1 (S O V C))))\n (Fmult (S O V U) (Fmult (S O U V) F1)))\n (Fmult (S O V U) (Fmult F1 (S O U C))))\n (Fmult F1 (Fmult (S O U V) (S O V C))))\n (Fmult F1 (Fmult (S O V V) (S O U C)))) \n (S O U V)) (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
basic_simpl.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (S U O C)\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (S O V U) (S O U V)))\n (Fmult (S O V U) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V)))\n (Fmult\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (S O V U) (S O U V)))\n (Fmult (S O V U) (S O U C)))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
replace (S O V U) with (- S O U V) in * by auto with Geom.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (S U O C)\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V)))\n (Fmult\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U C)))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
replace (S U O A) with (- S O U A) in * by auto with Geom.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (S U O C)\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V)))\n (Fmult\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U C)))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
replace (S U O B) with (- S O U B) in * by auto with Geom.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (S U O C)\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V)))\n (Fmult\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U C)))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
replace (S U O C) with (- S O U C) in * by auto with Geom.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (Fopp (S O U C))\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V)))\n (Fmult\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U C)))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
replace (S U O D) with (- S O U D) in * by auto with Geom.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.

*****
H4 : not\n (eq\n (Fminus\n (Fmult (Fopp (S O U C))\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V)))\n (Fmult\n (Fdiv\n (Fplus\n (Fplus (Fminus F0 (Fmult (Fopp (S O U V)) (S O U V)))\n (Fmult (Fopp (S O U V)) (S O U C)))\n (Fmult (S O U V) (S O V C))) (S O U V))\n (Fopp (S O U D)))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
basic_simpl.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.

*****
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult (S O U C)\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) (S O U C)))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S O U D)))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) (S O U C))) (Fmult (S O U C) (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
set (xc := S O U C) in *.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.

*****
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xc))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S O U D)))) F0)
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) xc)) (Fmult xc (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
set (xa := S O U A) in *.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.

*****
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xc))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S O U D)))) F0)
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) xc)) (Fmult xc (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
set (xb := S O U B) in *.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.

*****
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) (S O U D)))\n (Fmult (S O U V) (S O V D))) (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xc))\n (Fmult (S O U V) (S O V C))) (S O U V)) \n (S O U D)))) F0)
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus (S O U D) xc)) (Fmult xc (S O V D))) (Fmult (S O U D) (S O V C))) F0)
+++++
set (xd := S O U D) in *.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.

*****
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xd))\n (Fmult (S O U V) (S O V D))) (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xc))\n (Fmult (S O U V) (S O V C))) (S O U V)) xd))) F0)
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus xd xc)) (Fmult xc (S O V D))) (Fmult xd (S O V C))) F0)
+++++
set (yc := S O V C) in *.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.

*****
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xd))\n (Fmult (S O U V) (S O V D))) (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xc)) (Fmult (S O U V) yc))\n (S O U V)) xd))) F0)
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus xd xc)) (Fmult xc (S O V D))) (Fmult xd yc)) F0)
+++++
set (ya := S O V A) in *.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.

*****
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xd))\n (Fmult (S O U V) (S O V D))) (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xc)) (Fmult (S O U V) yc))\n (S O U V)) xd))) F0)
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus xd xc)) (Fmult xc (S O V D))) (Fmult xd yc)) F0)
+++++
set (yb := S O V B) in *.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xd))\n (Fmult (S O U V) (S O V D))) (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xc)) (Fmult (S O U V) yc))\n (S O U V)) xd))) F0)
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus xd xc)) (Fmult xc (S O V D))) (Fmult xd yc)) F0)
+++++
set (yd := S O V D) in *.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xd)) (Fmult (S O U V) yd))\n (S O U V))))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus\n (Fminus F0 (Fopp (Fmult (S O U V) (S O U V))))\n (Fmult (S O U V) xc)) (Fmult (S O U V) yc))\n (S O U V)) xd))) F0)
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O U V) (Fminus xd xc)) (Fmult xc yd)) (Fmult xd yc)) F0)
+++++
set (X := S O U V) in *.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus\n (Fopp\n (Fmult xc\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xd))\n (Fmult X yd)) X)))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xc))\n (Fmult X yc)) X) xd))) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult X (Fminus xd xc)) (Fmult xc yd)) (Fmult xd yc)) F0)
+++++
replace ((0 - - (X * X) - X * xd + X * yd) / X) with (X -xd +yd) in H4 by (field;auto).
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.
replace ((0 - - (X * X) - X * xd + X * yd) / X) with (X -xd +yd) in H4 by (field;auto).

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus (Fopp (Fmult xc (Fplus (Fminus X xd) yd)))\n (Fopp\n (Fmult\n (Fdiv\n (Fplus\n (Fminus (Fminus F0 (Fopp (Fmult X X))) (Fmult X xc))\n (Fmult X yc)) X) xd))) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult X (Fminus xd xc)) (Fmult xc yd)) (Fmult xd yc)) F0)
+++++
replace ((0 - - (X * X) - X * xc + X * yc) / X) with (X - xc + yc) in H4 by (field;auto).
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.
replace ((0 - - (X * X) - X * xd + X * yd) / X) with (X -xd +yd) in H4 by (field;auto).
replace ((0 - - (X * X) - X * xc + X * yc) / X) with (X - xc + yc) in H4 by (field;auto).

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fminus (Fopp (Fmult xc (Fplus (Fminus X xd) yd)))\n (Fopp (Fmult (Fplus (Fminus X xc) yc) xd))) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult X (Fminus xd xc)) (Fmult xc yd)) (Fmult xd yc)) F0)
+++++
replace (-(xc * (X - xd + yd)) - - ((X - xc + yc) * xd)) with (X * (xd - xc) - xc * yd + xd * yc) in H4 by ring.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.
idtac.
unfold Det3 in *.
basic_simpl.
replace (S O V U) with (- S O U V) in * by auto with Geom.
replace (S U O A) with (- S O U A) in * by auto with Geom.
replace (S U O B) with (- S O U B) in * by auto with Geom.
replace (S U O C) with (- S O U C) in * by auto with Geom.
replace (S U O D) with (- S O U D) in * by auto with Geom.
basic_simpl.
set (xc := S O U C) in *.
set (xa := S O U A) in *.
set (xb := S O U B) in *.
set (xd := S O U D) in *.
set (yc := S O V C) in *.
set (ya := S O V A) in *.
set (yb := S O V B) in *.
set (yd := S O V D) in *.
set (X := S O U V) in *.
replace ((0 - - (X * X) - X * xd + X * yd) / X) with (X -xd +yd) in H4 by (field;auto).
replace ((0 - - (X * X) - X * xc + X * yc) / X) with (X - xc + yc) in H4 by (field;auto).
replace (-(xc * (X - xd + yd)) - - ((X - xc + yc) * xd)) with (X * (xd - xc) - xc * yd + xd * yc) in H4 by ring.

*****
yb : F
ya : F
xb : F
xa : F
H4 : not\n (eq\n (Fplus (Fminus (Fmult X (Fminus xd xc)) (Fmult xc yd))\n (Fmult xd yc)) F0)
X : F
yd : F
yc : F
xd : F
xc : F
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult X (Fminus xd xc)) (Fmult xc yd)) (Fmult xd yc)) F0)
+++++
auto.
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.
idtac.
rewrite (free_points_area_elimination O U V U V D) in *.

*****
H4 : not\n (eq\n (Fminus (Fmult (S U O C) (S U V D))\n (Fmult\n (Fdiv\n (Det3 (S O U U) (S O V U) F1 (S O U V) \n (S O V V) F1 (S O U C) (S O V C) F1) \n (S O U V)) (S U O D))) F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).
idtac.
rewrite (free_points_area_elimination O U V U V C) in *.

*****
H4 : not\n (eq (Fminus (Fmult (S U O C) (S U V D)) (Fmult (S U V C) (S U O D)))\n F0)
H3 : Col A C D
H2 : not (Col U A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (S O U V) F0)
+++++
assumption .
-----
Lemma free_points_ratio_elimination_7_non_zero_denom : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col U A C -> Col A C D -> (S O U V * (S O U D - S O U C) - S O U C * S O V D + S O U D * S O V C) <> 0.
Proof.
intros.
assert (S U O C * S U V D - S U V C * S U O D <> 0).

*****

*****

+++++
Qed.
-----
Lemma aux: forall x, x<>0 -> -x<>0.
-----
Lemma aux: forall x, x<>0 -> -x<>0.

*****

*****
forall (x : F) (_ : not (eq x F0)), not (eq (Fopp x) F0)
+++++
Proof.
-----
Lemma aux: forall x, x<>0 -> -x<>0.
Proof.

*****

*****
forall (x : F) (_ : not (eq x F0)), not (eq (Fopp x) F0)
+++++
auto with field_hints.
-----
Lemma aux: forall x, x<>0 -> -x<>0.
Proof.
auto with field_hints.

*****

*****

+++++
Qed.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point,\n  parallel A B C D ->\n  C<>D ->\n  ~ Col O U V ->\n  ~ Col V A C ->\n  Col A C D ->\n  A**B / C**D = \n    ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) /\n    ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)) (_ : not (Col O U V)) (_ : not (Col V A C)) (_ : Col A C D), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fplus (Fmult (S O U V) (Fminus (S O V B) (S O V A))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fminus (Fplus (Fmult (S O U V) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C))))
+++++
Proof.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.

*****

*****
forall (O U V A B C D : Point) (_ : parallel A B C D) (_ : not (eq C D)) (_ : not (Col O U V)) (_ : not (Col V A C)) (_ : Col A C D), eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fplus (Fmult (S O U V) (Fminus (S O V B) (S O V A))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fminus (Fplus (Fmult (S O U V) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C))))
+++++
intros.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (DSeg A B) (DSeg C D)) (Fdiv (Fminus (Fplus (Fmult (S O U V) (Fminus (S O V B) (S O V A))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fminus (Fplus (Fmult (S O U V) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C))))
+++++
rewrite (free_points_ratio_elimination_7 O V U A B C D).
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fplus (Fminus (Fmult (S O V U) (Fminus (S O V B) (S O V A))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fplus (Fminus (Fmult (S O V U) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C)))) (Fdiv (Fminus (Fplus (Fmult (S O U V) (Fminus (S O V B) (S O V A))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fminus (Fplus (Fmult (S O U V) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C))))
+++++
idtac.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fplus (Fminus (Fmult (S O V U) (Fminus (S O V B) (S O V A))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fplus (Fminus (Fmult (S O V U) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C)))) (Fdiv (Fminus (Fplus (Fmult (S O U V) (Fminus (S O V B) (S O V A))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fminus (Fplus (Fmult (S O U V) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C))))
+++++
replace (S O V U) with (- S O U V) by auto with Geom.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
eq (Fdiv (Fplus (Fminus (Fmult (Fopp (S O U V)) (Fminus (S O V B) (S O V A))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fplus (Fminus (Fmult (Fopp (S O U V)) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C)))) (Fdiv (Fminus (Fplus (Fmult (S O U V) (Fminus (S O V B) (S O V A))) (Fmult (S O V A) (S O U B))) (Fmult (S O V B) (S O U A))) (Fminus (Fplus (Fmult (S O U V) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C))))
+++++
field.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (not (eq (Fminus (Fplus (Fmult (S O U V) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C))) F0)) (not (eq (Fplus (Fminus (Fmult (Fopp (S O U V)) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C))) F0))
+++++
replace (- S O U V) with (S O V U) by auto with Geom.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.
replace (- S O U V) with (S O V U) by auto with Geom.

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
and (not (eq (Fminus (Fplus (Fmult (S O U V) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C))) F0)) (not (eq (Fplus (Fminus (Fmult (S O V U) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C))) F0))
+++++
split.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.
replace (- S O U V) with (S O V U) by auto with Geom.
split.

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fplus (Fmult (S O U V) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C))) F0)
+++++
replace (S O U V) with (- S O V U) by auto with Geom.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.
replace (- S O U V) with (S O V U) by auto with Geom.
split.
replace (S O U V) with (- S O V U) by auto with Geom.

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fminus (Fplus (Fmult (Fopp (S O V U)) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C))) F0)
+++++
replace (- S O V U * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C) with (- (S O V U * (S O V D - S O V C) - S O V C * S O U D + S O V D * S O U C)) by ring.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.
replace (- S O U V) with (S O V U) by auto with Geom.
split.
replace (S O U V) with (- S O V U) by auto with Geom.
replace (- S O V U * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C) with (- (S O V U * (S O V D - S O V C) - S O V C * S O U D + S O V D * S O U C)) by ring.

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fopp (Fplus (Fminus (Fmult (S O V U) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C)))) F0)
+++++
apply aux.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.
replace (- S O U V) with (S O V U) by auto with Geom.
split.
replace (S O U V) with (- S O V U) by auto with Geom.
replace (- S O V U * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C) with (- (S O V U * (S O V D - S O V C) - S O V C * S O U D + S O V D * S O U C)) by ring.
apply aux.

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O V U) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C))) F0)
+++++
apply (free_points_ratio_elimination_7_non_zero_denom O V U A B C D).
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.
replace (- S O U V) with (S O V U) by auto with Geom.
split.
replace (S O U V) with (- S O V U) by auto with Geom.
replace (- S O V U * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C) with (- (S O V U * (S O V D - S O V C) - S O V C * S O U D + S O V D * S O U C)) by ring.
apply aux.
apply (free_points_ratio_elimination_7_non_zero_denom O V U A B C D).

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
parallel A B C D
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.
replace (- S O U V) with (S O V U) by auto with Geom.
split.
replace (S O U V) with (- S O V U) by auto with Geom.
replace (- S O V U * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C) with (- (S O V U * (S O V D - S O V C) - S O V C * S O U D + S O V D * S O U C)) by ring.
apply aux.
apply (free_points_ratio_elimination_7_non_zero_denom O V U A B C D).

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq C D)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.
replace (- S O U V) with (S O V U) by auto with Geom.
split.
replace (S O U V) with (- S O V U) by auto with Geom.
replace (- S O V U * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C) with (- (S O V U * (S O V D - S O V C) - S O V C * S O U D + S O V D * S O U C)) by ring.
apply aux.
apply (free_points_ratio_elimination_7_non_zero_denom O V U A B C D).

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col O V U)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.
replace (- S O U V) with (S O V U) by auto with Geom.
split.
replace (S O U V) with (- S O V U) by auto with Geom.
replace (- S O V U * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C) with (- (S O V U * (S O V D - S O V C) - S O V C * S O U D + S O V D * S O U C)) by ring.
apply aux.
apply (free_points_ratio_elimination_7_non_zero_denom O V U A B C D).

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col V A C)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.
replace (- S O U V) with (S O V U) by auto with Geom.
split.
replace (S O U V) with (- S O V U) by auto with Geom.
replace (- S O V U * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C) with (- (S O V U * (S O V D - S O V C) - S O V C * S O U D + S O V D * S O U C)) by ring.
apply aux.
apply (free_points_ratio_elimination_7_non_zero_denom O V U A B C D).

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col A C D
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.
replace (- S O U V) with (S O V U) by auto with Geom.
split.

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq (Fplus (Fminus (Fmult (S O V U) (Fminus (S O V D) (S O V C))) (Fmult (S O V C) (S O U D))) (Fmult (S O V D) (S O U C))) F0)
+++++
apply (free_points_ratio_elimination_7_non_zero_denom O V U A B C D).
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.
replace (- S O U V) with (S O V U) by auto with Geom.
split.
apply (free_points_ratio_elimination_7_non_zero_denom O V U A B C D).

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
parallel A B C D
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.
replace (- S O U V) with (S O V U) by auto with Geom.
split.
apply (free_points_ratio_elimination_7_non_zero_denom O V U A B C D).

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq C D)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.
replace (- S O U V) with (S O V U) by auto with Geom.
split.
apply (free_points_ratio_elimination_7_non_zero_denom O V U A B C D).

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col O V U)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.
replace (- S O U V) with (S O V U) by auto with Geom.
split.
apply (free_points_ratio_elimination_7_non_zero_denom O V U A B C D).

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col V A C)
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).
idtac.
replace (S O V U) with (- S O U V) by auto with Geom.
field.
replace (- S O U V) with (S O V U) by auto with Geom.
split.
apply (free_points_ratio_elimination_7_non_zero_denom O V U A B C D).

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col A C D
+++++
auto with Geom.
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
parallel A B C D
+++++
auto with Geom .
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (eq C D)
+++++
auto with Geom .
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col O V U)
+++++
auto with Geom .
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
not (Col V A C)
+++++
auto with Geom .
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).

*****
H3 : Col A C D
H2 : not (Col V A C)
H1 : not (Col O U V)
H0 : not (eq C D)
H : parallel A B C D
O,U,V,A,B,C,D : Point
*****
Col A C D
+++++
auto with Geom .
-----
Lemma free_points_ratio_elimination_8 : forall O U V A B C D: Point, parallel A B C D -> C<>D -> ~ Col O U V -> ~ Col V A C -> Col A C D -> A**B / C**D = ( S O U V * (S O V B - S O V A) + S O V A * S O U B - S O V B * S O U A) / ( S O U V * (S O V D - S O V C) + S O V C * S O U D - S O V D * S O U C).
Proof.
intros.
rewrite (free_points_ratio_elimination_7 O V U A B C D).

*****

*****

+++++
Qed.
-----
