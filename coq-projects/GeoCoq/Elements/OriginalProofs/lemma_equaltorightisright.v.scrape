Require Export GeoCoq.Elements.OriginalProofs.lemma_8_3.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_8_2.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_equaltorightisright : \n   forall A B C a b c, \n   Per A B C -> CongA a b c A B C ->\n   Per a b c.
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C a b c : Point) (_ : Per A B C) (_ : CongA a b c A B C), Per a b c
+++++
Proof.
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C a b c : Point) (_ : Per A B C) (_ : CongA a b c A B C), Per a b c
+++++
intros.
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.

*****
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).

*****
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\ Out B C F /\ Out b a e /\ Out b c f /\ Cong B E b e /\ Cong B F b f /\ Cong E F e f /\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.

*****
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Per A B F) by (conclude lemma_8_3).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).

*****
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Per F B A) by (conclude lemma_8_2).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).

*****
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Per F B E) by (conclude lemma_8_3).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).

*****
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Per E B F) by (conclude lemma_8_2).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).

*****
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (neq B E) by (conclude lemma_raystrict).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).

*****
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (neq E B) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).

*****
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\ Cong E B W B /\ Cong E F W F /\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.

*****
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (neq b e) by (conclude axiom_nocollapse).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).

*****
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (neq e b) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).

*****
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.

*****
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Cong e b E B) by (forward_using lemma_doublereverse).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).

*****
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).

*****
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).

*****
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).

*****
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).

*****
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).

*****
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Cong e w E W) by (conclude cn_sumofparts).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).

*****
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).

*****
H31 : Cong f w F W
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Cong e b B W) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
assert (Cong e b B W) by (conclude lemma_congruencetransitive).

*****
H32 : Cong e b B W
H31 : Cong f w F W
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Cong B W b w) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
assert (Cong e b B W) by (conclude lemma_congruencetransitive).
assert (Cong B W b w) by (conclude lemma_congruencesymmetric).

*****
H33 : Cong B W b w
H32 : Cong e b B W
H31 : Cong f w F W
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Cong e b b w) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
assert (Cong e b B W) by (conclude lemma_congruencetransitive).
assert (Cong B W b w) by (conclude lemma_congruencesymmetric).
assert (Cong e b b w) by (conclude lemma_congruencetransitive).

*****
H34 : Cong e b b w
H33 : Cong B W b w
H32 : Cong e b B W
H31 : Cong f w F W
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Cong e b w b) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
assert (Cong e b B W) by (conclude lemma_congruencetransitive).
assert (Cong B W b w) by (conclude lemma_congruencesymmetric).
assert (Cong e b b w) by (conclude lemma_congruencetransitive).
assert (Cong e b w b) by (forward_using lemma_congruenceflip).

*****
H35 : Cong e b w b
H34 : Cong e b b w
H33 : Cong B W b w
H32 : Cong e b B W
H31 : Cong f w F W
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Cong e f W F) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
assert (Cong e b B W) by (conclude lemma_congruencetransitive).
assert (Cong B W b w) by (conclude lemma_congruencesymmetric).
assert (Cong e b b w) by (conclude lemma_congruencetransitive).
assert (Cong e b w b) by (forward_using lemma_congruenceflip).
assert (Cong e f W F) by (conclude lemma_congruencetransitive).

*****
H36 : Cong e f W F
H35 : Cong e b w b
H34 : Cong e b b w
H33 : Cong B W b w
H32 : Cong e b B W
H31 : Cong f w F W
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Cong W F w f) by (forward_using lemma_doublereverse).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
assert (Cong e b B W) by (conclude lemma_congruencetransitive).
assert (Cong B W b w) by (conclude lemma_congruencesymmetric).
assert (Cong e b b w) by (conclude lemma_congruencetransitive).
assert (Cong e b w b) by (forward_using lemma_congruenceflip).
assert (Cong e f W F) by (conclude lemma_congruencetransitive).
assert (Cong W F w f) by (forward_using lemma_doublereverse).

*****
H37 : Cong W F w f
H36 : Cong e f W F
H35 : Cong e b w b
H34 : Cong e b b w
H33 : Cong B W b w
H32 : Cong e b B W
H31 : Cong f w F W
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Cong e f w f) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
assert (Cong e b B W) by (conclude lemma_congruencetransitive).
assert (Cong B W b w) by (conclude lemma_congruencesymmetric).
assert (Cong e b b w) by (conclude lemma_congruencetransitive).
assert (Cong e b w b) by (forward_using lemma_congruenceflip).
assert (Cong e f W F) by (conclude lemma_congruencetransitive).
assert (Cong W F w f) by (forward_using lemma_doublereverse).
assert (Cong e f w f) by (conclude lemma_congruencetransitive).

*****
H38 : Cong e f w f
H37 : Cong W F w f
H36 : Cong e f W F
H35 : Cong e b w b
H34 : Cong e b b w
H33 : Cong B W b w
H32 : Cong e b B W
H31 : Cong f w F W
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (neq b f) by (conclude lemma_raystrict).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
assert (Cong e b B W) by (conclude lemma_congruencetransitive).
assert (Cong B W b w) by (conclude lemma_congruencesymmetric).
assert (Cong e b b w) by (conclude lemma_congruencetransitive).
assert (Cong e b w b) by (forward_using lemma_congruenceflip).
assert (Cong e f W F) by (conclude lemma_congruencetransitive).
assert (Cong W F w f) by (forward_using lemma_doublereverse).
assert (Cong e f w f) by (conclude lemma_congruencetransitive).
assert (neq b f) by (conclude lemma_raystrict).

*****
H39 : neq b f
H38 : Cong e f w f
H37 : Cong W F w f
H36 : Cong e f W F
H35 : Cong e b w b
H34 : Cong e b b w
H33 : Cong B W b w
H32 : Cong e b B W
H31 : Cong f w F W
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Per e b f) by (conclude_def Per ).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
assert (Cong e b B W) by (conclude lemma_congruencetransitive).
assert (Cong B W b w) by (conclude lemma_congruencesymmetric).
assert (Cong e b b w) by (conclude lemma_congruencetransitive).
assert (Cong e b w b) by (forward_using lemma_congruenceflip).
assert (Cong e f W F) by (conclude lemma_congruencetransitive).
assert (Cong W F w f) by (forward_using lemma_doublereverse).
assert (Cong e f w f) by (conclude lemma_congruencetransitive).
assert (neq b f) by (conclude lemma_raystrict).
assert (Per e b f) by (conclude_def Per ).

*****
H40 : Per e b f
H39 : neq b f
H38 : Cong e f w f
H37 : Cong W F w f
H36 : Cong e f W F
H35 : Cong e b w b
H34 : Cong e b b w
H33 : Cong B W b w
H32 : Cong e b B W
H31 : Cong f w F W
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Out b f c) by (conclude lemma_ray5).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
assert (Cong e b B W) by (conclude lemma_congruencetransitive).
assert (Cong B W b w) by (conclude lemma_congruencesymmetric).
assert (Cong e b b w) by (conclude lemma_congruencetransitive).
assert (Cong e b w b) by (forward_using lemma_congruenceflip).
assert (Cong e f W F) by (conclude lemma_congruencetransitive).
assert (Cong W F w f) by (forward_using lemma_doublereverse).
assert (Cong e f w f) by (conclude lemma_congruencetransitive).
assert (neq b f) by (conclude lemma_raystrict).
assert (Per e b f) by (conclude_def Per ).
assert (Out b f c) by (conclude lemma_ray5).

*****
H41 : Out b f c
H40 : Per e b f
H39 : neq b f
H38 : Cong e f w f
H37 : Cong W F w f
H36 : Cong e f W F
H35 : Cong e b w b
H34 : Cong e b b w
H33 : Cong B W b w
H32 : Cong e b B W
H31 : Cong f w F W
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Per e b c) by (conclude lemma_8_3).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
assert (Cong e b B W) by (conclude lemma_congruencetransitive).
assert (Cong B W b w) by (conclude lemma_congruencesymmetric).
assert (Cong e b b w) by (conclude lemma_congruencetransitive).
assert (Cong e b w b) by (forward_using lemma_congruenceflip).
assert (Cong e f W F) by (conclude lemma_congruencetransitive).
assert (Cong W F w f) by (forward_using lemma_doublereverse).
assert (Cong e f w f) by (conclude lemma_congruencetransitive).
assert (neq b f) by (conclude lemma_raystrict).
assert (Per e b f) by (conclude_def Per ).
assert (Out b f c) by (conclude lemma_ray5).
assert (Per e b c) by (conclude lemma_8_3).

*****
H42 : Per e b c
H41 : Out b f c
H40 : Per e b f
H39 : neq b f
H38 : Cong e f w f
H37 : Cong W F w f
H36 : Cong e f W F
H35 : Cong e b w b
H34 : Cong e b b w
H33 : Cong B W b w
H32 : Cong e b B W
H31 : Cong f w F W
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Per c b e) by (conclude lemma_8_2).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
assert (Cong e b B W) by (conclude lemma_congruencetransitive).
assert (Cong B W b w) by (conclude lemma_congruencesymmetric).
assert (Cong e b b w) by (conclude lemma_congruencetransitive).
assert (Cong e b w b) by (forward_using lemma_congruenceflip).
assert (Cong e f W F) by (conclude lemma_congruencetransitive).
assert (Cong W F w f) by (forward_using lemma_doublereverse).
assert (Cong e f w f) by (conclude lemma_congruencetransitive).
assert (neq b f) by (conclude lemma_raystrict).
assert (Per e b f) by (conclude_def Per ).
assert (Out b f c) by (conclude lemma_ray5).
assert (Per e b c) by (conclude lemma_8_3).
assert (Per c b e) by (conclude lemma_8_2).

*****
H43 : Per c b e
H42 : Per e b c
H41 : Out b f c
H40 : Per e b f
H39 : neq b f
H38 : Cong e f w f
H37 : Cong W F w f
H36 : Cong e f W F
H35 : Cong e b w b
H34 : Cong e b b w
H33 : Cong B W b w
H32 : Cong e b B W
H31 : Cong f w F W
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Out b e a) by (conclude lemma_ray5).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
assert (Cong e b B W) by (conclude lemma_congruencetransitive).
assert (Cong B W b w) by (conclude lemma_congruencesymmetric).
assert (Cong e b b w) by (conclude lemma_congruencetransitive).
assert (Cong e b w b) by (forward_using lemma_congruenceflip).
assert (Cong e f W F) by (conclude lemma_congruencetransitive).
assert (Cong W F w f) by (forward_using lemma_doublereverse).
assert (Cong e f w f) by (conclude lemma_congruencetransitive).
assert (neq b f) by (conclude lemma_raystrict).
assert (Per e b f) by (conclude_def Per ).
assert (Out b f c) by (conclude lemma_ray5).
assert (Per e b c) by (conclude lemma_8_3).
assert (Per c b e) by (conclude lemma_8_2).
assert (Out b e a) by (conclude lemma_ray5).

*****
H44 : Out b e a
H43 : Per c b e
H42 : Per e b c
H41 : Out b f c
H40 : Per e b f
H39 : neq b f
H38 : Cong e f w f
H37 : Cong W F w f
H36 : Cong e f W F
H35 : Cong e b w b
H34 : Cong e b b w
H33 : Cong B W b w
H32 : Cong e b B W
H31 : Cong f w F W
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Per c b a) by (conclude lemma_8_3).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
assert (Cong e b B W) by (conclude lemma_congruencetransitive).
assert (Cong B W b w) by (conclude lemma_congruencesymmetric).
assert (Cong e b b w) by (conclude lemma_congruencetransitive).
assert (Cong e b w b) by (forward_using lemma_congruenceflip).
assert (Cong e f W F) by (conclude lemma_congruencetransitive).
assert (Cong W F w f) by (forward_using lemma_doublereverse).
assert (Cong e f w f) by (conclude lemma_congruencetransitive).
assert (neq b f) by (conclude lemma_raystrict).
assert (Per e b f) by (conclude_def Per ).
assert (Out b f c) by (conclude lemma_ray5).
assert (Per e b c) by (conclude lemma_8_3).
assert (Per c b e) by (conclude lemma_8_2).
assert (Out b e a) by (conclude lemma_ray5).
assert (Per c b a) by (conclude lemma_8_3).

*****
H45 : Per c b a
H44 : Out b e a
H43 : Per c b e
H42 : Per e b c
H41 : Out b f c
H40 : Per e b f
H39 : neq b f
H38 : Cong e f w f
H37 : Cong W F w f
H36 : Cong e f W F
H35 : Cong e b w b
H34 : Cong e b b w
H33 : Cong B W b w
H32 : Cong e b B W
H31 : Cong f w F W
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
assert (Per a b c) by (conclude lemma_8_2).
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
assert (Cong e b B W) by (conclude lemma_congruencetransitive).
assert (Cong B W b w) by (conclude lemma_congruencesymmetric).
assert (Cong e b b w) by (conclude lemma_congruencetransitive).
assert (Cong e b w b) by (forward_using lemma_congruenceflip).
assert (Cong e f W F) by (conclude lemma_congruencetransitive).
assert (Cong W F w f) by (forward_using lemma_doublereverse).
assert (Cong e f w f) by (conclude lemma_congruencetransitive).
assert (neq b f) by (conclude lemma_raystrict).
assert (Per e b f) by (conclude_def Per ).
assert (Out b f c) by (conclude lemma_ray5).
assert (Per e b c) by (conclude lemma_8_3).
assert (Per c b e) by (conclude lemma_8_2).
assert (Out b e a) by (conclude lemma_ray5).
assert (Per c b a) by (conclude lemma_8_3).
assert (Per a b c) by (conclude lemma_8_2).

*****
H46 : Per a b c
H45 : Per c b a
H44 : Out b e a
H43 : Per c b e
H42 : Per e b c
H41 : Out b f c
H40 : Per e b f
H39 : neq b f
H38 : Cong e f w f
H37 : Cong W F w f
H36 : Cong e f W F
H35 : Cong e b w b
H34 : Cong e b b w
H33 : Cong B W b w
H32 : Cong e b B W
H31 : Cong f w F W
H30 : Cong e w E W
H29 : Cong e f E F
H28 : Cong b f B F
H27 : Cong b w B W
H26 : Cong E B B W
H25 : Cong b w E B
H24 : Cong e b E B
H23 : Cong b w e b
H22 : BetS e b w
w : Point
H21 : neq e b
H20 : neq b e
H19 : neq B F
H18 : Cong E F W F
H17 : Cong E B W B
H16 : BetS E B W
W : Point
H15 : neq E B
H14 : neq B E
H13 : Per E B F
H12 : Per F B E
H11 : Per F B A
H10 : Per A B F
H9 : nCol A B C
H8 : Cong E F e f
H7 : Cong B F b f
H6 : Cong B E b e
H5 : Out b c f
H4 : Out b a e
H3 : Out B C F
H2 : Out B A E
E,F,e,f : Point
H1 : CongA A B C a b c
H0 : CongA a b c A B C
H : Per A B C
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Per a b c
+++++
close.
-----
Lemma lemma_equaltorightisright : forall A B C a b c, Per A B C -> CongA a b c A B C -> Per a b c.
Proof.
intros.
assert (CongA A B C a b c) by (conclude lemma_equalanglessymmetric).
let Tf:=fresh in assert (Tf:exists E F e f, (Out B A E /\\ Out B C F /\\ Out b a e /\\ Out b c f /\\ Cong B E b e /\\ Cong B F b f /\\ Cong E F e f /\\ nCol A B C)) by (conclude_def CongA );destruct Tf as [E[F[e[f]]]];spliter.
assert (Per A B F) by (conclude lemma_8_3).
assert (Per F B A) by (conclude lemma_8_2).
assert (Per F B E) by (conclude lemma_8_3).
assert (Per E B F) by (conclude lemma_8_2).
assert (neq B E) by (conclude lemma_raystrict).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists W, (BetS E B W /\\ Cong E B W B /\\ Cong E F W F /\\ neq B F)) by (conclude_def Per );destruct Tf as [W];spliter.
assert (neq b e) by (conclude axiom_nocollapse).
assert (neq e b) by (conclude lemma_inequalitysymmetric).
let Tf:=fresh in assert (Tf:exists w, (BetS e b w /\\ Cong b w e b)) by (conclude lemma_extension);destruct Tf as [w];spliter.
assert (Cong e b E B) by (forward_using lemma_doublereverse).
assert (Cong b w E B) by (conclude lemma_congruencetransitive).
assert (Cong E B B W) by (forward_using lemma_congruenceflip).
assert (Cong b w B W) by (conclude lemma_congruencetransitive).
assert (Cong b f B F) by (conclude lemma_congruencesymmetric).
assert (Cong e f E F) by (conclude lemma_congruencesymmetric).
assert (Cong e w E W) by (conclude cn_sumofparts).
assert (Cong f w F W) by (conclude (axiom_5_line e b w f E B W F)).
assert (Cong e b B W) by (conclude lemma_congruencetransitive).
assert (Cong B W b w) by (conclude lemma_congruencesymmetric).
assert (Cong e b b w) by (conclude lemma_congruencetransitive).
assert (Cong e b w b) by (forward_using lemma_congruenceflip).
assert (Cong e f W F) by (conclude lemma_congruencetransitive).
assert (Cong W F w f) by (forward_using lemma_doublereverse).
assert (Cong e f w f) by (conclude lemma_congruencetransitive).
assert (neq b f) by (conclude lemma_raystrict).
assert (Per e b f) by (conclude_def Per ).
assert (Out b f c) by (conclude lemma_ray5).
assert (Per e b c) by (conclude lemma_8_3).
assert (Per c b e) by (conclude lemma_8_2).
assert (Out b e a) by (conclude lemma_ray5).
assert (Per c b a) by (conclude lemma_8_3).
assert (Per a b c) by (conclude lemma_8_2).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
