Require Coq.Strings.Ascii.
-----
Require Coq.Strings.String.
-----
Require Import Coq.Strings.String.
-----
Require Import Coq.Program.Wf.
-----
Require Import Coq.PArith.BinPos.
-----
Require Import Coq.ZArith.ZArith.
-----
Require Import ExtLib.Structures.Monoid.
-----
Require Import ExtLib.Structures.Reducible.
-----
Require Import ExtLib.Programming.Injection.
-----
Require Import ExtLib.Data.Char.
-----
Require Import ExtLib.Data.String.
-----
Require Import ExtLib.Data.Fun.
-----
Require Import ExtLib.Core.RelDec.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Set Printing Universes.
-----
Universe Ushow.
-----
Polymorphic Definition showM@{T} : Type@{Ushow} :=\n  forall m : Type@{T}, Injection ascii m -> Monoid m -> m.
-----
Polymorphic Class ShowScheme@{t} (T : Type@{t}) : Type :=\n{ show_mon : Monoid@{t} T\n; show_inj : Injection ascii T\n}.
-----
Global Instance ShowScheme_string : ShowScheme string :=\n{ show_mon := Monoid_string_append\n; show_inj := fun x => String x EmptyString\n}.
-----
Global Instance ShowScheme_string_compose : ShowScheme (string -> string) :=\n{ show_mon := Monoid_compose string\n; show_inj := String\n}.
-----
Polymorphic Definition runShow {T} {M : ShowScheme T} (m : showM) : T :=\n  m _ show_inj show_mon.
-----
Polymorphic Class Show@{t m} (T : Type@{t}) : Type :=\n  show : T -> showM@{m}.
-----
Polymorphic Definition to_string {T} {M : Show T} (v : T) : string :=\n  runShow (show v) ""%string.
-----
Polymorphic Definition empty : showM :=\n  fun _ _ m => monoid_unit m.
-----
Polymorphic Definition cat (a b : showM) : showM :=\n  fun _ i m => monoid_plus m (a _ i m) (b _ i m).
-----
Global Polymorphic Instance Injection_ascii_showM : Injection ascii showM :=\n  fun v => fun _ i _ => i v.
-----
Polymorphic Fixpoint show_exact (s : string) : showM :=\n  match s with\n    | EmptyString => empty\n    | String a s' => cat (inject a) (show_exact s')\n  end.
-----
Module ShowNotation.
-----
Delimit Scope show_scope with show.
-----
Notation "x << y" := (cat x%show y%show) (at level 100) : show_scope.
-----
Coercion show_exact : string >-> showM.
-----
Definition _inject_char : ascii -> showM := inject.
-----
Coercion _inject_char : ascii >-> showM.
-----
End ShowNotation.
-----
Polymorphic Definition indent (indent : showM) (v : showM) : showM :=\n  let nl := Ascii.ascii_of_nat 10 in\n    fun _ inj mon =>\n      v _ (fun a => if eq_dec a nl\n         then monoid_plus mon (inj a) (indent _ inj mon)\n         else inj a) mon.
-----
Section sepBy.
-----
Import ShowNotation.
-----
Local Open Scope show_scope.
-----
Polymorphic Definition sepBy {T : Type}\n              {F : Foldable T showM} (sep : showM) (ls : T) : showM :=\n    match\n      fold (fun s acc =>\n        match acc with\n          | None => Some s\n          | Some x => Some (x << sep << s)\n        end) None ls\n      with\n      | None => empty\n      | Some s => s\n    end.
-----
End sepBy.
-----
Section sepBy_f.
-----
Import ShowNotation.
-----
Local Open Scope show_scope.
-----
Polymorphic Variables (T : Type) (E : Type).
-----
Polymorphic Context {F : Foldable T E}.
-----
Polymorphic Variable (f : E -> showM).
-----
Polymorphic Definition sepBy_f (sep : showM) (ls : T) : showM :=\n    match\n      fold (fun s acc =>\n        match acc with\n          | None => Some (f s)\n          | Some x => Some (x << sep << f s)\n        end) None ls\n      with\n      | None => empty\n      | Some s => s\n    end.
-----
End sepBy_f.
-----
Polymorphic Definition wrap (before after : showM) (x : showM) : showM :=\n  cat before (cat x after).
-----
Section sum_Show.
-----
Import ShowNotation.
-----
Local Open Scope show_scope.
-----
Polymorphic Definition sum_Show@{a m}\n              {A : Type@{a}} {B : Type@{a}} {AS:Show@{a m} A} {BS:Show@{a m} B}\n  : Show@{a m} (A+B) :=\n    fun s =>\n        let (tag, payload) :=\n          match s with\n          | inl a => (show_exact "inl"%string, show a)\n          | inr b => (show_exact "inr"%string, show b)\n          end\n        in\n        "("%char <<\n        tag <<\n        " "%char <<\n        payload <<\n        ")"%char.
-----
End sum_Show.
-----
Section foldable_Show.
-----
Polymorphic Context {A:Type} {B:Type} {F : Foldable B A} {BS : Show A}.
-----
Global Polymorphic  Instance foldable_Show : Show B :=\n    { show s := sepBy_f show (show_exact ", "%string) s }.
-----
End foldable_Show.
-----
Polymorphic Fixpoint iter_show (ss : list showM) : showM :=\n  match ss with\n    | nil => empty\n    | cons s ss => cat s (iter_show ss)\n  end.
-----
Section hiding_notation.
-----
Import ShowNotation.
-----
Local Open Scope show_scope.
-----
Import Ascii.
-----
Import String.
-----
Global Instance unit_Show : Show unit :=\n  { show u := "tt"%string }.
-----
Global Instance bool_Show : Show bool :=\n  { show b := if b then "true"%string else "false"%string }.
-----
Global Instance ascii_Show : Show ascii :=\n    fun a =>  "'"%char << a << "'"%char.
-----
Global Instance string_Show : Show string :=\n  { show s := """"%char << s << """"%char }.
-----
Program Fixpoint nat_show (n:nat) {measure n} : showM :=\n    if Compare_dec.le_gt_dec n 9 then\n      inject (Char.digit2ascii n)\n    else\n      let n' := NPeano.Nat.div n 10 in\n      (@nat_show n' _) << (inject (Char.digit2ascii (n - 10 * n'))).
-----
Next Obligation.
-----
Next Obligation.

*****
H : gt n (S (S (S (S (S (S (S (S (S O)))))))))
nat_show : forall (n0 : nat) (_ : lt n0 n), showM@{SerTop.138}
n : nat
*****
lt (fst (NPeano.Nat.divmod n (S (S (S (S (S (S (S (S (S O))))))))) O (S (S (S (S (S (S (S (S (S O))))))))))) n
+++++
assert (NPeano.Nat.div n 10 < n).
-----
Next Obligation.
assert (NPeano.Nat.div n 10 < n).

*****
H : gt n (S (S (S (S (S (S (S (S (S O)))))))))
nat_show : forall (n0 : nat) (_ : lt n0 n), showM@{SerTop.138}
n : nat
*****
lt (NPeano.Nat.div n (S (S (S (S (S (S (S (S (S (S O))))))))))) n
+++++
eauto.
-----
Next Obligation.
assert (NPeano.Nat.div n 10 < n).
eauto.

*****
H : gt n (S (S (S (S (S (S (S (S (S O)))))))))
nat_show : forall (n0 : nat) (_ : lt n0 n), showM@{SerTop.138}
n : nat
*****
lt (NPeano.Nat.div n (S (S (S (S (S (S (S (S (S (S O))))))))))) n
+++++
eapply NPeano.Nat.div_lt.
-----
Next Obligation.
assert (NPeano.Nat.div n 10 < n).
eauto.
eapply NPeano.Nat.div_lt.

*****
H : gt n (S (S (S (S (S (S (S (S (S O)))))))))
nat_show : forall (n0 : nat) (_ : lt n0 n), showM@{SerTop.138}
n : nat
*****
lt O n
+++++
inversion H.
-----
Next Obligation.
assert (NPeano.Nat.div n 10 < n).
eauto.
eapply NPeano.Nat.div_lt.
inversion H.

*****
H0 : eq (S (S (S (S (S (S (S (S (S (S O)))))))))) n
H : gt n (S (S (S (S (S (S (S (S (S O)))))))))
nat_show : forall (n0 : nat) (_ : lt n0 n), showM@{SerTop.138}
n : nat
*****
lt O (S (S (S (S (S (S (S (S (S (S O))))))))))
+++++
apply Lt.lt_O_Sn.
-----
Next Obligation.
assert (NPeano.Nat.div n 10 < n).
eauto.
eapply NPeano.Nat.div_lt.
inversion H.

*****
H1 : eq (S m) n
H0 : le (S (S (S (S (S (S (S (S (S (S O)))))))))) m
m : nat
H : gt n (S (S (S (S (S (S (S (S (S O)))))))))
nat_show : forall (n0 : nat) (_ : lt n0 n), showM@{SerTop.138}
n : nat
*****
lt O (S m)
+++++
apply Lt.lt_O_Sn.
-----
Next Obligation.
assert (NPeano.Nat.div n 10 < n).
eauto.
eapply NPeano.Nat.div_lt.

*****
H : gt n (S (S (S (S (S (S (S (S (S O)))))))))
nat_show : forall (n0 : nat) (_ : lt n0 n), showM@{SerTop.138}
n : nat
*****
lt (S O) (S (S (S (S (S (S (S (S (S (S O))))))))))
+++++
repeat constructor.
-----
Next Obligation.
assert (NPeano.Nat.div n 10 < n).

*****
H0 : lt (NPeano.Nat.div n (S (S (S (S (S (S (S (S (S (S O))))))))))) n
H : gt n (S (S (S (S (S (S (S (S (S O)))))))))
nat_show : forall (n0 : nat) (_ : lt n0 n), showM@{SerTop.138}
n : nat
*****
lt (fst (NPeano.Nat.divmod n (S (S (S (S (S (S (S (S (S O))))))))) O (S (S (S (S (S (S (S (S (S O))))))))))) n
+++++
eauto.
-----
Next Obligation.
assert (NPeano.Nat.div n 10 < n).

*****

*****

+++++
Defined.
-----
Global Instance nat_Show : Show nat := { show := nat_show }.
-----
Global Instance Show_positive : Show positive :=\n    fun x => nat_show (Pos.to_nat x).
-----
Global Instance Show_Z : Show Z :=\n    fun x =>\n      match x with\n      | Z0 => "0"%char\n      | Zpos p => show p\n      | Zneg p => "-"%char << show p\n      end.
-----
Section pair_Show.
-----
Polymorphic Definition pair_Show@{a m}\n                {A : Type@{a}} {B : Type@{a}} {AS:Show A} {BS:Show B}\n    : Show (A*B) :=\n      fun p =>\n        let (a,b) := p in\n        "("%char << show a << ","%char << show b << ")"%char.
-----
End pair_Show.
-----
End hiding_notation.
-----
