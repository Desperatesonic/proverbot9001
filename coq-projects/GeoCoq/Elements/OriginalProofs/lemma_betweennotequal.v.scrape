Require Export GeoCoq.Elements.OriginalProofs.lemma_3_6a.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral}.
-----
Lemma lemma_betweennotequal : \n   forall A B C, \n   BetS A B C ->\n   neq B C /\ neq A B /\ neq A C.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.

*****
Ax : euclidean_neutral
*****
forall (A B C : Point) (_ : BetS A B C), and (neq B C) (and (neq A B) (neq A C))
+++++
Proof.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.

*****
Ax : euclidean_neutral
*****
forall (A B C : Point) (_ : BetS A B C), and (neq B C) (and (neq A B) (neq A C))
+++++
intros.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.

*****
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
and (neq B C) (and (neq A B) (neq A C))
+++++
assert (~ eq B C).
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).

*****
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
not (eq B C)
+++++
intro.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
intro.

*****
H0 : eq B C
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
assert (BetS A C B).
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
intro.
assert (BetS A C B).

*****
H0 : eq B C
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
BetS A C B
+++++
conclude cn_equalitysub.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
intro.
assert (BetS A C B).

*****
H1 : BetS A C B
H0 : eq B C
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
intro.
assert (BetS A C B).
idtac.

*****
H1 : BetS A C B
H0 : eq B C
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
assert (BetS B C B).
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
intro.
assert (BetS A C B).
idtac.
assert (BetS B C B).

*****
H1 : BetS A C B
H0 : eq B C
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
BetS B C B
+++++
conclude lemma_3_6a.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
intro.
assert (BetS A C B).
idtac.
assert (BetS B C B).

*****
H2 : BetS B C B
H1 : BetS A C B
H0 : eq B C
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
intro.
assert (BetS A C B).
idtac.
assert (BetS B C B).
idtac.

*****
H2 : BetS B C B
H1 : BetS A C B
H0 : eq B C
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
assert (~ BetS B C B).
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
intro.
assert (BetS A C B).
idtac.
assert (BetS B C B).
idtac.
assert (~ BetS B C B).

*****
H2 : BetS B C B
H1 : BetS A C B
H0 : eq B C
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
not (BetS B C B)
+++++
conclude axiom_betweennessidentity.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
intro.
assert (BetS A C B).
idtac.
assert (BetS B C B).
idtac.
assert (~ BetS B C B).

*****
H3 : not (BetS B C B)
H2 : BetS B C B
H1 : BetS A C B
H0 : eq B C
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
intro.
assert (BetS A C B).
idtac.
assert (BetS B C B).
idtac.
assert (~ BetS B C B).
idtac.

*****
H3 : not (BetS B C B)
H2 : BetS B C B
H1 : BetS A C B
H0 : eq B C
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).

*****
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
and (neq B C) (and (neq A B) (neq A C))
+++++
assert (~ eq A B).
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).

*****
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
not (eq A B)
+++++
intro.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
intro.

*****
H1 : eq A B
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
assert (BetS B A C).
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
intro.
assert (BetS B A C).

*****
H1 : eq A B
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
BetS B A C
+++++
conclude cn_equalitysub.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
intro.
assert (BetS B A C).

*****
H2 : BetS B A C
H1 : eq A B
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
intro.
assert (BetS B A C).
idtac.

*****
H2 : BetS B A C
H1 : eq A B
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
assert (BetS A B A).
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
intro.
assert (BetS B A C).
idtac.
assert (BetS A B A).

*****
H2 : BetS B A C
H1 : eq A B
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
BetS A B A
+++++
conclude axiom_innertransitivity.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
intro.
assert (BetS B A C).
idtac.
assert (BetS A B A).

*****
H3 : BetS A B A
H2 : BetS B A C
H1 : eq A B
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
intro.
assert (BetS B A C).
idtac.
assert (BetS A B A).
idtac.

*****
H3 : BetS A B A
H2 : BetS B A C
H1 : eq A B
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
assert (~ BetS A B A).
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
intro.
assert (BetS B A C).
idtac.
assert (BetS A B A).
idtac.
assert (~ BetS A B A).

*****
H3 : BetS A B A
H2 : BetS B A C
H1 : eq A B
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
not (BetS A B A)
+++++
conclude axiom_betweennessidentity.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
intro.
assert (BetS B A C).
idtac.
assert (BetS A B A).
idtac.
assert (~ BetS A B A).

*****
H4 : not (BetS A B A)
H3 : BetS A B A
H2 : BetS B A C
H1 : eq A B
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
intro.
assert (BetS B A C).
idtac.
assert (BetS A B A).
idtac.
assert (~ BetS A B A).
idtac.

*****
H4 : not (BetS A B A)
H3 : BetS A B A
H2 : BetS B A C
H1 : eq A B
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).

*****
H1 : not (eq A B)
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
and (neq B C) (and (neq A B) (neq A C))
+++++
assert (~ eq A C).
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
assert (~ eq A C).

*****
H1 : not (eq A B)
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
not (eq A C)
+++++
intro.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
assert (~ eq A C).
intro.

*****
H2 : eq A C
H1 : not (eq A B)
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
assert (BetS A B A).
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
assert (~ eq A C).
intro.
assert (BetS A B A).

*****
H2 : eq A C
H1 : not (eq A B)
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
BetS A B A
+++++
conclude cn_equalitysub.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
assert (~ eq A C).
intro.
assert (BetS A B A).

*****
H3 : BetS A B A
H2 : eq A C
H1 : not (eq A B)
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
assert (~ eq A C).
intro.
assert (BetS A B A).
idtac.

*****
H3 : BetS A B A
H2 : eq A C
H1 : not (eq A B)
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
assert (~ BetS A B A).
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
assert (~ eq A C).
intro.
assert (BetS A B A).
idtac.
assert (~ BetS A B A).

*****
H3 : BetS A B A
H2 : eq A C
H1 : not (eq A B)
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
not (BetS A B A)
+++++
conclude axiom_betweennessidentity.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
assert (~ eq A C).
intro.
assert (BetS A B A).
idtac.
assert (~ BetS A B A).

*****
H4 : not (BetS A B A)
H3 : BetS A B A
H2 : eq A C
H1 : not (eq A B)
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
assert (~ eq A C).
intro.
assert (BetS A B A).
idtac.
assert (~ BetS A B A).
idtac.

*****
H4 : not (BetS A B A)
H3 : BetS A B A
H2 : eq A C
H1 : not (eq A B)
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).
assert (~ eq A B).
assert (~ eq A C).

*****
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq B C)
H : BetS A B C
A,B,C : Point
Ax : euclidean_neutral
*****
and (neq B C) (and (neq A B) (neq A C))
+++++
close.
-----
Lemma lemma_betweennotequal : forall A B C, BetS A B C -> neq B C /\\ neq A B /\\ neq A C.
Proof.
intros.
assert (~ eq B C).

*****

*****

+++++
Qed.
-----
End Euclid.
-----
