Require Export advanced_parallel_lemmas.
-----
Require Export geometry_tools.
-----
Theorem non_zero_denom_on_line_area : forall A B C : Point, on_line A B C -> B <> C.
-----
Theorem non_zero_denom_on_line_area : forall A B C : Point, on_line A B C -> B <> C.

*****

*****
forall (A B C : Point) (_ : on_line A B C), not (eq B C)
+++++
unfold on_line in |- *.
-----
Theorem non_zero_denom_on_line_area : forall A B C : Point, on_line A B C -> B <> C.
unfold on_line in |- *.

*****

*****
forall (A B C : Point) (_ : and (Col A B C) (not (eq B C))), not (eq B C)
+++++
Proof.
-----
Theorem non_zero_denom_on_line_area : forall A B C : Point, on_line A B C -> B <> C.
unfold on_line in |- *.
Proof.

*****

*****
forall (A B C : Point) (_ : and (Col A B C) (not (eq B C))), not (eq B C)
+++++
intuition.
-----
Theorem non_zero_denom_on_line_area : forall A B C : Point, on_line A B C -> B <> C.
unfold on_line in |- *.
Proof.
intuition.

*****

*****

+++++
Qed.
-----
Theorem non_zero_denom_inter_ll_area :\n forall A B C D E : Point, inter_ll A B C D E -> S4 B D C E <> 0.
-----
Theorem non_zero_denom_inter_ll_area : forall A B C D E : Point, inter_ll A B C D E -> S4 B D C E <> 0.

*****

*****
forall (A B C D E : Point) (_ : inter_ll A B C D E), not (eq (S4 B D C E) F0)
+++++
Proof.
-----
Theorem non_zero_denom_inter_ll_area : forall A B C D E : Point, inter_ll A B C D E -> S4 B D C E <> 0.
Proof.

*****

*****
forall (A B C D E : Point) (_ : inter_ll A B C D E), not (eq (S4 B D C E) F0)
+++++
unfold inter_ll in |- *.
-----
Theorem non_zero_denom_inter_ll_area : forall A B C D E : Point, inter_ll A B C D E -> S4 B D C E <> 0.
Proof.
unfold inter_ll in |- *.

*****

*****
forall (A B C D E : Point) (_ : and (Col A B C) (and (Col A D E) (not (parallel B C D E)))), not (eq (S4 B D C E) F0)
+++++
unfold parallel in |- *.
-----
Theorem non_zero_denom_inter_ll_area : forall A B C D E : Point, inter_ll A B C D E -> S4 B D C E <> 0.
Proof.
unfold inter_ll in |- *.
unfold parallel in |- *.

*****

*****
forall (A B C D E : Point) (_ : and (Col A B C) (and (Col A D E) (not (eq (S4 B D C E) F0)))), not (eq (S4 B D C E) F0)
+++++
intuition.
-----
Theorem non_zero_denom_inter_ll_area : forall A B C D E : Point, inter_ll A B C D E -> S4 B D C E <> 0.
Proof.
unfold inter_ll in |- *.
unfold parallel in |- *.
intuition.

*****

*****

+++++
Qed.
-----
Theorem non_zero_denom_on_parallel_d_area : forall A B C D : Point, on_parallel A B C D -> C <> D.
-----
Theorem non_zero_denom_on_parallel_d_area : forall A B C D : Point, on_parallel A B C D -> C <> D.

*****

*****
forall (A B C D : Point) (_ : on_parallel A B C D), not (eq C D)
+++++
Proof.
-----
Theorem non_zero_denom_on_parallel_d_area : forall A B C D : Point, on_parallel A B C D -> C <> D.
Proof.

*****

*****
forall (A B C D : Point) (_ : on_parallel A B C D), not (eq C D)
+++++
unfold on_parallel in |- *.
-----
Theorem non_zero_denom_on_parallel_d_area : forall A B C D : Point, on_parallel A B C D -> C <> D.
Proof.
unfold on_parallel in |- *.

*****

*****
forall (A B C D : Point) (_ : and (not (eq C D)) (parallel B A C D)), not (eq C D)
+++++
intuition.
-----
Theorem non_zero_denom_on_parallel_d_area : forall A B C D : Point, on_parallel A B C D -> C <> D.
Proof.
unfold on_parallel in |- *.
intuition.

*****

*****

+++++
Qed.
-----
Theorem non_zero_denom_on_inter_line_parallel_area :\n forall A B C D E G : Point, on_inter_line_parallel A B C D E G -> S4 E C G D <> 0.
-----
Theorem non_zero_denom_on_inter_line_parallel_area : forall A B C D E G : Point, on_inter_line_parallel A B C D E G -> S4 E C G D <> 0.

*****

*****
forall (A B C D E G : Point) (_ : on_inter_line_parallel A B C D E G), not (eq (S4 E C G D) F0)
+++++
Proof.
-----
Theorem non_zero_denom_on_inter_line_parallel_area : forall A B C D E G : Point, on_inter_line_parallel A B C D E G -> S4 E C G D <> 0.
Proof.

*****

*****
forall (A B C D E G : Point) (_ : on_inter_line_parallel A B C D E G), not (eq (S4 E C G D) F0)
+++++
unfold on_inter_line_parallel in |- *.
-----
Theorem non_zero_denom_on_inter_line_parallel_area : forall A B C D E G : Point, on_inter_line_parallel A B C D E G -> S4 E C G D <> 0.
Proof.
unfold on_inter_line_parallel in |- *.

*****

*****
forall (A B C D E G : Point) (_ : and (not (Col B E G)) (and (Col A C D) (and (parallel A B E G) (not (parallel E G C D))))), not (eq (S4 E C G D) F0)
+++++
unfold parallel in |- *.
-----
Theorem non_zero_denom_on_inter_line_parallel_area : forall A B C D E G : Point, on_inter_line_parallel A B C D E G -> S4 E C G D <> 0.
Proof.
unfold on_inter_line_parallel in |- *.
unfold parallel in |- *.

*****

*****
forall (A B C D E G : Point) (_ : and (not (Col B E G)) (and (Col A C D) (and (eq (S4 A E B G) F0) (not (eq (S4 E C G D) F0))))), not (eq (S4 E C G D) F0)
+++++
intuition.
-----
Theorem non_zero_denom_on_inter_line_parallel_area : forall A B C D E G : Point, on_inter_line_parallel A B C D E G -> S4 E C G D <> 0.
Proof.
unfold on_inter_line_parallel in |- *.
unfold parallel in |- *.
intuition.

*****

*****

+++++
Qed.
-----
Theorem non_zero_denom_on_inter_parallel_parallel_area :\n forall A B C D E G H : Point, on_inter_parallel_parallel A B C D E G H -> S4 C G D H <> 0.
-----
Theorem non_zero_denom_on_inter_parallel_parallel_area : forall A B C D E G H : Point, on_inter_parallel_parallel A B C D E G H -> S4 C G D H <> 0.

*****

*****
forall (A B C D E G H : Point) (_ : on_inter_parallel_parallel A B C D E G H), not (eq (S4 C G D H) F0)
+++++
Proof.
-----
Theorem non_zero_denom_on_inter_parallel_parallel_area : forall A B C D E G H : Point, on_inter_parallel_parallel A B C D E G H -> S4 C G D H <> 0.
Proof.

*****

*****
forall (A B C D E G H : Point) (_ : on_inter_parallel_parallel A B C D E G H), not (eq (S4 C G D H) F0)
+++++
unfold on_inter_parallel_parallel in |- *.
-----
Theorem non_zero_denom_on_inter_parallel_parallel_area : forall A B C D E G H : Point, on_inter_parallel_parallel A B C D E G H -> S4 C G D H <> 0.
Proof.
unfold on_inter_parallel_parallel in |- *.

*****

*****
forall (A B C D E G H : Point) (_ : and (not (Col B G H)) (and (parallel A B C D) (and (parallel A E G H) (not (parallel G H C D))))), not (eq (S4 C G D H) F0)
+++++
unfold parallel in |- *.
-----
Theorem non_zero_denom_on_inter_parallel_parallel_area : forall A B C D E G H : Point, on_inter_parallel_parallel A B C D E G H -> S4 C G D H <> 0.
Proof.
unfold on_inter_parallel_parallel in |- *.
unfold parallel in |- *.

*****

*****
forall (A B C D E G H : Point) (_ : and (not (Col B G H)) (and (eq (S4 A C B D) F0) (and (eq (S4 A G E H) F0) (not (eq (S4 G C H D) F0))))), not (eq (S4 C G D H) F0)
+++++
intros.
-----
Theorem non_zero_denom_on_inter_parallel_parallel_area : forall A B C D E G H : Point, on_inter_parallel_parallel A B C D E G H -> S4 C G D H <> 0.
Proof.
unfold on_inter_parallel_parallel in |- *.
unfold parallel in |- *.
intros.

*****
H0 : and (not (Col B G H))\n (and (eq (S4 A C B D) F0)\n (and (eq (S4 A G E H) F0) (not (eq (S4 G C H D) F0))))
A,B,C,D,E,G,H : Point
*****
not (eq (S4 C G D H) F0)
+++++
assert (S4 G C H D = - S4 C G D H).
-----
Theorem non_zero_denom_on_inter_parallel_parallel_area : forall A B C D E G H : Point, on_inter_parallel_parallel A B C D E G H -> S4 C G D H <> 0.
Proof.
unfold on_inter_parallel_parallel in |- *.
unfold parallel in |- *.
intros.
assert (S4 G C H D = - S4 C G D H).

*****
H0 : and (not (Col B G H))\n (and (eq (S4 A C B D) F0)\n (and (eq (S4 A G E H) F0) (not (eq (S4 G C H D) F0))))
A,B,C,D,E,G,H : Point
*****
eq (S4 G C H D) (Fopp (S4 C G D H))
+++++
Geometry.
-----
Theorem non_zero_denom_on_inter_parallel_parallel_area : forall A B C D E G H : Point, on_inter_parallel_parallel A B C D E G H -> S4 C G D H <> 0.
Proof.
unfold on_inter_parallel_parallel in |- *.
unfold parallel in |- *.
intros.
assert (S4 G C H D = - S4 C G D H).

*****
H1 : eq (S4 G C H D) (Fopp (S4 C G D H))
H0 : and (not (Col B G H))\n (and (eq (S4 A C B D) F0)\n (and (eq (S4 A G E H) F0) (not (eq (S4 G C H D) F0))))
A,B,C,D,E,G,H : Point
*****
not (eq (S4 C G D H) F0)
+++++
Geometry.
-----
Theorem non_zero_denom_on_inter_parallel_parallel_area : forall A B C D E G H : Point, on_inter_parallel_parallel A B C D E G H -> S4 C G D H <> 0.
Proof.
unfold on_inter_parallel_parallel in |- *.
unfold parallel in |- *.
intros.
assert (S4 G C H D = - S4 C G D H).
Geometry.

*****
H1 : eq (S4 G C H D) (Fopp (S4 C G D H))
H0 : and (not (Col B G H))\n (and (eq (S4 A C B D) F0)\n (and (eq (S4 A G E H) F0) (not (eq (S4 G C H D) F0))))
A,B,C,D,E,G,H : Point
*****
not (eq (S4 C G D H) F0)
+++++
rewrite H1 in H0.
-----
Theorem non_zero_denom_on_inter_parallel_parallel_area : forall A B C D E G H : Point, on_inter_parallel_parallel A B C D E G H -> S4 C G D H <> 0.
Proof.
unfold on_inter_parallel_parallel in |- *.
unfold parallel in |- *.
intros.
assert (S4 G C H D = - S4 C G D H).
Geometry.
rewrite H1 in H0.

*****
H1 : eq (S4 G C H D) (Fopp (S4 C G D H))
H0 : and (not (Col B G H))\n (and (eq (S4 A C B D) F0)\n (and (eq (S4 A G E H) F0) (not (eq (Fopp (S4 C G D H)) F0))))
A,B,C,D,E,G,H : Point
*****
not (eq (S4 C G D H) F0)
+++++
intuition.
-----
Theorem non_zero_denom_on_inter_parallel_parallel_area : forall A B C D E G H : Point, on_inter_parallel_parallel A B C D E G H -> S4 C G D H <> 0.
Proof.
unfold on_inter_parallel_parallel in |- *.
unfold parallel in |- *.
intros.
assert (S4 G C H D = - S4 C G D H).

*****

*****

+++++
Qed.
-----
Theorem elim_area_on_line_d :\n forall (A B P Q Y : Point) (lambda : F),\n on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.

*****

*****
forall (A B P Q Y : Point) (lambda : F) (_ : on_line_d Y P Q lambda), eq (S A B Y) (Fplus (Fmult lambda (S A B Q)) (Fmult (Fminus F1 lambda) (S A B P)))
+++++
Proof.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.

*****

*****
forall (A B P Q Y : Point) (lambda : F) (_ : on_line_d Y P Q lambda), eq (S A B Y) (Fplus (Fmult lambda (S A B Q)) (Fmult (Fminus F1 lambda) (S A B P)))
+++++
intros.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.

*****
H : on_line_d Y P Q lambda
lambda : F
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (Fmult lambda (S A B Q)) (Fmult (Fminus F1 lambda) (S A B P)))
+++++
unfold on_line_d in *.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.

*****
H : and (Col Y P Q)\n (and (not (eq P Q)) (eq (DSeg P Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (Fmult lambda (S A B Q)) (Fmult (Fminus F1 lambda) (S A B P)))
+++++
DecompAndAll.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.

*****
H3 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (Fmult lambda (S A B Q)) (Fmult (Fminus F1 lambda) (S A B P)))
+++++
RewriteVar lambda H3.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.

*****
H3 : eq lambda (Fdiv (DSeg P Y) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S A B Q)) (Fmult (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (S A B P)))
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.

*****
H3 : eq lambda (Fdiv (DSeg P Y) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S A B Q)) (Fmult (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (S A B P)))
+++++
clear H3.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.

*****
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S A B Q)) (Fmult (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (S A B P)))
+++++
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).

*****
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (Fdiv (DSeg Y Q) (DSeg P Q))
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.

*****
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (Fdiv (DSeg Y Q) (DSeg P Q))
+++++
assert (Y ** P + P ** Q = Y ** Q).
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
assert (Y ** P + P ** Q = Y ** Q).

*****
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (Fplus (DSeg Y P) (DSeg P Q)) (DSeg Y Q)
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
assert (Y ** P + P ** Q = Y ** Q).

*****
H1 : eq (Fplus (DSeg Y P) (DSeg P Q)) (DSeg Y Q)
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (Fdiv (DSeg Y Q) (DSeg P Q))
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
assert (Y ** P + P ** Q = Y ** Q).
Geometry.

*****
H1 : eq (Fplus (DSeg Y P) (DSeg P Q)) (DSeg Y Q)
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (Fdiv (DSeg Y Q) (DSeg P Q))
+++++
rewrite <- H1.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
assert (Y ** P + P ** Q = Y ** Q).
Geometry.
rewrite <- H1.

*****
H1 : eq (Fplus (DSeg Y P) (DSeg P Q)) (DSeg Y Q)
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (Fdiv (Fplus (DSeg Y P) (DSeg P Q)) (DSeg P Q))
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
assert (Y ** P + P ** Q = Y ** Q).
Geometry.
rewrite <- H1.
Geometry.

*****
H1 : eq (Fplus (DSeg Y P) (DSeg P Q)) (DSeg Y Q)
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (Fdiv (Fplus (DSeg Y P) (DSeg P Q)) (DSeg P Q))
+++++
assert (P ** Y = - Y ** P).
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
assert (Y ** P + P ** Q = Y ** Q).
Geometry.
rewrite <- H1.
Geometry.
assert (P ** Y = - Y ** P).

*****
H1 : eq (Fplus (DSeg Y P) (DSeg P Q)) (DSeg Y Q)
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (DSeg P Y) (Fopp (DSeg Y P))
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
assert (Y ** P + P ** Q = Y ** Q).
Geometry.
rewrite <- H1.
Geometry.
assert (P ** Y = - Y ** P).

*****
H3 : eq (DSeg P Y) (Fopp (DSeg Y P))
H1 : eq (Fplus (DSeg Y P) (DSeg P Q)) (DSeg Y Q)
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (Fdiv (Fplus (DSeg Y P) (DSeg P Q)) (DSeg P Q))
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
assert (Y ** P + P ** Q = Y ** Q).
Geometry.
rewrite <- H1.
Geometry.
assert (P ** Y = - Y ** P).
Geometry.

*****
H3 : eq (DSeg P Y) (Fopp (DSeg Y P))
H1 : eq (Fplus (DSeg Y P) (DSeg P Q)) (DSeg Y Q)
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (Fdiv (Fplus (DSeg Y P) (DSeg P Q)) (DSeg P Q))
+++++
rewrite H3.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
assert (Y ** P + P ** Q = Y ** Q).
Geometry.
rewrite <- H1.
Geometry.
assert (P ** Y = - Y ** P).
Geometry.
rewrite H3.

*****
H3 : eq (DSeg P Y) (Fopp (DSeg Y P))
H1 : eq (Fplus (DSeg Y P) (DSeg P Q)) (DSeg Y Q)
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (Fminus F1 (Fdiv (Fopp (DSeg Y P)) (DSeg P Q))) (Fdiv (Fplus (DSeg Y P) (DSeg P Q)) (DSeg P Q))
+++++
field.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
assert (Y ** P + P ** Q = Y ** Q).
Geometry.
rewrite <- H1.
Geometry.
assert (P ** Y = - Y ** P).
Geometry.
rewrite H3.
field.

*****
H3 : eq (DSeg P Y) (Fopp (DSeg Y P))
H1 : eq (Fplus (DSeg Y P) (DSeg P Q)) (DSeg Y Q)
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
not (eq (DSeg P Q) F0)
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).

*****
H1 : eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q)))\n (Fdiv (DSeg Y Q) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S A B Q)) (Fmult (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (S A B P)))
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.

*****
H1 : eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q)))\n (Fdiv (DSeg Y Q) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S A B Q)) (Fmult (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (S A B P)))
+++++
rewrite H1.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
rewrite H1.

*****
H1 : eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q)))\n (Fdiv (DSeg Y Q) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S A B Q)) (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S A B P)))
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
rewrite H1.
Geometry.

*****
H1 : eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q)))\n (Fdiv (DSeg Y Q) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S A B Q)) (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S A B P)))
+++++
replace (S A B Y) with (S Y A B).
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
rewrite H1.
Geometry.
replace (S A B Y) with (S Y A B).

*****
H1 : eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q)))\n (Fdiv (DSeg Y Q) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S Y A B) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S A B Q)) (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S A B P)))
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
rewrite H1.
Geometry.
replace (S A B Y) with (S Y A B).
Geometry.

*****
H1 : eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q)))\n (Fdiv (DSeg Y Q) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S Y A B) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S A B Q)) (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S A B P)))
+++++
replace (S A B Q) with (S Q A B).
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
rewrite H1.
Geometry.
replace (S A B Y) with (S Y A B).
Geometry.
replace (S A B Q) with (S Q A B).

*****
H1 : eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q)))\n (Fdiv (DSeg Y Q) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S Y A B) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B)) (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S A B P)))
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
rewrite H1.
Geometry.
replace (S A B Y) with (S Y A B).
Geometry.
replace (S A B Q) with (S Q A B).
Geometry.

*****
H1 : eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q)))\n (Fdiv (DSeg Y Q) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S Y A B) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B)) (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S A B P)))
+++++
replace (S A B P) with (S P A B).
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
rewrite H1.
Geometry.
replace (S A B Y) with (S Y A B).
Geometry.
replace (S A B Q) with (S Q A B).
Geometry.
replace (S A B P) with (S P A B).

*****
H1 : eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q)))\n (Fdiv (DSeg Y Q) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S Y A B) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B)) (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
rewrite H1.
Geometry.
replace (S A B Y) with (S Y A B).
Geometry.
replace (S A B Q) with (S Q A B).
Geometry.
replace (S A B P) with (S P A B).
Geometry.

*****
H1 : eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q)))\n (Fdiv (DSeg Y Q) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S Y A B) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B)) (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
+++++
apply l2_9.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
rewrite H1.
Geometry.
replace (S A B Y) with (S Y A B).
Geometry.
replace (S A B Q) with (S Q A B).
Geometry.
replace (S A B P) with (S P A B).
Geometry.
apply l2_9.

*****
H1 : eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q)))\n (Fdiv (DSeg Y Q) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
not (eq P Q)
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
rewrite H1.
Geometry.
replace (S A B Y) with (S Y A B).
Geometry.
replace (S A B Q) with (S Q A B).
Geometry.
replace (S A B P) with (S P A B).
Geometry.
apply l2_9.

*****
H1 : eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q)))\n (Fdiv (DSeg Y Q) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
Col Y P Q
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
rewrite H1.
Geometry.
replace (S A B Y) with (S Y A B).
Geometry.
replace (S A B Q) with (S Q A B).
Geometry.
replace (S A B P) with (S P A B).

*****
H1 : eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q)))\n (Fdiv (DSeg Y Q) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S P A B) (S A B P)
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
rewrite H1.
Geometry.
replace (S A B Y) with (S Y A B).
Geometry.
replace (S A B Q) with (S Q A B).

*****
H1 : eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q)))\n (Fdiv (DSeg Y Q) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S Q A B) (S A B Q)
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.
Geometry.
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q).
Geometry.
rewrite H1.
Geometry.
replace (S A B Y) with (S Y A B).

*****
H1 : eq (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q)))\n (Fdiv (DSeg Y Q) (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
eq (S Y A B) (S A B Y)
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.

*****
H3 : eq (DSeg P Y) (Fmult lambda (DSeg P Q))
H2 : not (eq P Q)
H0 : Col Y P Q
lambda : F
A,B,P,Q,Y : Point
*****
not (eq (DSeg P Q) F0)
+++++
Geometry.
-----
Theorem elim_area_on_line_d : forall (A B P Q Y : Point) (lambda : F), on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3.

*****

*****

+++++
Qed.
-----
Theorem elim_area_on_line :\n forall A B P Q Y : Point,\n on_line Y P Q ->\n S A B Y = P ** Y / P ** Q * S A B Q + (1 - P ** Y / P ** Q) * S A B P.
-----
Theorem elim_area_on_line : forall A B P Q Y : Point, on_line Y P Q -> S A B Y = P ** Y / P ** Q * S A B Q + (1 - P ** Y / P ** Q) * S A B P.

*****

*****
forall (A B P Q Y : Point) (_ : on_line Y P Q), eq (S A B Y) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S A B Q)) (Fmult (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (S A B P)))
+++++
Proof.
-----
Theorem elim_area_on_line : forall A B P Q Y : Point, on_line Y P Q -> S A B Y = P ** Y / P ** Q * S A B Q + (1 - P ** Y / P ** Q) * S A B P.
Proof.

*****

*****
forall (A B P Q Y : Point) (_ : on_line Y P Q), eq (S A B Y) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S A B Q)) (Fmult (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (S A B P)))
+++++
intros.
-----
Theorem elim_area_on_line : forall A B P Q Y : Point, on_line Y P Q -> S A B Y = P ** Y / P ** Q * S A B Q + (1 - P ** Y / P ** Q) * S A B P.
Proof.
intros.

*****
H : on_line Y P Q
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S A B Q)) (Fmult (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (S A B P)))
+++++
assert (on_line_d Y P Q (P ** Y / P ** Q)).
-----
Theorem elim_area_on_line : forall A B P Q Y : Point, on_line Y P Q -> S A B Y = P ** Y / P ** Q * S A B Q + (1 - P ** Y / P ** Q) * S A B P.
Proof.
intros.
assert (on_line_d Y P Q (P ** Y / P ** Q)).

*****
H : on_line Y P Q
A,B,P,Q,Y : Point
*****
on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
+++++
apply on_line_to_on_line_d.
-----
Theorem elim_area_on_line : forall A B P Q Y : Point, on_line Y P Q -> S A B Y = P ** Y / P ** Q * S A B Q + (1 - P ** Y / P ** Q) * S A B P.
Proof.
intros.
assert (on_line_d Y P Q (P ** Y / P ** Q)).
apply on_line_to_on_line_d.

*****
H : on_line Y P Q
A,B,P,Q,Y : Point
*****
on_line Y P Q
+++++
Geometry.
-----
Theorem elim_area_on_line : forall A B P Q Y : Point, on_line Y P Q -> S A B Y = P ** Y / P ** Q * S A B Q + (1 - P ** Y / P ** Q) * S A B P.
Proof.
intros.
assert (on_line_d Y P Q (P ** Y / P ** Q)).

*****
H0 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H : on_line Y P Q
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S A B Q)) (Fmult (Fminus F1 (Fdiv (DSeg P Y) (DSeg P Q))) (S A B P)))
+++++
apply elim_area_on_line_d.
-----
Theorem elim_area_on_line : forall A B P Q Y : Point, on_line Y P Q -> S A B Y = P ** Y / P ** Q * S A B Q + (1 - P ** Y / P ** Q) * S A B P.
Proof.
intros.
assert (on_line_d Y P Q (P ** Y / P ** Q)).
apply elim_area_on_line_d.

*****
H0 : on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
H : on_line Y P Q
A,B,P,Q,Y : Point
*****
on_line_d Y P Q (Fdiv (DSeg P Y) (DSeg P Q))
+++++
Geometry.
-----
Theorem elim_area_on_line : forall A B P Q Y : Point, on_line Y P Q -> S A B Y = P ** Y / P ** Q * S A B Q + (1 - P ** Y / P ** Q) * S A B P.
Proof.
intros.
assert (on_line_d Y P Q (P ** Y / P ** Q)).

*****

*****

+++++
Qed.
-----
Theorem elim_area_inter_ll :\n forall A B P Q U V Y : Point,\n inter_ll Y P Q U V ->\n S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).

*****

*****
forall (A B P Q U V Y : Point) (_ : inter_ll Y P Q U V), eq (S A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S A B Q)) (Fmult (S Q V U) (S A B P))))
+++++
Proof.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.

*****

*****
forall (A B P Q U V Y : Point) (_ : inter_ll Y P Q U V), eq (S A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S A B Q)) (Fmult (S Q V U) (S A B P))))
+++++
intros.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.

*****
H : inter_ll Y P Q U V
A,B,P,Q,U,V,Y : Point
*****
eq (S A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S A B Q)) (Fmult (S Q V U) (S A B P))))
+++++
unfold inter_ll in *.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.

*****
H : and (Col Y P Q) (and (Col Y U V) (not (parallel P Q U V)))
A,B,P,Q,U,V,Y : Point
*****
eq (S A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S A B Q)) (Fmult (S Q V U) (S A B P))))
+++++
DecompAndAll.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.

*****
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (S A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S A B Q)) (Fmult (S Q V U) (S A B P))))
+++++
assert (P <> Q).
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).

*****
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
not (eq P Q)
+++++
eauto with Geom.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (S A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S A B Q)) (Fmult (S Q V U) (S A B P))))
+++++
eauto with Geom.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (S A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S A B Q)) (Fmult (S Q V U) (S A B P))))
+++++
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (S Y A B) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B)) (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
+++++
Geometry.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (S Y A B) (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B)) (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
+++++
apply l2_9.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
apply l2_9.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
not (eq P Q)
+++++
Geometry.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
apply l2_9.

*****
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
Col Y P Q
+++++
Geometry.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).

*****
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (S A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S A B Q)) (Fmult (S Q V U) (S A B P))))
+++++
Geometry.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.

*****
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (parallel P Q U V)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (S A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S A B Q)) (Fmult (S Q V U) (S A B P))))
+++++
unfold parallel in H3.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.

*****
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (S A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S A B Q)) (Fmult (S Q V U) (S A B P))))
+++++
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).

*****
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
+++++
Geometry.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).

*****
H4 : eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (S A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S A B Q)) (Fmult (S Q V U) (S A B P))))
+++++
Geometry.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).
Geometry.

*****
H4 : eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (S A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S A B Q)) (Fmult (S Q V U) (S A B P))))
+++++
assert (Q ** Y / P ** Q = S Q U V / S4 P U Q V).
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).
Geometry.
assert (Q ** Y / P ** Q = S Q U V / S4 P U Q V).

*****
H4 : eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fdiv (DSeg Q Y) (DSeg P Q)) (Fdiv (S Q U V) (S4 P U Q V))
+++++
Geometry.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).
Geometry.
assert (Q ** Y / P ** Q = S Q U V / S4 P U Q V).

*****
H5 : eq (Fdiv (DSeg Q Y) (DSeg P Q)) (Fdiv (S Q U V) (S4 P U Q V))
H4 : eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (S A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S A B Q)) (Fmult (S Q V U) (S A B P))))
+++++
Geometry.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).
Geometry.
assert (Q ** Y / P ** Q = S Q U V / S4 P U Q V).
Geometry.

*****
H5 : eq (Fdiv (DSeg Q Y) (DSeg P Q)) (Fdiv (S Q U V) (S4 P U Q V))
H4 : eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (S A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S A B Q)) (Fmult (S Q V U) (S A B P))))
+++++
replace (Q**Y) with (- Y**Q) in H5.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).
Geometry.
assert (Q ** Y / P ** Q = S Q U V / S4 P U Q V).
Geometry.
replace (Q**Y) with (- Y**Q) in H5.

*****
H5 : eq (Fdiv (Fopp (DSeg Y Q)) (DSeg P Q)) (Fdiv (S Q U V) (S4 P U Q V))
H4 : eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (S A B Y) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S A B Q)) (Fmult (S Q V U) (S A B P))))
+++++
uniformize_signed_areas.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).
Geometry.
assert (Q ** Y / P ** Q = S Q U V / S4 P U Q V).
Geometry.
replace (Q**Y) with (- Y**Q) in H5.
uniformize_signed_areas.

*****
H5 : eq (Fdiv (Fopp (DSeg Y Q)) (DSeg P Q)) (Fdiv (S Q U V) (S4 P U Q V))
H4 : eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (S Y A B) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S Q A B)) (Fmult (Fopp (S Q U V)) (S P A B))))
+++++
IsoleVar (Y ** Q) H5.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).
Geometry.
assert (Q ** Y / P ** Q = S Q U V / S4 P U Q V).
Geometry.
replace (Q**Y) with (- Y**Q) in H5.
uniformize_signed_areas.
IsoleVar (Y ** Q) H5.

*****
H5 : eq (DSeg Y Q) (Fopp (Fmult (DSeg P Q) (Fdiv (S Q U V) (S4 P U Q V))))
H6 : not (eq (DSeg P Q) F0)
H4 : eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (S Y A B) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S Q A B)) (Fmult (Fopp (S Q U V)) (S P A B))))
+++++
Geometry.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).
Geometry.
assert (Q ** Y / P ** Q = S Q U V / S4 P U Q V).
Geometry.
replace (Q**Y) with (- Y**Q) in H5.
uniformize_signed_areas.
IsoleVar (Y ** Q) H5.
Geometry.

*****
H5 : eq (DSeg Y Q) (Fopp (Fmult (DSeg P Q) (Fdiv (S Q U V) (S4 P U Q V))))
H6 : not (eq (DSeg P Q) F0)
H4 : eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (S Y A B) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S Q A B)) (Fmult (Fopp (S Q U V)) (S P A B))))
+++++
rewrite H1.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).
Geometry.
assert (Q ** Y / P ** Q = S Q U V / S4 P U Q V).
Geometry.
replace (Q**Y) with (- Y**Q) in H5.
uniformize_signed_areas.
IsoleVar (Y ** Q) H5.
Geometry.
rewrite H1.

*****
H5 : eq (DSeg Y Q) (Fopp (Fmult (DSeg P Q) (Fdiv (S Q U V) (S4 P U Q V))))
H6 : not (eq (DSeg P Q) F0)
H4 : eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B)) (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B))) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S Q A B)) (Fmult (Fopp (S Q U V)) (S P A B))))
+++++
rewrite H4.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).
Geometry.
assert (Q ** Y / P ** Q = S Q U V / S4 P U Q V).
Geometry.
replace (Q**Y) with (- Y**Q) in H5.
uniformize_signed_areas.
IsoleVar (Y ** Q) H5.
Geometry.
rewrite H1.
rewrite H4.

*****
H5 : eq (DSeg Y Q) (Fopp (Fmult (DSeg P Q) (Fdiv (S Q U V) (S4 P U Q V))))
H6 : not (eq (DSeg P Q) F0)
H4 : eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (S P U V) (S4 P U Q V)) (S Q A B)) (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B))) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S Q A B)) (Fmult (Fopp (S Q U V)) (S P A B))))
+++++
rewrite H5.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).
Geometry.
assert (Q ** Y / P ** Q = S Q U V / S4 P U Q V).
Geometry.
replace (Q**Y) with (- Y**Q) in H5.
uniformize_signed_areas.
IsoleVar (Y ** Q) H5.
Geometry.
rewrite H1.
rewrite H4.
rewrite H5.

*****
H5 : eq (DSeg Y Q) (Fopp (Fmult (DSeg P Q) (Fdiv (S Q U V) (S4 P U Q V))))
H6 : not (eq (DSeg P Q) F0)
H4 : eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fplus (Fmult (Fdiv (S P U V) (S4 P U Q V)) (S Q A B)) (Fmult (Fdiv (Fopp (Fmult (DSeg P Q) (Fdiv (S Q U V) (S4 P U Q V)))) (DSeg P Q)) (S P A B))) (Fmult (Fdiv F1 (S4 P U Q V)) (Fplus (Fmult (S P U V) (S Q A B)) (Fmult (Fopp (S Q U V)) (S P A B))))
+++++
field.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).
Geometry.
assert (Q ** Y / P ** Q = S Q U V / S4 P U Q V).
Geometry.
replace (Q**Y) with (- Y**Q) in H5.
uniformize_signed_areas.
IsoleVar (Y ** Q) H5.
Geometry.
rewrite H1.
rewrite H4.
rewrite H5.
field.

*****
H5 : eq (DSeg Y Q) (Fopp (Fmult (DSeg P Q) (Fdiv (S Q U V) (S4 P U Q V))))
H6 : not (eq (DSeg P Q) F0)
H4 : eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
and (not (eq (S4 P U Q V) F0)) (not (eq (DSeg P Q) F0))
+++++
Geometry.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).
Geometry.
assert (Q ** Y / P ** Q = S Q U V / S4 P U Q V).
Geometry.
replace (Q**Y) with (- Y**Q) in H5.
uniformize_signed_areas.
IsoleVar (Y ** Q) H5.

*****
H5 : eq (Fdiv (Fopp (DSeg Y Q)) (DSeg P Q)) (Fdiv (S Q U V) (S4 P U Q V))
H4 : eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
not (eq (DSeg P Q) F0)
+++++
Geometry.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).
Geometry.
assert (Q ** Y / P ** Q = S Q U V / S4 P U Q V).
Geometry.
replace (Q**Y) with (- Y**Q) in H5.

*****
H5 : eq (Fdiv (DSeg Q Y) (DSeg P Q)) (Fdiv (S Q U V) (S4 P U Q V))
H4 : eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (Fopp (DSeg Y Q)) (DSeg Q Y)
+++++
symmetry.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).
eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B).
Geometry.
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V).
Geometry.
assert (Q ** Y / P ** Q = S Q U V / S4 P U Q V).
Geometry.
replace (Q**Y) with (- Y**Q) in H5.
symmetry.

*****
H5 : eq (Fdiv (DSeg Q Y) (DSeg P Q)) (Fdiv (S Q U V) (S4 P U Q V))
H4 : eq (Fdiv (DSeg P Y) (DSeg P Q)) (Fdiv (S P U V) (S4 P U Q V))
H1 : eq (S Y A B)\n (Fplus (Fmult (Fdiv (DSeg P Y) (DSeg P Q)) (S Q A B))\n (Fmult (Fdiv (DSeg Y Q) (DSeg P Q)) (S P A B)))
H : not (eq P Q)
H3 : not (eq (S4 P U Q V) F0)
H2 : Col Y U V
H0 : Col Y P Q
A,B,P,Q,U,V,Y : Point
*****
eq (DSeg Q Y) (Fopp (DSeg Y Q))
+++++
Geometry.
-----
Theorem elim_area_inter_ll : forall A B P Q U V Y : Point, inter_ll Y P Q U V -> S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P).
Proof.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q).

*****

*****

+++++
Qed.
-----
Theorem elim_area_on_parallel_d :\n forall (A B P Q R Y : Point) (lambda : F),\n on_parallel_d Y R P Q lambda -> \n S A B Y = S A B R + lambda * S4 A P B Q.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.

*****

*****
forall (A B P Q R Y : Point) (lambda : F) (_ : on_parallel_d Y R P Q lambda), eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
Proof.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.

*****

*****
forall (A B P Q R Y : Point) (lambda : F) (_ : on_parallel_d Y R P Q lambda), eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
intros.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.

*****
H : on_parallel_d Y R P Q lambda
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
unfold on_parallel_d in H.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.

*****
H : and (not (eq P Q))\n (and (parallel Y R P Q) (eq (DSeg R Y) (Fmult lambda (DSeg P Q))))
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
DecompAndAll.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.

*****
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
cases_equality R Y.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.

*****
H : eq R Y
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
subst R.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
subst R.

*****
H2 : parallel Y Y P Q
H3 : eq (DSeg Y Y) (Fmult lambda (DSeg P Q))
H0 : not (eq P Q)
lambda : F
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (S A B Y) (Fmult lambda (S4 A P B Q)))
+++++
basic_simpl.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
subst R.
basic_simpl.

*****
H2 : parallel Y Y P Q
H3 : eq F0 (Fmult lambda (DSeg P Q))
H0 : not (eq P Q)
lambda : F
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (S A B Y) (Fmult lambda (S4 A P B Q)))
+++++
IsoleVar lambda H3.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
subst R.
basic_simpl.
IsoleVar lambda H3.

*****
H3 : eq lambda (Fdiv F0 (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : parallel Y Y P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (S A B Y) (Fmult lambda (S4 A P B Q)))
+++++
Geometry.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
subst R.
basic_simpl.
IsoleVar lambda H3.
Geometry.

*****
H3 : eq lambda (Fdiv F0 (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : parallel Y Y P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (S A B Y) (Fmult lambda (S4 A P B Q)))
+++++
assert (lambda = 0).
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
subst R.
basic_simpl.
IsoleVar lambda H3.
Geometry.
assert (lambda = 0).

*****
H3 : eq lambda (Fdiv F0 (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : parallel Y Y P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,Y : Point
*****
eq lambda F0
+++++
rewrite H3.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
subst R.
basic_simpl.
IsoleVar lambda H3.
Geometry.
assert (lambda = 0).
rewrite H3.

*****
H3 : eq lambda (Fdiv F0 (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : parallel Y Y P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,Y : Point
*****
eq (Fdiv F0 (DSeg P Q)) F0
+++++
field.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
subst R.
basic_simpl.
IsoleVar lambda H3.
Geometry.
assert (lambda = 0).
rewrite H3.
field.

*****
H3 : eq lambda (Fdiv F0 (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : parallel Y Y P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,Y : Point
*****
not (eq (DSeg P Q) F0)
+++++
Geometry.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
subst R.
basic_simpl.
IsoleVar lambda H3.
Geometry.
assert (lambda = 0).

*****
H1 : eq lambda F0
H3 : eq lambda (Fdiv F0 (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : parallel Y Y P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (S A B Y) (Fmult lambda (S4 A P B Q)))
+++++
rewrite H1.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
subst R.
basic_simpl.
IsoleVar lambda H3.
Geometry.
assert (lambda = 0).
rewrite H1.

*****
H1 : eq lambda F0
H3 : eq lambda (Fdiv F0 (DSeg P Q))
H : not (eq (DSeg P Q) F0)
H2 : parallel Y Y P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,Y : Point
*****
eq (S A B Y) (Fplus (S A B Y) (Fmult F0 (S4 A P B Q)))
+++++
ring.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
subst R.
basic_simpl.
IsoleVar lambda H3.

*****
H2 : parallel Y Y P Q
H3 : eq F0 (Fmult lambda (DSeg P Q))
H0 : not (eq P Q)
lambda : F
A,B,P,Q,Y : Point
*****
not (eq (DSeg P Q) F0)
+++++
Geometry.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.

*****
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
assert (parallel R Y P Q).
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).

*****
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
parallel R Y P Q
+++++
Geometry.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).

*****
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
Geometry.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.

*****
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).

*****
Th : ex\n (fun Y0 : Point =>\n and (Col Y0 R Y)\n (and (eq (DSeg R Y0) (DSeg P Q)) (weak_3_parallelogram R Y0 Q P)))
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
Geometry.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.

*****
Th : ex\n (fun Y0 : Point =>\n and (Col Y0 R Y)\n (and (eq (DSeg R Y0) (DSeg P Q)) (weak_3_parallelogram R Y0 Q P)))
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
DecompExAnd Th T.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.

*****
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
assert (R <> T).
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).

*****
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
not (eq R T)
+++++
unfold not.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
unfold not.

*****
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
forall _ : eq R T, False
+++++
intro.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
unfold not.
intro.

*****
H4 : eq R T
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
False
+++++
subst R.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
unfold not.
intro.
subst R.

*****
H2 : parallel Y T P Q
H3 : eq (DSeg T Y) (Fmult lambda (DSeg P Q))
H : not (eq T Y)
H1 : parallel T Y P Q
H5 : Col T T Y
H7 : eq (DSeg T T) (DSeg P Q)
H8 : weak_3_parallelogram T T Q P
T : Point
H0 : not (eq P Q)
lambda : F
A,B,P,Q,Y : Point
*****
False
+++++
basic_simpl.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
unfold not.
intro.
subst R.
basic_simpl.

*****
H2 : parallel Y T P Q
H3 : eq (DSeg T Y) (Fmult lambda (DSeg P Q))
H : not (eq T Y)
H1 : parallel T Y P Q
H5 : Col T T Y
H7 : eq F0 (DSeg P Q)
H8 : weak_3_parallelogram T T Q P
T : Point
H0 : not (eq P Q)
lambda : F
A,B,P,Q,Y : Point
*****
False
+++++
Geometry.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).

*****
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).

*****
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (Fmult lambda (S A B T)) (Fmult (Fminus F1 lambda) (S A B R)))
+++++
apply elim_area_on_line_d.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).
apply elim_area_on_line_d.

*****
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
on_line_d Y R T lambda
+++++
rewrite <- H7 in H3.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).
apply elim_area_on_line_d.
rewrite <- H7 in H3.

*****
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg R T))
T : Point
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
on_line_d Y R T lambda
+++++
unfold on_line_d in *.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).
apply elim_area_on_line_d.
rewrite <- H7 in H3.
unfold on_line_d in *.

*****
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg R T))
T : Point
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
and (Col Y R T) (and (not (eq R T)) (eq (DSeg R Y) (Fmult lambda (DSeg R T))))
+++++
Geometry.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).

*****
H6 : eq (S A B Y)\n (Fplus (Fmult lambda (S A B T)) (Fmult (Fminus F1 lambda) (S A B R)))
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
assert (S R A B + S Q A B = S T A B + S P A B).
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).
assert (S R A B + S Q A B = S T A B + S P A B).

*****
H6 : eq (S A B Y)\n (Fplus (Fmult lambda (S A B T)) (Fmult (Fminus F1 lambda) (S A B R)))
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (Fplus (S R A B) (S Q A B)) (Fplus (S T A B) (S P A B))
+++++
apply l2_11a_strong_strong_strong.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).
assert (S R A B + S Q A B = S T A B + S P A B).
apply l2_11a_strong_strong_strong.

*****
H6 : eq (S A B Y)\n (Fplus (Fmult lambda (S A B T)) (Fmult (Fminus F1 lambda) (S A B R)))
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
weak_3_parallelogram R T Q P
+++++
Geometry.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).
assert (S R A B + S Q A B = S T A B + S P A B).

*****
H9 : eq (Fplus (S R A B) (S Q A B)) (Fplus (S T A B) (S P A B))
H6 : eq (S A B Y)\n (Fplus (Fmult lambda (S A B T)) (Fmult (Fminus F1 lambda) (S A B R)))
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
IsoleVar (S T A B) H9.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).
assert (S R A B + S Q A B = S T A B + S P A B).
IsoleVar (S T A B) H9.

*****
H9 : eq (S T A B) (Fminus (Fplus (S R A B) (S Q A B)) (S P A B))
H6 : eq (S A B Y)\n (Fplus (Fmult lambda (S A B T)) (Fmult (Fminus F1 lambda) (S A B R)))
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
uniformize_signed_areas.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).
assert (S R A B + S Q A B = S T A B + S P A B).
IsoleVar (S T A B) H9.
uniformize_signed_areas.

*****
H9 : eq (S A B T) (Fminus (Fplus (S A B R) (S Q A B)) (S P A B))
H6 : eq (S A B Y)\n (Fplus (Fmult lambda (S A B T)) (Fmult (Fminus F1 lambda) (S A B R)))
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
rewrite H9 in H6.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).
assert (S R A B + S Q A B = S T A B + S P A B).
IsoleVar (S T A B) H9.
uniformize_signed_areas.
rewrite H9 in H6.

*****
H9 : eq (S A B T) (Fminus (Fplus (S A B R) (S Q A B)) (S P A B))
H6 : eq (S A B Y)\n (Fplus (Fmult lambda (Fminus (Fplus (S A B R) (S Q A B)) (S P A B)))\n (Fmult (Fminus F1 lambda) (S A B R)))
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (S4 A P B Q)))
+++++
replace (S4 A P B Q) with (S Q A B - S P A B).
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).
assert (S R A B + S Q A B = S T A B + S P A B).
IsoleVar (S T A B) H9.
uniformize_signed_areas.
rewrite H9 in H6.
replace (S4 A P B Q) with (S Q A B - S P A B).

*****
H9 : eq (S A B T) (Fminus (Fplus (S A B R) (S Q A B)) (S P A B))
H6 : eq (S A B Y)\n (Fplus (Fmult lambda (Fminus (Fplus (S A B R) (S Q A B)) (S P A B)))\n (Fmult (Fminus F1 lambda) (S A B R)))
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult lambda (Fminus (S Q A B) (S P A B))))
+++++
rewrite H6.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).
assert (S R A B + S Q A B = S T A B + S P A B).
IsoleVar (S T A B) H9.
uniformize_signed_areas.
rewrite H9 in H6.
replace (S4 A P B Q) with (S Q A B - S P A B).
rewrite H6.

*****
H9 : eq (S A B T) (Fminus (Fplus (S A B R) (S Q A B)) (S P A B))
H6 : eq (S A B Y)\n (Fplus (Fmult lambda (Fminus (Fplus (S A B R) (S Q A B)) (S P A B)))\n (Fmult (Fminus F1 lambda) (S A B R)))
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (Fplus (Fmult lambda (Fminus (Fplus (S A B R) (S Q A B)) (S P A B))) (Fmult (Fminus F1 lambda) (S A B R))) (Fplus (S A B R) (Fmult lambda (Fminus (S Q A B) (S P A B))))
+++++
ring.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).
assert (S R A B + S Q A B = S T A B + S P A B).
IsoleVar (S T A B) H9.
uniformize_signed_areas.
rewrite H9 in H6.
replace (S4 A P B Q) with (S Q A B - S P A B).

*****
H9 : eq (S A B T) (Fminus (Fplus (S A B R) (S Q A B)) (S P A B))
H6 : eq (S A B Y)\n (Fplus (Fmult lambda (Fminus (Fplus (S A B R) (S Q A B)) (S P A B)))\n (Fmult (Fminus F1 lambda) (S A B R)))
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (Fminus (S Q A B) (S P A B)) (S4 A P B Q)
+++++
unfold S4 in |- *.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).
assert (S R A B + S Q A B = S T A B + S P A B).
IsoleVar (S T A B) H9.
uniformize_signed_areas.
rewrite H9 in H6.
replace (S4 A P B Q) with (S Q A B - S P A B).
unfold S4 in |- *.

*****
H9 : eq (S A B T) (Fminus (Fplus (S A B R) (S Q A B)) (S P A B))
H6 : eq (S A B Y)\n (Fplus (Fmult lambda (Fminus (Fplus (S A B R) (S Q A B)) (S P A B)))\n (Fmult (Fminus F1 lambda) (S A B R)))
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (Fminus (S Q A B) (S P A B)) (Fplus (S A P B) (S A B Q))
+++++
uniformize_signed_areas.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.
assert (parallel R Y P Q).
Geometry.
assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H).
Geometry.
DecompExAnd Th T.
assert (R <> T).
assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).
assert (S R A B + S Q A B = S T A B + S P A B).
IsoleVar (S T A B) H9.
uniformize_signed_areas.
rewrite H9 in H6.
replace (S4 A P B Q) with (S Q A B - S P A B).
unfold S4 in |- *.
uniformize_signed_areas.

*****
H9 : eq (S A B T) (Fminus (Fplus (S A B R) (S Q A B)) (S P A B))
H6 : eq (S A B Y)\n (Fplus (Fmult lambda (Fminus (Fplus (S A B R) (S Q A B)) (S P A B)))\n (Fmult (Fminus F1 lambda) (S A B R)))
H4 : not (eq R T)
H8 : weak_3_parallelogram R T Q P
H7 : eq (DSeg R T) (DSeg P Q)
H5 : Col T R Y
T : Point
H1 : parallel R Y P Q
H : not (eq R Y)
H3 : eq (DSeg R Y) (Fmult lambda (DSeg P Q))
H2 : parallel Y R P Q
H0 : not (eq P Q)
lambda : F
A,B,P,Q,R,Y : Point
*****
eq (Fminus (S Q A B) (S P A B)) (Fplus (Fopp (S P A B)) (S Q A B))
+++++
ring.
-----
Theorem elim_area_on_parallel_d : forall (A B P Q R Y : Point) (lambda : F), on_parallel_d Y R P Q lambda -> S A B Y = S A B R + lambda * S4 A P B Q.
Proof.
intros.
unfold on_parallel_d in H.
DecompAndAll.
cases_equality R Y.

*****

*****

+++++
Qed.
-----
Theorem elim_area_on_parallel :\n forall A B P Q R Y : Point,\n on_parallel Y R P Q -> \n S A B Y = S A B R + R ** Y / P ** Q * S4 A P B Q.
-----
Theorem elim_area_on_parallel : forall A B P Q R Y : Point, on_parallel Y R P Q -> S A B Y = S A B R + R ** Y / P ** Q * S4 A P B Q.

*****

*****
forall (A B P Q R Y : Point) (_ : on_parallel Y R P Q), eq (S A B Y) (Fplus (S A B R) (Fmult (Fdiv (DSeg R Y) (DSeg P Q)) (S4 A P B Q)))
+++++
Proof.
-----
Theorem elim_area_on_parallel : forall A B P Q R Y : Point, on_parallel Y R P Q -> S A B Y = S A B R + R ** Y / P ** Q * S4 A P B Q.
Proof.

*****

*****
forall (A B P Q R Y : Point) (_ : on_parallel Y R P Q), eq (S A B Y) (Fplus (S A B R) (Fmult (Fdiv (DSeg R Y) (DSeg P Q)) (S4 A P B Q)))
+++++
intros.
-----
Theorem elim_area_on_parallel : forall A B P Q R Y : Point, on_parallel Y R P Q -> S A B Y = S A B R + R ** Y / P ** Q * S4 A P B Q.
Proof.
intros.

*****
H : on_parallel Y R P Q
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult (Fdiv (DSeg R Y) (DSeg P Q)) (S4 A P B Q)))
+++++
assert (on_parallel_d Y R P Q (R ** Y / P ** Q)).
-----
Theorem elim_area_on_parallel : forall A B P Q R Y : Point, on_parallel Y R P Q -> S A B Y = S A B R + R ** Y / P ** Q * S4 A P B Q.
Proof.
intros.
assert (on_parallel_d Y R P Q (R ** Y / P ** Q)).

*****
H : on_parallel Y R P Q
A,B,P,Q,R,Y : Point
*****
on_parallel_d Y R P Q (Fdiv (DSeg R Y) (DSeg P Q))
+++++
apply on_parallel_to_on_parallel_d.
-----
Theorem elim_area_on_parallel : forall A B P Q R Y : Point, on_parallel Y R P Q -> S A B Y = S A B R + R ** Y / P ** Q * S4 A P B Q.
Proof.
intros.
assert (on_parallel_d Y R P Q (R ** Y / P ** Q)).
apply on_parallel_to_on_parallel_d.

*****
H : on_parallel Y R P Q
A,B,P,Q,R,Y : Point
*****
on_parallel Y R P Q
+++++
auto.
-----
Theorem elim_area_on_parallel : forall A B P Q R Y : Point, on_parallel Y R P Q -> S A B Y = S A B R + R ** Y / P ** Q * S4 A P B Q.
Proof.
intros.
assert (on_parallel_d Y R P Q (R ** Y / P ** Q)).

*****
H0 : on_parallel_d Y R P Q (Fdiv (DSeg R Y) (DSeg P Q))
H : on_parallel Y R P Q
A,B,P,Q,R,Y : Point
*****
eq (S A B Y) (Fplus (S A B R) (Fmult (Fdiv (DSeg R Y) (DSeg P Q)) (S4 A P B Q)))
+++++
apply elim_area_on_parallel_d.
-----
Theorem elim_area_on_parallel : forall A B P Q R Y : Point, on_parallel Y R P Q -> S A B Y = S A B R + R ** Y / P ** Q * S4 A P B Q.
Proof.
intros.
assert (on_parallel_d Y R P Q (R ** Y / P ** Q)).
apply elim_area_on_parallel_d.

*****
H0 : on_parallel_d Y R P Q (Fdiv (DSeg R Y) (DSeg P Q))
H : on_parallel Y R P Q
A,B,P,Q,R,Y : Point
*****
on_parallel_d Y R P Q (Fdiv (DSeg R Y) (DSeg P Q))
+++++
auto.
-----
Theorem elim_area_on_parallel : forall A B P Q R Y : Point, on_parallel Y R P Q -> S A B Y = S A B R + R ** Y / P ** Q * S4 A P B Q.
Proof.
intros.
assert (on_parallel_d Y R P Q (R ** Y / P ** Q)).

*****

*****

+++++
Qed.
-----
Lemma parallel_transitivity : forall A B C D E F, \n  C<> D -> \n  parallel A B C D -> \n  parallel C D E F -> \n  parallel A B E F.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.

*****

*****
forall (A B C D E F : Point) (_ : not (eq C D)) (_ : parallel A B C D) (_ : parallel C D E F), parallel A B E F
+++++
Proof.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.

*****

*****
forall (A B C D E F : Point) (_ : not (eq C D)) (_ : parallel A B C D) (_ : parallel C D E F), parallel A B E F
+++++
intros.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.

*****
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
parallel A B E F
+++++
cases_equality A B.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.

*****
H2 : eq A B
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
parallel A B E F
+++++
subst.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
subst.

*****
H1 : parallel C D E F
H0 : parallel B B C D
H : not (eq C D)
B,C,D,E,F : Point
*****
parallel B B E F
+++++
Geometry.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.

*****
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
parallel A B E F
+++++
assert (on_parallel E F C D).
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).

*****
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
on_parallel E F C D
+++++
unfold on_parallel.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
unfold on_parallel.

*****
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
and (not (eq C D)) (parallel F E C D)
+++++
intuition Geometry.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).

*****
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
parallel A B E F
+++++
assert (on_parallel_d E F C D (F ** E / C ** D)).
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).

*****
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
+++++
apply on_parallel_to_on_parallel_d.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
apply on_parallel_to_on_parallel_d.

*****
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
on_parallel E F C D
+++++
assumption.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).

*****
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
parallel A B E F
+++++
set (F ** E / C ** D).
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).

*****
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
parallel A B E F
+++++
unfold parallel.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.

*****
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (S4 A E B F) F0
+++++
unfold S4.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.

*****
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (Fplus (S A E B) (S A B F)) F0
+++++
replace (S A E B) with (S B A E) by Geometry.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.

*****
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (Fplus (S B A E) (S A B F)) F0
+++++
assert (T: S B A E = S B A F + f * S4 B C A D).
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).

*****
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
+++++
apply (elim_area_on_parallel_d B A C D F E).
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
apply (elim_area_on_parallel_d B A C D F E).

*****
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
on_parallel_d E F C D f
+++++
auto.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).

*****
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (Fplus (S B A E) (S A B F)) F0
+++++
rewrite T.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.

*****
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (Fplus (Fplus (S B A F) (Fmult f (S4 B C A D))) (S A B F)) F0
+++++
unfold S4.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.

*****
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (Fplus (Fplus (S B A F) (Fmult f (Fplus (S B C A) (S B A D)))) (S A B F)) F0
+++++
replace (S B C A) with (S A B C) by Geometry.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.

*****
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (Fplus (Fplus (S B A F) (Fmult f (Fplus (S A B C) (S B A D)))) (S A B F)) F0
+++++
assert (on_parallel_d C D A B ( D ** C / A ** B)).
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.
assert (on_parallel_d C D A B ( D ** C / A ** B)).

*****
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
on_parallel_d C D A B (Fdiv (DSeg D C) (DSeg A B))
+++++
unfold on_parallel_d.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.
assert (on_parallel_d C D A B ( D ** C / A ** B)).
unfold on_parallel_d.

*****
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
and (not (eq A B)) (and (parallel C D A B) (eq (DSeg D C) (Fmult (Fdiv (DSeg D C) (DSeg A B)) (DSeg A B))))
+++++
repeat split.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.
assert (on_parallel_d C D A B ( D ** C / A ** B)).
unfold on_parallel_d.
repeat split.

*****
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
not (eq A B)
+++++
Geometry.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.
assert (on_parallel_d C D A B ( D ** C / A ** B)).
unfold on_parallel_d.
repeat split.

*****
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
parallel C D A B
+++++
Geometry.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.
assert (on_parallel_d C D A B ( D ** C / A ** B)).
unfold on_parallel_d.
repeat split.

*****
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (DSeg D C) (Fmult (Fdiv (DSeg D C) (DSeg A B)) (DSeg A B))
+++++
Geometry.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.
assert (on_parallel_d C D A B ( D ** C / A ** B)).
unfold on_parallel_d.
repeat split.
Geometry.

*****
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (DSeg D C) (Fmult (Fdiv (DSeg D C) (DSeg A B)) (DSeg A B))
+++++
field.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.
assert (on_parallel_d C D A B ( D ** C / A ** B)).
unfold on_parallel_d.
repeat split.
Geometry.
field.

*****
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
not (eq (DSeg A B) F0)
+++++
Geometry.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.
assert (on_parallel_d C D A B ( D ** C / A ** B)).

*****
H5 : on_parallel_d C D A B (Fdiv (DSeg D C) (DSeg A B))
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (Fplus (Fplus (S B A F) (Fmult f (Fplus (S A B C) (S B A D)))) (S A B F)) F0
+++++
set (D ** C / A ** B).
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.
assert (on_parallel_d C D A B ( D ** C / A ** B)).
set (D ** C / A ** B).

*****
f0 : F
H5 : on_parallel_d C D A B (Fdiv (DSeg D C) (DSeg A B))
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (Fplus (Fplus (S B A F) (Fmult f (Fplus (S A B C) (S B A D)))) (S A B F)) F0
+++++
replace (S A B C) with (S A B D + f0 * S4 A A B B).
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.
assert (on_parallel_d C D A B ( D ** C / A ** B)).
set (D ** C / A ** B).
replace (S A B C) with (S A B D + f0 * S4 A A B B).

*****
f0 : F
H5 : on_parallel_d C D A B (Fdiv (DSeg D C) (DSeg A B))
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (Fplus (Fplus (S B A F) (Fmult f (Fplus (Fplus (S A B D) (Fmult f0 (S4 A A B B))) (S B A D)))) (S A B F)) F0
+++++
basic_simpl.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.
assert (on_parallel_d C D A B ( D ** C / A ** B)).
set (D ** C / A ** B).
replace (S A B C) with (S A B D + f0 * S4 A A B B).
basic_simpl.

*****
f0 : F
H5 : on_parallel_d C D A B (Fdiv (DSeg D C) (DSeg A B))
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (Fplus (Fplus (S B A F) (Fmult f (Fplus (S A B D) (S B A D)))) (S A B F)) F0
+++++
uniformize_signed_areas.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.
assert (on_parallel_d C D A B ( D ** C / A ** B)).
set (D ** C / A ** B).
replace (S A B C) with (S A B D + f0 * S4 A A B B).
basic_simpl.
uniformize_signed_areas.

*****
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f0 : F
H5 : on_parallel_d C D A B (Fdiv (DSeg D C) (DSeg A B))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (Fplus (Fplus (S B A F) (Fmult f (Fplus (S A B D) (Fopp (S A B D))))) (Fopp (S B A F))) F0
+++++
ring.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.
assert (on_parallel_d C D A B ( D ** C / A ** B)).
set (D ** C / A ** B).
replace (S A B C) with (S A B D + f0 * S4 A A B B).

*****
f0 : F
H5 : on_parallel_d C D A B (Fdiv (DSeg D C) (DSeg A B))
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (Fplus (S A B D) (Fmult f0 (S4 A A B B))) (S A B C)
+++++
symmetry.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.
assert (on_parallel_d C D A B ( D ** C / A ** B)).
set (D ** C / A ** B).
replace (S A B C) with (S A B D + f0 * S4 A A B B).
symmetry.

*****
f0 : F
H5 : on_parallel_d C D A B (Fdiv (DSeg D C) (DSeg A B))
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
eq (S A B C) (Fplus (S A B D) (Fmult f0 (S4 A A B B)))
+++++
apply elim_area_on_parallel_d.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.
assert (on_parallel E F C D).
assert (on_parallel_d E F C D (F ** E / C ** D)).
set (F ** E / C ** D).
unfold parallel.
unfold S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D).
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.
assert (on_parallel_d C D A B ( D ** C / A ** B)).
set (D ** C / A ** B).
replace (S A B C) with (S A B D + f0 * S4 A A B B).
symmetry.
apply elim_area_on_parallel_d.

*****
f0 : F
H5 : on_parallel_d C D A B (Fdiv (DSeg D C) (DSeg A B))
T : eq (S B A E) (Fplus (S B A F) (Fmult f (S4 B C A D)))
f : F
H4 : on_parallel_d E F C D (Fdiv (DSeg F E) (DSeg C D))
H3 : on_parallel E F C D
H2 : not (eq A B)
H1 : parallel C D E F
H0 : parallel A B C D
H : not (eq C D)
A,B,C,D,E,F : Point
*****
on_parallel_d C D A B f0
+++++
assumption.
-----
Lemma parallel_transitivity : forall A B C D E F, C<> D -> parallel A B C D -> parallel C D E F -> parallel A B E F.
Proof.
intros.
cases_equality A B.

*****

*****

+++++
Qed.
-----
Lemma elim_area_on_inter_line_parallel :\n    forall P Q R U V Y A B : Point,\n    on_inter_line_parallel Y R U V P Q ->\n    R <>Y ->\n    S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.

*****

*****
forall (P Q R U V Y A B : Point) (_ : on_inter_line_parallel Y R U V P Q) (_ : not (eq R Y)), eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
Proof.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.

*****

*****
forall (P Q R U V Y A B : Point) (_ : on_inter_line_parallel Y R U V P Q) (_ : not (eq R Y)), eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
intros.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.

*****
H0 : not (eq R Y)
H : on_inter_line_parallel Y R U V P Q
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
unfold on_inter_line_parallel in H.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.

*****
H0 : not (eq R Y)
H : and (not (Col R P Q))\n (and (Col Y U V) (and (parallel Y R P Q) (not (parallel P Q U V))))
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
DecompAndAll.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.

*****
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
assert (P<>Q).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).

*****
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
not (eq P Q)
+++++
eauto with Geom.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).

*****
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
eauto with Geom.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.

*****
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
assert (parallel R Y P Q).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).

*****
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
parallel R Y P Q
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).

*****
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.

*****
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
assert (~ Col R Y Q).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).

*****
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
not (Col R Y Q)
+++++
eapply diff_not_col_par_not_col.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
eapply diff_not_col_par_not_col.

*****
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
not (eq R Y)
+++++
auto.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
eapply diff_not_col_par_not_col.

*****
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
not (Col R ?Q Q)
+++++
apply H1.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
eapply diff_not_col_par_not_col.

*****
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
parallel R Y Q P
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).

*****
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).

*****
Th : sig\n (fun Y0 : Point =>\n and (Col Y0 R Y)\n (and (eq (DSeg R Y0) (DSeg P Q)) (parallelogram R Y0 Q P)))
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
DecompExAnd Th T.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.

*****
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
assert (R<>T).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).

*****
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
not (eq R T)
+++++
unfold not.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
unfold not.

*****
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
forall _ : eq R T, False
+++++
intro.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
unfold not.
intro.

*****
H7 : eq R T
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
False
+++++
subst T.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
unfold not.
intro.
subst T.

*****
H8 : Col R R Y
H10 : eq (DSeg R R) (DSeg P Q)
H11 : parallelogram R R Q P
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
False
+++++
basic_simpl.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
unfold not.
intro.
subst T.
basic_simpl.

*****
H8 : Col R R Y
H10 : eq F0 (DSeg P Q)
H11 : parallelogram R R Q P
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
False
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).

*****
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
assert (~ parallel U V T R).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).

*****
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
not (parallel U V T R)
+++++
unfold not.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
unfold not.

*****
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
forall _ : parallel U V T R, False
+++++
intro.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
unfold not.
intro.

*****
H9 : parallel U V T R
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
False
+++++
unfold parallelogram in *.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
unfold not.
intro.
unfold parallelogram in *.

*****
H9 : parallel U V T R
H7 : not (eq R T)
H11 : and (parallel R T Q P) (and (parallel T Q R P) (not (Col R T Q)))
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
False
+++++
DecompAndAll.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
unfold not.
intro.
unfold parallelogram in *.
DecompAndAll.

*****
H15 : not (Col R T Q)
H14 : parallel T Q R P
H12 : parallel R T Q P
H9 : parallel U V T R
H7 : not (eq R T)
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
False
+++++
assert (parallel T R P Q).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
unfold not.
intro.
unfold parallelogram in *.
DecompAndAll.
assert (parallel T R P Q).

*****
H15 : not (Col R T Q)
H14 : parallel T Q R P
H12 : parallel R T Q P
H9 : parallel U V T R
H7 : not (eq R T)
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
parallel T R P Q
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
unfold not.
intro.
unfold parallelogram in *.
DecompAndAll.
assert (parallel T R P Q).

*****
H11 : parallel T R P Q
H15 : not (Col R T Q)
H14 : parallel T Q R P
H12 : parallel R T Q P
H9 : parallel U V T R
H7 : not (eq R T)
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
False
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
unfold not.
intro.
unfold parallelogram in *.
DecompAndAll.
assert (parallel T R P Q).
Geometry.

*****
H11 : parallel T R P Q
H15 : not (Col R T Q)
H14 : parallel T Q R P
H12 : parallel R T Q P
H9 : parallel U V T R
H7 : not (eq R T)
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
False
+++++
assert (parallel U V P Q).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
unfold not.
intro.
unfold parallelogram in *.
DecompAndAll.
assert (parallel T R P Q).
Geometry.
assert (parallel U V P Q).

*****
H11 : parallel T R P Q
H15 : not (Col R T Q)
H14 : parallel T Q R P
H12 : parallel R T Q P
H9 : parallel U V T R
H7 : not (eq R T)
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
parallel U V P Q
+++++
eapply parallel_transitivity.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
unfold not.
intro.
unfold parallelogram in *.
DecompAndAll.
assert (parallel T R P Q).
Geometry.
assert (parallel U V P Q).
eapply parallel_transitivity.

*****
H11 : parallel T R P Q
H15 : not (Col R T Q)
H14 : parallel T Q R P
H12 : parallel R T Q P
H9 : parallel U V T R
H7 : not (eq R T)
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
not (eq ?C ?D)
+++++
apply H7.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
unfold not.
intro.
unfold parallelogram in *.
DecompAndAll.
assert (parallel T R P Q).
Geometry.
assert (parallel U V P Q).
eapply parallel_transitivity.

*****
H11 : parallel T R P Q
H15 : not (Col R T Q)
H14 : parallel T Q R P
H12 : parallel R T Q P
H9 : parallel U V T R
H7 : not (eq R T)
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
parallel U V R T
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
unfold not.
intro.
unfold parallelogram in *.
DecompAndAll.
assert (parallel T R P Q).
Geometry.
assert (parallel U V P Q).
eapply parallel_transitivity.

*****
H11 : parallel T R P Q
H15 : not (Col R T Q)
H14 : parallel T Q R P
H12 : parallel R T Q P
H9 : parallel U V T R
H7 : not (eq R T)
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
parallel R T P Q
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
unfold not.
intro.
unfold parallelogram in *.
DecompAndAll.
assert (parallel T R P Q).
Geometry.
assert (parallel U V P Q).

*****
H13 : parallel U V P Q
H11 : parallel T R P Q
H15 : not (Col R T Q)
H14 : parallel T Q R P
H12 : parallel R T Q P
H9 : parallel U V T R
H7 : not (eq R T)
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
False
+++++
intuition.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).

*****
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).

*****
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fmult (Fdiv F1 (S4 U T V R)) (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
+++++
apply elim_area_inter_ll.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
apply elim_area_inter_ll.

*****
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
inter_ll Y U V T R
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
apply elim_area_inter_ll.
Geometry.

*****
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
inter_ll Y U V T R
+++++
unfold inter_ll.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
apply elim_area_inter_ll.
Geometry.
unfold inter_ll.

*****
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
and (Col Y U V) (and (Col Y T R) (not (parallel U V T R)))
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).

*****
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
assert ((S4 U R V T) = (S4 U P V Q)).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).

*****
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S4 U R V T) (S4 U P V Q)
+++++
apply l2_11b.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
apply l2_11b.

*****
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
parallelogram R T Q P
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).

*****
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
assert ((S U R T) = (S4 U P R Q)).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).

*****
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S U R T) (S4 U P R Q)
+++++
apply l2_12b.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
apply l2_12b.

*****
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
parallelogram R T Q P
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).

*****
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
assert ((S V R T) = (S4 V P R Q)).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).

*****
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S V R T) (S4 V P R Q)
+++++
apply l2_12b.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
apply l2_12b.

*****
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
parallelogram R T Q P
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (S A B Y) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
rewrite H12.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fmult (Fdiv F1 (S4 U T V R)) (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U)))) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (S4 P U Q V))
+++++
replace (S4 P U Q V) with (- S4 U P V Q).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fmult (Fdiv F1 (S4 U T V R)) (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U)))) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (Fopp (S4 U P V Q)))
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fmult (Fdiv F1 (S4 U T V R)) (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U)))) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (Fopp (S4 U P V Q)))
+++++
rewrite <- H13.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fmult (Fdiv F1 (S4 U T V R)) (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U)))) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (Fopp (S4 U R V T)))
+++++
replace (S4 U R V T) with (- S4 U T V R).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fmult (Fdiv F1 (S4 U T V R)) (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U)))) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (Fopp (Fopp (S4 U T V R))))
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).
Geometry.

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fmult (Fdiv F1 (S4 U T V R)) (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U)))) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (Fopp (Fopp (S4 U T V R))))
+++++
replace (S U T R) with (- S U R T).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).
Geometry.
replace (S U T R) with (- S U R T).

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fmult (Fdiv F1 (S4 U T V R)) (Fplus (Fmult (Fopp (S U R T)) (S A B V)) (Fmult (S V R T) (S A B U)))) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (Fopp (Fopp (S4 U T V R))))
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).
Geometry.
replace (S U T R) with (- S U R T).
Geometry.

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fmult (Fdiv F1 (S4 U T V R)) (Fplus (Fmult (Fopp (S U R T)) (S A B V)) (Fmult (S V R T) (S A B U)))) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (Fopp (Fopp (S4 U T V R))))
+++++
rewrite H14.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).
Geometry.
replace (S U T R) with (- S U R T).
Geometry.
rewrite H14.

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fmult (Fdiv F1 (S4 U T V R)) (Fplus (Fmult (Fopp (S4 U P R Q)) (S A B V)) (Fmult (S V R T) (S A B U)))) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (Fopp (Fopp (S4 U T V R))))
+++++
rewrite H15.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).
Geometry.
replace (S U T R) with (- S U R T).
Geometry.
rewrite H14.
rewrite H15.

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fmult (Fdiv F1 (S4 U T V R)) (Fplus (Fmult (Fopp (S4 U P R Q)) (S A B V)) (Fmult (S4 V P R Q) (S A B U)))) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (Fopp (Fopp (S4 U T V R))))
+++++
replace (S4 V P R Q) with (- S4 P V Q R).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).
Geometry.
replace (S U T R) with (- S U R T).
Geometry.
rewrite H14.
rewrite H15.
replace (S4 V P R Q) with (- S4 P V Q R).

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fmult (Fdiv F1 (S4 U T V R)) (Fplus (Fmult (Fopp (S4 U P R Q)) (S A B V)) (Fmult (Fopp (S4 P V Q R)) (S A B U)))) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (Fopp (Fopp (S4 U T V R))))
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).
Geometry.
replace (S U T R) with (- S U R T).
Geometry.
rewrite H14.
rewrite H15.
replace (S4 V P R Q) with (- S4 P V Q R).
Geometry.

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fmult (Fdiv F1 (S4 U T V R)) (Fplus (Fmult (Fopp (S4 U P R Q)) (S A B V)) (Fmult (Fopp (S4 P V Q R)) (S A B U)))) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (Fopp (Fopp (S4 U T V R))))
+++++
replace (S4 U P R Q) with (- S4 P U Q R).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).
Geometry.
replace (S U T R) with (- S U R T).
Geometry.
rewrite H14.
rewrite H15.
replace (S4 V P R Q) with (- S4 P V Q R).
Geometry.
replace (S4 U P R Q) with (- S4 P U Q R).

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fmult (Fdiv F1 (S4 U T V R)) (Fplus (Fmult (Fopp (Fopp (S4 P U Q R))) (S A B V)) (Fmult (Fopp (S4 P V Q R)) (S A B U)))) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (Fopp (Fopp (S4 U T V R))))
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).
Geometry.
replace (S U T R) with (- S U R T).
Geometry.
rewrite H14.
rewrite H15.
replace (S4 V P R Q) with (- S4 P V Q R).
Geometry.
replace (S4 U P R Q) with (- S4 P U Q R).
Geometry.

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fmult (Fdiv F1 (S4 U T V R)) (Fplus (Fmult (Fopp (Fopp (S4 P U Q R))) (S A B V)) (Fmult (Fopp (S4 P V Q R)) (S A B U)))) (Fdiv (Fminus (Fmult (S4 P U Q R) (S A B V)) (Fmult (S4 P V Q R) (S A B U))) (Fopp (Fopp (S4 U T V R))))
+++++
field.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).
Geometry.
replace (S U T R) with (- S U R T).
Geometry.
rewrite H14.
rewrite H15.
replace (S4 V P R Q) with (- S4 P V Q R).
Geometry.
replace (S4 U P R Q) with (- S4 P U Q R).
Geometry.
field.

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
not (eq (Fopp (Fopp (S4 U T V R))) F0)
+++++
assert (S4 U T V R<>0).
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).
Geometry.
replace (S U T R) with (- S U R T).
Geometry.
rewrite H14.
rewrite H15.
replace (S4 V P R Q) with (- S4 P V Q R).
Geometry.
replace (S4 U P R Q) with (- S4 P U Q R).
Geometry.
field.
assert (S4 U T V R<>0).

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
not (eq (S4 U T V R) F0)
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).
Geometry.
replace (S U T R) with (- S U R T).
Geometry.
rewrite H14.
rewrite H15.
replace (S4 V P R Q) with (- S4 P V Q R).
Geometry.
replace (S4 U P R Q) with (- S4 P U Q R).
Geometry.
field.
assert (S4 U T V R<>0).

*****
H16 : not (eq (S4 U T V R) F0)
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
not (eq (Fopp (Fopp (S4 U T V R))) F0)
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).
Geometry.
replace (S U T R) with (- S U R T).
Geometry.
rewrite H14.
rewrite H15.
replace (S4 V P R Q) with (- S4 P V Q R).
Geometry.
replace (S4 U P R Q) with (- S4 P U Q R).

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fopp (S4 P U Q R)) (S4 U P R Q)
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).
Geometry.
replace (S U T R) with (- S U R T).
Geometry.
rewrite H14.
rewrite H15.
replace (S4 V P R Q) with (- S4 P V Q R).

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fopp (S4 P V Q R)) (S4 V P R Q)
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).
Geometry.
replace (S U T R) with (- S U R T).

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fopp (S U R T)) (S U T R)
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).
Geometry.
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R).

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fopp (S4 U T V R)) (S4 U R V T)
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).
eauto with Geom.
assert (parallel R Y P Q).
Geometry.
assert (~ Col R Y Q).
assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
assert (~ parallel U V T R).
assert ((S A B Y) = 1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))).
assert ((S4 U R V T) = (S4 U P V Q)).
assert ((S U R T) = (S4 U P R Q)).
assert ((S V R T) = (S4 V P R Q)).
rewrite H12.
replace (S4 P U Q V) with (- S4 U P V Q).

*****
H15 : eq (S V R T) (S4 V P R Q)
H14 : eq (S U R T) (S4 U P R Q)
H13 : eq (S4 U R V T) (S4 U P V Q)
H12 : eq (S A B Y)\n (Fmult (Fdiv F1 (S4 U T V R))\n (Fplus (Fmult (S U T R) (S A B V)) (Fmult (S V R T) (S A B U))))
H9 : not (parallel U V T R)
H7 : not (eq R T)
H11 : parallelogram R T Q P
H10 : eq (DSeg R T) (DSeg P Q)
H8 : Col T R Y
T : Point
H6 : not (Col R Y Q)
H4 : parallel R Y P Q
H : not (eq P Q)
H5 : not (parallel P Q U V)
H2 : parallel Y R P Q
H3 : Col Y U V
H1 : not (Col R P Q)
H0 : not (eq R Y)
P,Q,R,U,V,Y,A,B : Point
*****
eq (Fopp (S4 U P V Q)) (S4 P U Q V)
+++++
Geometry.
-----
Lemma elim_area_on_inter_line_parallel : forall P Q R U V Y A B : Point, on_inter_line_parallel Y R U V P Q -> R <>Y -> S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q).

*****

*****

+++++
Qed.
-----
