Require Export GeoCoq.Elements.OriginalProofs.lemma_congruenceflip.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_lessthancongruence.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_TGsymmetric : \n   forall A B C a b c, \n   TG A a B b C c ->\n   TG B b A a C c.
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C a b c : Point) (_ : TG A a B b C c), TG B b A a C c
+++++
Proof.
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C a b c : Point) (_ : TG A a B b C c), TG B b A a C c
+++++
intros.
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.
Proof.
intros.

*****
H : TG A a B b C c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TG B b A a C c
+++++
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS A a H /\ Cong a H B b /\ Lt C c A H)) by (conclude_def TG );destruct Tf as [H];spliter.
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.
Proof.
intros.
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS A a H /\\ Cong a H B b /\\ Lt C c A H)) by (conclude_def TG );destruct Tf as [H];spliter.

*****
H3 : Lt C c A H
H2 : Cong a H B b
H1 : BetS A a H
H : Point
H0 : TG A a B b C c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TG B b A a C c
+++++
assert (neq a H) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.
Proof.
intros.
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS A a H /\\ Cong a H B b /\\ Lt C c A H)) by (conclude_def TG );destruct Tf as [H];spliter.
assert (neq a H) by (forward_using lemma_betweennotequal).

*****
H4 : neq a H
H3 : Lt C c A H
H2 : Cong a H B b
H1 : BetS A a H
H : Point
H0 : TG A a B b C c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TG B b A a C c
+++++
assert (neq B b) by (conclude axiom_nocollapse).
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.
Proof.
intros.
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS A a H /\\ Cong a H B b /\\ Lt C c A H)) by (conclude_def TG );destruct Tf as [H];spliter.
assert (neq a H) by (forward_using lemma_betweennotequal).
assert (neq B b) by (conclude axiom_nocollapse).

*****
H5 : neq B b
H4 : neq a H
H3 : Lt C c A H
H2 : Cong a H B b
H1 : BetS A a H
H : Point
H0 : TG A a B b C c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TG B b A a C c
+++++
assert (neq A a) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.
Proof.
intros.
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS A a H /\\ Cong a H B b /\\ Lt C c A H)) by (conclude_def TG );destruct Tf as [H];spliter.
assert (neq a H) by (forward_using lemma_betweennotequal).
assert (neq B b) by (conclude axiom_nocollapse).
assert (neq A a) by (forward_using lemma_betweennotequal).

*****
H6 : neq A a
H5 : neq B b
H4 : neq a H
H3 : Lt C c A H
H2 : Cong a H B b
H1 : BetS A a H
H : Point
H0 : TG A a B b C c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TG B b A a C c
+++++
let Tf:=fresh in assert (Tf:exists F, (BetS B b F /\ Cong b F A a)) by (conclude lemma_extension);destruct Tf as [F];spliter.
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.
Proof.
intros.
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS A a H /\\ Cong a H B b /\\ Lt C c A H)) by (conclude_def TG );destruct Tf as [H];spliter.
assert (neq a H) by (forward_using lemma_betweennotequal).
assert (neq B b) by (conclude axiom_nocollapse).
assert (neq A a) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists F, (BetS B b F /\\ Cong b F A a)) by (conclude lemma_extension);destruct Tf as [F];spliter.

*****
H8 : Cong b F A a
H7 : BetS B b F
F : Point
H6 : neq A a
H5 : neq B b
H4 : neq a H
H3 : Lt C c A H
H2 : Cong a H B b
H1 : BetS A a H
H : Point
H0 : TG A a B b C c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TG B b A a C c
+++++
assert (Cong a A F b) by (forward_using lemma_doublereverse).
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.
Proof.
intros.
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS A a H /\\ Cong a H B b /\\ Lt C c A H)) by (conclude_def TG );destruct Tf as [H];spliter.
assert (neq a H) by (forward_using lemma_betweennotequal).
assert (neq B b) by (conclude axiom_nocollapse).
assert (neq A a) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists F, (BetS B b F /\\ Cong b F A a)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (Cong a A F b) by (forward_using lemma_doublereverse).

*****
H9 : Cong a A F b
H8 : Cong b F A a
H7 : BetS B b F
F : Point
H6 : neq A a
H5 : neq B b
H4 : neq a H
H3 : Lt C c A H
H2 : Cong a H B b
H1 : BetS A a H
H : Point
H0 : TG A a B b C c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TG B b A a C c
+++++
assert (Cong A a F b) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.
Proof.
intros.
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS A a H /\\ Cong a H B b /\\ Lt C c A H)) by (conclude_def TG );destruct Tf as [H];spliter.
assert (neq a H) by (forward_using lemma_betweennotequal).
assert (neq B b) by (conclude axiom_nocollapse).
assert (neq A a) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists F, (BetS B b F /\\ Cong b F A a)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (Cong a A F b) by (forward_using lemma_doublereverse).
assert (Cong A a F b) by (forward_using lemma_congruenceflip).

*****
H10 : Cong A a F b
H9 : Cong a A F b
H8 : Cong b F A a
H7 : BetS B b F
F : Point
H6 : neq A a
H5 : neq B b
H4 : neq a H
H3 : Lt C c A H
H2 : Cong a H B b
H1 : BetS A a H
H : Point
H0 : TG A a B b C c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TG B b A a C c
+++++
assert (Cong a H b B) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.
Proof.
intros.
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS A a H /\\ Cong a H B b /\\ Lt C c A H)) by (conclude_def TG );destruct Tf as [H];spliter.
assert (neq a H) by (forward_using lemma_betweennotequal).
assert (neq B b) by (conclude axiom_nocollapse).
assert (neq A a) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists F, (BetS B b F /\\ Cong b F A a)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (Cong a A F b) by (forward_using lemma_doublereverse).
assert (Cong A a F b) by (forward_using lemma_congruenceflip).
assert (Cong a H b B) by (forward_using lemma_congruenceflip).

*****
H11 : Cong a H b B
H10 : Cong A a F b
H9 : Cong a A F b
H8 : Cong b F A a
H7 : BetS B b F
F : Point
H6 : neq A a
H5 : neq B b
H4 : neq a H
H3 : Lt C c A H
H2 : Cong a H B b
H1 : BetS A a H
H : Point
H0 : TG A a B b C c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TG B b A a C c
+++++
assert (BetS F b B) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.
Proof.
intros.
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS A a H /\\ Cong a H B b /\\ Lt C c A H)) by (conclude_def TG );destruct Tf as [H];spliter.
assert (neq a H) by (forward_using lemma_betweennotequal).
assert (neq B b) by (conclude axiom_nocollapse).
assert (neq A a) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists F, (BetS B b F /\\ Cong b F A a)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (Cong a A F b) by (forward_using lemma_doublereverse).
assert (Cong A a F b) by (forward_using lemma_congruenceflip).
assert (Cong a H b B) by (forward_using lemma_congruenceflip).
assert (BetS F b B) by (conclude axiom_betweennesssymmetry).

*****
H12 : BetS F b B
H11 : Cong a H b B
H10 : Cong A a F b
H9 : Cong a A F b
H8 : Cong b F A a
H7 : BetS B b F
F : Point
H6 : neq A a
H5 : neq B b
H4 : neq a H
H3 : Lt C c A H
H2 : Cong a H B b
H1 : BetS A a H
H : Point
H0 : TG A a B b C c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TG B b A a C c
+++++
assert (Cong A H F B) by (conclude cn_sumofparts).
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.
Proof.
intros.
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS A a H /\\ Cong a H B b /\\ Lt C c A H)) by (conclude_def TG );destruct Tf as [H];spliter.
assert (neq a H) by (forward_using lemma_betweennotequal).
assert (neq B b) by (conclude axiom_nocollapse).
assert (neq A a) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists F, (BetS B b F /\\ Cong b F A a)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (Cong a A F b) by (forward_using lemma_doublereverse).
assert (Cong A a F b) by (forward_using lemma_congruenceflip).
assert (Cong a H b B) by (forward_using lemma_congruenceflip).
assert (BetS F b B) by (conclude axiom_betweennesssymmetry).
assert (Cong A H F B) by (conclude cn_sumofparts).

*****
H13 : Cong A H F B
H12 : BetS F b B
H11 : Cong a H b B
H10 : Cong A a F b
H9 : Cong a A F b
H8 : Cong b F A a
H7 : BetS B b F
F : Point
H6 : neq A a
H5 : neq B b
H4 : neq a H
H3 : Lt C c A H
H2 : Cong a H B b
H1 : BetS A a H
H : Point
H0 : TG A a B b C c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TG B b A a C c
+++++
assert (Cong A H B F) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.
Proof.
intros.
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS A a H /\\ Cong a H B b /\\ Lt C c A H)) by (conclude_def TG );destruct Tf as [H];spliter.
assert (neq a H) by (forward_using lemma_betweennotequal).
assert (neq B b) by (conclude axiom_nocollapse).
assert (neq A a) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists F, (BetS B b F /\\ Cong b F A a)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (Cong a A F b) by (forward_using lemma_doublereverse).
assert (Cong A a F b) by (forward_using lemma_congruenceflip).
assert (Cong a H b B) by (forward_using lemma_congruenceflip).
assert (BetS F b B) by (conclude axiom_betweennesssymmetry).
assert (Cong A H F B) by (conclude cn_sumofparts).
assert (Cong A H B F) by (forward_using lemma_congruenceflip).

*****
H14 : Cong A H B F
H13 : Cong A H F B
H12 : BetS F b B
H11 : Cong a H b B
H10 : Cong A a F b
H9 : Cong a A F b
H8 : Cong b F A a
H7 : BetS B b F
F : Point
H6 : neq A a
H5 : neq B b
H4 : neq a H
H3 : Lt C c A H
H2 : Cong a H B b
H1 : BetS A a H
H : Point
H0 : TG A a B b C c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TG B b A a C c
+++++
assert (Lt C c B F) by (conclude lemma_lessthancongruence).
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.
Proof.
intros.
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS A a H /\\ Cong a H B b /\\ Lt C c A H)) by (conclude_def TG );destruct Tf as [H];spliter.
assert (neq a H) by (forward_using lemma_betweennotequal).
assert (neq B b) by (conclude axiom_nocollapse).
assert (neq A a) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists F, (BetS B b F /\\ Cong b F A a)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (Cong a A F b) by (forward_using lemma_doublereverse).
assert (Cong A a F b) by (forward_using lemma_congruenceflip).
assert (Cong a H b B) by (forward_using lemma_congruenceflip).
assert (BetS F b B) by (conclude axiom_betweennesssymmetry).
assert (Cong A H F B) by (conclude cn_sumofparts).
assert (Cong A H B F) by (forward_using lemma_congruenceflip).
assert (Lt C c B F) by (conclude lemma_lessthancongruence).

*****
H15 : Lt C c B F
H14 : Cong A H B F
H13 : Cong A H F B
H12 : BetS F b B
H11 : Cong a H b B
H10 : Cong A a F b
H9 : Cong a A F b
H8 : Cong b F A a
H7 : BetS B b F
F : Point
H6 : neq A a
H5 : neq B b
H4 : neq a H
H3 : Lt C c A H
H2 : Cong a H B b
H1 : BetS A a H
H : Point
H0 : TG A a B b C c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TG B b A a C c
+++++
assert (TG B b A a C c) by (conclude_def TG ).
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.
Proof.
intros.
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS A a H /\\ Cong a H B b /\\ Lt C c A H)) by (conclude_def TG );destruct Tf as [H];spliter.
assert (neq a H) by (forward_using lemma_betweennotequal).
assert (neq B b) by (conclude axiom_nocollapse).
assert (neq A a) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists F, (BetS B b F /\\ Cong b F A a)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (Cong a A F b) by (forward_using lemma_doublereverse).
assert (Cong A a F b) by (forward_using lemma_congruenceflip).
assert (Cong a H b B) by (forward_using lemma_congruenceflip).
assert (BetS F b B) by (conclude axiom_betweennesssymmetry).
assert (Cong A H F B) by (conclude cn_sumofparts).
assert (Cong A H B F) by (forward_using lemma_congruenceflip).
assert (Lt C c B F) by (conclude lemma_lessthancongruence).
assert (TG B b A a C c) by (conclude_def TG ).

*****
H16 : TG B b A a C c
H15 : Lt C c B F
H14 : Cong A H B F
H13 : Cong A H F B
H12 : BetS F b B
H11 : Cong a H b B
H10 : Cong A a F b
H9 : Cong a A F b
H8 : Cong b F A a
H7 : BetS B b F
F : Point
H6 : neq A a
H5 : neq B b
H4 : neq a H
H3 : Lt C c A H
H2 : Cong a H B b
H1 : BetS A a H
H : Point
H0 : TG A a B b C c
A,B,C,a,b,c : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
TG B b A a C c
+++++
close.
-----
Lemma lemma_TGsymmetric : forall A B C a b c, TG A a B b C c -> TG B b A a C c.
Proof.
intros.
rename_H H; let Tf:=fresh in assert (Tf:exists H, (BetS A a H /\\ Cong a H B b /\\ Lt C c A H)) by (conclude_def TG );destruct Tf as [H];spliter.
assert (neq a H) by (forward_using lemma_betweennotequal).
assert (neq B b) by (conclude axiom_nocollapse).
assert (neq A a) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists F, (BetS B b F /\\ Cong b F A a)) by (conclude lemma_extension);destruct Tf as [F];spliter.
assert (Cong a A F b) by (forward_using lemma_doublereverse).
assert (Cong A a F b) by (forward_using lemma_congruenceflip).
assert (Cong a H b B) by (forward_using lemma_congruenceflip).
assert (BetS F b B) by (conclude axiom_betweennesssymmetry).
assert (Cong A H F B) by (conclude cn_sumofparts).
assert (Cong A H B F) by (forward_using lemma_congruenceflip).
assert (Lt C c B F) by (conclude lemma_lessthancongruence).
assert (TG B b A a C c) by (conclude_def TG ).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
