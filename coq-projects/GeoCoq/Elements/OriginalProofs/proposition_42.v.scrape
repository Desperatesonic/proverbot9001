Require Export GeoCoq.Elements.OriginalProofs.lemma_samesidecollinear.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_PGflip.
-----
Require Export GeoCoq.Elements.OriginalProofs.proposition_41.
-----
Require Export GeoCoq.Elements.OriginalProofs.proposition_38.
-----
Section Euclid.
-----
Context `{Ax:area}.
-----
Lemma proposition_42 : \n   forall A B C D E J K, \n   Triangle A B C -> nCol J D K -> Midpoint B E C ->\n   exists X Z, PG X E C Z /\ EF A B E C X E C Z /\ CongA C E X J D K /\ Col X Z A.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.

*****
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E J K : Point) (_ : Triangle A B C) (_ : nCol J D K) (_ : Midpoint B E C), ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
Proof.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.

*****
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E J K : Point) (_ : Triangle A B C) (_ : nCol J D K) (_ : Midpoint B E C), ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
intros.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.

*****
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert ((BetS B E C /\ Cong B E E C)) by (conclude_def Midpoint ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).

*****
H2 : and (BetS B E C) (Cong B E E C)
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).

*****
H3 : Cong E B E C
H2 : and (BetS B E C) (Cong B E E C)
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (nCol A B C) by (conclude_def Triangle ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).

*****
H4 : nCol A B C
H3 : Cong E B E C
H2 : and (BetS B E C) (Cong B E E C)
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Col B E C) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).

*****
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H2 : and (BetS B E C) (Cong B E E C)
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (nCol B C A) by (forward_using lemma_NCorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).

*****
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H2 : and (BetS B E C) (Cong B E E C)
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Col B C E) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).

*****
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H2 : and (BetS B E C) (Cong B E E C)
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (eq C C) by (conclude cn_equalityreflexive).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).

*****
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H2 : and (BetS B E C) (Cong B E E C)
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Col B C C) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).

*****
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H2 : and (BetS B E C) (Cong B E E C)
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (neq E C) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).

*****
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H2 : and (BetS B E C) (Cong B E E C)
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (nCol E C A) by (conclude lemma_NChelper).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).

*****
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H2 : and (BetS B E C) (Cong B E E C)
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\ CongA f E c J D K /\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.

*****
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (nCol B C A) by (forward_using lemma_NCorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).

*****
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\ CongA Q A E A E B /\ CongA Q A E B E A /\ CongA E A Q B E A /\ CongA P A E A E C /\ CongA P A E C E A /\ CongA E A P C E A /\ Par P Q B C /\ Cong P A E C /\ Cong A Q B E /\ Cong A M M E /\ Cong P M M C /\ Cong B M M Q /\ BetS P M C /\ BetS B M Q /\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.

*****
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).

*****
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (nCol P A E) by (conclude lemma_equalanglesNC).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).

*****
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (nCol E A P) by (forward_using lemma_NCorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).

*****
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).

*****
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (nCol B C A) by (forward_using lemma_NCorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).

*****
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Col B C E) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).

*****
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (eq B B) by (conclude cn_equalityreflexive).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).

*****
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (eq A A) by (conclude cn_equalityreflexive).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).

*****
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Col B C B) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).

*****
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (neq B E) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).

*****
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (nCol B E A) by (conclude lemma_NChelper).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).

*****
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (eq C C) by (conclude cn_equalityreflexive).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).

*****
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Col B C C) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).

*****
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (neq E C) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).

*****
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (neq C E) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).

*****
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (nCol C E A) by (conclude lemma_NChelper).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).

*****
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (neq E A) by (forward_using lemma_NCdistinct).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).

*****
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (~ ~ Meet E f P Q).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).

*****
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (Meet E f P Q))
+++++
intro.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.

*****
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ LtA C E f C E A).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).

*****
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (LtA C E f C E A)
+++++
intro.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.

*****
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Out E C C) by (conclude lemma_ray4).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).

*****
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Out E A A) by (conclude lemma_ray4).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).

*****
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.

*****
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).

*****
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).

*****
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).

*****
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).

*****
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).

*****
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).

*****
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).

*****
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.

*****
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E m F) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).

*****
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col m E F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).

*****
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).

*****
H67 : Col E f m
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col m E f) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).

*****
H68 : Col m E f
H67 : Col E f m
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq E m) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).

*****
H69 : neq E m
H68 : Col m E f
H67 : Col E f m
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq m E) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).

*****
H70 : neq m E
H69 : neq E m
H68 : Col m E f
H67 : Col E f m
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E f F) by (conclude lemma_collinear4).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).

*****
H71 : Col E f F
H70 : neq m E
H69 : neq E m
H68 : Col m E f
H67 : Col E f m
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col P A F) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col P A F) by (conclude_def Col ).

*****
H72 : Col P A F
H71 : Col E f F
H70 : neq m E
H69 : neq E m
H68 : Col m E f
H67 : Col E f m
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col P A Q) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col P A F) by (conclude_def Col ).
assert (Col P A Q) by (conclude_def Col ).

*****
H73 : Col P A Q
H72 : Col P A F
H71 : Col E f F
H70 : neq m E
H69 : neq E m
H68 : Col m E f
H67 : Col E f m
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq P A) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col P A F) by (conclude_def Col ).
assert (Col P A Q) by (conclude_def Col ).
assert (neq P A) by (forward_using lemma_betweennotequal).

*****
H74 : neq P A
H73 : Col P A Q
H72 : Col P A F
H71 : Col E f F
H70 : neq m E
H69 : neq E m
H68 : Col m E f
H67 : Col E f m
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq A P) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col P A F) by (conclude_def Col ).
assert (Col P A Q) by (conclude_def Col ).
assert (neq P A) by (forward_using lemma_betweennotequal).
assert (neq A P) by (conclude lemma_inequalitysymmetric).

*****
H75 : neq A P
H74 : neq P A
H73 : Col P A Q
H72 : Col P A F
H71 : Col E f F
H70 : neq m E
H69 : neq E m
H68 : Col m E f
H67 : Col E f m
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A P F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col P A F) by (conclude_def Col ).
assert (Col P A Q) by (conclude_def Col ).
assert (neq P A) by (forward_using lemma_betweennotequal).
assert (neq A P) by (conclude lemma_inequalitysymmetric).
assert (Col A P F) by (forward_using lemma_collinearorder).

*****
H76 : Col A P F
H75 : neq A P
H74 : neq P A
H73 : Col P A Q
H72 : Col P A F
H71 : Col E f F
H70 : neq m E
H69 : neq E m
H68 : Col m E f
H67 : Col E f m
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A P Q) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col P A F) by (conclude_def Col ).
assert (Col P A Q) by (conclude_def Col ).
assert (neq P A) by (forward_using lemma_betweennotequal).
assert (neq A P) by (conclude lemma_inequalitysymmetric).
assert (Col A P F) by (forward_using lemma_collinearorder).
assert (Col A P Q) by (forward_using lemma_collinearorder).

*****
H77 : Col A P Q
H76 : Col A P F
H75 : neq A P
H74 : neq P A
H73 : Col P A Q
H72 : Col P A F
H71 : Col E f F
H70 : neq m E
H69 : neq E m
H68 : Col m E f
H67 : Col E f m
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col P F Q) by (conclude lemma_collinear4).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col P A F) by (conclude_def Col ).
assert (Col P A Q) by (conclude_def Col ).
assert (neq P A) by (forward_using lemma_betweennotequal).
assert (neq A P) by (conclude lemma_inequalitysymmetric).
assert (Col A P F) by (forward_using lemma_collinearorder).
assert (Col A P Q) by (forward_using lemma_collinearorder).
assert (Col P F Q) by (conclude lemma_collinear4).

*****
H78 : Col P F Q
H77 : Col A P Q
H76 : Col A P F
H75 : neq A P
H74 : neq P A
H73 : Col P A Q
H72 : Col P A F
H71 : Col E f F
H70 : neq m E
H69 : neq E m
H68 : Col m E f
H67 : Col E f m
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col P Q F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col P A F) by (conclude_def Col ).
assert (Col P A Q) by (conclude_def Col ).
assert (neq P A) by (forward_using lemma_betweennotequal).
assert (neq A P) by (conclude lemma_inequalitysymmetric).
assert (Col A P F) by (forward_using lemma_collinearorder).
assert (Col A P Q) by (forward_using lemma_collinearorder).
assert (Col P F Q) by (conclude lemma_collinear4).
assert (Col P Q F) by (forward_using lemma_collinearorder).

*****
H79 : Col P Q F
H78 : Col P F Q
H77 : Col A P Q
H76 : Col A P F
H75 : neq A P
H74 : neq P A
H73 : Col P A Q
H72 : Col P A F
H71 : Col E f F
H70 : neq m E
H69 : neq E m
H68 : Col m E f
H67 : Col E f m
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq E f) by (conclude lemma_ray2).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col P A F) by (conclude_def Col ).
assert (Col P A Q) by (conclude_def Col ).
assert (neq P A) by (forward_using lemma_betweennotequal).
assert (neq A P) by (conclude lemma_inequalitysymmetric).
assert (Col A P F) by (forward_using lemma_collinearorder).
assert (Col A P Q) by (forward_using lemma_collinearorder).
assert (Col P F Q) by (conclude lemma_collinear4).
assert (Col P Q F) by (forward_using lemma_collinearorder).
assert (neq E f) by (conclude lemma_ray2).

*****
H80 : neq E f
H79 : Col P Q F
H78 : Col P F Q
H77 : Col A P Q
H76 : Col A P F
H75 : neq A P
H74 : neq P A
H73 : Col P A Q
H72 : Col P A F
H71 : Col E f F
H70 : neq m E
H69 : neq E m
H68 : Col m E f
H67 : Col E f m
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq P Q) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col P A F) by (conclude_def Col ).
assert (Col P A Q) by (conclude_def Col ).
assert (neq P A) by (forward_using lemma_betweennotequal).
assert (neq A P) by (conclude lemma_inequalitysymmetric).
assert (Col A P F) by (forward_using lemma_collinearorder).
assert (Col A P Q) by (forward_using lemma_collinearorder).
assert (Col P F Q) by (conclude lemma_collinear4).
assert (Col P Q F) by (forward_using lemma_collinearorder).
assert (neq E f) by (conclude lemma_ray2).
assert (neq P Q) by (forward_using lemma_betweennotequal).

*****
H81 : neq P Q
H80 : neq E f
H79 : Col P Q F
H78 : Col P F Q
H77 : Col A P Q
H76 : Col A P F
H75 : neq A P
H74 : neq P A
H73 : Col P A Q
H72 : Col P A F
H71 : Col E f F
H70 : neq m E
H69 : neq E m
H68 : Col m E f
H67 : Col E f m
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Meet E f P Q) by (conclude_def Meet ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
intro.
assert (Out E C C) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m C /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS C m A) by (conclude axiom_betweennesssymmetry).
assert (BetS C M P) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M C P M) by (conclude lemma_congruencesymmetric).
assert (Cong M C M P) by (forward_using lemma_congruenceflip).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS P A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col P A F) by (conclude_def Col ).
assert (Col P A Q) by (conclude_def Col ).
assert (neq P A) by (forward_using lemma_betweennotequal).
assert (neq A P) by (conclude lemma_inequalitysymmetric).
assert (Col A P F) by (forward_using lemma_collinearorder).
assert (Col A P Q) by (forward_using lemma_collinearorder).
assert (Col P F Q) by (conclude lemma_collinear4).
assert (Col P Q F) by (forward_using lemma_collinearorder).
assert (neq E f) by (conclude lemma_ray2).
assert (neq P Q) by (forward_using lemma_betweennotequal).
assert (Meet E f P Q) by (conclude_def Meet ).

*****
H82 : Meet E f P Q
H81 : neq P Q
H80 : neq E f
H79 : Col P Q F
H78 : Col P F Q
H77 : Col A P Q
H76 : Col A P F
H75 : neq A P
H74 : neq P A
H73 : Col P A Q
H72 : Col P A F
H71 : Col E f F
H70 : neq m E
H69 : neq E m
H68 : Col m E f
H67 : Col E f m
H66 : Col m E F
H65 : Col E m F
H64 : BetS P A F
H63 : BetS E m F
F : Point
H62 : Cong M C M P
H61 : Cong M C P M
H60 : Cong E M A M
H59 : Cong M E A M
H58 : BetS E M A
H57 : BetS C M P
H56 : BetS C m A
H55 : Out E f m
H54 : BetS A m C
m : Point
H53 : Out E A A
H52 : Out E C C
H51 : LtA C E f C E A
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).

*****
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E C B) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).

*****
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq B E) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).

*****
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq E B) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).

*****
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (OS A f E B) by (conclude lemma_samesidecollinear).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).

*****
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).

*****
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).

*****
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq A A) by (conclude cn_equalityreflexive).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).

*****
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq f f) by (conclude cn_equalityreflexive).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).

*****
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (nCol E B f) by (conclude_def OS ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).

*****
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq E f) by (forward_using lemma_NCdistinct).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).

*****
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col B E C) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).

*****
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E B C) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).

*****
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq E E) by (conclude cn_equalityreflexive).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).

*****
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E B E) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).

*****
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (nCol E C f) by (conclude lemma_NChelper).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).

*****
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (nCol C E f) by (forward_using lemma_NCorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).

*****
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ LtA C E A C E f).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).

*****
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (LtA C E A C E f)
+++++
intro.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.

*****
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Out E A A) by (conclude lemma_ray4).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).

*****
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Out E f f) by (conclude lemma_ray4).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).

*****
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Supp C E A A B) by (conclude_def Supp ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).

*****
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Supp C E f f B) by (conclude_def Supp ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).

*****
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).

*****
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (nCol B E f) by (forward_using lemma_NCorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).

*****
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).

*****
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).

*****
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).

*****
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).

*****
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Out E B B) by (conclude lemma_ray4).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).

*****
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Out E A A) by (conclude lemma_ray4).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).

*****
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.

*****
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).

*****
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).

*****
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).

*****
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).

*****
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).

*****
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (nCol P A E) by (forward_using lemma_NCorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).

*****
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col P A Q) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).

*****
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq A A) by (conclude cn_equalityreflexive).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).

*****
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col P A A) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).

*****
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq A Q) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).

*****
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).

*****
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (nCol Q A E) by (conclude lemma_NChelper).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).

*****
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (nCol E A Q) by (forward_using lemma_NCorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).

*****
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.

*****
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E m F) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).

*****
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col m E F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).

*****
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).

*****
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col m E f) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).

*****
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq E m) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).

*****
H102 : neq E m
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq m E) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).

*****
H103 : neq m E
H102 : neq E m
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E f F) by (conclude lemma_collinear4).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).

*****
H104 : Col E f F
H103 : neq m E
H102 : neq E m
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col Q A F) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col Q A F) by (conclude_def Col ).

*****
H105 : Col Q A F
H104 : Col E f F
H103 : neq m E
H102 : neq E m
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS Q A P) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col Q A F) by (conclude_def Col ).
assert (BetS Q A P) by (conclude axiom_betweennesssymmetry).

*****
H106 : BetS Q A P
H105 : Col Q A F
H104 : Col E f F
H103 : neq m E
H102 : neq E m
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col Q A P) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col Q A F) by (conclude_def Col ).
assert (BetS Q A P) by (conclude axiom_betweennesssymmetry).
assert (Col Q A P) by (conclude_def Col ).

*****
H107 : Col Q A P
H106 : BetS Q A P
H105 : Col Q A F
H104 : Col E f F
H103 : neq m E
H102 : neq E m
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq Q A) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col Q A F) by (conclude_def Col ).
assert (BetS Q A P) by (conclude axiom_betweennesssymmetry).
assert (Col Q A P) by (conclude_def Col ).
assert (neq Q A) by (forward_using lemma_betweennotequal).

*****
H108 : neq Q A
H107 : Col Q A P
H106 : BetS Q A P
H105 : Col Q A F
H104 : Col E f F
H103 : neq m E
H102 : neq E m
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq A Q) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col Q A F) by (conclude_def Col ).
assert (BetS Q A P) by (conclude axiom_betweennesssymmetry).
assert (Col Q A P) by (conclude_def Col ).
assert (neq Q A) by (forward_using lemma_betweennotequal).
assert (neq A Q) by (conclude lemma_inequalitysymmetric).

*****
H109 : neq A Q
H108 : neq Q A
H107 : Col Q A P
H106 : BetS Q A P
H105 : Col Q A F
H104 : Col E f F
H103 : neq m E
H102 : neq E m
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A Q F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col Q A F) by (conclude_def Col ).
assert (BetS Q A P) by (conclude axiom_betweennesssymmetry).
assert (Col Q A P) by (conclude_def Col ).
assert (neq Q A) by (forward_using lemma_betweennotequal).
assert (neq A Q) by (conclude lemma_inequalitysymmetric).
assert (Col A Q F) by (forward_using lemma_collinearorder).

*****
H110 : Col A Q F
H109 : neq A Q
H108 : neq Q A
H107 : Col Q A P
H106 : BetS Q A P
H105 : Col Q A F
H104 : Col E f F
H103 : neq m E
H102 : neq E m
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A Q P) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col Q A F) by (conclude_def Col ).
assert (BetS Q A P) by (conclude axiom_betweennesssymmetry).
assert (Col Q A P) by (conclude_def Col ).
assert (neq Q A) by (forward_using lemma_betweennotequal).
assert (neq A Q) by (conclude lemma_inequalitysymmetric).
assert (Col A Q F) by (forward_using lemma_collinearorder).
assert (Col A Q P) by (forward_using lemma_collinearorder).

*****
H111 : Col A Q P
H110 : Col A Q F
H109 : neq A Q
H108 : neq Q A
H107 : Col Q A P
H106 : BetS Q A P
H105 : Col Q A F
H104 : Col E f F
H103 : neq m E
H102 : neq E m
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col Q F P) by (conclude lemma_collinear4).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col Q A F) by (conclude_def Col ).
assert (BetS Q A P) by (conclude axiom_betweennesssymmetry).
assert (Col Q A P) by (conclude_def Col ).
assert (neq Q A) by (forward_using lemma_betweennotequal).
assert (neq A Q) by (conclude lemma_inequalitysymmetric).
assert (Col A Q F) by (forward_using lemma_collinearorder).
assert (Col A Q P) by (forward_using lemma_collinearorder).
assert (Col Q F P) by (conclude lemma_collinear4).

*****
H112 : Col Q F P
H111 : Col A Q P
H110 : Col A Q F
H109 : neq A Q
H108 : neq Q A
H107 : Col Q A P
H106 : BetS Q A P
H105 : Col Q A F
H104 : Col E f F
H103 : neq m E
H102 : neq E m
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col P Q F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col Q A F) by (conclude_def Col ).
assert (BetS Q A P) by (conclude axiom_betweennesssymmetry).
assert (Col Q A P) by (conclude_def Col ).
assert (neq Q A) by (forward_using lemma_betweennotequal).
assert (neq A Q) by (conclude lemma_inequalitysymmetric).
assert (Col A Q F) by (forward_using lemma_collinearorder).
assert (Col A Q P) by (forward_using lemma_collinearorder).
assert (Col Q F P) by (conclude lemma_collinear4).
assert (Col P Q F) by (forward_using lemma_collinearorder).

*****
H113 : Col P Q F
H112 : Col Q F P
H111 : Col A Q P
H110 : Col A Q F
H109 : neq A Q
H108 : neq Q A
H107 : Col Q A P
H106 : BetS Q A P
H105 : Col Q A F
H104 : Col E f F
H103 : neq m E
H102 : neq E m
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq E f) by (conclude lemma_ray2).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col Q A F) by (conclude_def Col ).
assert (BetS Q A P) by (conclude axiom_betweennesssymmetry).
assert (Col Q A P) by (conclude_def Col ).
assert (neq Q A) by (forward_using lemma_betweennotequal).
assert (neq A Q) by (conclude lemma_inequalitysymmetric).
assert (Col A Q F) by (forward_using lemma_collinearorder).
assert (Col A Q P) by (forward_using lemma_collinearorder).
assert (Col Q F P) by (conclude lemma_collinear4).
assert (Col P Q F) by (forward_using lemma_collinearorder).
assert (neq E f) by (conclude lemma_ray2).

*****
H114 : neq E f
H113 : Col P Q F
H112 : Col Q F P
H111 : Col A Q P
H110 : Col A Q F
H109 : neq A Q
H108 : neq Q A
H107 : Col Q A P
H106 : BetS Q A P
H105 : Col Q A F
H104 : Col E f F
H103 : neq m E
H102 : neq E m
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq Q P) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col Q A F) by (conclude_def Col ).
assert (BetS Q A P) by (conclude axiom_betweennesssymmetry).
assert (Col Q A P) by (conclude_def Col ).
assert (neq Q A) by (forward_using lemma_betweennotequal).
assert (neq A Q) by (conclude lemma_inequalitysymmetric).
assert (Col A Q F) by (forward_using lemma_collinearorder).
assert (Col A Q P) by (forward_using lemma_collinearorder).
assert (Col Q F P) by (conclude lemma_collinear4).
assert (Col P Q F) by (forward_using lemma_collinearorder).
assert (neq E f) by (conclude lemma_ray2).
assert (neq Q P) by (forward_using lemma_betweennotequal).

*****
H115 : neq Q P
H114 : neq E f
H113 : Col P Q F
H112 : Col Q F P
H111 : Col A Q P
H110 : Col A Q F
H109 : neq A Q
H108 : neq Q A
H107 : Col Q A P
H106 : BetS Q A P
H105 : Col Q A F
H104 : Col E f F
H103 : neq m E
H102 : neq E m
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq P Q) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col Q A F) by (conclude_def Col ).
assert (BetS Q A P) by (conclude axiom_betweennesssymmetry).
assert (Col Q A P) by (conclude_def Col ).
assert (neq Q A) by (forward_using lemma_betweennotequal).
assert (neq A Q) by (conclude lemma_inequalitysymmetric).
assert (Col A Q F) by (forward_using lemma_collinearorder).
assert (Col A Q P) by (forward_using lemma_collinearorder).
assert (Col Q F P) by (conclude lemma_collinear4).
assert (Col P Q F) by (forward_using lemma_collinearorder).
assert (neq E f) by (conclude lemma_ray2).
assert (neq Q P) by (forward_using lemma_betweennotequal).
assert (neq P Q) by (conclude lemma_inequalitysymmetric).

*****
H116 : neq P Q
H115 : neq Q P
H114 : neq E f
H113 : Col P Q F
H112 : Col Q F P
H111 : Col A Q P
H110 : Col A Q F
H109 : neq A Q
H108 : neq Q A
H107 : Col Q A P
H106 : BetS Q A P
H105 : Col Q A F
H104 : Col E f F
H103 : neq m E
H102 : neq E m
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Meet E f P Q) by (conclude_def Meet ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
intro.
assert (Out E A A) by (conclude lemma_ray4).
assert (Out E f f) by (conclude lemma_ray4).
assert (Supp C E A A B) by (conclude_def Supp ).
assert (Supp C E f f B) by (conclude_def Supp ).
assert (LtA f E B A E B) by (conclude lemma_supplementinequality).
assert (nCol B E f) by (forward_using lemma_NCorder).
assert (CongA B E f f E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f A E B) by (conclude lemma_angleorderrespectscongruence2).
assert (CongA B E A A E B) by (conclude lemma_ABCequalsCBA).
assert (LtA B E f B E A) by (conclude lemma_angleorderrespectscongruence).
assert (Out E B B) by (conclude lemma_ray4).
assert (Out E A A) by (conclude lemma_ray4).
let Tf:=fresh in assert (Tf:exists m, (BetS A m B /\\ Out E f m)) by (conclude lemma_crossbar2);destruct Tf as [m];spliter.
assert (BetS B m A) by (conclude axiom_betweennesssymmetry).
assert (BetS E M A) by (conclude axiom_betweennesssymmetry).
assert (Cong M E A M) by (conclude lemma_congruencesymmetric).
assert (Cong E M A M) by (forward_using lemma_congruenceflip).
assert (Cong M B M Q) by (forward_using lemma_congruenceflip).
assert (nCol P A E) by (forward_using lemma_NCorder).
assert (Col P A Q) by (conclude_def Col ).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col P A A) by (conclude_def Col ).
assert (neq A Q) by (forward_using lemma_betweennotequal).
assert (neq Q A) by (conclude lemma_inequalitysymmetric).
assert (nCol Q A E) by (conclude lemma_NChelper).
assert (nCol E A Q) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists F, (BetS E m F /\\ BetS Q A F)) by (conclude postulate_Euclid5);destruct Tf as [F];spliter.
assert (Col E m F) by (conclude_def Col ).
assert (Col m E F) by (forward_using lemma_collinearorder).
assert (Col E f m) by (conclude lemma_rayimpliescollinear).
assert (Col m E f) by (forward_using lemma_collinearorder).
assert (neq E m) by (forward_using lemma_betweennotequal).
assert (neq m E) by (conclude lemma_inequalitysymmetric).
assert (Col E f F) by (conclude lemma_collinear4).
assert (Col Q A F) by (conclude_def Col ).
assert (BetS Q A P) by (conclude axiom_betweennesssymmetry).
assert (Col Q A P) by (conclude_def Col ).
assert (neq Q A) by (forward_using lemma_betweennotequal).
assert (neq A Q) by (conclude lemma_inequalitysymmetric).
assert (Col A Q F) by (forward_using lemma_collinearorder).
assert (Col A Q P) by (forward_using lemma_collinearorder).
assert (Col Q F P) by (conclude lemma_collinear4).
assert (Col P Q F) by (forward_using lemma_collinearorder).
assert (neq E f) by (conclude lemma_ray2).
assert (neq Q P) by (forward_using lemma_betweennotequal).
assert (neq P Q) by (conclude lemma_inequalitysymmetric).
assert (Meet E f P Q) by (conclude_def Meet ).

*****
H117 : Meet E f P Q
H116 : neq P Q
H115 : neq Q P
H114 : neq E f
H113 : Col P Q F
H112 : Col Q F P
H111 : Col A Q P
H110 : Col A Q F
H109 : neq A Q
H108 : neq Q A
H107 : Col Q A P
H106 : BetS Q A P
H105 : Col Q A F
H104 : Col E f F
H103 : neq m E
H102 : neq E m
H101 : Col m E f
H100 : Col E f m
H99 : Col m E F
H98 : Col E m F
H97 : BetS Q A F
H96 : BetS E m F
F : Point
H95 : nCol E A Q
H94 : nCol Q A E
H93 : neq Q A
H92 : neq A Q
H91 : Col P A A
H90 : eq A A
H89 : Col P A Q
H88 : nCol P A E
H87 : Cong M B M Q
H86 : Cong E M A M
H85 : Cong M E A M
H84 : BetS E M A
H83 : BetS B m A
H82 : Out E f m
H81 : BetS A m B
m : Point
H80 : Out E A A
H79 : Out E B B
H78 : LtA B E f B E A
H77 : CongA B E A A E B
H76 : LtA B E f A E B
H75 : CongA B E f f E B
H74 : nCol B E f
H73 : LtA f E B A E B
H72 : Supp C E f f B
H71 : Supp C E A A B
H70 : Out E f f
H69 : Out E A A
H68 : LtA C E A C E f
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).

*****
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ ~ CongA C E A C E f).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).

*****
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (CongA C E A C E f))
+++++
intro.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
intro.

*****
H69 : not (CongA C E A C E f)
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (LtA C E A C E f) by (conclude lemma_angletrichotomy2).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
intro.
assert (LtA C E A C E f) by (conclude lemma_angletrichotomy2).

*****
H70 : LtA C E A C E f
H69 : not (CongA C E A C E f)
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).

*****
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\ Out E A a /\ Out E C p /\ Out E f q /\ Cong E d E p /\ Cong E a E q /\ Cong d a p q /\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.

*****
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col P Q A) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).

*****
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq d p) by (conclude lemma_layoffunique).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).

*****
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong d a d q) by (conclude cn_equalitysub).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).

*****
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).

*****
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).

*****
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq E d) by (conclude lemma_raystrict).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).

*****
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).

*****
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (OS A f E d) by (conclude lemma_samesidecollinear).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).

*****
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E d E) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).

*****
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E E d) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).

*****
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (OS A q E d) by (conclude lemma_sameside2).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).
assert (OS A q E d) by (conclude lemma_sameside2).

*****
H88 : OS A q E d
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (OS q A E d) by (forward_using lemma_samesidesymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).
assert (OS A q E d) by (conclude lemma_sameside2).
assert (OS q A E d) by (forward_using lemma_samesidesymmetric).

*****
H89 : OS q A E d
H88 : OS A q E d
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (OS q a E d) by (conclude lemma_sameside2).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).
assert (OS A q E d) by (conclude lemma_sameside2).
assert (OS q A E d) by (forward_using lemma_samesidesymmetric).
assert (OS q a E d) by (conclude lemma_sameside2).

*****
H90 : OS q a E d
H89 : OS q A E d
H88 : OS A q E d
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (OS a q E d) by (forward_using lemma_samesidesymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).
assert (OS A q E d) by (conclude lemma_sameside2).
assert (OS q A E d) by (forward_using lemma_samesidesymmetric).
assert (OS q a E d) by (conclude lemma_sameside2).
assert (OS a q E d) by (forward_using lemma_samesidesymmetric).

*****
H91 : OS a q E d
H90 : OS q a E d
H89 : OS q A E d
H88 : OS A q E d
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq a q) by (conclude proposition_07).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).
assert (OS A q E d) by (conclude lemma_sameside2).
assert (OS q A E d) by (forward_using lemma_samesidesymmetric).
assert (OS q a E d) by (conclude lemma_sameside2).
assert (OS a q E d) by (forward_using lemma_samesidesymmetric).
assert (eq a q) by (conclude proposition_07).

*****
H92 : eq a q
H91 : OS a q E d
H90 : OS q a E d
H89 : OS q A E d
H88 : OS A q E d
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E A a) by (conclude lemma_rayimpliescollinear).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).
assert (OS A q E d) by (conclude lemma_sameside2).
assert (OS q A E d) by (forward_using lemma_samesidesymmetric).
assert (OS q a E d) by (conclude lemma_sameside2).
assert (OS a q E d) by (forward_using lemma_samesidesymmetric).
assert (eq a q) by (conclude proposition_07).
assert (Col E A a) by (conclude lemma_rayimpliescollinear).

*****
H93 : Col E A a
H92 : eq a q
H91 : OS a q E d
H90 : OS q a E d
H89 : OS q A E d
H88 : OS A q E d
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E f q) by (conclude lemma_rayimpliescollinear).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).
assert (OS A q E d) by (conclude lemma_sameside2).
assert (OS q A E d) by (forward_using lemma_samesidesymmetric).
assert (OS q a E d) by (conclude lemma_sameside2).
assert (OS a q E d) by (forward_using lemma_samesidesymmetric).
assert (eq a q) by (conclude proposition_07).
assert (Col E A a) by (conclude lemma_rayimpliescollinear).
assert (Col E f q) by (conclude lemma_rayimpliescollinear).

*****
H94 : Col E f q
H93 : Col E A a
H92 : eq a q
H91 : OS a q E d
H90 : OS q a E d
H89 : OS q A E d
H88 : OS A q E d
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E A q) by (conclude cn_equalitysub).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).
assert (OS A q E d) by (conclude lemma_sameside2).
assert (OS q A E d) by (forward_using lemma_samesidesymmetric).
assert (OS q a E d) by (conclude lemma_sameside2).
assert (OS a q E d) by (forward_using lemma_samesidesymmetric).
assert (eq a q) by (conclude proposition_07).
assert (Col E A a) by (conclude lemma_rayimpliescollinear).
assert (Col E f q) by (conclude lemma_rayimpliescollinear).
assert (Col E A q) by (conclude cn_equalitysub).

*****
H95 : Col E A q
H94 : Col E f q
H93 : Col E A a
H92 : eq a q
H91 : OS a q E d
H90 : OS q a E d
H89 : OS q A E d
H88 : OS A q E d
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col q E A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).
assert (OS A q E d) by (conclude lemma_sameside2).
assert (OS q A E d) by (forward_using lemma_samesidesymmetric).
assert (OS q a E d) by (conclude lemma_sameside2).
assert (OS a q E d) by (forward_using lemma_samesidesymmetric).
assert (eq a q) by (conclude proposition_07).
assert (Col E A a) by (conclude lemma_rayimpliescollinear).
assert (Col E f q) by (conclude lemma_rayimpliescollinear).
assert (Col E A q) by (conclude cn_equalitysub).
assert (Col q E A) by (forward_using lemma_collinearorder).

*****
H96 : Col q E A
H95 : Col E A q
H94 : Col E f q
H93 : Col E A a
H92 : eq a q
H91 : OS a q E d
H90 : OS q a E d
H89 : OS q A E d
H88 : OS A q E d
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col q E f) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).
assert (OS A q E d) by (conclude lemma_sameside2).
assert (OS q A E d) by (forward_using lemma_samesidesymmetric).
assert (OS q a E d) by (conclude lemma_sameside2).
assert (OS a q E d) by (forward_using lemma_samesidesymmetric).
assert (eq a q) by (conclude proposition_07).
assert (Col E A a) by (conclude lemma_rayimpliescollinear).
assert (Col E f q) by (conclude lemma_rayimpliescollinear).
assert (Col E A q) by (conclude cn_equalitysub).
assert (Col q E A) by (forward_using lemma_collinearorder).
assert (Col q E f) by (forward_using lemma_collinearorder).

*****
H97 : Col q E f
H96 : Col q E A
H95 : Col E A q
H94 : Col E f q
H93 : Col E A a
H92 : eq a q
H91 : OS a q E d
H90 : OS q a E d
H89 : OS q A E d
H88 : OS A q E d
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq E q) by (conclude lemma_raystrict).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).
assert (OS A q E d) by (conclude lemma_sameside2).
assert (OS q A E d) by (forward_using lemma_samesidesymmetric).
assert (OS q a E d) by (conclude lemma_sameside2).
assert (OS a q E d) by (forward_using lemma_samesidesymmetric).
assert (eq a q) by (conclude proposition_07).
assert (Col E A a) by (conclude lemma_rayimpliescollinear).
assert (Col E f q) by (conclude lemma_rayimpliescollinear).
assert (Col E A q) by (conclude cn_equalitysub).
assert (Col q E A) by (forward_using lemma_collinearorder).
assert (Col q E f) by (forward_using lemma_collinearorder).
assert (neq E q) by (conclude lemma_raystrict).

*****
H98 : neq E q
H97 : Col q E f
H96 : Col q E A
H95 : Col E A q
H94 : Col E f q
H93 : Col E A a
H92 : eq a q
H91 : OS a q E d
H90 : OS q a E d
H89 : OS q A E d
H88 : OS A q E d
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq q E) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).
assert (OS A q E d) by (conclude lemma_sameside2).
assert (OS q A E d) by (forward_using lemma_samesidesymmetric).
assert (OS q a E d) by (conclude lemma_sameside2).
assert (OS a q E d) by (forward_using lemma_samesidesymmetric).
assert (eq a q) by (conclude proposition_07).
assert (Col E A a) by (conclude lemma_rayimpliescollinear).
assert (Col E f q) by (conclude lemma_rayimpliescollinear).
assert (Col E A q) by (conclude cn_equalitysub).
assert (Col q E A) by (forward_using lemma_collinearorder).
assert (Col q E f) by (forward_using lemma_collinearorder).
assert (neq E q) by (conclude lemma_raystrict).
assert (neq q E) by (conclude lemma_inequalitysymmetric).

*****
H99 : neq q E
H98 : neq E q
H97 : Col q E f
H96 : Col q E A
H95 : Col E A q
H94 : Col E f q
H93 : Col E A a
H92 : eq a q
H91 : OS a q E d
H90 : OS q a E d
H89 : OS q A E d
H88 : OS A q E d
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E A f) by (conclude lemma_collinear4).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).
assert (OS A q E d) by (conclude lemma_sameside2).
assert (OS q A E d) by (forward_using lemma_samesidesymmetric).
assert (OS q a E d) by (conclude lemma_sameside2).
assert (OS a q E d) by (forward_using lemma_samesidesymmetric).
assert (eq a q) by (conclude proposition_07).
assert (Col E A a) by (conclude lemma_rayimpliescollinear).
assert (Col E f q) by (conclude lemma_rayimpliescollinear).
assert (Col E A q) by (conclude cn_equalitysub).
assert (Col q E A) by (forward_using lemma_collinearorder).
assert (Col q E f) by (forward_using lemma_collinearorder).
assert (neq E q) by (conclude lemma_raystrict).
assert (neq q E) by (conclude lemma_inequalitysymmetric).
assert (Col E A f) by (conclude lemma_collinear4).

*****
H100 : Col E A f
H99 : neq q E
H98 : neq E q
H97 : Col q E f
H96 : Col q E A
H95 : Col E A q
H94 : Col E f q
H93 : Col E A a
H92 : eq a q
H91 : OS a q E d
H90 : OS q a E d
H89 : OS q A E d
H88 : OS A q E d
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E f A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).
assert (OS A q E d) by (conclude lemma_sameside2).
assert (OS q A E d) by (forward_using lemma_samesidesymmetric).
assert (OS q a E d) by (conclude lemma_sameside2).
assert (OS a q E d) by (forward_using lemma_samesidesymmetric).
assert (eq a q) by (conclude proposition_07).
assert (Col E A a) by (conclude lemma_rayimpliescollinear).
assert (Col E f q) by (conclude lemma_rayimpliescollinear).
assert (Col E A q) by (conclude cn_equalitysub).
assert (Col q E A) by (forward_using lemma_collinearorder).
assert (Col q E f) by (forward_using lemma_collinearorder).
assert (neq E q) by (conclude lemma_raystrict).
assert (neq q E) by (conclude lemma_inequalitysymmetric).
assert (Col E A f) by (conclude lemma_collinear4).
assert (Col E f A) by (forward_using lemma_collinearorder).

*****
H101 : Col E f A
H100 : Col E A f
H99 : neq q E
H98 : neq E q
H97 : Col q E f
H96 : Col q E A
H95 : Col E A q
H94 : Col E f q
H93 : Col E A a
H92 : eq a q
H91 : OS a q E d
H90 : OS q a E d
H89 : OS q A E d
H88 : OS A q E d
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq P Q) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).
assert (OS A q E d) by (conclude lemma_sameside2).
assert (OS q A E d) by (forward_using lemma_samesidesymmetric).
assert (OS q a E d) by (conclude lemma_sameside2).
assert (OS a q E d) by (forward_using lemma_samesidesymmetric).
assert (eq a q) by (conclude proposition_07).
assert (Col E A a) by (conclude lemma_rayimpliescollinear).
assert (Col E f q) by (conclude lemma_rayimpliescollinear).
assert (Col E A q) by (conclude cn_equalitysub).
assert (Col q E A) by (forward_using lemma_collinearorder).
assert (Col q E f) by (forward_using lemma_collinearorder).
assert (neq E q) by (conclude lemma_raystrict).
assert (neq q E) by (conclude lemma_inequalitysymmetric).
assert (Col E A f) by (conclude lemma_collinear4).
assert (Col E f A) by (forward_using lemma_collinearorder).
assert (neq P Q) by (forward_using lemma_betweennotequal).

*****
H102 : neq P Q
H101 : Col E f A
H100 : Col E A f
H99 : neq q E
H98 : neq E q
H97 : Col q E f
H96 : Col q E A
H95 : Col E A q
H94 : Col E f q
H93 : Col E A a
H92 : eq a q
H91 : OS a q E d
H90 : OS q a E d
H89 : OS q A E d
H88 : OS A q E d
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Meet E f P Q) by (conclude_def Meet ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
intro.
assert (~ LtA C E f C E A).
assert (Col E C B) by (forward_using lemma_collinearorder).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (OS A f E B) by (conclude lemma_samesidecollinear).
assert (OS f A E B) by (forward_using lemma_samesidesymmetric).
assert (BetS C E B) by (conclude axiom_betweennesssymmetry).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (eq f f) by (conclude cn_equalityreflexive).
assert (nCol E B f) by (conclude_def OS ).
assert (neq E f) by (forward_using lemma_NCdistinct).
assert (Col B E C) by (conclude_def Col ).
assert (Col E B C) by (forward_using lemma_collinearorder).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E B E) by (conclude_def Col ).
assert (nCol E C f) by (conclude lemma_NChelper).
assert (nCol C E f) by (forward_using lemma_NCorder).
assert (~ LtA C E A C E f).
assert (~ ~ CongA C E A C E f).
let Tf:=fresh in assert (Tf:exists d a p q, (Out E C d /\\ Out E A a /\\ Out E C p /\\ Out E f q /\\ Cong E d E p /\\ Cong E a E q /\\ Cong d a p q /\\ nCol C E A)) by (remove_double_neg;unfold CongA in *; assumption);destruct Tf as [d[a[p[q]]]];spliter.
assert (Col P Q A) by (conclude_def Col ).
assert (eq d p) by (conclude lemma_layoffunique).
assert (Cong d a d q) by (conclude cn_equalitysub).
assert (Cong a d q d) by (forward_using lemma_congruenceflip).
assert (Cong a E q E) by (forward_using lemma_congruenceflip).
assert (neq E d) by (conclude lemma_raystrict).
assert (Col E C d) by (conclude lemma_rayimpliescollinear).
assert (OS A f E d) by (conclude lemma_samesidecollinear).
assert (Col E d E) by (conclude_def Col ).
assert (Col E E d) by (forward_using lemma_collinearorder).
assert (OS A q E d) by (conclude lemma_sameside2).
assert (OS q A E d) by (forward_using lemma_samesidesymmetric).
assert (OS q a E d) by (conclude lemma_sameside2).
assert (OS a q E d) by (forward_using lemma_samesidesymmetric).
assert (eq a q) by (conclude proposition_07).
assert (Col E A a) by (conclude lemma_rayimpliescollinear).
assert (Col E f q) by (conclude lemma_rayimpliescollinear).
assert (Col E A q) by (conclude cn_equalitysub).
assert (Col q E A) by (forward_using lemma_collinearorder).
assert (Col q E f) by (forward_using lemma_collinearorder).
assert (neq E q) by (conclude lemma_raystrict).
assert (neq q E) by (conclude lemma_inequalitysymmetric).
assert (Col E A f) by (conclude lemma_collinear4).
assert (Col E f A) by (forward_using lemma_collinearorder).
assert (neq P Q) by (forward_using lemma_betweennotequal).
assert (Meet E f P Q) by (conclude_def Meet ).

*****
H103 : Meet E f P Q
H102 : neq P Q
H101 : Col E f A
H100 : Col E A f
H99 : neq q E
H98 : neq E q
H97 : Col q E f
H96 : Col q E A
H95 : Col E A q
H94 : Col E f q
H93 : Col E A a
H92 : eq a q
H91 : OS a q E d
H90 : OS q a E d
H89 : OS q A E d
H88 : OS A q E d
H87 : Col E E d
H86 : Col E d E
H85 : OS A f E d
H84 : Col E C d
H83 : neq E d
H82 : Cong a E q E
H81 : Cong a d q d
H80 : Cong d a d q
H79 : eq d p
H78 : Col P Q A
H77 : nCol C E A
H76 : Cong d a p q
H75 : Cong E a E q
H74 : Cong E d E p
H73 : Out E f q
H72 : Out E C p
H71 : Out E A a
H70 : Out E C d
d,a,p,q : Point
H69 : not (not (CongA C E A C E f))
H68 : not (LtA C E A C E f)
H67 : nCol C E f
H66 : nCol E C f
H65 : Col E B E
H64 : eq E E
H63 : Col E B C
H62 : Col B E C
H61 : neq E f
H60 : nCol E B f
H59 : eq f f
H58 : eq A A
H57 : BetS C E B
H56 : OS f A E B
H55 : OS A f E B
H54 : neq E B
H53 : neq B E
H52 : Col E C B
H51 : not (LtA C E f C E A)
H50 : not (Meet E f P Q)
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).

*****
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
let Tf:=fresh in assert (Tf:exists F, (neq E f /\ neq P Q /\ Col E f F /\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.

*****
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (neq C E) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).

*****
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Par P Q E C) by (conclude lemma_collinearparallel).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).

*****
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).

*****
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.

*****
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (PG G F E C) by (conclude lemma_PGflip).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).

*****
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (PG F E C G) by (conclude lemma_PGrotate).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).

*****
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Col P A Q) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).

*****
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Col P Q A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).

*****
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Par F E C G) by (conclude_def PG ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).

*****
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (nCol F E G) by (forward_using lemma_parallelNC).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).

*****
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (neq F G) by (forward_using lemma_NCdistinct).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).

*****
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Col F G A) by (conclude lemma_collinear5).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).

*****
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET F E C A E C) by (conclude proposition_41).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).

*****
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Par P Q C B) by (forward_using lemma_parallelflip).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).

*****
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Col C B E) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).

*****
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (neq E B) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).

*****
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Par P Q E B) by (conclude lemma_collinearparallel).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).

*****
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Par P Q B E) by (forward_using lemma_parallelflip).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).

*****
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).

*****
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (eq E E) by (conclude cn_equalityreflexive).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).

*****
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Col B E E) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).

*****
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET A B E A E C) by (conclude proposition_38).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).

*****
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).

*****
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).

*****
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).

*****
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (eq E E) by (conclude cn_equalityreflexive).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).

*****
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Col A E E) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).

*****
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (nCol A E B) by (forward_using lemma_NCorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).

*****
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (TS B A E C) by (conclude_def TS ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).

*****
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (PG E F G C) by (conclude lemma_PGflip).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).

*****
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Cong_3 F E C C G F) by (conclude proposition_34).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).

*****
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET F E C C G F) by (conclude axiom_congruentequal).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).

*****
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).

*****
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).

*****
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).

*****
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).

*****
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.

*****
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Col F m C) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).

*****
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Col F C m) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).

*****
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Par F E C G) by (conclude_def PG ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).

*****
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (nCol F E C) by (forward_using lemma_parallelNC).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).

*****
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (nCol F C E) by (forward_using lemma_NCorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).

*****
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (TS E F C G) by (conclude_def TS ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).

*****
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).

*****
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).

*****
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).

*****
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).

*****
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).

*****
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).

*****
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).

*****
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).

*****
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (EF A B E C F E C G) by (conclude axiom_paste3).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).

*****
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (nCol F E C) by (forward_using lemma_parallelNC).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).

*****
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (nCol C E F) by (forward_using lemma_NCorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).

*****
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).

*****
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert ((eq E f \/ eq E F \/ eq f F \/ BetS f E F \/ BetS E f F \/ BetS E F f)) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).

*****
H112 : or (eq E f)\n (or (eq E F)\n (or (eq f F) (or (BetS f E F) (or (BetS E f F) (BetS E F f)))))
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (neq F E) by (forward_using lemma_NCdistinct).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).

*****
H113 : neq F E
H112 : or (eq E f)\n (or (eq E F)\n (or (eq f F) (or (BetS f E F) (or (BetS E f F) (BetS E F f)))))
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (neq E F) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).

*****
H114 : neq E F
H113 : neq F E
H112 : or (eq E f)\n (or (eq E F)\n (or (eq f F) (or (BetS f E F) (or (BetS E f F) (BetS E F f)))))
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
ex (fun X : Point => ex (fun Z : Point => and (PG X E C Z) (and (EF A B E C X E C Z) (and (CongA C E X J D K) (Col X Z A)))))
+++++
assert (Out E F f).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).

*****
H114 : neq E F
H113 : neq F E
H112 : or (eq E f)\n (or (eq E F)\n (or (eq f F) (or (BetS f E F) (or (BetS E f F) (BetS E F f)))))
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out E F f
+++++
by cases on (eq E f \/ eq E F \/ eq f F \/ BetS f E F \/ BetS E f F \/ BetS E F f).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).

*****
H115 : eq E f
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out E F f
+++++
assert (~ ~ Out E F f).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).

*****
H115 : eq E f
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (Out E F f))
+++++
intro.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.

*****
H112 : not (Out E F f)
H115 : eq E f
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).

*****
H112 : not (not (Out E F f))
H115 : eq E f
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out E F f
+++++
close.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).

*****
H116 : eq E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out E F f
+++++
assert (~ ~ Out E F f).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).

*****
H116 : eq E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (Out E F f))
+++++
intro.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.

*****
H112 : not (Out E F f)
H116 : eq E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).

*****
H112 : not (not (Out E F f))
H116 : eq E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out E F f
+++++
close.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).

*****
H115 : eq f F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out E F f
+++++
assert (eq F F) by (conclude cn_equalityreflexive).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (eq F F) by (conclude cn_equalityreflexive).

*****
H112 : eq F F
H115 : eq f F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out E F f
+++++
assert (Out E F F) by (conclude lemma_ray4).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).

*****
H116 : Out E F F
H112 : eq F F
H115 : eq f F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out E F f
+++++
assert (Out E F f) by (conclude cn_equalitysub).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (eq F F) by (conclude cn_equalityreflexive).
assert (Out E F F) by (conclude lemma_ray4).
assert (Out E F f) by (conclude cn_equalitysub).

*****
H117 : Out E F f
H116 : Out E F F
H112 : eq F F
H115 : eq f F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out E F f
+++++
close.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).

*****
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Out E F f
+++++
assert (~ ~ Out E F f).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).

*****
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (Out E F f))
+++++
intro.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.

*****
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq E E) by (conclude cn_equalityreflexive).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).

*****
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col E C E) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).

*****
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).

*****
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (nCol E C F) by (forward_using lemma_NCorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
assert (nCol E C F) by (forward_using lemma_NCorder).

*****
H119 : nCol E C F
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (TS F E C f) by (conclude_def TS ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
assert (nCol E C F) by (forward_using lemma_NCorder).
assert (TS F E C f) by (conclude_def TS ).

*****
H120 : TS F E C f
H119 : nCol E C F
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (TS f E C F) by (conclude lemma_oppositesidesymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
assert (nCol E C F) by (forward_using lemma_NCorder).
assert (TS F E C f) by (conclude_def TS ).
assert (TS f E C F) by (conclude lemma_oppositesidesymmetric).

*****
H121 : TS f E C F
H120 : TS F E C f
H119 : nCol E C F
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
assert (nCol E C F) by (forward_using lemma_NCorder).
assert (TS F E C f) by (conclude_def TS ).
assert (TS f E C F) by (conclude lemma_oppositesidesymmetric).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).

*****
H122 : OS A f E C
H121 : TS f E C F
H120 : TS F E C f
H119 : nCol E C F
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (TS A E C F) by (conclude lemma_planeseparation).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
assert (nCol E C F) by (forward_using lemma_NCorder).
assert (TS F E C f) by (conclude_def TS ).
assert (TS f E C F) by (conclude lemma_oppositesidesymmetric).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (TS A E C F) by (conclude lemma_planeseparation).

*****
H123 : TS A E C F
H122 : OS A f E C
H121 : TS f E C F
H120 : TS F E C f
H119 : nCol E C F
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
let Tf:=fresh in assert (Tf:exists j, (BetS A j F /\ Col E C j /\ nCol E C A)) by (conclude_def TS );destruct Tf as [j];spliter.
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
assert (nCol E C F) by (forward_using lemma_NCorder).
assert (TS F E C f) by (conclude_def TS ).
assert (TS f E C F) by (conclude lemma_oppositesidesymmetric).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (TS A E C F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists j, (BetS A j F /\\ Col E C j /\\ nCol E C A)) by (conclude_def TS );destruct Tf as [j];spliter.

*****
H126 : nCol E C A
H125 : Col E C j
H124 : BetS A j F
j : Point
H123 : TS A E C F
H122 : OS A f E C
H121 : TS f E C F
H120 : TS F E C f
H119 : nCol E C F
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A j F) by (conclude_def Col ).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
assert (nCol E C F) by (forward_using lemma_NCorder).
assert (TS F E C f) by (conclude_def TS ).
assert (TS f E C F) by (conclude lemma_oppositesidesymmetric).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (TS A E C F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists j, (BetS A j F /\\ Col E C j /\\ nCol E C A)) by (conclude_def TS );destruct Tf as [j];spliter.
assert (Col A j F) by (conclude_def Col ).

*****
H127 : Col A j F
H126 : nCol E C A
H125 : Col E C j
H124 : BetS A j F
j : Point
H123 : TS A E C F
H122 : OS A f E C
H121 : TS f E C F
H120 : TS F E C f
H119 : nCol E C F
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq P Q) by (forward_using lemma_betweennotequal).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
assert (nCol E C F) by (forward_using lemma_NCorder).
assert (TS F E C f) by (conclude_def TS ).
assert (TS f E C F) by (conclude lemma_oppositesidesymmetric).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (TS A E C F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists j, (BetS A j F /\\ Col E C j /\\ nCol E C A)) by (conclude_def TS );destruct Tf as [j];spliter.
assert (Col A j F) by (conclude_def Col ).
assert (neq P Q) by (forward_using lemma_betweennotequal).

*****
H128 : neq P Q
H127 : Col A j F
H126 : nCol E C A
H125 : Col E C j
H124 : BetS A j F
j : Point
H123 : TS A E C F
H122 : OS A f E C
H121 : TS f E C F
H120 : TS F E C f
H119 : nCol E C F
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq Q P) by (conclude lemma_inequalitysymmetric).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
assert (nCol E C F) by (forward_using lemma_NCorder).
assert (TS F E C f) by (conclude_def TS ).
assert (TS f E C F) by (conclude lemma_oppositesidesymmetric).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (TS A E C F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists j, (BetS A j F /\\ Col E C j /\\ nCol E C A)) by (conclude_def TS );destruct Tf as [j];spliter.
assert (Col A j F) by (conclude_def Col ).
assert (neq P Q) by (forward_using lemma_betweennotequal).
assert (neq Q P) by (conclude lemma_inequalitysymmetric).

*****
H129 : neq Q P
H128 : neq P Q
H127 : Col A j F
H126 : nCol E C A
H125 : Col E C j
H124 : BetS A j F
j : Point
H123 : TS A E C F
H122 : OS A f E C
H121 : TS f E C F
H120 : TS F E C f
H119 : nCol E C F
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col Q A F) by (conclude lemma_collinear4).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
assert (nCol E C F) by (forward_using lemma_NCorder).
assert (TS F E C f) by (conclude_def TS ).
assert (TS f E C F) by (conclude lemma_oppositesidesymmetric).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (TS A E C F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists j, (BetS A j F /\\ Col E C j /\\ nCol E C A)) by (conclude_def TS );destruct Tf as [j];spliter.
assert (Col A j F) by (conclude_def Col ).
assert (neq P Q) by (forward_using lemma_betweennotequal).
assert (neq Q P) by (conclude lemma_inequalitysymmetric).
assert (Col Q A F) by (conclude lemma_collinear4).

*****
H130 : Col Q A F
H129 : neq Q P
H128 : neq P Q
H127 : Col A j F
H126 : nCol E C A
H125 : Col E C j
H124 : BetS A j F
j : Point
H123 : TS A E C F
H122 : OS A f E C
H121 : TS f E C F
H120 : TS F E C f
H119 : nCol E C F
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A F Q) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
assert (nCol E C F) by (forward_using lemma_NCorder).
assert (TS F E C f) by (conclude_def TS ).
assert (TS f E C F) by (conclude lemma_oppositesidesymmetric).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (TS A E C F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists j, (BetS A j F /\\ Col E C j /\\ nCol E C A)) by (conclude_def TS );destruct Tf as [j];spliter.
assert (Col A j F) by (conclude_def Col ).
assert (neq P Q) by (forward_using lemma_betweennotequal).
assert (neq Q P) by (conclude lemma_inequalitysymmetric).
assert (Col Q A F) by (conclude lemma_collinear4).
assert (Col A F Q) by (forward_using lemma_collinearorder).

*****
H131 : Col A F Q
H130 : Col Q A F
H129 : neq Q P
H128 : neq P Q
H127 : Col A j F
H126 : nCol E C A
H125 : Col E C j
H124 : BetS A j F
j : Point
H123 : TS A E C F
H122 : OS A f E C
H121 : TS f E C F
H120 : TS F E C f
H119 : nCol E C F
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col Q P A) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
assert (nCol E C F) by (forward_using lemma_NCorder).
assert (TS F E C f) by (conclude_def TS ).
assert (TS f E C F) by (conclude lemma_oppositesidesymmetric).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (TS A E C F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists j, (BetS A j F /\\ Col E C j /\\ nCol E C A)) by (conclude_def TS );destruct Tf as [j];spliter.
assert (Col A j F) by (conclude_def Col ).
assert (neq P Q) by (forward_using lemma_betweennotequal).
assert (neq Q P) by (conclude lemma_inequalitysymmetric).
assert (Col Q A F) by (conclude lemma_collinear4).
assert (Col A F Q) by (forward_using lemma_collinearorder).
assert (Col Q P A) by (forward_using lemma_collinearorder).

*****
H132 : Col Q P A
H131 : Col A F Q
H130 : Col Q A F
H129 : neq Q P
H128 : neq P Q
H127 : Col A j F
H126 : nCol E C A
H125 : Col E C j
H124 : BetS A j F
j : Point
H123 : TS A E C F
H122 : OS A f E C
H121 : TS f E C F
H120 : TS F E C f
H119 : nCol E C F
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col Q P F) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
assert (nCol E C F) by (forward_using lemma_NCorder).
assert (TS F E C f) by (conclude_def TS ).
assert (TS f E C F) by (conclude lemma_oppositesidesymmetric).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (TS A E C F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists j, (BetS A j F /\\ Col E C j /\\ nCol E C A)) by (conclude_def TS );destruct Tf as [j];spliter.
assert (Col A j F) by (conclude_def Col ).
assert (neq P Q) by (forward_using lemma_betweennotequal).
assert (neq Q P) by (conclude lemma_inequalitysymmetric).
assert (Col Q A F) by (conclude lemma_collinear4).
assert (Col A F Q) by (forward_using lemma_collinearorder).
assert (Col Q P A) by (forward_using lemma_collinearorder).
assert (Col Q P F) by (forward_using lemma_collinearorder).

*****
H133 : Col Q P F
H132 : Col Q P A
H131 : Col A F Q
H130 : Col Q A F
H129 : neq Q P
H128 : neq P Q
H127 : Col A j F
H126 : nCol E C A
H125 : Col E C j
H124 : BetS A j F
j : Point
H123 : TS A E C F
H122 : OS A f E C
H121 : TS f E C F
H120 : TS F E C f
H119 : nCol E C F
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col P A F) by (conclude lemma_collinear4).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
assert (nCol E C F) by (forward_using lemma_NCorder).
assert (TS F E C f) by (conclude_def TS ).
assert (TS f E C F) by (conclude lemma_oppositesidesymmetric).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (TS A E C F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists j, (BetS A j F /\\ Col E C j /\\ nCol E C A)) by (conclude_def TS );destruct Tf as [j];spliter.
assert (Col A j F) by (conclude_def Col ).
assert (neq P Q) by (forward_using lemma_betweennotequal).
assert (neq Q P) by (conclude lemma_inequalitysymmetric).
assert (Col Q A F) by (conclude lemma_collinear4).
assert (Col A F Q) by (forward_using lemma_collinearorder).
assert (Col Q P A) by (forward_using lemma_collinearorder).
assert (Col Q P F) by (forward_using lemma_collinearorder).
assert (Col P A F) by (conclude lemma_collinear4).

*****
H134 : Col P A F
H133 : Col Q P F
H132 : Col Q P A
H131 : Col A F Q
H130 : Col Q A F
H129 : neq Q P
H128 : neq P Q
H127 : Col A j F
H126 : nCol E C A
H125 : Col E C j
H124 : BetS A j F
j : Point
H123 : TS A E C F
H122 : OS A f E C
H121 : TS f E C F
H120 : TS F E C f
H119 : nCol E C F
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A F P) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
assert (nCol E C F) by (forward_using lemma_NCorder).
assert (TS F E C f) by (conclude_def TS ).
assert (TS f E C F) by (conclude lemma_oppositesidesymmetric).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (TS A E C F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists j, (BetS A j F /\\ Col E C j /\\ nCol E C A)) by (conclude_def TS );destruct Tf as [j];spliter.
assert (Col A j F) by (conclude_def Col ).
assert (neq P Q) by (forward_using lemma_betweennotequal).
assert (neq Q P) by (conclude lemma_inequalitysymmetric).
assert (Col Q A F) by (conclude lemma_collinear4).
assert (Col A F Q) by (forward_using lemma_collinearorder).
assert (Col Q P A) by (forward_using lemma_collinearorder).
assert (Col Q P F) by (forward_using lemma_collinearorder).
assert (Col P A F) by (conclude lemma_collinear4).
assert (Col A F P) by (forward_using lemma_collinearorder).

*****
H135 : Col A F P
H134 : Col P A F
H133 : Col Q P F
H132 : Col Q P A
H131 : Col A F Q
H130 : Col Q A F
H129 : neq Q P
H128 : neq P Q
H127 : Col A j F
H126 : nCol E C A
H125 : Col E C j
H124 : BetS A j F
j : Point
H123 : TS A E C F
H122 : OS A f E C
H121 : TS f E C F
H120 : TS F E C f
H119 : nCol E C F
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Col A F j) by (forward_using lemma_collinearorder).
-----
Lemma proposition_42 : forall A B C D E J K, Triangle A B C -> nCol J D K -> Midpoint B E C -> exists X Z, PG X E C Z /\\ EF A B E C X E C Z /\\ CongA C E X J D K /\\ Col X Z A.
Proof.
intros.
assert ((BetS B E C /\\ Cong B E E C)) by (conclude_def Midpoint ).
assert (Cong E B E C) by (forward_using lemma_congruenceflip).
assert (nCol A B C) by (conclude_def Triangle ).
assert (Col B E C) by (conclude_def Col ).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (nCol E C A) by (conclude lemma_NChelper).
let Tf:=fresh in assert (Tf:exists f c, (Out E C c /\\ CongA f E c J D K /\\ OS f A E C)) by (conclude proposition_23C);destruct Tf as [f[c]];spliter.
assert (nCol B C A) by (forward_using lemma_NCorder).
let Tf:=fresh in assert (Tf:exists P Q M, (BetS P A Q /\\ CongA Q A E A E B /\\ CongA Q A E B E A /\\ CongA E A Q B E A /\\ CongA P A E A E C /\\ CongA P A E C E A /\\ CongA E A P C E A /\\ Par P Q B C /\\ Cong P A E C /\\ Cong A Q B E /\\ Cong A M M E /\\ Cong P M M C /\\ Cong B M M Q /\\ BetS P M C /\\ BetS B M Q /\\ BetS A M E)) by (conclude proposition_31);destruct Tf as [P[Q[M]]];spliter.
assert (CongA A E C P A E) by (conclude lemma_equalanglessymmetric).
assert (nCol P A E) by (conclude lemma_equalanglesNC).
assert (nCol E A P) by (forward_using lemma_NCorder).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (nCol B C A) by (forward_using lemma_NCorder).
assert (Col B C E) by (forward_using lemma_collinearorder).
assert (eq B B) by (conclude cn_equalityreflexive).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col B C B) by (conclude_def Col ).
assert (neq B E) by (forward_using lemma_betweennotequal).
assert (nCol B E A) by (conclude lemma_NChelper).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Col B C C) by (conclude_def Col ).
assert (neq E C) by (forward_using lemma_betweennotequal).
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (nCol C E A) by (conclude lemma_NChelper).
assert (neq E A) by (forward_using lemma_NCdistinct).
assert (~ ~ Meet E f P Q).
let Tf:=fresh in assert (Tf:exists F, (neq E f /\\ neq P Q /\\ Col E f F /\\ Col P Q F)) by (conclude_def Meet );destruct Tf as [F];spliter.
assert (neq C E) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E C) by (conclude lemma_collinearparallel).
assert (Par E C P Q) by (conclude lemma_parallelsymmetric).
let Tf:=fresh in assert (Tf:exists G, (PG F G C E /\\ Col P Q G)) by (conclude lemma_triangletoparallelogram);destruct Tf as [G];spliter.
assert (PG G F E C) by (conclude lemma_PGflip).
assert (PG F E C G) by (conclude lemma_PGrotate).
assert (Col P A Q) by (conclude_def Col ).
assert (Col P Q A) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E G) by (forward_using lemma_parallelNC).
assert (neq F G) by (forward_using lemma_NCdistinct).
assert (Col F G A) by (conclude lemma_collinear5).
assert (ET F E C A E C) by (conclude proposition_41).
assert (Par P Q C B) by (forward_using lemma_parallelflip).
assert (Col C B E) by (forward_using lemma_collinearorder).
assert (neq E B) by (conclude lemma_inequalitysymmetric).
assert (Par P Q E B) by (conclude lemma_collinearparallel).
assert (Par P Q B E) by (forward_using lemma_parallelflip).
assert (Cong B E E C) by (forward_using lemma_congruenceflip).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col B E E) by (conclude_def Col ).
assert (ET A B E A E C) by (conclude proposition_38).
assert (ET A E C A B E) by (conclude axiom_ETsymmetric).
assert (ET A E C A E B) by (forward_using axiom_ETpermutation).
assert (ET A E B A E C) by (conclude axiom_ETsymmetric).
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col A E E) by (conclude_def Col ).
assert (nCol A E B) by (forward_using lemma_NCorder).
assert (TS B A E C) by (conclude_def TS ).
assert (PG E F G C) by (conclude lemma_PGflip).
assert (Cong_3 F E C C G F) by (conclude proposition_34).
assert (ET F E C C G F) by (conclude axiom_congruentequal).
assert (ET F E C F C G) by (forward_using axiom_ETpermutation).
assert (ET F C G F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (forward_using axiom_ETpermutation).
assert (ET F C E F C G) by (conclude axiom_ETsymmetric).
let Tf:=fresh in assert (Tf:exists m, (BetS E m G /\\ BetS F m C)) by (conclude lemma_diagonalsmeet);destruct Tf as [m];spliter.
assert (Col F m C) by (conclude_def Col ).
assert (Col F C m) by (forward_using lemma_collinearorder).
assert (Par F E C G) by (conclude_def PG ).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol F C E) by (forward_using lemma_NCorder).
assert (TS E F C G) by (conclude_def TS ).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET A E B F E C) by (conclude axiom_ETtransitive).
assert (ET A E B F C E) by (forward_using axiom_ETpermutation).
assert (ET A E C F E C) by (conclude axiom_ETsymmetric).
assert (ET F C G F C E) by (conclude axiom_ETsymmetric).
assert (ET F C G F E C) by (forward_using axiom_ETpermutation).
assert (ET F E C F C G) by (conclude axiom_ETsymmetric).
assert (ET A E C F C G) by (conclude axiom_ETtransitive).
assert (EF A B E C F E C G) by (conclude axiom_paste3).
assert (nCol F E C) by (forward_using lemma_parallelNC).
assert (nCol C E F) by (forward_using lemma_NCorder).
assert (CongA C E F C E F) by (conclude lemma_equalanglesreflexive).
assert ((eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f)) by (conclude_def Col ).
assert (neq F E) by (forward_using lemma_NCdistinct).
assert (neq E F) by (conclude lemma_inequalitysymmetric).
assert (Out E F f).
by cases on (eq E f \\/ eq E F \\/ eq f F \\/ BetS f E F \\/ BetS E f F \\/ BetS E F f).
assert (~ ~ Out E F f).
intro.
assert (eq E E) by (conclude cn_equalityreflexive).
assert (Col E C E) by (conclude_def Col ).
assert (BetS F E f) by (conclude axiom_betweennesssymmetry).
assert (nCol E C F) by (forward_using lemma_NCorder).
assert (TS F E C f) by (conclude_def TS ).
assert (TS f E C F) by (conclude lemma_oppositesidesymmetric).
assert (OS A f E C) by (forward_using lemma_samesidesymmetric).
assert (TS A E C F) by (conclude lemma_planeseparation).
let Tf:=fresh in assert (Tf:exists j, (BetS A j F /\\ Col E C j /\\ nCol E C A)) by (conclude_def TS );destruct Tf as [j];spliter.
assert (Col A j F) by (conclude_def Col ).
assert (neq P Q) by (forward_using lemma_betweennotequal).
assert (neq Q P) by (conclude lemma_inequalitysymmetric).
assert (Col Q A F) by (conclude lemma_collinear4).
assert (Col A F Q) by (forward_using lemma_collinearorder).
assert (Col Q P A) by (forward_using lemma_collinearorder).
assert (Col Q P F) by (forward_using lemma_collinearorder).
assert (Col P A F) by (conclude lemma_collinear4).
assert (Col A F P) by (forward_using lemma_collinearorder).
assert (Col A F j) by (forward_using lemma_collinearorder).

*****
H136 : Col A F j
H135 : Col A F P
H134 : Col P A F
H133 : Col Q P F
H132 : Col Q P A
H131 : Col A F Q
H130 : Col Q A F
H129 : neq Q P
H128 : neq P Q
H127 : Col A j F
H126 : nCol E C A
H125 : Col E C j
H124 : BetS A j F
j : Point
H123 : TS A E C F
H122 : OS A f E C
H121 : TS f E C F
H120 : TS F E C f
H119 : nCol E C F
H118 : BetS F E f
H117 : Col E C E
H115 : eq E E
H112 : not (Out E F f)
H116 : BetS f E F
H114 : neq E F
H113 : neq F E
H111 : CongA C E F C E F
H110 : nCol C E F
H109 : nCol F E C
H108 : EF A B E C F E C G
H107 : ET A E C F C G
H106 : ET F E C F C G
H105 : ET F C G F E C
H104 : ET F C G F C E
H103 : ET A E C F E C
H102 : ET A E B F C E
H101 : ET A E B F E C
H100 : ET A E C F E C
H99 : TS E F C G
H98 : nCol F C E
H97 : nCol F E C
H96 : Par F E C G
H95 : Col F C m
H94 : Col F m C
H93 : BetS F m C
H92 : BetS E m G
m : Point
H91 : ET F C E F C G
H90 : ET F C G F C E
H89 : ET F C G F E C
H88 : ET F E C F C G
H87 : ET F E C C G F
H86 : Cong_3 F E C C G F
H85 : PG E F G C
H84 : TS B A E C
H83 : nCol A E B
H82 : Col A E E
H81 : eq E E
H80 : ET A E B A E C
H79 : ET A E C A E B
H78 : ET A E C A B E
H77 : ET A B E A E C
H76 : Col B E E
H75 : eq E E
H74 : Cong B E E C
H73 : Par P Q B E
H72 : Par P Q E B
H71 : neq E B
H70 : Col C B E
H69 : Par P Q C B
H68 : ET F E C A E C
H67 : Col F G A
H66 : neq F G
H65 : nCol F E G
H64 : Par F E C G
H63 : Col P Q A
H62 : Col P A Q
H61 : PG F E C G
H60 : PG G F E C
H59 : Col P Q G
H58 : PG F G C E
G : Point
H57 : Par E C P Q
H56 : Par P Q E C
H55 : neq C E
H54 : Col P Q F
H53 : Col E f F
H52 : neq P Q
H51 : neq E f
F : Point
H50 : not (not (Meet E f P Q))
H49 : neq E A
H48 : nCol C E A
H47 : neq C E
H46 : neq E C
H45 : Col B C C
H44 : eq C C
H43 : nCol B E A
H42 : neq B E
H41 : Col B C B
H40 : eq A A
H39 : eq B B
H38 : Col B C E
H37 : nCol B C A
H36 : OS A f E C
H35 : nCol E A P
H34 : nCol P A E
H33 : CongA A E C P A E
H32 : BetS A M E
H31 : BetS B M Q
H30 : BetS P M C
H29 : Cong B M M Q
H28 : Cong P M M C
H27 : Cong A M M E
H26 : Cong A Q B E
H25 : Cong P A E C
H24 : Par P Q B C
H23 : CongA E A P C E A
H22 : CongA P A E C E A
H21 : CongA P A E A E C
H20 : CongA E A Q B E A
H19 : CongA Q A E B E A
H18 : CongA Q A E A E B
H17 : BetS P A Q
P,Q,M : Point
H16 : nCol B C A
H14 : OS f A E C
H13 : CongA f E c J D K
H12 : Out E C c
f,c : Point
H11 : nCol E C A
H10 : neq E C
H9 : Col B C C
H8 : eq C C
H7 : Col B C E
H6 : nCol B C A
H5 : Col B E C
H4 : nCol A B C
H3 : Cong E B E C
H15 : Cong B E E C
H2 : BetS B E C
H1 : Midpoint B E C
H0 : nCol J D K
H : Triangle A B C
A,B,C,D,E,J,K : Point
Ax : area Ax2
Ax2 : euclidean_euclidean Ax1
Ax1 : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
