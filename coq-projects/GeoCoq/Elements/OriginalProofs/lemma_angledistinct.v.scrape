Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglessymmetric.
-----
Section Euclid.
-----
Context `{Ax1:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_angledistinct : \n   forall A B C a b c, \n   CongA A B C a b c ->\n   neq A B /\ neq B C /\ neq A C /\ neq a b /\ neq b c /\ neq a c.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.

*****
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
forall (A B C a b c : Point) (_ : CongA A B C a b c), and (neq A B) (and (neq B C) (and (neq A C) (and (neq a b) (and (neq b c) (neq a c)))))
+++++
Proof.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.

*****
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
forall (A B C a b c : Point) (_ : CongA A B C a b c), and (neq A B) (and (neq B C) (and (neq A C) (and (neq a b) (and (neq b c) (neq a c)))))
+++++
intros.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.

*****
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (neq A B) (and (neq B C) (and (neq A C) (and (neq a b) (and (neq b c) (neq a c)))))
+++++
assert (nCol A B C).
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).

*****
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
nCol A B C
+++++
conclude_def CongA .
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).

*****
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (neq A B) (and (neq B C) (and (neq A C) (and (neq a b) (and (neq b c) (neq a c)))))
+++++
idtac.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.

*****
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (neq A B) (and (neq B C) (and (neq A C) (and (neq a b) (and (neq b c) (neq a c)))))
+++++
assert (~ eq A B).
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).

*****
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (eq A B)
+++++
intro.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
intro.

*****
H1 : eq A B
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col A B C).
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
intro.
assert (Col A B C).

*****
H1 : eq A B
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Col A B C
+++++
conclude_def Col .
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
intro.
assert (Col A B C).

*****
H2 : Col A B C
H1 : eq A B
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
intro.
assert (Col A B C).
idtac.

*****
H2 : Col A B C
H1 : eq A B
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).

*****
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (neq A B) (and (neq B C) (and (neq A C) (and (neq a b) (and (neq b c) (neq a c)))))
+++++
assert (~ eq B C).
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).

*****
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (eq B C)
+++++
intro.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
intro.

*****
H2 : eq B C
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col A B C).
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
intro.
assert (Col A B C).

*****
H2 : eq B C
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Col A B C
+++++
conclude_def Col .
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
intro.
assert (Col A B C).

*****
H3 : Col A B C
H2 : eq B C
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
intro.
assert (Col A B C).
idtac.

*****
H3 : Col A B C
H2 : eq B C
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).

*****
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (neq A B) (and (neq B C) (and (neq A C) (and (neq a b) (and (neq b c) (neq a c)))))
+++++
assert (~ eq A C).
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).

*****
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (eq A C)
+++++
intro.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
intro.

*****
H3 : eq A C
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col A B C).
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
intro.
assert (Col A B C).

*****
H3 : eq A C
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Col A B C
+++++
conclude_def Col .
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
intro.
assert (Col A B C).

*****
H4 : Col A B C
H3 : eq A C
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
intro.
assert (Col A B C).
idtac.

*****
H4 : Col A B C
H3 : eq A C
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).

*****
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (neq A B) (and (neq B C) (and (neq A C) (and (neq a b) (and (neq b c) (neq a c)))))
+++++
assert (CongA a b c A B C).
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).

*****
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
CongA a b c A B C
+++++
conclude lemma_equalanglessymmetric.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).

*****
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (neq A B) (and (neq B C) (and (neq A C) (and (neq a b) (and (neq b c) (neq a c)))))
+++++
idtac.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.

*****
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (neq A B) (and (neq B C) (and (neq A C) (and (neq a b) (and (neq b c) (neq a c)))))
+++++
assert (nCol a b c).
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).

*****
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
nCol a b c
+++++
conclude_def CongA .
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).

*****
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (neq A B) (and (neq B C) (and (neq A C) (and (neq a b) (and (neq b c) (neq a c)))))
+++++
idtac.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.

*****
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (neq A B) (and (neq B C) (and (neq A C) (and (neq a b) (and (neq b c) (neq a c)))))
+++++
assert (~ eq a b).
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).

*****
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (eq a b)
+++++
intro.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).
intro.

*****
H6 : eq a b
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col a b c).
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).
intro.
assert (Col a b c).

*****
H6 : eq a b
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Col a b c
+++++
conclude_def Col .
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).
intro.
assert (Col a b c).

*****
H7 : Col a b c
H6 : eq a b
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).
intro.
assert (Col a b c).
idtac.

*****
H7 : Col a b c
H6 : eq a b
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).

*****
H6 : not (eq a b)
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (neq A B) (and (neq B C) (and (neq A C) (and (neq a b) (and (neq b c) (neq a c)))))
+++++
assert (~ eq b c).
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).
assert (~ eq b c).

*****
H6 : not (eq a b)
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (eq b c)
+++++
intro.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).
assert (~ eq b c).
intro.

*****
H7 : eq b c
H6 : not (eq a b)
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col a b c).
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).
assert (~ eq b c).
intro.
assert (Col a b c).

*****
H7 : eq b c
H6 : not (eq a b)
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Col a b c
+++++
conclude_def Col .
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).
assert (~ eq b c).
intro.
assert (Col a b c).

*****
H8 : Col a b c
H7 : eq b c
H6 : not (eq a b)
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).
assert (~ eq b c).
intro.
assert (Col a b c).
idtac.

*****
H8 : Col a b c
H7 : eq b c
H6 : not (eq a b)
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).
assert (~ eq b c).

*****
H7 : not (eq b c)
H6 : not (eq a b)
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (neq A B) (and (neq B C) (and (neq A C) (and (neq a b) (and (neq b c) (neq a c)))))
+++++
assert (~ eq a c).
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).
assert (~ eq b c).
assert (~ eq a c).

*****
H7 : not (eq b c)
H6 : not (eq a b)
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (eq a c)
+++++
intro.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).
assert (~ eq b c).
assert (~ eq a c).
intro.

*****
H8 : eq a c
H7 : not (eq b c)
H6 : not (eq a b)
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col a b c).
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).
assert (~ eq b c).
assert (~ eq a c).
intro.
assert (Col a b c).

*****
H8 : eq a c
H7 : not (eq b c)
H6 : not (eq a b)
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Col a b c
+++++
conclude_def Col .
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).
assert (~ eq b c).
assert (~ eq a c).
intro.
assert (Col a b c).

*****
H9 : Col a b c
H8 : eq a c
H7 : not (eq b c)
H6 : not (eq a b)
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).
assert (~ eq b c).
assert (~ eq a c).
intro.
assert (Col a b c).
idtac.

*****
H9 : Col a b c
H8 : eq a c
H7 : not (eq b c)
H6 : not (eq a b)
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).
idtac.
assert (~ eq A B).
assert (~ eq B C).
assert (~ eq A C).
assert (CongA a b c A B C).
idtac.
assert (nCol a b c).
idtac.
assert (~ eq a b).
assert (~ eq b c).
assert (~ eq a c).

*****
H8 : not (eq a c)
H7 : not (eq b c)
H6 : not (eq a b)
H5 : nCol a b c
H4 : CongA a b c A B C
H3 : not (eq A C)
H2 : not (eq B C)
H1 : not (eq A B)
H0 : nCol A B C
H : CongA A B C a b c
A,B,C,a,b,c : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
and (neq A B) (and (neq B C) (and (neq A C) (and (neq a b) (and (neq b c) (neq a c)))))
+++++
close.
-----
Lemma lemma_angledistinct : forall A B C a b c, CongA A B C a b c -> neq A B /\\ neq B C /\\ neq A C /\\ neq a b /\\ neq b c /\\ neq a c.
Proof.
intros.
assert (nCol A B C).

*****

*****

+++++
Qed.
-----
End Euclid.
-----
