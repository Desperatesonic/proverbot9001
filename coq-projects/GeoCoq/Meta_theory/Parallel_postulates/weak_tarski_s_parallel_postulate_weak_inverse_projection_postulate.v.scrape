Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Annexes.suma.
-----
Require Import GeoCoq.Tarski_dev.Ch12_parallel.
-----
Section weak_tarski_s_parallel_postulate_weak_inverse_projection_postulate.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma  weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux :\n  weak_tarski_s_parallel_postulate ->\n  forall A B C P T,\n    Per A B C -> InAngle T A B C ->\n    P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P ->\n    (exists X, Out B A X /\ Col T P X) \/ (exists Y, Out B C Y /\ Col T P Y).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : weak_tarski_s_parallel_postulate) (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C) (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T) (_ : Coplanar A B C P), or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
Proof.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : weak_tarski_s_parallel_postulate) (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C) (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Per B P T) (_ : Coplanar A B C P), or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.

*****
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
assert (HIn : InAngle P A B C).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).

*****
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P A B C
+++++
apply conga_cop_inangle_per2__inangle with T.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
apply conga_cop_inangle_per2__inangle with T.

*****
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
assumption.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
apply conga_cop_inangle_per2__inangle with T.

*****
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T A B C
+++++
assumption.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
apply conga_cop_inangle_per2__inangle with T.

*****
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P B A P B C
+++++
assumption.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
apply conga_cop_inangle_per2__inangle with T.

*****
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B P T
+++++
assumption.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
apply conga_cop_inangle_per2__inangle with T.

*****
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P
+++++
assumption.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).

*****
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
idtac.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.

*****
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
assert (HAcute : Acute P B A).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).

*****
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute P B A
+++++
apply acute_sym, conga_inangle_per__acute with C.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
apply acute_sym, conga_inangle_per__acute with C.

*****
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
assumption.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
apply acute_sym, conga_inangle_per__acute with C.

*****
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P A B C
+++++
assumption.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
apply acute_sym, conga_inangle_per__acute with C.

*****
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P B A P B C
+++++
assumption.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).

*****
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
idtac.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.

*****
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
assert (HAcute' : Acute P B C).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).

*****
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute P B C
+++++
apply (acute_conga__acute P B A).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
apply (acute_conga__acute P B A).

*****
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute P B A
+++++
assumption.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
apply (acute_conga__acute P B A).

*****
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P B A P B C
+++++
assumption.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).

*****
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
idtac.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.

*****
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
assert_diffs.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.

*****
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
assert (HPerp : Perp B P P T).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).

*****
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B P P T
+++++
apply per_perp.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
apply per_perp.

*****
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B P)
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
apply per_perp.

*****
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P T)
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
apply per_perp.

*****
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B P T
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).

*****
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
idtac.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.

*****
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
assert (HNCol : ~ Col A B C).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).

*****
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
apply per_not_col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
apply per_not_col.

*****
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
apply per_not_col.

*****
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
apply per_not_col.

*****
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).

*****
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
idtac.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.

*****
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
assert (HNCol1 : ~ Col B P T).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).

*****
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B P T)
+++++
apply per_not_col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
apply per_not_col.

*****
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B P)
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
apply per_not_col.

*****
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P T)
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
apply per_not_col.

*****
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B P T
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).

*****
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
idtac.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.

*****
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
destruct (col_dec A B T).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).

*****
H4 : Col A B T
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
left.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
left.

*****
H4 : Col A B T
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Out B A X) (Col T P X))
+++++
exists T.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
left.
exists T.

*****
H4 : Col A B T
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A T) (Col T P T)
+++++
split.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
left.
exists T.
split.

*****
H4 : Col A B T
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A T
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
left.
exists T.
split.
Col.

*****
H4 : Col A B T
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A T
+++++
apply l6_6, acute_col_perp__out_1 with P.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
left.
exists T.
split.
Col.
apply l6_6, acute_col_perp__out_1 with P.

*****
H4 : Col A B T
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute P B A
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
left.
exists T.
split.
Col.
apply l6_6, acute_col_perp__out_1 with P.

*****
H4 : Col A B T
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B A T
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
left.
exists T.
split.
Col.
apply l6_6, acute_col_perp__out_1 with P.

*****
H4 : Col A B T
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B P P T
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
left.
exists T.
split.

*****
H4 : Col A B T
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col T P T
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).

*****
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].

*****
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A B C
+++++
trivial.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].

*****
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle T A B C
+++++
trivial.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].

*****
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
trivial.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.

*****
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
destruct (col_dec P T U) as [HCol|HNCol2].
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].

*****
HCol : Col P T U
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
left.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
left.

*****
HCol : Col P T U
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Out B A X) (Col T P X))
+++++
exists U.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
left.
exists U.

*****
HCol : Col P T U
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A U) (Col T P U)
+++++
split.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
left.
exists U.
split.

*****
HCol : Col P T U
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A U
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
left.
exists U.
split.

*****
HCol : Col P T U
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col T P U
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].

*****
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
destruct (col_dec P T V) as [HCol|HNCol3].
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].

*****
HCol : Col P T V
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
right.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
right.

*****
HCol : Col P T V
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y))
+++++
exists V.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
right.
exists V.

*****
HCol : Col P T V
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B C V) (Col T P V)
+++++
split.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
right.
exists V.
split.

*****
HCol : Col P T V
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C V
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
right.
exists V.
split.

*****
HCol : Col P T V
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col T P V
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].

*****
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].

*****
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P T B U
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.

*****
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P T B U
+++++
assert (Coplanar A B C P).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (Coplanar A B C P).

*****
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C P
+++++
Cop.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (Coplanar A B C P).

*****
H5 : Coplanar A B C P
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P T B U
+++++
idtac.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (Coplanar A B C P).
idtac.

*****
H5 : Coplanar A B C P
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P T B U
+++++
assert (Coplanar A B C T).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (Coplanar A B C P).
idtac.
assert (Coplanar A B C T).

*****
H5 : Coplanar A B C P
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C T
+++++
Cop.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (Coplanar A B C P).
idtac.
assert (Coplanar A B C T).

*****
H6 : Coplanar A B C T
H5 : Coplanar A B C P
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P T B U
+++++
idtac.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (Coplanar A B C P).
idtac.
assert (Coplanar A B C T).
idtac.

*****
H6 : Coplanar A B C T
H5 : Coplanar A B C P
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P T B U
+++++
assert (Coplanar A B U C).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (Coplanar A B C P).
idtac.
assert (Coplanar A B C T).
idtac.
assert (Coplanar A B U C).

*****
H6 : Coplanar A B C T
H5 : Coplanar A B C P
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B U C
+++++
apply col__coplanar.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (Coplanar A B C P).
idtac.
assert (Coplanar A B C T).
idtac.
assert (Coplanar A B U C).
apply col__coplanar.

*****
H6 : Coplanar A B C T
H5 : Coplanar A B C P
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B U
+++++
assert_cols.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (Coplanar A B C P).
idtac.
assert (Coplanar A B C T).
idtac.
assert (Coplanar A B U C).
apply col__coplanar.
assert_cols.

*****
H9 : Col B A U
H8 : Col B C V
H7 : Col U T V
H6 : Coplanar A B C T
H5 : Coplanar A B C P
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B U
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (Coplanar A B C P).
idtac.
assert (Coplanar A B C T).
idtac.
assert (Coplanar A B U C).

*****
H7 : Coplanar A B U C
H6 : Coplanar A B C T
H5 : Coplanar A B C P
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P T B U
+++++
idtac.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (Coplanar A B C P).
idtac.
assert (Coplanar A B C T).
idtac.
assert (Coplanar A B U C).
idtac.

*****
H7 : Coplanar A B U C
H6 : Coplanar A B C T
H5 : Coplanar A B C P
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P T B U
+++++
CopR.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].

*****
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B P T)
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].

*****
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col U P T)
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].

*****
HTS : TS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.

*****
HTS : TS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
destruct HTS as [_ [_ [X [HX1 HX2]]]].
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
destruct HTS as [_ [_ [X [HX1 HX2]]]].

*****
HX2 : Bet B X U
HX1 : Col X P T
X : Tpoint
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
left.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
destruct HTS as [_ [_ [X [HX1 HX2]]]].
left.

*****
HX2 : Bet B X U
HX1 : Col X P T
X : Tpoint
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Out B A X) (Col T P X))
+++++
exists X.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
destruct HTS as [_ [_ [X [HX1 HX2]]]].
left.
exists X.

*****
HX2 : Bet B X U
HX1 : Col X P T
X : Tpoint
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B A X) (Col T P X)
+++++
split.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
destruct HTS as [_ [_ [X [HX1 HX2]]]].
left.
exists X.
split.

*****
HX2 : Bet B X U
HX1 : Col X P T
X : Tpoint
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A X
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
destruct HTS as [_ [_ [X [HX1 HX2]]]].
left.
exists X.
split.
Col.

*****
HX2 : Bet B X U
HX1 : Col X P T
X : Tpoint
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A X
+++++
apply l6_7 with U.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
destruct HTS as [_ [_ [X [HX1 HX2]]]].
left.
exists X.
split.
Col.
apply l6_7 with U.

*****
HX2 : Bet B X U
HX1 : Col X P T
X : Tpoint
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A U
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
destruct HTS as [_ [_ [X [HX1 HX2]]]].
left.
exists X.
split.
Col.
apply l6_7 with U.

*****
HX2 : Bet B X U
HX1 : Col X P T
X : Tpoint
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B U X
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
destruct HTS as [_ [_ [X [HX1 HX2]]]].
left.
exists X.
split.
Col.
apply l6_7 with U.
auto.

*****
HX2 : Bet B X U
HX1 : Col X P T
X : Tpoint
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B U X
+++++
assert_diffs.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
destruct HTS as [_ [_ [X [HX1 HX2]]]].
left.
exists X.
split.
Col.
apply l6_7 with U.
auto.
assert_diffs.

*****
H13 : not (eq U B)
H11 : not (eq V B)
H5 : not (eq U V)
H14 : not (eq A T)
H12 : not (eq P U)
H8 : not (eq T U)
H10 : not (eq P V)
H7 : not (eq T V)
HX2 : Bet B X U
HX1 : Col X P T
X : Tpoint
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B U X
+++++
apply l6_6, bet_out.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
destruct HTS as [_ [_ [X [HX1 HX2]]]].
left.
exists X.
split.
Col.
apply l6_7 with U.
auto.
assert_diffs.
apply l6_6, bet_out.

*****
H13 : not (eq U B)
H11 : not (eq V B)
H5 : not (eq U V)
H14 : not (eq A T)
H12 : not (eq P U)
H8 : not (eq T U)
H10 : not (eq P V)
H7 : not (eq T V)
HX2 : Bet B X U
HX1 : Col X P T
X : Tpoint
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X B)
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
destruct HTS as [_ [_ [X [HX1 HX2]]]].
left.
exists X.
split.
Col.
apply l6_7 with U.
auto.
assert_diffs.
apply l6_6, bet_out.
auto.

*****
H13 : not (eq U B)
H11 : not (eq V B)
H5 : not (eq U V)
H14 : not (eq A T)
H12 : not (eq P U)
H8 : not (eq T U)
H10 : not (eq P V)
H7 : not (eq T V)
HX2 : Bet B X U
HX1 : Col X P T
X : Tpoint
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X B)
+++++
intro.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
destruct HTS as [_ [_ [X [HX1 HX2]]]].
left.
exists X.
split.
Col.
apply l6_7 with U.
auto.
assert_diffs.
apply l6_6, bet_out.
auto.
intro.

*****
H6 : eq X B
H13 : not (eq U B)
H11 : not (eq V B)
H5 : not (eq U V)
H14 : not (eq A T)
H12 : not (eq P U)
H8 : not (eq T U)
H10 : not (eq P V)
H7 : not (eq T V)
HX2 : Bet B X U
HX1 : Col X P T
X : Tpoint
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
destruct HTS as [_ [_ [X [HX1 HX2]]]].
left.
exists X.
split.
Col.
apply l6_7 with U.
auto.
assert_diffs.
apply l6_6, bet_out.
auto.
intro.
subst.

*****
H13 : not (eq U B)
H11 : not (eq V B)
H5 : not (eq U V)
H14 : not (eq A T)
H12 : not (eq P U)
H8 : not (eq T U)
H10 : not (eq P V)
H7 : not (eq T V)
HX1 : Col B P T
HX2 : Bet B B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol1, HX1.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
destruct HTS as [_ [_ [X [HX1 HX2]]]].
left.
exists X.
split.
Col.
apply l6_7 with U.
auto.
assert_diffs.
apply l6_6, bet_out.

*****
H13 : not (eq U B)
H11 : not (eq V B)
H5 : not (eq U V)
H14 : not (eq A T)
H12 : not (eq P U)
H8 : not (eq T U)
H10 : not (eq P V)
H7 : not (eq T V)
HX2 : Bet B X U
HX1 : Col X P T
X : Tpoint
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet B X U
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
destruct HTS as [_ [_ [X [HX1 HX2]]]].
left.
exists X.
split.

*****
HX2 : Bet B X U
HX1 : Col X P T
X : Tpoint
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col T P X
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].

*****
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.

*****
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
assert (HTS : TS P T B V).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).

*****
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS P T B V
+++++
apply l9_8_2 with U.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
apply l9_8_2 with U.

*****
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS P T U V
+++++
Side.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
apply l9_8_2 with U.
Side.

*****
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS P T U V
+++++
repeat split.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
apply l9_8_2 with U.
Side.
repeat split.

*****
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col U P T)
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
apply l9_8_2 with U.
Side.
repeat split.

*****
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col V P T)
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
apply l9_8_2 with U.
Side.
repeat split.

*****
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T0 : Tpoint => and (Col T0 P T) (Bet U T0 V))
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
apply l9_8_2 with U.
Side.
repeat split.
Col.

*****
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T0 : Tpoint => and (Col T0 P T) (Bet U T0 V))
+++++
exists T.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
apply l9_8_2 with U.
Side.
repeat split.
Col.
exists T.

*****
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col T P T) (Bet U T V)
+++++
repeat split.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
apply l9_8_2 with U.
Side.
repeat split.
Col.
exists T.
repeat split.

*****
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col T P T
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
apply l9_8_2 with U.
Side.
repeat split.
Col.
exists T.
repeat split.

*****
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet U T V
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
apply l9_8_2 with U.

*****
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P T U B
+++++
Side.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).

*****
HTS : TS P T B V
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
destruct HTS as [_ [_ [Y [HY1 HY2]]]].
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
destruct HTS as [_ [_ [Y [HY1 HY2]]]].

*****
HY2 : Bet B Y V
HY1 : Col Y P T
Y : Tpoint
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (ex (fun X : Tpoint => and (Out B A X) (Col T P X))) (ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y)))
+++++
right.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
destruct HTS as [_ [_ [Y [HY1 HY2]]]].
right.

*****
HY2 : Bet B Y V
HY1 : Col Y P T
Y : Tpoint
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col T P Y))
+++++
exists Y.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
destruct HTS as [_ [_ [Y [HY1 HY2]]]].
right.
exists Y.

*****
HY2 : Bet B Y V
HY1 : Col Y P T
Y : Tpoint
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Out B C Y) (Col T P Y)
+++++
split.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
destruct HTS as [_ [_ [Y [HY1 HY2]]]].
right.
exists Y.
split.

*****
HY2 : Bet B Y V
HY1 : Col Y P T
Y : Tpoint
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
destruct HTS as [_ [_ [Y [HY1 HY2]]]].
right.
exists Y.
split.
Col.

*****
HY2 : Bet B Y V
HY1 : Col Y P T
Y : Tpoint
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
apply l6_7 with V.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
destruct HTS as [_ [_ [Y [HY1 HY2]]]].
right.
exists Y.
split.
Col.
apply l6_7 with V.

*****
HY2 : Bet B Y V
HY1 : Col Y P T
Y : Tpoint
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C V
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
destruct HTS as [_ [_ [Y [HY1 HY2]]]].
right.
exists Y.
split.
Col.
apply l6_7 with V.

*****
HY2 : Bet B Y V
HY1 : Col Y P T
Y : Tpoint
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B V Y
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
destruct HTS as [_ [_ [Y [HY1 HY2]]]].
right.
exists Y.
split.
Col.
apply l6_7 with V.
auto.

*****
HY2 : Bet B Y V
HY1 : Col Y P T
Y : Tpoint
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B V Y
+++++
assert_diffs.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
destruct HTS as [_ [_ [Y [HY1 HY2]]]].
right.
exists Y.
split.
Col.
apply l6_7 with V.
auto.
assert_diffs.

*****
H13 : not (eq U B)
H11 : not (eq V B)
H5 : not (eq U V)
H14 : not (eq A T)
H12 : not (eq P U)
H8 : not (eq T U)
H10 : not (eq P V)
H7 : not (eq T V)
HY2 : Bet B Y V
HY1 : Col Y P T
Y : Tpoint
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B V Y
+++++
apply l6_6, bet_out.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
destruct HTS as [_ [_ [Y [HY1 HY2]]]].
right.
exists Y.
split.
Col.
apply l6_7 with V.
auto.
assert_diffs.
apply l6_6, bet_out.

*****
H13 : not (eq U B)
H11 : not (eq V B)
H5 : not (eq U V)
H14 : not (eq A T)
H12 : not (eq P U)
H8 : not (eq T U)
H10 : not (eq P V)
H7 : not (eq T V)
HY2 : Bet B Y V
HY1 : Col Y P T
Y : Tpoint
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Y B)
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
destruct HTS as [_ [_ [Y [HY1 HY2]]]].
right.
exists Y.
split.
Col.
apply l6_7 with V.
auto.
assert_diffs.
apply l6_6, bet_out.
auto.

*****
H13 : not (eq U B)
H11 : not (eq V B)
H5 : not (eq U V)
H14 : not (eq A T)
H12 : not (eq P U)
H8 : not (eq T U)
H10 : not (eq P V)
H7 : not (eq T V)
HY2 : Bet B Y V
HY1 : Col Y P T
Y : Tpoint
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq Y B)
+++++
intro.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
destruct HTS as [_ [_ [Y [HY1 HY2]]]].
right.
exists Y.
split.
Col.
apply l6_7 with V.
auto.
assert_diffs.
apply l6_6, bet_out.
auto.
intro.

*****
H6 : eq Y B
H13 : not (eq U B)
H11 : not (eq V B)
H5 : not (eq U V)
H14 : not (eq A T)
H12 : not (eq P U)
H8 : not (eq T U)
H10 : not (eq P V)
H7 : not (eq T V)
HY2 : Bet B Y V
HY1 : Col Y P T
Y : Tpoint
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
destruct HTS as [_ [_ [Y [HY1 HY2]]]].
right.
exists Y.
split.
Col.
apply l6_7 with V.
auto.
assert_diffs.
apply l6_6, bet_out.
auto.
intro.
subst.

*****
H13 : not (eq U B)
H11 : not (eq V B)
H5 : not (eq U V)
H14 : not (eq A T)
H12 : not (eq P U)
H8 : not (eq T U)
H10 : not (eq P V)
H7 : not (eq T V)
HY1 : Col B P T
HY2 : Bet B B V
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNCol1, HY1.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
destruct HTS as [_ [_ [Y [HY1 HY2]]]].
right.
exists Y.
split.
Col.
apply l6_7 with V.
auto.
assert_diffs.
apply l6_6, bet_out.

*****
H13 : not (eq U B)
H11 : not (eq V B)
H5 : not (eq U V)
H14 : not (eq A T)
H12 : not (eq P U)
H8 : not (eq T U)
H10 : not (eq P V)
H7 : not (eq T V)
HY2 : Bet B Y V
HY1 : Col Y P T
Y : Tpoint
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet B Y V
+++++
auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).
idtac.
assert (HAcute : Acute P B A).
idtac.
assert (HAcute' : Acute P B C).
idtac.
assert_diffs.
assert (HPerp : Perp B P P T).
idtac.
assert (HNCol : ~ Col A B C).
idtac.
assert (HNCol1 : ~ Col B P T).
idtac.
destruct (col_dec A B T).
destruct (tora A B C T) as [U [V [HU [HV HUTV]]]].
trivial.
destruct (col_dec P T U) as [HCol|HNCol2].
destruct (col_dec P T V) as [HCol|HNCol3].
destruct (cop__one_or_two_sides P T B U) as [HTS|HOS].
Col.
assert (HTS : TS P T B V).
destruct HTS as [_ [_ [Y [HY1 HY2]]]].
right.
exists Y.
split.

*****
HY2 : Bet B Y V
HY1 : Col Y P T
Y : Tpoint
HOS : OS P T B U
HNCol3 : not (Col P T V)
HNCol2 : not (Col P T U)
HUTV : Bet U T V
HV : Out B C V
HU : Out B A U
U,V : Tpoint
H4 : not (Col A B T)
HNCol1 : not (Col B P T)
HNCol : not (Col A B C)
HPerp : Perp B P P T
H3 : not (eq C B)
H2 : not (eq A C)
H1 : not (eq A B)
H0 : not (eq P B)
H : not (eq B T)
HAcute' : Acute P B C
HAcute : Acute P B A
HIn : InAngle P A B C
HCop : Coplanar A B C P
HPerP : Per B P T
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
tora : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col T P Y
+++++
Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux : weak_tarski_s_parallel_postulate -> forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Per B P T -> Coplanar A B C P -> (exists X, Out B A X /\\ Col T P X) \\/ (exists Y, Out B C Y /\\ Col T P Y).
Proof.
intros tora A B C P T HPer HInAngle HPT HCongA HPerP HCop.
assert (HIn : InAngle P A B C).

*****

*****

+++++
Qed.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate :\n  weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : weak_tarski_s_parallel_postulate, weak_inverse_projection_postulate
+++++
Proof.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : weak_tarski_s_parallel_postulate, weak_inverse_projection_postulate
+++++
intro wtpp.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.

*****
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
weak_inverse_projection_postulate
+++++
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\ Col T P X /\ Out B C Y /\ Col T P Y).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).

*****
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C) (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P) (_ : Per B P T), ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y))))), weak_inverse_projection_postulate
+++++
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.

*****
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HSuma : SumA A B C A B C D E F
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
assert (HNCol1 : ~ Col A B C).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).

*****
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HSuma : SumA A B C A B C D E F
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A B C)
+++++
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.

*****
H1 : not (eq D F)
H10 : not (eq E F)
H8 : not (eq D E)
H6 : not (eq B C)
H3 : not (eq P B)
H2 : not (eq A B)
H0 : not (eq B Q)
H : Col A B C
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HSuma : SumA A B C A B C D E F
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col D E F
+++++
apply (col2_suma__col A B C A B C); assumption.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.

*****
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HSuma : SumA A B C A B C D E F
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).

*****
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HSuma : SumA A B C A B C D E F
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
assert (HCongA : CongA A B C P B C).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).

*****
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HSuma : SumA A B C A B C D E F
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C P B C
+++++
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.

*****
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HSuma : SumA A B C A B C D E F
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).

*****
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HSuma : SumA A B C A B C D E F
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).

*****
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HSuma : SumA A B C A B C D E F
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
apply suma_left_comm in HSuma.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.

*****
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HSuma : SumA C B A A B C D E F
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].

*****
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
assert (HQ' : exists Q', P <> Q' /\ Col P Q Q' /\ InAngle Q' C B P).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).

*****
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q' : Tpoint => and (not (eq P Q')) (and (Col P Q Q') (InAngle Q' C B P)))
+++++
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.

*****
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B P Q C
+++++
assert (Coplanar A B P C) by Cop.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
assert (Coplanar A B P C) by Cop.

*****
H : Coplanar A B P C
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B P Q C
+++++
CopR.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.

*****
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q' : Tpoint => and (not (eq P Q')) (and (Col P Q Q') (InAngle Q' C B P)))
+++++
destruct (one_side_dec B C P Q0).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).

*****
H : OS B C P Q0
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q' : Tpoint => and (not (eq P Q')) (and (Col P Q Q') (InAngle Q' C B P)))
+++++
exists Q0; assert_diffs; split; auto; split; Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).
exists Q0; assert_diffs; split; auto; split; Col.

*****
H10 : not (eq F E)
H7 : not (eq D F)
H1 : not (eq D E)
H0 : not (eq J B)
H14 : not (eq P Q0)
H12 : not (eq C Q0)
H4 : not (eq B Q0)
H9 : not (eq A C)
H6 : not (eq A B)
H8 : not (eq B Q)
H5 : not (eq P C)
H2 : not (eq B C)
H3 : not (eq P B)
H : OS B C P Q0
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle Q0 C B P
+++++
apply os2__inangle; assumption.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).
exists Q0; assert_diffs; split; auto; split; Col.
apply os2__inangle; assumption.

*****
H : not (OS B C P Q0)
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q' : Tpoint => and (not (eq P Q')) (and (Col P Q Q') (InAngle Q' C B P)))
+++++
assert (HQ' : exists Q', Col P Q Q' /\ Col B C Q').
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).
exists Q0; assert_diffs; split; auto; split; Col.
apply os2__inangle; assumption.
assert (HQ' : exists Q', Col P Q Q' /\\ Col B C Q').

*****
H : not (OS B C P Q0)
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q' : Tpoint => and (Col P Q Q') (Col B C Q'))
+++++
destruct (col_dec B C Q0).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).
exists Q0; assert_diffs; split; auto; split; Col.
apply os2__inangle; assumption.
assert (HQ' : exists Q', Col P Q Q' /\\ Col B C Q').
destruct (col_dec B C Q0).

*****
H0 : Col B C Q0
H : not (OS B C P Q0)
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q' : Tpoint => and (Col P Q Q') (Col B C Q'))
+++++
exists Q0; Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).
exists Q0; assert_diffs; split; auto; split; Col.
apply os2__inangle; assumption.
assert (HQ' : exists Q', Col P Q Q' /\\ Col B C Q').
destruct (col_dec B C Q0).
exists Q0; Col.

*****
H0 : not (Col B C Q0)
H : not (OS B C P Q0)
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q' : Tpoint => and (Col P Q Q') (Col B C Q'))
+++++
assert_diffs.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).
exists Q0; assert_diffs; split; auto; split; Col.
apply os2__inangle; assumption.
assert (HQ' : exists Q', Col P Q Q' /\\ Col B C Q').
destruct (col_dec B C Q0).
exists Q0; Col.
assert_diffs.

*****
H10 : not (eq F E)
H5 : not (eq D F)
H2 : not (eq D E)
H1 : not (eq J B)
H15 : not (eq P Q0)
H12 : not (eq A C)
H8 : not (eq A B)
H11 : not (eq B Q)
H9 : not (eq P C)
H7 : not (eq P B)
H6 : not (eq B Q0)
H3 : not (eq C Q0)
H4 : not (eq B C)
H0 : not (Col B C Q0)
H : not (OS B C P Q0)
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q' : Tpoint => and (Col P Q Q') (Col B C Q'))
+++++
destruct (cop__not_one_side_two_sides B C P Q0) as [_ [_ [Q' [HCol' HBet]]]]; Col; Cop.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).
exists Q0; assert_diffs; split; auto; split; Col.
apply os2__inangle; assumption.
assert (HQ' : exists Q', Col P Q Q' /\\ Col B C Q').
destruct (col_dec B C Q0).
exists Q0; Col.
assert_diffs.
destruct (cop__not_one_side_two_sides B C P Q0) as [_ [_ [Q' [HCol' HBet]]]]; Col; Cop.

*****
HBet : Bet P Q' Q0
HCol' : Col Q' B C
Q' : Tpoint
H10 : not (eq F E)
H5 : not (eq D F)
H2 : not (eq D E)
H1 : not (eq J B)
H15 : not (eq P Q0)
H12 : not (eq A C)
H8 : not (eq A B)
H11 : not (eq B Q)
H9 : not (eq P C)
H7 : not (eq P B)
H6 : not (eq B Q0)
H3 : not (eq C Q0)
H4 : not (eq B C)
H0 : not (Col B C Q0)
H : not (OS B C P Q0)
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q' : Tpoint => and (Col P Q Q') (Col B C Q'))
+++++
exists Q'; split; ColR.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).
exists Q0; assert_diffs; split; auto; split; Col.
apply os2__inangle; assumption.
assert (HQ' : exists Q', Col P Q Q' /\\ Col B C Q').

*****
HQ' : ex (fun Q' : Tpoint => and (Col P Q Q') (Col B C Q'))
H : not (OS B C P Q0)
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q' : Tpoint => and (not (eq P Q')) (and (Col P Q Q') (InAngle Q' C B P)))
+++++
destruct HQ' as [Q' [HCol1 HCol2]].
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).
exists Q0; assert_diffs; split; auto; split; Col.
apply os2__inangle; assumption.
assert (HQ' : exists Q', Col P Q Q' /\\ Col B C Q').
destruct HQ' as [Q' [HCol1 HCol2]].

*****
HCol2 : Col B C Q'
HCol1 : Col P Q Q'
Q' : Tpoint
H : not (OS B C P Q0)
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Q' : Tpoint => and (not (eq P Q')) (and (Col P Q Q') (InAngle Q' C B P)))
+++++
exists Q'.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).
exists Q0; assert_diffs; split; auto; split; Col.
apply os2__inangle; assumption.
assert (HQ' : exists Q', Col P Q Q' /\\ Col B C Q').
destruct HQ' as [Q' [HCol1 HCol2]].
exists Q'.

*****
HCol2 : Col B C Q'
HCol1 : Col P Q Q'
Q' : Tpoint
H : not (OS B C P Q0)
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq P Q')) (and (Col P Q Q') (InAngle Q' C B P))
+++++
assert (P <> Q') by (intro; subst; apply HNCol3; Col).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).
exists Q0; assert_diffs; split; auto; split; Col.
apply os2__inangle; assumption.
assert (HQ' : exists Q', Col P Q Q' /\\ Col B C Q').
destruct HQ' as [Q' [HCol1 HCol2]].
exists Q'.
assert (P <> Q') by (intro; subst; apply HNCol3; Col).

*****
H0 : not (eq P Q')
HCol2 : Col B C Q'
HCol1 : Col P Q Q'
Q' : Tpoint
H : not (OS B C P Q0)
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (eq P Q')) (and (Col P Q Q') (InAngle Q' C B P))
+++++
split; auto; split; Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).
exists Q0; assert_diffs; split; auto; split; Col.
apply os2__inangle; assumption.
assert (HQ' : exists Q', Col P Q Q' /\\ Col B C Q').
destruct HQ' as [Q' [HCol1 HCol2]].
exists Q'.
assert (P <> Q') by (intro; subst; apply HNCol3; Col).
split; auto; split; Col.

*****
H0 : not (eq P Q')
HCol2 : Col B C Q'
HCol1 : Col P Q Q'
Q' : Tpoint
H : not (OS B C P Q0)
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle Q' C B P
+++++
apply out321__inangle; auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).
exists Q0; assert_diffs; split; auto; split; Col.
apply os2__inangle; assumption.
assert (HQ' : exists Q', Col P Q Q' /\\ Col B C Q').
destruct HQ' as [Q' [HCol1 HCol2]].
exists Q'.
assert (P <> Q') by (intro; subst; apply HNCol3; Col).
split; auto; split; Col.
apply out321__inangle; auto.

*****
H0 : not (eq P Q')
HCol2 : Col B C Q'
HCol1 : Col P Q Q'
Q' : Tpoint
H : not (OS B C P Q0)
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P B)
+++++
assert_diffs; auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).
exists Q0; assert_diffs; split; auto; split; Col.
apply os2__inangle; assumption.
assert (HQ' : exists Q', Col P Q Q' /\\ Col B C Q').
destruct HQ' as [Q' [HCol1 HCol2]].
exists Q'.
assert (P <> Q') by (intro; subst; apply HNCol3; Col).
split; auto; split; Col.
apply out321__inangle; auto.
assert_diffs; auto.

*****
H0 : not (eq P Q')
HCol2 : Col B C Q'
HCol1 : Col P Q Q'
Q' : Tpoint
H : not (OS B C P Q0)
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Q'
+++++
apply l6_6, (acute_col_perp__out_1 P); Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).
exists Q0; assert_diffs; split; auto; split; Col.
apply os2__inangle; assumption.
assert (HQ' : exists Q', Col P Q Q' /\\ Col B C Q').
destruct HQ' as [Q' [HCol1 HCol2]].
exists Q'.
assert (P <> Q') by (intro; subst; apply HNCol3; Col).
split; auto; split; Col.
apply out321__inangle; auto.
assert_diffs; auto.
apply l6_6, (acute_col_perp__out_1 P); Col.

*****
H0 : not (eq P Q')
HCol2 : Col B C Q'
HCol1 : Col P Q Q'
Q' : Tpoint
H : not (OS B C P Q0)
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute P B C
+++++
apply (acute_conga__acute A B C); assumption.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct (cop_not_par_same_side B P Q P P C) as [Q0 [HCol HOS]]; Col.
destruct (one_side_dec B C P Q0).
exists Q0; assert_diffs; split; auto; split; Col.
apply os2__inangle; assumption.
assert (HQ' : exists Q', Col P Q Q' /\\ Col B C Q').
destruct HQ' as [Q' [HCol1 HCol2]].
exists Q'.
assert (P <> Q') by (intro; subst; apply HNCol3; Col).
split; auto; split; Col.
apply out321__inangle; auto.
assert_diffs; auto.
apply l6_6, (acute_col_perp__out_1 P); Col.
apply (acute_conga__acute A B C); assumption.

*****
H0 : not (eq P Q')
HCol2 : Col B C Q'
HCol1 : Col P Q Q'
Q' : Tpoint
H : not (OS B C P Q0)
HOS : OS B P C Q0
HCol : Col Q P Q0
Q0 : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B P P Q'
+++++
apply perp_col1 with Q; auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).

*****
HQ' : ex\n (fun Q' : Tpoint =>\n and (not (eq P Q')) (and (Col P Q Q') (InAngle Q' C B P)))
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].

*****
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
assert (HInangle' : InAngle Q' C B J).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).

*****
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle Q' C B J
+++++
apply in_angle_trans with P; trivial.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).
apply in_angle_trans with P; trivial.

*****
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle P C B J
+++++
apply l11_25 with A C J; try (apply out_trivial; assert_diffs; auto); [|apply l6_6; assumption].
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).
apply in_angle_trans with P; trivial.
apply l11_25 with A C J; try (apply out_trivial; assert_diffs; auto); [|apply l6_6; assumption].

*****
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle A C B J
+++++
apply os_ts__inangle.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).
apply in_angle_trans with P; trivial.
apply l11_25 with A C J; try (apply out_trivial; assert_diffs; auto); [|apply l6_6; assumption].
apply os_ts__inangle.

*****
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS B A C J
+++++
assert (~ Col A B J) by (apply (ncol_conga_ncol A B C); CongA).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).
apply in_angle_trans with P; trivial.
apply l11_25 with A C J; try (apply out_trivial; assert_diffs; auto); [|apply l6_6; assumption].
apply os_ts__inangle.
assert (~ Col A B J) by (apply (ncol_conga_ncol A B C); CongA).

*****
H : not (Col A B J)
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS B A C J
+++++
assert_diffs; apply cop__not_one_side_two_sides; Col; Cop.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).
apply in_angle_trans with P; trivial.
apply l11_25 with A C J; try (apply out_trivial; assert_diffs; auto); [|apply l6_6; assumption].
apply os_ts__inangle.
assert (~ Col A B J) by (apply (ncol_conga_ncol A B C); CongA).
assert_diffs; apply cop__not_one_side_two_sides; Col; Cop.

*****
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B C J A
+++++
assert (~ Col C B J).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).
apply in_angle_trans with P; trivial.
apply l11_25 with A C J; try (apply out_trivial; assert_diffs; auto); [|apply l6_6; assumption].
apply os_ts__inangle.
assert (~ Col A B J) by (apply (ncol_conga_ncol A B C); CongA).
assert_diffs; apply cop__not_one_side_two_sides; Col; Cop.
assert (~ Col C B J).

*****
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C B J)
+++++
apply (ncol_conga_ncol D E F); CongA; assert_diffs; apply per_not_col; auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).
apply in_angle_trans with P; trivial.
apply l11_25 with A C J; try (apply out_trivial; assert_diffs; auto); [|apply l6_6; assumption].
apply os_ts__inangle.
assert (~ Col A B J) by (apply (ncol_conga_ncol A B C); CongA).
assert_diffs; apply cop__not_one_side_two_sides; Col; Cop.
assert (~ Col C B J).
apply (ncol_conga_ncol D E F); CongA; assert_diffs; apply per_not_col; auto.

*****
H : not (Col C B J)
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B C J A
+++++
apply invert_one_side, one_side_symmetry, cop__not_two_sides_one_side; Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).
apply in_angle_trans with P; trivial.
apply l11_25 with A C J; try (apply out_trivial; assert_diffs; auto); [|apply l6_6; assumption].
apply os_ts__inangle.
assert (~ Col A B J) by (apply (ncol_conga_ncol A B C); CongA).
assert_diffs; apply cop__not_one_side_two_sides; Col; Cop.
assert (~ Col C B J).
apply (ncol_conga_ncol D E F); CongA; assert_diffs; apply per_not_col; auto.
apply invert_one_side, one_side_symmetry, cop__not_two_sides_one_side; Col.

*****
H : not (Col C B J)
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (TS C B A J)
+++++
assert_diffs; auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).
apply in_angle_trans with P; trivial.
apply l11_25 with A C J; try (apply out_trivial; assert_diffs; auto); [|apply l6_6; assumption].
apply os_ts__inangle.
assert (~ Col A B J) by (apply (ncol_conga_ncol A B C); CongA).
assert_diffs; apply cop__not_one_side_two_sides; Col; Cop.
assert (~ Col C B J).
apply (ncol_conga_ncol D E F); CongA; assert_diffs; apply per_not_col; auto.
apply invert_one_side, one_side_symmetry, cop__not_two_sides_one_side; Col.
assert_diffs; auto.

*****
H15 : not (eq Q' B)
H4 : not (eq F E)
H1 : not (eq D F)
H0 : not (eq D E)
H11 : not (eq A C)
H7 : not (eq A B)
H10 : not (eq B Q)
H8 : not (eq P C)
H6 : not (eq P B)
H5 : not (eq C J)
H2 : not (eq B J)
H3 : not (eq C B)
H : not (Col C B J)
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (TS C B A J)
+++++
apply conga_sams_nos__nts with A B C; SumA.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).

*****
HInangle' : InAngle Q' C B J
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
destruct (rabp C B J P Q') as [Y [_ [HY1 [HY2 _]]]]; trivial.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).
destruct (rabp C B J P Q') as [Y [_ [HY1 [HY2 _]]]]; trivial.

*****
HInangle' : InAngle Q' C B J
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per C B J
+++++
apply (l11_17 D E F); CongA.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).
destruct (rabp C B J P Q') as [Y [_ [HY1 [HY2 _]]]]; trivial.
apply (l11_17 D E F); CongA.

*****
HInangle' : InAngle Q' C B J
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA P B C P B J
+++++
assert_diffs; apply out_conga with A C A J; try (apply out_trivial); CongA.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).
destruct (rabp C B J P Q') as [Y [_ [HY1 [HY2 _]]]]; trivial.
apply (l11_17 D E F); CongA.
assert_diffs; apply out_conga with A C A J; try (apply out_trivial); CongA.

*****
HInangle' : InAngle Q' C B J
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C B J P
+++++
assert (Coplanar A B P C) by Cop.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).
destruct (rabp C B J P Q') as [Y [_ [HY1 [HY2 _]]]]; trivial.
apply (l11_17 D E F); CongA.
assert_diffs; apply out_conga with A C A J; try (apply out_trivial); CongA.
assert (Coplanar A B P C) by Cop.

*****
H : Coplanar A B P C
HInangle' : InAngle Q' C B J
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C B J P
+++++
CopR.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).
destruct (rabp C B J P Q') as [Y [_ [HY1 [HY2 _]]]]; trivial.
apply (l11_17 D E F); CongA.
assert_diffs; apply out_conga with A C A J; try (apply out_trivial); CongA.
assert (Coplanar A B P C) by Cop.
CopR.

*****
HInangle' : InAngle Q' C B J
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B P Q'
+++++
apply per_col with Q; auto.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros rabp A B C D E F P Q HAcute HPerE HSuma HOut HPQ HPerP HCop.
assert (HNCol1 : ~ Col A B C).
intro; suma.assert_diffs; apply (per_not_col D E F); auto.
apply (col2_suma__col A B C A B C); assumption.
assert (HNCol2 : ~ Col B P Q) by (assert_diffs; apply per_not_col; auto).
assert (HCongA : CongA A B C P B C).
assert_diffs; apply out_conga with A C A C; try (apply out_trivial); CongA.
assert (HNCol3 : ~ Col P B C) by (apply (ncol_conga_ncol A B C); assumption).
assert (HPerp : Perp B P P Q) by (apply per_perp; assert_diffs; auto).
apply suma_left_comm in HSuma.
destruct HSuma as [J [HJ1 [HJ2 [HJ3 HJ4]]]].
assert (HQ' : exists Q', P <> Q' /\\ Col P Q Q' /\\ InAngle Q' C B P).
destruct HQ' as [Q' [HPQ' [HCol HInangle]]].
assert (HInangle' : InAngle Q' C B J).
destruct (rabp C B J P Q') as [Y [_ [HY1 [HY2 _]]]]; trivial.
apply (l11_17 D E F); CongA.
assert_diffs; apply out_conga with A C A J; try (apply out_trivial); CongA.
assert (Coplanar A B P C) by Cop.
CopR.
apply per_col with Q; auto.

*****
HY2 : Col Q' P Y
HY1 : Out B C Y
Y : Tpoint
HInangle' : InAngle Q' C B J
HInangle : InAngle Q' C B P
HCol : Col P Q Q'
HPQ' : not (eq P Q')
Q' : Tpoint
HPerp : Perp B P P Q
HNCol3 : not (Col P B C)
HCongA : CongA A B C P B C
HNCol2 : not (Col B P Q)
HNCol1 : not (Col A B C)
HCop : Coplanar A B C Q
HPerP : Per B P Q
HPQ : not (eq P Q)
HOut : Out B A P
HJ4 : CongA C B J D E F
HJ3 : Coplanar C B A J
HJ2 : not (OS B A C J)
HJ1 : CongA A B J A B C
J : Tpoint
HPerE : Per D E F
HAcute : Acute A B C
A,B,C,D,E,F,P,Q : Tpoint
rabp : forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C)\n (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P)\n (_ : Per B P T),\nex\n (fun X : Tpoint =>\n ex\n (fun Y : Tpoint =>\n and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => and (Out B C Y) (Col P Q Y))
+++++
exists Y; split; ColR.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).

*****
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C P T : Tpoint) (_ : Per A B C) (_ : InAngle T A B C) (_ : not (eq P T)) (_ : CongA P B A P B C) (_ : Coplanar A B C P) (_ : Per B P T), ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.

*****
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).

*****
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).

*****
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.

*****
HX2 : Col T P X
HX1 : Out B A X
X : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
-
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-

*****
HX2 : Col T P X
HX1 : Out B A X
X : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
destruct (symmetric_point_construction X P) as [Y HY].
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].

*****
HY : Midpoint P X Y
Y : Tpoint
HX2 : Col T P X
HX1 : Out B A X
X : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
assert (X <> Y).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).

*****
HY : Midpoint P X Y
Y : Tpoint
HX2 : Col T P X
HX1 : Out B A X
X : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X Y)
+++++
intro; treat_equalities.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
intro; treat_equalities.

*****
HX1 : Out B A P
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNOut, l6_7 with P; trivial.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
intro; treat_equalities.
apply HNOut, l6_7 with P; trivial.

*****
HX1 : Out B A P
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B P C
+++++
apply (l11_21_a P B A); trivial.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
intro; treat_equalities.
apply HNOut, l6_7 with P; trivial.
apply (l11_21_a P B A); trivial.

*****
HX1 : Out B A P
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B P A
+++++
apply l6_6, HX1.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).

*****
H : not (eq X Y)
HY : Midpoint P X Y
Y : Tpoint
HX2 : Col T P X
HX1 : Out B A X
X : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
assert (Out B C Y).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).

*****
H : not (eq X Y)
HY : Midpoint P X Y
Y : Tpoint
HX2 : Col T P X
HX1 : Out B A X
X : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B C Y
+++++
apply conga_cop_out_reflectl__out with A P X; trivial.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
apply conga_cop_out_reflectl__out with A P X; trivial.

*****
H : not (eq X Y)
HY : Midpoint P X Y
Y : Tpoint
HX2 : Col T P X
HX1 : Out B A X
X : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ReflectL X Y B P
+++++
apply l10_4_spec; split.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
apply conga_cop_out_reflectl__out with A P X; trivial.
apply l10_4_spec; split.

*****
H : not (eq X Y)
HY : Midpoint P X Y
Y : Tpoint
HX2 : Col T P X
HX1 : Out B A X
X : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X0 : Tpoint => and (Midpoint X0 X Y) (Col B P X0))
+++++
exists P; Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
apply conga_cop_out_reflectl__out with A P X; trivial.
apply l10_4_spec; split.
exists P; Col.

*****
H : not (eq X Y)
HY : Midpoint P X Y
Y : Tpoint
HX2 : Col T P X
HX1 : Out B A X
X : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Perp B P X Y) (eq X Y)
+++++
left; apply perp_col2_bis with P T; ColR.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).

*****
H0 : Out B C Y
H : not (eq X Y)
HY : Midpoint P X Y
Y : Tpoint
HX2 : Col T P X
HX1 : Out B A X
X : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
exists X, Y; repeat (split; try ColR).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
exists X, Y; repeat (split; try ColR).

*****

*****

+++++
-
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
exists X, Y; repeat (split; try ColR).
-

*****
HY2 : Col T P Y
HY1 : Out B C Y
Y : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
destruct (symmetric_point_construction Y P) as [X HX].
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
exists X, Y; repeat (split; try ColR).
-
destruct (symmetric_point_construction Y P) as [X HX].

*****
HX : Midpoint P Y X
X : Tpoint
HY2 : Col T P Y
HY1 : Out B C Y
Y : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
assert (X <> Y).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
exists X, Y; repeat (split; try ColR).
-
destruct (symmetric_point_construction Y P) as [X HX].
assert (X <> Y).

*****
HX : Midpoint P Y X
X : Tpoint
HY2 : Col T P Y
HY1 : Out B C Y
Y : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq X Y)
+++++
intro; treat_equalities.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
exists X, Y; repeat (split; try ColR).
-
destruct (symmetric_point_construction Y P) as [X HX].
assert (X <> Y).
intro; treat_equalities.

*****
HY1 : Out B C P
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HNOut, l6_7 with P; apply l6_6; trivial.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
exists X, Y; repeat (split; try ColR).
-
destruct (symmetric_point_construction Y P) as [X HX].
assert (X <> Y).
intro; treat_equalities.
apply HNOut, l6_7 with P; apply l6_6; trivial.

*****
HY1 : Out B C P
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B P A
+++++
apply (l11_21_a P B C); CongA.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
exists X, Y; repeat (split; try ColR).
-
destruct (symmetric_point_construction Y P) as [X HX].
assert (X <> Y).
intro; treat_equalities.
apply HNOut, l6_7 with P; apply l6_6; trivial.
apply (l11_21_a P B C); CongA.

*****
HY1 : Out B C P
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B P C
+++++
apply l6_6, HY1.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
exists X, Y; repeat (split; try ColR).
-
destruct (symmetric_point_construction Y P) as [X HX].
assert (X <> Y).

*****
H : not (eq X Y)
HX : Midpoint P Y X
X : Tpoint
HY2 : Col T P Y
HY1 : Out B C Y
Y : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
assert (Out B A X).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
exists X, Y; repeat (split; try ColR).
-
destruct (symmetric_point_construction Y P) as [X HX].
assert (X <> Y).
assert (Out B A X).

*****
H : not (eq X Y)
HX : Midpoint P Y X
X : Tpoint
HY2 : Col T P Y
HY1 : Out B C Y
Y : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out B A X
+++++
apply conga_cop_out_reflectl__out with C P Y; CongA; Cop.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
exists X, Y; repeat (split; try ColR).
-
destruct (symmetric_point_construction Y P) as [X HX].
assert (X <> Y).
assert (Out B A X).
apply conga_cop_out_reflectl__out with C P Y; CongA; Cop.

*****
H : not (eq X Y)
HX : Midpoint P Y X
X : Tpoint
HY2 : Col T P Y
HY1 : Out B C Y
Y : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Out B C A)
+++++
intro HOut; apply HNOut, l6_6, HOut.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
exists X, Y; repeat (split; try ColR).
-
destruct (symmetric_point_construction Y P) as [X HX].
assert (X <> Y).
assert (Out B A X).
apply conga_cop_out_reflectl__out with C P Y; CongA; Cop.
intro HOut; apply HNOut, l6_6, HOut.

*****
H : not (eq X Y)
HX : Midpoint P Y X
X : Tpoint
HY2 : Col T P Y
HY1 : Out B C Y
Y : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ReflectL Y X B P
+++++
apply l10_4_spec; split.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
exists X, Y; repeat (split; try ColR).
-
destruct (symmetric_point_construction Y P) as [X HX].
assert (X <> Y).
assert (Out B A X).
apply conga_cop_out_reflectl__out with C P Y; CongA; Cop.
intro HOut; apply HNOut, l6_6, HOut.
apply l10_4_spec; split.

*****
H : not (eq X Y)
HX : Midpoint P Y X
X : Tpoint
HY2 : Col T P Y
HY1 : Out B C Y
Y : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X0 : Tpoint => and (Midpoint X0 Y X) (Col B P X0))
+++++
exists P; Col.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
exists X, Y; repeat (split; try ColR).
-
destruct (symmetric_point_construction Y P) as [X HX].
assert (X <> Y).
assert (Out B A X).
apply conga_cop_out_reflectl__out with C P Y; CongA; Cop.
intro HOut; apply HNOut, l6_6, HOut.
apply l10_4_spec; split.
exists P; Col.

*****
H : not (eq X Y)
HX : Midpoint P Y X
X : Tpoint
HY2 : Col T P Y
HY1 : Out B C Y
Y : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Perp B P Y X) (eq Y X)
+++++
left; apply perp_col2_bis with P T; try ColR.
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).
intros A B C P T HPer HInAngle HPT HCongA HCop HPerP.
assert (HNOut : ~ Out B A C) by (intro; assert_diffs; apply (per_not_col A B C); Col).
assert (HPerp : Perp B P P T) by (assert_diffs; apply per_perp; auto).
destruct (weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate_aux wtpp A B C P T) as [[X [HX1 HX2]]|[Y [HY1 HY2]]]; trivial.
-
destruct (symmetric_point_construction X P) as [Y HY].
assert (X <> Y).
assert (Out B C Y).
exists X, Y; repeat (split; try ColR).
-
destruct (symmetric_point_construction Y P) as [X HX].
assert (X <> Y).
assert (Out B A X).

*****
H0 : Out B A X
H : not (eq X Y)
HX : Midpoint P Y X
X : Tpoint
HY2 : Col T P Y
HY1 : Out B C Y
Y : Tpoint
HPerp : Perp B P P T
HNOut : not (Out B A C)
HPerP : Per B P T
HCop : Coplanar A B C P
HCongA : CongA P B A P B C
HPT : not (eq P T)
HInAngle : InAngle T A B C
HPer : Per A B C
A,B,C,P,T : Tpoint
wtpp : weak_tarski_s_parallel_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => and (Out B A X) (and (Col T P X) (and (Out B C Y) (Col T P Y)))))
+++++
exists X, Y; repeat (split; try ColR).
-----
Lemma weak_tarski_s_parallel_postulate__weak_inverse_projection_postulate : weak_tarski_s_parallel_postulate -> weak_inverse_projection_postulate.
Proof.
intro wtpp.
cut (forall A B C P T, Per A B C -> InAngle T A B C -> P <> T -> CongA P B A P B C -> Coplanar A B C P -> Per B P T -> exists X Y, Out B A X /\\ Col T P X /\\ Out B C Y /\\ Col T P Y).

*****

*****

+++++
Qed.
-----
End weak_tarski_s_parallel_postulate_weak_inverse_projection_postulate.
-----
