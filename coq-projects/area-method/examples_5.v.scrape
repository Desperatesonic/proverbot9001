Require  Import area_method.
-----
Lemma l6_17 : forall A B R P Q S C F,\n on_line P B R ->\n on_line Q A R ->\n inter_ll S A P B Q ->\n inter_ll C R S A B ->\n inter_ll F P Q A B ->\n parallel A C B C ->\n parallel A F B F ->\n B<>C -> B<>F ->\n A**C / B**C = - A**F / B**F.
-----
Lemma l6_17 : forall A B R P Q S C F, on_line P B R -> on_line Q A R -> inter_ll S A P B Q -> inter_ll C R S A B -> inter_ll F P Q A B -> parallel A C B C -> parallel A F B F -> B<>C -> B<>F -> A**C / B**C = - A**F / B**F.

*****

*****
forall (A B R P Q S C F0 : Point) (_ : on_line P B R) (_ : on_line Q A R) (_ : inter_ll S A P B Q) (_ : inter_ll C R S A B) (_ : inter_ll F0 P Q A B) (_ : parallel A C B C) (_ : parallel A F0 B F0) (_ : not (eq B C)) (_ : not (eq B F0)), eq (Fdiv (DSeg A C) (DSeg B C)) (Fdiv (Fopp (DSeg A F0)) (DSeg B F0))
+++++
Proof.
-----
Lemma l6_17 : forall A B R P Q S C F, on_line P B R -> on_line Q A R -> inter_ll S A P B Q -> inter_ll C R S A B -> inter_ll F P Q A B -> parallel A C B C -> parallel A F B F -> B<>C -> B<>F -> A**C / B**C = - A**F / B**F.
Proof.

*****

*****
forall (A B R P Q S C F0 : Point) (_ : on_line P B R) (_ : on_line Q A R) (_ : inter_ll S A P B Q) (_ : inter_ll C R S A B) (_ : inter_ll F0 P Q A B) (_ : parallel A C B C) (_ : parallel A F0 B F0) (_ : not (eq B C)) (_ : not (eq B F0)), eq (Fdiv (DSeg A C) (DSeg B C)) (Fdiv (Fopp (DSeg A F0)) (DSeg B F0))
+++++
area_method.
-----
Lemma l6_17 : forall A B R P Q S C F, on_line P B R -> on_line Q A R -> inter_ll S A P B Q -> inter_ll C R S A B -> inter_ll F P Q A B -> parallel A C B C -> parallel A F B F -> B<>C -> B<>F -> A**C / B**C = - A**F / B**F.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l6_52 : forall A B C D E F,\nis_midpoint E A C ->\nis_midpoint F A B ->\nis_midpoint D B C ->\n2*(Py A D A)+2*(Py F C F) +2*Py B E B =\n(2+1)/2 * (Py A C A + Py A B A + Py B C B).
-----
Lemma l6_52 : forall A B C D E F, is_midpoint E A C -> is_midpoint F A B -> is_midpoint D B C -> 2*(Py A D A)+2*(Py F C F) +2*Py B E B = (2+1)/2 * (Py A C A + Py A B A + Py B C B).

*****

*****
forall (A B C D E F0 : Point) (_ : is_midpoint E A C) (_ : is_midpoint F0 A B) (_ : is_midpoint D B C), eq (Fplus (Fplus (Fmult (Fplus F1 F1) (Py A D A)) (Fmult (Fplus F1 F1) (Py F0 C F0))) (Fmult (Fplus F1 F1) (Py B E B))) (Fmult (Fdiv (Fplus (Fplus F1 F1) F1) (Fplus F1 F1)) (Fplus (Fplus (Py A C A) (Py A B A)) (Py B C B)))
+++++
Proof.
-----
Lemma l6_52 : forall A B C D E F, is_midpoint E A C -> is_midpoint F A B -> is_midpoint D B C -> 2*(Py A D A)+2*(Py F C F) +2*Py B E B = (2+1)/2 * (Py A C A + Py A B A + Py B C B).
Proof.

*****

*****
forall (A B C D E F0 : Point) (_ : is_midpoint E A C) (_ : is_midpoint F0 A B) (_ : is_midpoint D B C), eq (Fplus (Fplus (Fmult (Fplus F1 F1) (Py A D A)) (Fmult (Fplus F1 F1) (Py F0 C F0))) (Fmult (Fplus F1 F1) (Py B E B))) (Fmult (Fdiv (Fplus (Fplus F1 F1) F1) (Fplus F1 F1)) (Fplus (Fplus (Py A C A) (Py A B A)) (Py B C B)))
+++++
area_method.
-----
Lemma l6_52 : forall A B C D E F, is_midpoint E A C -> is_midpoint F A B -> is_midpoint D B C -> 2*(Py A D A)+2*(Py F C F) +2*Py B E B = (2+1)/2 * (Py A C A + Py A B A + Py B C B).
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l6_55 : forall A B C E G,\n  is_midpoint E A C ->\n  on_line_d G B E (2/(2+1)) ->\n  1+2 <> 0 ->\n  (2+1) * (Py A G A + Py G C G + Py B G B) = \n  Py A C A + Py A B A + Py B C B.
-----
Lemma l6_55 : forall A B C E G, is_midpoint E A C -> on_line_d G B E (2/(2+1)) -> 1+2 <> 0 -> (2+1) * (Py A G A + Py G C G + Py B G B) = Py A C A + Py A B A + Py B C B.

*****

*****
forall (A B C E G : Point) (_ : is_midpoint E A C) (_ : on_line_d G B E (Fdiv (Fplus F1 F1) (Fplus (Fplus F1 F1) F1))) (_ : not (eq (Fplus F1 (Fplus F1 F1)) F0)), eq (Fmult (Fplus (Fplus F1 F1) F1) (Fplus (Fplus (Py A G A) (Py G C G)) (Py B G B))) (Fplus (Fplus (Py A C A) (Py A B A)) (Py B C B))
+++++
Proof.
-----
Lemma l6_55 : forall A B C E G, is_midpoint E A C -> on_line_d G B E (2/(2+1)) -> 1+2 <> 0 -> (2+1) * (Py A G A + Py G C G + Py B G B) = Py A C A + Py A B A + Py B C B.
Proof.

*****

*****
forall (A B C E G : Point) (_ : is_midpoint E A C) (_ : on_line_d G B E (Fdiv (Fplus F1 F1) (Fplus (Fplus F1 F1) F1))) (_ : not (eq (Fplus F1 (Fplus F1 F1)) F0)), eq (Fmult (Fplus (Fplus F1 F1) F1) (Fplus (Fplus (Py A G A) (Py G C G)) (Py B G B))) (Fplus (Fplus (Py A C A) (Py A B A)) (Py B C B))
+++++
area_method.
-----
Lemma l6_55 : forall A B C E G, is_midpoint E A C -> on_line_d G B E (2/(2+1)) -> 1+2 <> 0 -> (2+1) * (Py A G A + Py G C G + Py B G B) = Py A C A + Py A B A + Py B C B.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l6_56 : forall A B C E G M,\n  is_midpoint E A C ->\n  on_line_d G B E (2/(2+1)) ->\n  1+2 <> 0 ->\n  (2+1) * Py M G M + Py A G A + Py G C G + Py B G B = \n  Py A M A + Py B M B + Py C M C.
-----
Lemma l6_56 : forall A B C E G M, is_midpoint E A C -> on_line_d G B E (2/(2+1)) -> 1+2 <> 0 -> (2+1) * Py M G M + Py A G A + Py G C G + Py B G B = Py A M A + Py B M B + Py C M C.

*****

*****
forall (A B C E G M : Point) (_ : is_midpoint E A C) (_ : on_line_d G B E (Fdiv (Fplus F1 F1) (Fplus (Fplus F1 F1) F1))) (_ : not (eq (Fplus F1 (Fplus F1 F1)) F0)), eq (Fplus (Fplus (Fplus (Fmult (Fplus (Fplus F1 F1) F1) (Py M G M)) (Py A G A)) (Py G C G)) (Py B G B)) (Fplus (Fplus (Py A M A) (Py B M B)) (Py C M C))
+++++
Proof.
-----
Lemma l6_56 : forall A B C E G M, is_midpoint E A C -> on_line_d G B E (2/(2+1)) -> 1+2 <> 0 -> (2+1) * Py M G M + Py A G A + Py G C G + Py B G B = Py A M A + Py B M B + Py C M C.
Proof.

*****

*****
forall (A B C E G M : Point) (_ : is_midpoint E A C) (_ : on_line_d G B E (Fdiv (Fplus F1 F1) (Fplus (Fplus F1 F1) F1))) (_ : not (eq (Fplus F1 (Fplus F1 F1)) F0)), eq (Fplus (Fplus (Fplus (Fmult (Fplus (Fplus F1 F1) F1) (Py M G M)) (Py A G A)) (Py G C G)) (Py B G B)) (Fplus (Fplus (Py A M A) (Py B M B)) (Py C M C))
+++++
area_method.
-----
Lemma l6_56 : forall A B C E G M, is_midpoint E A C -> on_line_d G B E (2/(2+1)) -> 1+2 <> 0 -> (2+1) * Py M G M + Py A G A + Py G C G + Py B G B = Py A M A + Py B M B + Py C M C.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l6_67 : forall A B C F E,\non_foot F C A B ->\non_foot E B A C ->\nPy B A F = Py C A E.
-----
Lemma l6_67 : forall A B C F E, on_foot F C A B -> on_foot E B A C -> Py B A F = Py C A E.

*****

*****
forall (A B C F0 E : Point) (_ : on_foot F0 C A B) (_ : on_foot E B A C), eq (Py B A F0) (Py C A E)
+++++
Proof.
-----
Lemma l6_67 : forall A B C F E, on_foot F C A B -> on_foot E B A C -> Py B A F = Py C A E.
Proof.

*****

*****
forall (A B C F0 E : Point) (_ : on_foot F0 C A B) (_ : on_foot E B A C), eq (Py B A F0) (Py C A E)
+++++
area_method.
-----
Lemma l6_67 : forall A B C F E, on_foot F C A B -> on_foot E B A C -> Py B A F = Py C A E.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l6_69 : forall A B C D E F,\non_foot F C A B ->\non_foot E B A C ->\non_foot D A B C ->\neq_angle E D C B D F.
-----
Lemma l6_69 : forall A B C D E F, on_foot F C A B -> on_foot E B A C -> on_foot D A B C -> eq_angle E D C B D F.

*****

*****
forall (A B C D E F : Point) (_ : on_foot F C A B) (_ : on_foot E B A C) (_ : on_foot D A B C), eq_angle E D C B D F
+++++
Proof.
-----
Lemma l6_69 : forall A B C D E F, on_foot F C A B -> on_foot E B A C -> on_foot D A B C -> eq_angle E D C B D F.
Proof.

*****

*****
forall (A B C D E F : Point) (_ : on_foot F C A B) (_ : on_foot E B A C) (_ : on_foot D A B C), eq_angle E D C B D F
+++++
area_method.
-----
Lemma l6_69 : forall A B C D E F, on_foot F C A B -> on_foot E B A C -> on_foot D A B C -> eq_angle E D C B D F.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l6_197 : forall A B C E F G,\n  on_foot E A B C ->\n  on_foot F B A C ->\n  on_foot G C A B ->\n  2 * Py A B C * Py B A C * Py A C B * S A B C =\n  Py A B A * Py B C B * Py A C A * S E F G.
-----
Lemma l6_197 : forall A B C E F G, on_foot E A B C -> on_foot F B A C -> on_foot G C A B -> 2 * Py A B C * Py B A C * Py A C B * S A B C = Py A B A * Py B C B * Py A C A * S E F G.

*****

*****
forall (A B C E F0 G : Point) (_ : on_foot E A B C) (_ : on_foot F0 B A C) (_ : on_foot G C A B), eq (Fmult (Fmult (Fmult (Fmult (Fplus F1 F1) (Py A B C)) (Py B A C)) (Py A C B)) (S A B C)) (Fmult (Fmult (Fmult (Py A B A) (Py B C B)) (Py A C A)) (S E F0 G))
+++++
Proof.
-----
Lemma l6_197 : forall A B C E F G, on_foot E A B C -> on_foot F B A C -> on_foot G C A B -> 2 * Py A B C * Py B A C * Py A C B * S A B C = Py A B A * Py B C B * Py A C A * S E F G.
Proof.

*****

*****
forall (A B C E F0 G : Point) (_ : on_foot E A B C) (_ : on_foot F0 B A C) (_ : on_foot G C A B), eq (Fmult (Fmult (Fmult (Fmult (Fplus F1 F1) (Py A B C)) (Py B A C)) (Py A C B)) (S A B C)) (Fmult (Fmult (Fmult (Py A B A) (Py B C B)) (Py A C A)) (S E F0 G))
+++++
area_method.
-----
Lemma l6_197 : forall A B C E F G, on_foot E A B C -> on_foot F B A C -> on_foot G C A B -> 2 * Py A B C * Py B A C * Py A C B * S A B C = Py A B A * Py B C B * Py A C A * S E F G.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l6_218 : forall A B C D E F G H,\nis_midpoint E A B  ->\nis_midpoint F B C ->\nis_midpoint G C D ->\nis_midpoint H D A ->\n2* S4 E F G H = S4 A B C D.
-----
Lemma l6_218 : forall A B C D E F G H, is_midpoint E A B -> is_midpoint F B C -> is_midpoint G C D -> is_midpoint H D A -> 2* S4 E F G H = S4 A B C D.

*****

*****
forall (A B C D E F0 G H : Point) (_ : is_midpoint E A B) (_ : is_midpoint F0 B C) (_ : is_midpoint G C D) (_ : is_midpoint H D A), eq (Fmult (Fplus F1 F1) (S4 E F0 G H)) (S4 A B C D)
+++++
Proof.
-----
Lemma l6_218 : forall A B C D E F G H, is_midpoint E A B -> is_midpoint F B C -> is_midpoint G C D -> is_midpoint H D A -> 2* S4 E F G H = S4 A B C D.
Proof.

*****

*****
forall (A B C D E F0 G H : Point) (_ : is_midpoint E A B) (_ : is_midpoint F0 B C) (_ : is_midpoint G C D) (_ : is_midpoint H D A), eq (Fmult (Fplus F1 F1) (S4 E F0 G H)) (S4 A B C D)
+++++
area_method.
-----
Lemma l6_218 : forall A B C D E F G H, is_midpoint E A B -> is_midpoint F B C -> is_midpoint G C D -> is_midpoint H D A -> 2* S4 E F G H = S4 A B C D.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l6_224 : forall A B C D N M P r,\n  is_midpoint N A C ->\n  is_midpoint M B D ->\n  on_line_d P N M r ->\n  S P A B + S P C D = S P D A + S P B C.
-----
Lemma l6_224 : forall A B C D N M P r, is_midpoint N A C -> is_midpoint M B D -> on_line_d P N M r -> S P A B + S P C D = S P D A + S P B C.

*****

*****
forall (A B C D N M P : Point) (r : F) (_ : is_midpoint N A C) (_ : is_midpoint M B D) (_ : on_line_d P N M r), eq (Fplus (S P A B) (S P C D)) (Fplus (S P D A) (S P B C))
+++++
Proof.
-----
Lemma l6_224 : forall A B C D N M P r, is_midpoint N A C -> is_midpoint M B D -> on_line_d P N M r -> S P A B + S P C D = S P D A + S P B C.
Proof.

*****

*****
forall (A B C D N M P : Point) (r : F) (_ : is_midpoint N A C) (_ : is_midpoint M B D) (_ : on_line_d P N M r), eq (Fplus (S P A B) (S P C D)) (Fplus (S P D A) (S P B C))
+++++
area_method.
-----
Lemma l6_224 : forall A B C D N M P r, is_midpoint N A C -> is_midpoint M B D -> on_line_d P N M r -> S P A B + S P C D = S P D A + S P B C.
Proof.
area_method.

*****

*****

+++++
Qed.
-----
Lemma l6_223 : forall A B C D X Y W,\n  is_midpoint X C A ->\n  is_midpoint Y B D ->\n  inter_ll W B C D A ->\n  S4 B C D A = (2+2)* S X Y W.
-----
Lemma l6_223 : forall A B C D X Y W, is_midpoint X C A -> is_midpoint Y B D -> inter_ll W B C D A -> S4 B C D A = (2+2)* S X Y W.

*****

*****
forall (A B C D X Y W : Point) (_ : is_midpoint X C A) (_ : is_midpoint Y B D) (_ : inter_ll W B C D A), eq (S4 B C D A) (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S X Y W))
+++++
Proof.
-----
Lemma l6_223 : forall A B C D X Y W, is_midpoint X C A -> is_midpoint Y B D -> inter_ll W B C D A -> S4 B C D A = (2+2)* S X Y W.
Proof.

*****

*****
forall (A B C D X Y W : Point) (_ : is_midpoint X C A) (_ : is_midpoint Y B D) (_ : inter_ll W B C D A), eq (S4 B C D A) (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (S X Y W))
+++++
am_before_field.
-----
Lemma l6_223 : forall A B C D X Y W, is_midpoint X C A -> is_midpoint Y B D -> inter_ll W B C D A -> S4 B C D A = (2+2)* S X Y W.
Proof.
am_before_field.

*****
H : not (eq (Fplus (Fopp (S D B C)) (S B C A)) F0)
A,B,C,D : Point
*****
eq (Fminus (S D B C) (S D B A)) (Fmult (Fplus (Fplus F1 F1) (Fplus F1 F1)) (Fminus (Fmult (Finv (Fplus F1 F1)) (Fplus (Fmult (Finv (Fplus F1 F1)) (Fmult (Finv (Fplus (Fopp (S D B C)) (S B C A))) (Fplus (Fopp (Fmult (S D B A) (S D C A))) (Fmult (S D C A) (S D B A))))) (Fmult (Finv (Fplus F1 F1)) (Fmult (Finv (Fplus (Fopp (S D B C)) (S B C A))) (Fmult (S D C A) (S D B C)))))) (Fmult (Finv (Fplus F1 F1)) (Fmult (Finv (Fplus F1 F1)) (Fmult (Finv (Fplus (Fopp (S D B C)) (S B C A))) (Fmult (S D B A) (S B C A)))))))
+++++
field_simplify_eq.
-----
Lemma l6_223 : forall A B C D X Y W, is_midpoint X C A -> is_midpoint Y B D -> inter_ll W B C D A -> S4 B C D A = (2+2)* S X Y W.
Proof.
am_before_field.
field_simplify_eq.

*****
H : not (eq (Fplus (Fopp (S D B C)) (S B C A)) F0)
A,B,C,D : Point
*****
eq (Fminus (Fplus (Fplus (Fmult (Fmult (Fopp (Fmult (Fplus F1 F1) (Fplus F1 F1))) (S D B C)) (S D B C)) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (S D B C)) (S D B A))) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (S D B C)) (S B C A))) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (S D B A)) (S B C A))) (Fminus (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (S D B C)) (S D C A)) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (S D B A)) (S B C A)))
+++++
ring_simplify_eq.
-----
Lemma l6_223 : forall A B C D X Y W, is_midpoint X C A -> is_midpoint Y B D -> inter_ll W B C D A -> S4 B C D A = (2+2)* S X Y W.
Proof.
am_before_field.
field_simplify_eq.
ring_simplify_eq.

*****
H : not (eq (Fplus (Fopp (S D B C)) (S B C A)) F0)
A,B,C,D : Point
*****
eq (Fminus (Fplus (Fplus (Fmult (Fmult (Fopp (Fmult (Fplus F1 F1) (Fplus F1 F1))) (S D B C)) (S D B C)) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (S D B C)) (S D B A))) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (S D B C)) (S B C A))) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (S D B C)) (S D C A))) F0
+++++
only_use_area_coordinates.
-----
Lemma l6_223 : forall A B C D X Y W, is_midpoint X C A -> is_midpoint Y B D -> inter_ll W B C D A -> S4 B C D A = (2+2)* S X Y W.
Proof.
am_before_field.
field_simplify_eq.
ring_simplify_eq.
only_use_area_coordinates.

*****
H2 : not (eq (S D x x0) F0)
H : not\n (eq\n (Fplus\n (Fopp\n (Fdiv\n (Fminus (Fmult (S D x B) (S D x0 C))\n (Fmult (S D x0 B) (S D x C))) (S D x x0)))\n (Fdiv\n (Fminus\n (Fplus\n (Fplus\n (Fminus\n (Fminus (Fmult (S D x B) (S D x0 C))\n (Fmult (S D x B) (S D x0 A)))\n (Fmult (S D x0 B) (S D x C)))\n (Fmult (S D x0 B) (S D x A)))\n (Fmult (S D x C) (S D x0 A)))\n (Fmult (S D x0 C) (S D x A))) (S D x x0))) F0)
A,B,C,D,x,x0 : Point
*****
eq (Fminus (Fplus (Fplus (Fopp (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fdiv (Fminus (Fmult (S D x B) (S D x0 C)) (Fmult (S D x0 B) (S D x C))) (S D x x0))) (Fdiv (Fminus (Fmult (S D x B) (S D x0 C)) (Fmult (S D x0 B) (S D x C))) (S D x x0)))) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fdiv (Fminus (Fmult (S D x B) (S D x0 C)) (Fmult (S D x0 B) (S D x C))) (S D x x0))) (Fdiv (Fminus (Fmult (S D x B) (S D x0 A)) (Fmult (S D x0 B) (S D x A))) (S D x x0)))) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fdiv (Fminus (Fmult (S D x B) (S D x0 C)) (Fmult (S D x0 B) (S D x C))) (S D x x0))) (Fdiv (Fminus (Fplus (Fplus (Fminus (Fminus (Fmult (S D x B) (S D x0 C)) (Fmult (S D x B) (S D x0 A))) (Fmult (S D x0 B) (S D x C))) (Fmult (S D x0 B) (S D x A))) (Fmult (S D x C) (S D x0 A))) (Fmult (S D x0 C) (S D x A))) (S D x x0)))) (Fmult (Fmult (Fmult (Fplus F1 F1) (Fplus F1 F1)) (Fdiv (Fminus (Fmult (S D x B) (S D x0 C)) (Fmult (S D x0 B) (S D x C))) (S D x x0))) (Fdiv (Fminus (Fmult (S D x C) (S D x0 A)) (Fmult (S D x0 C) (S D x A))) (S D x x0)))) F0
+++++
field_and_conclude.
-----
Lemma l6_223 : forall A B C D X Y W, is_midpoint X C A -> is_midpoint Y B D -> inter_ll W B C D A -> S4 B C D A = (2+2)* S X Y W.
Proof.
am_before_field.
field_simplify_eq.

*****
H : not (eq (Fplus (Fopp (S D B C)) (S B C A)) F0)
A,B,C,D : Point
*****
and (not (eq (Fplus (Fopp (S D B C)) (S B C A)) F0)) (not (eq (Fplus F1 F1) F0))
+++++
solve_conds.
-----
Lemma l6_223 : forall A B C D X Y W, is_midpoint X C A -> is_midpoint Y B D -> inter_ll W B C D A -> S4 B C D A = (2+2)* S X Y W.
Proof.
am_before_field.
field_simplify_eq.

*****

*****

+++++
Qed.
-----
