Require Import Coq.Lists.List.
-----
Require Import ExtLib.Core.RelDec.
-----
Require Import ExtLib.Structures.Maps.
-----
Require Import ExtLib.Structures.Monads.
-----
Require Import ExtLib.Structures.Reducible.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Section keyed.
-----
Variable K : Type.
-----
Variable K_le : K -> K -> Prop.
-----
Variable RD_K : K -> K -> comparison.
-----
Inductive twothree (T : Type) : Type :=\n  | Leaf\n  | Two : twothree T -> K -> T -> twothree T -> twothree T\n  | Three : twothree T -> K -> T -> twothree T -> K -> T -> twothree T -> twothree T.
-----
Arguments Leaf {T}.
-----
Arguments Two {T} _ _ _ _.
-----
Arguments Three {T} _ _ _ _ _ _ _.
-----
Section modify.
-----
Variable V : Type.
-----
Variable k : K.
-----
Variable upd : V -> option V.
-----
Variable def : option V.
-----
Fixpoint remove_greatest (m : twothree V) {T} (k_oops : unit -> T) (k_ok : K -> V -> twothree V -> T) : T :=\n      match m with\n        | Leaf => k_oops tt\n        | Two l k v r =>\n          remove_greatest r (fun _ => k_ok k v l) (fun k' v' r' => k_ok k' v' (Two l k v r'))\n        | Three l k v m k' v' r =>\n          remove_greatest r (fun _ => k_ok k' v' (Two l k v m)) (fun k'' v'' r'' => k_ok k'' v'' (Three l k v m k' v' r''))\n      end.
-----
Fixpoint twothree_modify (m : twothree V) {T} (k_ok : twothree V -> T) (k_splice_up : twothree V -> K -> V -> twothree V -> T) {struct m} : T :=\n      match m with\n        | Leaf =>\n          match def with\n            | Some v => k_splice_up Leaf k v Leaf\n            | None => k_ok Leaf\n          end\n        | Two l k' v' r =>\n          match RD_K k k' with\n            | Eq =>\n              match upd v' with\n                | Some v' => k_ok (Two l k v' r)\n                | None => remove_greatest l (fun _ => k_ok r) (fun k v l => k_ok (Two l k v r))\n              end\n            | Lt =>\n              twothree_modify l (fun l => k_ok (Two l k' v' r))\n                                (fun l'' k'' v'' r'' => k_ok (Three l'' k'' v'' r'' k' v' r))\n            | Gt =>\n              twothree_modify r (fun r => k_ok (Two l k' v' r))\n                                (fun l'' k'' v'' r'' => k_ok (Three l k' v' l'' k'' v'' r''))\n          end\n        | Three l k1 v1 m k2 v2 r =>\n          match RD_K k k1 with\n            | Eq =>\n              match upd v1 with\n                | Some v' => k_ok (Three l k v' m k2 v2 r)\n                | None =>\n                  remove_greatest l (fun _ => k_ok (Two m k2 v2 r)) (fun k1 v1 l => k_ok (Three l k1 v2 m k2 v2 r))\n              end\n            | Lt =>\n              twothree_modify l (fun l' => k_ok (Three l' k1 v1 m k2 v2 r))\n                                (fun l' k' v' r' => k_splice_up (Two l' k' v' r') k1 v1 (Two m k2 v2 r))\n            | Gt =>\n              match RD_K k k2 with\n                | Eq =>\n                  match upd v2 with\n                    | Some v2 => k_ok (Three l k1 v1 m k v2 r)\n                    | None =>\n                      remove_greatest m (fun _ => k_ok (Two l k1 v1 r))\n                                        (fun k' v' m' => k_ok (Three l k1 v1 m' k' v' r))\n                  end\n                | Lt =>\n                  twothree_modify m (fun m' => k_ok (Three l k1 v1 m' k2 v2 r))\n                                    (fun l' k' v' r' => k_splice_up (Two l k1 v1 l') k' v' (Two r' k2 v2 r))\n                | Gt =>\n                  twothree_modify r (fun r' => k_ok (Three l k1 v1 m k2 v2 r'))\n                                    (fun l' k' v' r' => k_splice_up (Two l k1 v1 m) k2 v2 (Two l' k' v' r'))\n              end\n          end\n      end.
-----
End modify.
-----
Definition twothree_add {V} (k : K) (v : V) (m : twothree V) : twothree V :=\n    twothree_modify k (fun _ => Some v) (Some v) m (fun m => m) Two.
-----
Definition twothree_remove {V} (k : K) (m : twothree V) : twothree V :=\n    twothree_modify k (fun _ => None) None m (fun m => m) Two.
-----
Fixpoint twothree_find {V} (k : K) (m : twothree V) : option V :=\n    match m with\n      | Leaf => None\n      | Two l k' v' r =>\n        match RD_K k k' with\n          | Eq => Some v'\n          | Lt => twothree_find k l\n          | Gt => twothree_find k r\n        end\n      | Three l k1 v1 m k2 v2 r =>\n        match RD_K k k1 with\n          | Eq => Some v1\n          | Lt => twothree_find k l\n          | Gt => match RD_K k k2 with\n                    | Eq => Some v2\n                    | Lt => twothree_find k m\n                    | Gt => twothree_find k r\n                  end\n        end\n    end.
-----
Section fold.
-----
Import MonadNotation.
-----
Local Open Scope monad_scope.
-----
Variables V T : Type.
-----
Variable f : K -> V -> T -> T.
-----
Fixpoint twothree_fold (acc : T) (map : twothree V) : T :=\n      match map with\n        | Leaf => acc\n        | Two l k v r =>\n          let acc := twothree_fold acc l in\n          let acc := f k v acc in\n          twothree_fold acc r\n        | Three l k1 v1 m k2 v2 r =>\n          let acc := twothree_fold acc l in\n          let acc := f k1 v1 acc in\n          let acc := twothree_fold acc m in\n          let acc := f k2 v2 acc in\n          twothree_fold acc m\n      end.
-----
End fold.
-----
Definition twothree_union {V} (m1 m2 : twothree V) : twothree V :=\n    twothree_fold twothree_add m2 m1.
-----
Global Instance Map_twothree V : Map K V (twothree V) :=\n  { empty  := Leaf\n  ; add    := twothree_add\n  ; remove := twothree_remove\n  ; lookup := twothree_find\n  ; union  := twothree_union\n  }.
-----
Global Instance Foldable_twothree V : Foldable (twothree V) (K * V) :=\n    fun _ f b x => twothree_fold (fun k v => f (k,v)) b x.
-----
End keyed.
-----
