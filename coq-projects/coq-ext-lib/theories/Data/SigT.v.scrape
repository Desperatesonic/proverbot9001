Require Coq.Classes.EquivDec.
-----
Require Import ExtLib.Core.Type.
-----
Require Import ExtLib.Structures.EqDep.
-----
Require Import ExtLib.Tactics.Injection.
-----
Require Import ExtLib.Tactics.EqDep.
-----
Require Import ExtLib.Tactics.TypeTac.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Set Printing Universes.
-----
Section type.
-----
Variable T : Type.
-----
Variable F : T -> Type.
-----
Variable ED : EquivDec.EqDec _ (@eq T).
-----
Variable tT : type T.
-----
Variable typF : forall x, type (F x).
-----
Global Instance type_sigT : type (sigT F) :=\n  { equal := fun x y =>\n    equal (projT1 x) (projT1 y) /\\n    exists pf : projT1 y = projT1 x,\n      equal (projT2 x) (match pf in _ = t return F t with\n                          | eq_refl => projT2 y\n                        end)\n  ; proper := fun x => proper (projT1 x) /\ proper (projT2 x)\n  }.
-----
Variable typeOkT : typeOk tT.
-----
Variable typOkF : forall x, typeOk (typF x).
-----
Global Instance typeOk_sigT : typeOk type_sigT.
-----
Global Instance typeOk_sigT : typeOk type_sigT.

*****
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
typeOk@{SerTop.6} type_sigT
+++++
Proof.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.

*****
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
typeOk@{SerTop.6} type_sigT
+++++
constructor.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.

*****
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
forall (x y : sigT F) (_ : equal@{SerTop.6} x y), and (proper@{SerTop.6} x) (proper@{SerTop.6} y)
+++++
destruct x; destruct y; intros.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
destruct x; destruct y; intros.

*****
H : equal@{SerTop.6} (existT F x f) (existT F x0 f0)
f0 : F x0
x0 : T
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
and (proper@{SerTop.6} (existT F x f)) (proper@{SerTop.6} (existT F x0 f0))
+++++
simpl in *.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
destruct x; destruct y; intros.
simpl in *.

*****
H : and (equal@{SerTop.1} x x0)\n (ex\n (fun pf : eq x0 x =>\n equal@{SerTop.2} f\n match pf in (eq _ t) return (F t) with\n | eq_refl => f0\n end))
f0 : F x0
x0 : T
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
and (and (proper@{SerTop.1} x) (proper@{SerTop.2} f)) (and (proper@{SerTop.1} x0) (proper@{SerTop.2} f0))
+++++
destruct H.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
destruct x; destruct y; intros.
simpl in *.
destruct H.

*****
H0 : ex\n (fun pf : eq x0 x =>\n equal@{SerTop.2} f\n match pf in (eq _ t) return (F t) with\n | eq_refl => f0\n end)
H : equal@{SerTop.1} x x0
f0 : F x0
x0 : T
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
and (and (proper@{SerTop.1} x) (proper@{SerTop.2} f)) (and (proper@{SerTop.1} x0) (proper@{SerTop.2} f0))
+++++
destruct H0.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
destruct x; destruct y; intros.
simpl in *.
destruct H.
destruct H0.

*****
H0 : equal@{SerTop.2} f\n match x1 in (eq _ t) return (F t) with\n | eq_refl => f0\n end
x1 : eq x0 x
H : equal@{SerTop.1} x x0
f0 : F x0
x0 : T
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
and (and (proper@{SerTop.1} x) (proper@{SerTop.2} f)) (and (proper@{SerTop.1} x0) (proper@{SerTop.2} f0))
+++++
subst.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
destruct x; destruct y; intros.
simpl in *.
destruct H.
destruct H0.
subst.

*****
H0 : equal@{SerTop.2} f f0
f0 : F x
H : equal@{SerTop.1} x x
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
and (and (proper@{SerTop.1} x) (proper@{SerTop.2} f)) (and (proper@{SerTop.1} x) (proper@{SerTop.2} f0))
+++++
apply only_proper in H; [ | eauto with typeclass_instances ].
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
destruct x; destruct y; intros.
simpl in *.
destruct H.
destruct H0.
subst.
apply only_proper in H; [ | eauto with typeclass_instances ].

*****
H0 : equal@{SerTop.2} f f0
f0 : F x
H : and (proper@{SerTop.1} x) (proper@{SerTop.1} x)
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
and (and (proper@{SerTop.1} x) (proper@{SerTop.2} f)) (and (proper@{SerTop.1} x) (proper@{SerTop.2} f0))
+++++
apply only_proper in H0; [ | eauto with typeclass_instances ].
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
destruct x; destruct y; intros.
simpl in *.
destruct H.
destruct H0.
subst.
apply only_proper in H; [ | eauto with typeclass_instances ].
apply only_proper in H0; [ | eauto with typeclass_instances ].

*****
H0 : and (proper@{SerTop.2} f) (proper@{SerTop.2} f0)
f0 : F x
H : and (proper@{SerTop.1} x) (proper@{SerTop.1} x)
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
and (and (proper@{SerTop.1} x) (proper@{SerTop.2} f)) (and (proper@{SerTop.1} x) (proper@{SerTop.2} f0))
+++++
intuition.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.

*****
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
Proper.PReflexive proper@{SerTop.6} equal@{SerTop.6}
+++++
red.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
red.

*****
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
forall (x : sigT F) (_ : proper@{SerTop.6} x), equal@{SerTop.6} x x
+++++
destruct x; intros.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
red.
destruct x; intros.

*****
H : proper@{SerTop.6} (existT F x f)
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
equal@{SerTop.6} (existT F x f) (existT F x f)
+++++
do 2 red in H.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
red.
destruct x; intros.
do 2 red in H.

*****
H : and (proper@{SerTop.1} (projT1 (existT F x f)))\n (proper@{SerTop.2} (projT2 (existT F x f)))
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
equal@{SerTop.6} (existT F x f) (existT F x f)
+++++
do 2 red; simpl in *.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
red.
destruct x; intros.
do 2 red in H.
do 2 red; simpl in *.

*****
H : and (proper@{SerTop.1} x) (proper@{SerTop.2} f)
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
and (equal@{SerTop.1} x x) (ex (fun pf : eq x x => equal@{SerTop.2} f match pf in (eq _ t) return (F t) with | eq_refl => f end))
+++++
intuition.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
red.
destruct x; intros.
do 2 red in H.
do 2 red; simpl in *.
intuition.

*****
H1 : proper@{SerTop.2} f
H0 : proper@{SerTop.1} x
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
equal@{SerTop.1} x x
+++++
try solve [ apply equiv_prefl; eauto ].
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
red.
destruct x; intros.
do 2 red in H.
do 2 red; simpl in *.
intuition.
try solve [ apply equiv_prefl; eauto ].

*****
H1 : proper@{SerTop.2} f
H0 : proper@{SerTop.1} x
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
ex (fun pf : eq x x => equal@{SerTop.2} f match pf in (eq _ t) return (F t) with | eq_refl => f end)
+++++
exists eq_refl.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
red.
destruct x; intros.
do 2 red in H.
do 2 red; simpl in *.
intuition.
try solve [ apply equiv_prefl; eauto ].
exists eq_refl.

*****
H1 : proper@{SerTop.2} f
H0 : proper@{SerTop.1} x
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
equal@{SerTop.2} f f
+++++
eapply Proper.preflexive; [ | eapply H1 ].
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
red.
destruct x; intros.
do 2 red in H.
do 2 red; simpl in *.
intuition.
try solve [ apply equiv_prefl; eauto ].
exists eq_refl.
eapply Proper.preflexive; [ | eapply H1 ].

*****
H1 : proper@{SerTop.2} f
H0 : proper@{SerTop.1} x
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
Proper.PReflexive proper@{SerTop.2} equal@{SerTop.2}
+++++
eauto with typeclass_instances.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.

*****
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
Symmetric equal@{SerTop.6}
+++++
red; destruct x; destruct y; intros; simpl in *.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
red; destruct x; destruct y; intros; simpl in *.

*****
H : and (equal@{SerTop.1} x x0)\n (ex\n (fun pf : eq x0 x =>\n equal@{SerTop.2} f\n match pf in (eq _ t) return (F t) with\n | eq_refl => f0\n end))
f0 : F x0
x0 : T
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
and (equal@{SerTop.1} x0 x) (ex (fun pf : eq x x0 => equal@{SerTop.2} f0 match pf in (eq _ t) return (F t) with | eq_refl => f end))
+++++
intuition.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
red; destruct x; destruct y; intros; simpl in *.
intuition.

*****
H1 : ex\n (fun pf : eq x0 x =>\n equal@{SerTop.2} f\n match pf in (eq _ t) return (F t) with\n | eq_refl => f0\n end)
H0 : equal@{SerTop.1} x x0
f0 : F x0
x0 : T
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
ex (fun pf : eq x x0 => equal@{SerTop.2} f0 match pf in (eq _ t) return (F t) with | eq_refl => f end)
+++++
destruct H1; subst.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
red; destruct x; destruct y; intros; simpl in *.
intuition.
destruct H1; subst.

*****
H : equal@{SerTop.2} f f0
f0 : F x
H0 : equal@{SerTop.1} x x
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
ex (fun pf : eq x x => equal@{SerTop.2} f0 match pf in (eq _ t) return (F t) with | eq_refl => f end)
+++++
exists eq_refl.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
red; destruct x; destruct y; intros; simpl in *.
intuition.
destruct H1; subst.
exists eq_refl.

*****
H : equal@{SerTop.2} f f0
f0 : F x
H0 : equal@{SerTop.1} x x
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
equal@{SerTop.2} f0 f
+++++
symmetry; assumption.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.

*****
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
Transitive equal@{SerTop.6}
+++++
red; destruct x; destruct y; destruct z; intros; simpl in *; intuition.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
red; destruct x; destruct y; destruct z; intros; simpl in *; intuition.

*****
H3 : ex\n (fun pf : eq x1 x0 =>\n equal@{SerTop.2} f0\n match pf in (eq _ t) return (F t) with\n | eq_refl => f1\n end)
H : equal@{SerTop.1} x0 x1
H2 : ex\n (fun pf : eq x0 x =>\n equal@{SerTop.2} f\n match pf in (eq _ t) return (F t) with\n | eq_refl => f0\n end)
H1 : equal@{SerTop.1} x x0
f1 : F x1
x1 : T
f0 : F x0
x0 : T
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
equal@{SerTop.1} x x1
+++++
etransitivity; eauto.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
red; destruct x; destruct y; destruct z; intros; simpl in *; intuition.
etransitivity; eauto.

*****
H3 : ex\n (fun pf : eq x1 x0 =>\n equal@{SerTop.2} f0\n match pf in (eq _ t) return (F t) with\n | eq_refl => f1\n end)
H : equal@{SerTop.1} x0 x1
H2 : ex\n (fun pf : eq x0 x =>\n equal@{SerTop.2} f\n match pf in (eq _ t) return (F t) with\n | eq_refl => f0\n end)
H1 : equal@{SerTop.1} x x0
f1 : F x1
x1 : T
f0 : F x0
x0 : T
f : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
ex (fun pf : eq x1 x => equal@{SerTop.2} f match pf in (eq _ t) return (F t) with | eq_refl => f1 end)
+++++
destruct H2; destruct H3; subst.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
red; destruct x; destruct y; destruct z; intros; simpl in *; intuition.
etransitivity; eauto.
destruct H2; destruct H3; subst.

*****
H0 : equal@{SerTop.2} f f0
H2 : equal@{SerTop.2} f0 f1
H1,H : equal@{SerTop.1} x x
f,f0,f1 : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
ex (fun pf : eq x x => equal@{SerTop.2} f match pf in (eq _ t) return (F t) with | eq_refl => f1 end)
+++++
exists eq_refl.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.
red; destruct x; destruct y; destruct z; intros; simpl in *; intuition.
etransitivity; eauto.
destruct H2; destruct H3; subst.
exists eq_refl.

*****
H0 : equal@{SerTop.2} f f0
H2 : equal@{SerTop.2} f0 f1
H1,H : equal@{SerTop.1} x x
f,f0,f1 : F x
x : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
equal@{SerTop.2} f f1
+++++
etransitivity; eauto.
-----
Global Instance typeOk_sigT : typeOk type_sigT.
Proof.
constructor.

*****

*****

+++++
Qed.
-----
Global Instance proper_existT a b : proper a -> proper b -> proper (existT F a b).
-----
Global Instance proper_existT a b : proper a -> proper b -> proper (existT F a b).

*****
b : F a
a : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
forall (_ : proper@{SerTop.1} a) (_ : proper@{SerTop.2} b), proper@{SerTop.6} (existT F a b)
+++++
Proof.
-----
Global Instance proper_existT a b : proper a -> proper b -> proper (existT F a b).
Proof.

*****
b : F a
a : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
forall (_ : proper@{SerTop.1} a) (_ : proper@{SerTop.2} b), proper@{SerTop.6} (existT F a b)
+++++
red.
-----
Global Instance proper_existT a b : proper a -> proper b -> proper (existT F a b).
Proof.
red.

*****
b : F a
a : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
forall (_ : proper@{SerTop.1} a) (_ : proper@{SerTop.2} b), (let (_, proper) := type_sigT in proper) (existT F a b)
+++++
simpl.
-----
Global Instance proper_existT a b : proper a -> proper b -> proper (existT F a b).
Proof.
red.
simpl.

*****
b : F a
a : T
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
forall (_ : proper@{SerTop.1} a) (_ : proper@{SerTop.2} b), and (proper@{SerTop.1} a) (proper@{SerTop.2} b)
+++++
intuition.
-----
Global Instance proper_existT a b : proper a -> proper b -> proper (existT F a b).
Proof.
red.
simpl.
intuition.

*****

*****

+++++
Qed.
-----
Global Instance proper_projT1 a : proper a -> proper (projT1 a).
-----
Global Instance proper_projT1 a : proper a -> proper (projT1 a).

*****
a : sigT F
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
forall _ : proper@{SerTop.6} a, proper@{SerTop.1} (projT1 a)
+++++
Proof.
-----
Global Instance proper_projT1 a : proper a -> proper (projT1 a).
Proof.

*****
a : sigT F
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
forall _ : proper@{SerTop.6} a, proper@{SerTop.1} (projT1 a)
+++++
red.
-----
Global Instance proper_projT1 a : proper a -> proper (projT1 a).
Proof.
red.

*****
a : sigT F
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
forall _ : proper@{SerTop.6} a, (let (_, proper) := tT in proper) (projT1 a)
+++++
simpl.
-----
Global Instance proper_projT1 a : proper a -> proper (projT1 a).
Proof.
red.
simpl.

*****
a : sigT F
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
forall _ : and (proper@{SerTop.1} (projT1 a)) (proper@{SerTop.2} (projT2 a)), (let (_, proper) := tT in proper) (projT1 a)
+++++
intuition.
-----
Global Instance proper_projT1 a : proper a -> proper (projT1 a).
Proof.
red.
simpl.
intuition.

*****

*****

+++++
Qed.
-----
Global Instance proper_projT2 a : proper a -> proper (projT2 a).
-----
Global Instance proper_projT2 a : proper a -> proper (projT2 a).

*****
a : sigT F
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
forall _ : proper@{SerTop.6} a, proper@{SerTop.2} (projT2 a)
+++++
Proof.
-----
Global Instance proper_projT2 a : proper a -> proper (projT2 a).
Proof.

*****
a : sigT F
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
forall _ : proper@{SerTop.6} a, proper@{SerTop.2} (projT2 a)
+++++
red.
-----
Global Instance proper_projT2 a : proper a -> proper (projT2 a).
Proof.
red.

*****
a : sigT F
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
forall _ : proper@{SerTop.6} a, (let (_, proper) := typF (projT1 a) in proper) (projT2 a)
+++++
simpl.
-----
Global Instance proper_projT2 a : proper a -> proper (projT2 a).
Proof.
red.
simpl.

*****
a : sigT F
typOkF : forall x : T, typeOk@{SerTop.2} (typF x)
typeOkT : typeOk@{SerTop.1} tT
typF : forall x : T, type@{SerTop.2} (F x)
tT : type@{SerTop.1} T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.2}
T : Type@{SerTop\.1}
*****
forall _ : and (proper@{SerTop.1} (projT1 a)) (proper@{SerTop.2} (projT2 a)), (let (_, proper) := typF (projT1 a) in proper) (projT2 a)
+++++
intuition.
-----
Global Instance proper_projT2 a : proper a -> proper (projT2 a).
Proof.
red.
simpl.
intuition.

*****

*****

+++++
Qed.
-----
End type.
-----
Section injective.
-----
Variable T : Type.
-----
Variable F : T -> Type.
-----
Variable ED : EquivDec.EqDec _ (@eq T).
-----
Global Instance Injective_existT a b d\n    : Injective (existT F a b = existT F a d) | 1.
-----
Global Instance Injective_existT a b d : Injective (existT F a b = existT F a d) | 1.

*****
b,d : F a
a : T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.49}
T : Type@{SerTop\.48}
*****
Injective (eq (existT F a b) (existT F a d))
+++++
refine {| result := b = d |}.
-----
Global Instance Injective_existT a b d : Injective (existT F a b = existT F a d) | 1.
refine {| result := b = d |}.

*****
b,d : F a
a : T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.49}
T : Type@{SerTop\.48}
*****
forall _ : eq (existT F a b) (existT F a d), eq b d
+++++
abstract (eauto using inj_pair2).
-----
Global Instance Injective_existT a b d : Injective (existT F a b = existT F a d) | 1.
refine {| result := b = d |}.
abstract (eauto using inj_pair2).

*****

*****

+++++
Defined.
-----
Global Instance Injective_existT_dif a b c d\n  : Injective (existT F a b = existT F c d) | 2.
-----
Global Instance Injective_existT_dif a b c d : Injective (existT F a b = existT F c d) | 2.

*****
d : F c
c : T
b : F a
a : T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.49}
T : Type@{SerTop\.48}
*****
Injective (eq (existT F a b) (existT F c d))
+++++
refine {| result := exists pf : c = a, b = match pf in _ = t return F t with | eq_refl => d end |}.
-----
Global Instance Injective_existT_dif a b c d : Injective (existT F a b = existT F c d) | 2.
refine {| result := exists pf : c = a, b = match pf in _ = t return F t with | eq_refl => d end |}.

*****
d : F c
c : T
b : F a
a : T
ED : EqDec T eq
F : forall _ : T, Type@{SerTop.49}
T : Type@{SerTop\.48}
*****
forall _ : eq (existT F a b) (existT F c d), ex (fun pf : eq c a => eq b match pf in (eq _ t) return (F t) with | eq_refl => d end)
+++++
abstract (inversion 1; subst; exists eq_refl; auto).
-----
Global Instance Injective_existT_dif a b c d : Injective (existT F a b = existT F c d) | 2.
refine {| result := exists pf : c = a, b = match pf in _ = t return F t with | eq_refl => d end |}.
abstract (inversion 1; subst; exists eq_refl; auto).

*****

*****

+++++
Defined.
-----
End injective.
-----
Lemma eq_sigT_rw\n: forall T U F (a b : T) (pf : a = b) s,\n    match pf in _ = x return @sigT U (F x) with\n    | eq_refl => s\n    end =\n    @existT U (F b) (projT1 s)\n            match pf in _ = x return F x (projT1 s) with\n            | eq_refl => (projT2 s)\n            end.
-----
Lemma eq_sigT_rw : forall T U F (a b : T) (pf : a = b) s, match pf in _ = x return @sigT U (F x) with | eq_refl => s end = @existT U (F b) (projT1 s) match pf in _ = x return F x (projT1 s) with | eq_refl => (projT2 s) end.

*****

*****
forall (T : Type@{SerTop.61}) (U : Type@{SerTop.64}) (F : forall (_ : T) (_ : U), Type@{SerTop.67}) (a b : T) (pf : eq a b) (s : sigT (F a)), eq match pf in (eq _ x) return (sigT (F x)) with | eq_refl => s end (existT (F b) (projT1 s) match pf in (eq _ x) return (F x (projT1 s)) with | eq_refl => projT2 s end)
+++++
Proof.
-----
Lemma eq_sigT_rw : forall T U F (a b : T) (pf : a = b) s, match pf in _ = x return @sigT U (F x) with | eq_refl => s end = @existT U (F b) (projT1 s) match pf in _ = x return F x (projT1 s) with | eq_refl => (projT2 s) end.
Proof.

*****

*****
forall (T : Type@{SerTop.61}) (U : Type@{SerTop.64}) (F : forall (_ : T) (_ : U), Type@{SerTop.67}) (a b : T) (pf : eq a b) (s : sigT (F a)), eq match pf in (eq _ x) return (sigT (F x)) with | eq_refl => s end (existT (F b) (projT1 s) match pf in (eq _ x) return (F x (projT1 s)) with | eq_refl => projT2 s end)
+++++
destruct pf.
-----
Lemma eq_sigT_rw : forall T U F (a b : T) (pf : a = b) s, match pf in _ = x return @sigT U (F x) with | eq_refl => s end = @existT U (F b) (projT1 s) match pf in _ = x return F x (projT1 s) with | eq_refl => (projT2 s) end.
Proof.
destruct pf.

*****
a : T
F : forall (_ : T) (_ : U), Type@{SerTop.67}
U : Type@{SerTop\.64}
T : Type@{SerTop\.61}
*****
forall s : sigT (F a), eq s (existT (F a) (projT1 s) (projT2 s))
+++++
destruct s.
-----
Lemma eq_sigT_rw : forall T U F (a b : T) (pf : a = b) s, match pf in _ = x return @sigT U (F x) with | eq_refl => s end = @existT U (F b) (projT1 s) match pf in _ = x return F x (projT1 s) with | eq_refl => (projT2 s) end.
Proof.
destruct pf.
destruct s.

*****
f : F a x
x : U
a : T
F : forall (_ : T) (_ : U), Type@{SerTop.67}
U : Type@{SerTop\.64}
T : Type@{SerTop\.61}
*****
eq (existT (F a) x f) (existT (F a) (projT1 (existT (F a) x f)) (projT2 (existT (F a) x f)))
+++++
reflexivity.
-----
Lemma eq_sigT_rw : forall T U F (a b : T) (pf : a = b) s, match pf in _ = x return @sigT U (F x) with | eq_refl => s end = @existT U (F b) (projT1 s) match pf in _ = x return F x (projT1 s) with | eq_refl => (projT2 s) end.
Proof.
destruct pf.
destruct s.
reflexivity.

*****

*****

+++++
Qed.
-----
Hint Rewrite eq_sigT_rw : eq_rw.
-----
