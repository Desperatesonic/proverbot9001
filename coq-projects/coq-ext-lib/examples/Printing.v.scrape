Require Import Coq.Strings.String.
-----
Require Import ExtLib.Structures.MonadWriter.
-----
Require Import ExtLib.Data.PPair.
-----
Require Import ExtLib.Data.Monads.WriterMonad.
-----
Require Import ExtLib.Data.Monads.IdentityMonad.
-----
Require Import ExtLib.Programming.Show.
-----
Definition PrinterMonad : Type -> Type :=\n  writerT (@show_mon _ ShowScheme_string_compose) ident.
-----
Definition print {T : Type} {ST : Show T} (val : T) : PrinterMonad unit :=\n  @MonadWriter.tell _ (@show_mon _ ShowScheme_string_compose) _ _\n                    (@show _ ST val _ show_inj (@show_mon _ ShowScheme_string_compose)).
-----
Definition printString (str : string) : PrinterMonad unit :=\n  @MonadWriter.tell _ (@show_mon _ ShowScheme_string_compose) _ _\n                    (@show_exact str _ show_inj (@show_mon _ ShowScheme_string_compose)).
-----
Definition runPrinter {T : Type} (c : PrinterMonad T) : T * string :=\n  let '(ppair val str) := unIdent (runWriterT c) in\n  (val, str ""%string).
-----
Eval compute in\n    runPrinter (Monad.bind (print 1) (fun _ => print 2)).
-----
Eval compute in\n    runPrinter (Monad.bind (print "hello "%string) (fun _ => print 2)).
-----
Eval compute in\n    runPrinter (Monad.bind (printString "hello "%string) (fun _ => print 2)).
-----
