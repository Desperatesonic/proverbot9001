Require Import GeoCoq.Axioms.continuity_axioms.
-----
Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Annexes.suma.
-----
Require Import GeoCoq.Tarski_dev.Ch13_1.
-----
Section triangle_playfair_bis.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma legendre_aux1 :\n  greenberg_s_axiom ->\n  triangle_postulate ->\n  forall A1 A2 B1 B2 C1 C2 P,\n    Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 ->\n    Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 ->\n    Col C1 B1 B2.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : greenberg_s_axiom) (_ : triangle_postulate) (A1 A2 B1 B2 C1 C2 P : Tpoint) (_ : Perp2 A1 A2 B1 B2 P) (_ : not (Col A1 A2 P)) (_ : Col P B1 B2) (_ : Coplanar A1 A2 B1 B2) (_ : Par A1 A2 C1 C2) (_ : Col P C1 C2) (_ : not (TS B1 B2 A1 C1)), Col C1 B1 B2
+++++
Proof.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : greenberg_s_axiom) (_ : triangle_postulate) (A1 A2 B1 B2 C1 C2 P : Tpoint) (_ : Perp2 A1 A2 B1 B2 P) (_ : not (Col A1 A2 P)) (_ : Col P B1 B2) (_ : Coplanar A1 A2 B1 B2) (_ : Par A1 A2 C1 C2) (_ : Col P C1 C2) (_ : not (TS B1 B2 A1 C1)), Col C1 B1 B2
+++++
intros greenberg triangle.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.

*****
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A1 A2 B1 B2 C1 C2 P : Tpoint) (_ : Perp2 A1 A2 B1 B2 P) (_ : not (Col A1 A2 P)) (_ : Col P B1 B2) (_ : Coplanar A1 A2 B1 B2) (_ : Par A1 A2 C1 C2) (_ : Col P C1 C2) (_ : not (TS B1 B2 A1 C1)), Col C1 B1 B2
+++++
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.

*****
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
assert(HParAB : Par A1 A2 B1 B2).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).

*****
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 B1 B2
+++++
assert (Par_strict A1 A2 B1 B2); [|Par].
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].

*****
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict A1 A2 B1 B2
+++++
apply (par_not_col_strict _ _ _ _ P); Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.

*****
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 B1 B2
+++++
apply par_symmetry.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.

*****
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].

*****
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).

*****
HI2 : Perp X Y B1 B2
HI1 : Perp X Y A1 A2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].

*****
H2 : Perp_at I2 X Y B1 B2
I2 : Tpoint
H1 : Perp_at I1 X Y A1 A2
I1 : Tpoint
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
apply perp_in_col in H1; apply perp_in_col in H2.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
apply perp_in_col in H1; apply perp_in_col in H2.

*****
H2 : and (Col X Y I2) (Col B1 B2 I2)
I2 : Tpoint
H1 : and (Col X Y I1) (Col A1 A2 I1)
I1 : Tpoint
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
destruct H1 as [HCol2 HCol3]; destruct H2 as [HCol4 HCol5].
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
apply perp_in_col in H1; apply perp_in_col in H2.
destruct H1 as [HCol2 HCol3]; destruct H2 as [HCol4 HCol5].

*****
HCol5 : Col B1 B2 I2
HCol4 : Col X Y I2
I2 : Tpoint
HCol3 : Col A1 A2 I1
HCol2 : Col X Y I1
I1 : Tpoint
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
assert (P = I2); [|treat_equalities; rename I1 into R].
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
apply perp_in_col in H1; apply perp_in_col in H2.
destruct H1 as [HCol2 HCol3]; destruct H2 as [HCol4 HCol5].
assert (P = I2); [|treat_equalities; rename I1 into R].

*****
HCol5 : Col B1 B2 I2
HCol4 : Col X Y I2
I2 : Tpoint
HCol3 : Col A1 A2 I1
HCol2 : Col X Y I1
I1 : Tpoint
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq P I2
+++++
elim (perp_not_col2 _ _ _ _ (perp_sym _ _ _ _ HPerp2)); intro; [apply l6_21 with B1 B2 X Y|apply l6_21 with B1 B2 Y X]; assert_diffs; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
apply perp_in_col in H1; apply perp_in_col in H2.
destruct H1 as [HCol2 HCol3]; destruct H2 as [HCol4 HCol5].
assert (P = I2); [|treat_equalities; rename I1 into R].

*****
HCol3 : Col A1 A2 R
HCol2 : Col X Y R
R : Tpoint
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
elim (eq_dec_points P R); intro HNE; treat_equalities; [exfalso; Col|].
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
apply perp_in_col in H1; apply perp_in_col in H2.
destruct H1 as [HCol2 HCol3]; destruct H2 as [HCol4 HCol5].
assert (P = I2); [|treat_equalities; rename I1 into R].
elim (eq_dec_points P R); intro HNE; treat_equalities; [exfalso; Col|].

*****
HNE : not (eq P R)
HCol3 : Col A1 A2 R
HCol2 : Col X Y R
R : Tpoint
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
apply (l12_9 _ _ _ _ X Y); Perp; apply coplanar_perm_16; apply col2_cop__cop with P R; try solve [assert_diffs; ColR]; apply coplanar_perm_2; [apply col_cop__cop with A2|apply col_cop__cop with A1| apply col_cop__cop with A2|apply col_cop__cop with A1]; Col; try solve [assert_diffs; auto]; apply coplanar_perm_16; [apply col_cop__cop with B2|apply col_cop__cop with B2| apply col_cop__cop with B1|apply col_cop__cop with B1]; assert_diffs; Col; Cop.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).

*****
HParAB : Par A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
elim(col_dec P A1 A2).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).

*****
HParAB : Par A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col P A1 A2, Col C1 B1 B2
+++++
intro HConf.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HConf.

*****
HConf : Col P A1 A2
HParAB : Par A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
assert_diffs.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HConf.
assert_diffs.

*****
H0 : not (eq C1 C2)
H : not (eq B1 B2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HConf : Col P A1 A2
HParAB : Par A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply (not_strict_par _ _ _ _ P) in HParAB; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HConf.
assert_diffs.
apply (not_strict_par _ _ _ _ P) in HParAB; Col.

*****
H0 : not (eq C1 C2)
H : not (eq B1 B2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HConf : Col P A1 A2
HParAB : and (Col A1 A2 B1) (Col A1 A2 B2)
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply (not_strict_par _ _ _ _ P) in HParAC; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HConf.
assert_diffs.
apply (not_strict_par _ _ _ _ P) in HParAB; Col.
apply (not_strict_par _ _ _ _ P) in HParAC; Col.

*****
H0 : not (eq C1 C2)
H : not (eq B1 B2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HConf : Col P A1 A2
HParAB : and (Col A1 A2 B1) (Col A1 A2 B2)
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : and (Col A1 A2 C1) (Col A1 A2 C2)
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
spliter.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HConf.
assert_diffs.
apply (not_strict_par _ _ _ _ P) in HParAB; Col.
apply (not_strict_par _ _ _ _ P) in HParAC; Col.
spliter.

*****
H0 : not (eq C1 C2)
H : not (eq B1 B2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HConf : Col P A1 A2
H5 : Col A1 A2 B2
H3 : Col A1 A2 B1
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
H7 : Col A1 A2 C2
H6 : Col A1 A2 C1
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply(col3 A1 A2); auto.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).

*****
HParAB : Par A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col P A1 A2), Col C1 B1 B2
+++++
intro HStrict.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.

*****
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.

*****
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.

*****
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
elim(col_dec C1 B1 B2); auto.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.

*****
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col C1 B1 B2), Col C1 B1 B2
+++++
intro HC1NotB.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.

*****
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
exfalso.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.

*****
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(P<>C1) by (intro; subst C1; Col).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).

*****
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].

*****
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(HQ := HPerpAP); auto.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.

*****
HQ : Perp P1 P2 A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].

*****
HQA : Col Q A1 A2
HQP : Col Q P1 P2
Q : Tpoint
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(HP' := HPerpBP); auto.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.

*****
HP' : Perp P1 P2 B1 B2
HQA : Col Q A1 A2
HQP : Col Q P1 P2
Q : Tpoint
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HP' as [P' HPerpP].
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].

*****
HPerpP : Perp_at P' P1 P2 B1 B2
P' : Tpoint
HQA : Col Q A1 A2
HQP : Col Q P1 P2
Q : Tpoint
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).

*****
H0 : eq P' P
HPerpP : Perp_at P' P1 P2 B1 B2
P' : Tpoint
HQA : Col Q A1 A2
HQP : Col Q P1 P2
Q : Tpoint
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst P'.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.

*****
HPerpP : Perp_at P P1 P2 B1 B2
HQA : Col Q A1 A2
HQP : Col Q P1 P2
Q : Tpoint
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HPerpP as [_ [_ [HPP _]]].
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].

*****
HPP : Col P P1 P2
HQA : Col Q A1 A2
HQP : Col Q P1 P2
Q : Tpoint
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(P<>Q) by (intro; subst Q; auto).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).

*****
H0 : not (eq P Q)
HPP : Col P P1 P2
HQA : Col Q A1 A2
HQP : Col Q P1 P2
Q : Tpoint
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp P1 P2 A1 A2
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.

*****
H0 : not (eq P Q)
HPP : Col P P1 P2
HQA : Col Q A1 A2
HQP : Col Q P1 P2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp P1 P2 B1 B2
HPerpAP : Perp A1 A2 P Q
Q : Tpoint
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.

*****
H0 : not (eq P Q)
HPP : Col P P1 P2
HQA : Col Q A1 A2
HQP : Col Q P1 P2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
Q : Tpoint
HP : Col P P1 P2
A1,A2,B1,B2,C1,C2,P,P1,P2 : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
clear dependent P1.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.

*****
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,P2,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
clear dependent P2.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.

*****
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.

*****
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(Hos : OS B1 B2 Q C1).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).

*****
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B1 B2 Q C1
+++++
apply (one_side_transitivity _ _ _ A1).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
apply (one_side_transitivity _ _ _ A1).

*****
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B1 B2 Q A1
+++++
-
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
apply (one_side_transitivity _ _ _ A1).
-

*****
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B1 B2 Q A1
+++++
elim(eq_dec_points A1 Q).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
apply (one_side_transitivity _ _ _ A1).
-
elim(eq_dec_points A1 Q).

*****
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A1 Q, OS B1 B2 Q A1
+++++
intro; subst A1; apply one_side_reflexivity; auto; apply (par_strict_not_col_2 A2); Par.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
apply (one_side_transitivity _ _ _ A1).
-
elim(eq_dec_points A1 Q).
intro; subst A1; apply one_side_reflexivity; auto; apply (par_strict_not_col_2 A2); Par.

*****
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq A1 Q), OS B1 B2 Q A1
+++++
intro.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
apply (one_side_transitivity _ _ _ A1).
-
elim(eq_dec_points A1 Q).
intro; subst A1; apply one_side_reflexivity; auto; apply (par_strict_not_col_2 A2); Par.
intro.

*****
H2 : not (eq A1 Q)
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B1 B2 Q A1
+++++
apply l12_6.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
apply (one_side_transitivity _ _ _ A1).
-
elim(eq_dec_points A1 Q).
intro; subst A1; apply one_side_reflexivity; auto; apply (par_strict_not_col_2 A2); Par.
intro.
apply l12_6.

*****
H2 : not (eq A1 Q)
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict B1 B2 Q A1
+++++
apply par_strict_right_comm.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
apply (one_side_transitivity _ _ _ A1).
-
elim(eq_dec_points A1 Q).
intro; subst A1; apply one_side_reflexivity; auto; apply (par_strict_not_col_2 A2); Par.
intro.
apply l12_6.
apply par_strict_right_comm.

*****
H2 : not (eq A1 Q)
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict B1 B2 A1 Q
+++++
apply (par_strict_col_par_strict _ _ _ A2); Col; Par.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
apply (one_side_transitivity _ _ _ A1).
-
elim(eq_dec_points A1 Q).
intro; subst A1; apply one_side_reflexivity; auto; apply (par_strict_not_col_2 A2); Par.
intro.
apply l12_6.
apply par_strict_right_comm.
apply (par_strict_col_par_strict _ _ _ A2); Col; Par.

*****

*****

+++++
-
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
apply (one_side_transitivity _ _ _ A1).
-
elim(eq_dec_points A1 Q).
intro; subst A1; apply one_side_reflexivity; auto; apply (par_strict_not_col_2 A2); Par.
intro.
apply l12_6.
apply par_strict_right_comm.
apply (par_strict_col_par_strict _ _ _ A2); Col; Par.
-

*****
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B1 B2 A1 C1
+++++
apply cop__not_two_sides_one_side; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
apply (one_side_transitivity _ _ _ A1).
-
elim(eq_dec_points A1 Q).
intro; subst A1; apply one_side_reflexivity; auto; apply (par_strict_not_col_2 A2); Par.
intro.
apply l12_6.
apply par_strict_right_comm.
apply (par_strict_col_par_strict _ _ _ A2); Col; Par.
-
apply cop__not_two_sides_one_side; Col.

*****
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B1 B2 A1 C1
+++++
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
apply (one_side_transitivity _ _ _ A1).
-
elim(eq_dec_points A1 Q).
intro; subst A1; apply one_side_reflexivity; auto; apply (par_strict_not_col_2 A2); Par.
intro.
apply l12_6.
apply par_strict_right_comm.
apply (par_strict_col_par_strict _ _ _ A2); Col; Par.
-
apply cop__not_two_sides_one_side; Col.
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).

*****
H2 : Coplanar A1 A2 P B1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B1 B2 A1 C1
+++++
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
apply (one_side_transitivity _ _ _ A1).
-
elim(eq_dec_points A1 Q).
intro; subst A1; apply one_side_reflexivity; auto; apply (par_strict_not_col_2 A2); Par.
intro.
apply l12_6.
apply par_strict_right_comm.
apply (par_strict_col_par_strict _ _ _ A2); Col; Par.
-
apply cop__not_two_sides_one_side; Col.
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).

*****
H8 : Coplanar A1 A2 P B2
H2 : Coplanar A1 A2 P B1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B1 B2 A1 C1
+++++
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
apply (one_side_transitivity _ _ _ A1).
-
elim(eq_dec_points A1 Q).
intro; subst A1; apply one_side_reflexivity; auto; apply (par_strict_not_col_2 A2); Par.
intro.
apply l12_6.
apply par_strict_right_comm.
apply (par_strict_col_par_strict _ _ _ A2); Col; Par.
-
apply cop__not_two_sides_one_side; Col.
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).

*****
H10 : Coplanar A1 A2 C1 C2
H8 : Coplanar A1 A2 P B2
H2 : Coplanar A1 A2 P B1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B1 B2 A1 C1
+++++
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
apply (one_side_transitivity _ _ _ A1).
-
elim(eq_dec_points A1 Q).
intro; subst A1; apply one_side_reflexivity; auto; apply (par_strict_not_col_2 A2); Par.
intro.
apply l12_6.
apply par_strict_right_comm.
apply (par_strict_col_par_strict _ _ _ A2); Col; Par.
-
apply cop__not_two_sides_one_side; Col.
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).

*****
H11 : Coplanar A1 A2 P C1
H10 : Coplanar A1 A2 C1 C2
H8 : Coplanar A1 A2 P B2
H2 : Coplanar A1 A2 P B1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B1 B2 A1 C1
+++++
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
apply (one_side_transitivity _ _ _ A1).
-
elim(eq_dec_points A1 Q).
intro; subst A1; apply one_side_reflexivity; auto; apply (par_strict_not_col_2 A2); Par.
intro.
apply l12_6.
apply par_strict_right_comm.
apply (par_strict_col_par_strict _ _ _ A2); Col; Par.
-
apply cop__not_two_sides_one_side; Col.
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).

*****
H12 : Coplanar A1 A2 P C2
H11 : Coplanar A1 A2 P C1
H10 : Coplanar A1 A2 C1 C2
H8 : Coplanar A1 A2 P B2
H2 : Coplanar A1 A2 P B1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B1 B2 A1 C1
+++++
CopR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
apply (one_side_transitivity _ _ _ A1).
-
elim(eq_dec_points A1 Q).
intro; subst A1; apply one_side_reflexivity; auto; apply (par_strict_not_col_2 A2); Par.
intro.
apply l12_6.
apply par_strict_right_comm.
apply (par_strict_col_par_strict _ _ _ A2); Col; Par.
-
apply cop__not_two_sides_one_side; Col.
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
CopR.

*****
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A1 B1 B2)
+++++
apply (par_strict_not_col_2 A2); Par.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).

*****
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).

*****
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).

*****
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(HB3 : exists B3, Col B1 B2 B3 /\ OS P Q C1 B3).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).

*****
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B3 : Tpoint => and (Col B1 B2 B3) (OS P Q C1 B3))
+++++
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).

*****
H10 : Coplanar A1 A2 P B1
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B3 : Tpoint => and (Col B1 B2 B3) (OS P Q C1 B3))
+++++
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).

*****
H11 : Coplanar A1 A2 P B2
H10 : Coplanar A1 A2 P B1
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B3 : Tpoint => and (Col B1 B2 B3) (OS P Q C1 B3))
+++++
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).

*****
H12 : Coplanar A1 A2 C1 C2
H11 : Coplanar A1 A2 P B2
H10 : Coplanar A1 A2 P B1
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B3 : Tpoint => and (Col B1 B2 B3) (OS P Q C1 B3))
+++++
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).

*****
H13 : Coplanar A1 A2 P C1
H12 : Coplanar A1 A2 C1 C2
H11 : Coplanar A1 A2 P B2
H10 : Coplanar A1 A2 P B1
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B3 : Tpoint => and (Col B1 B2 B3) (OS P Q C1 B3))
+++++
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).

*****
H14 : Coplanar A1 A2 P C2
H13 : Coplanar A1 A2 P C1
H12 : Coplanar A1 A2 C1 C2
H11 : Coplanar A1 A2 P B2
H10 : Coplanar A1 A2 P B1
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B3 : Tpoint => and (Col B1 B2 B3) (OS P Q C1 B3))
+++++
assert (Coplanar A1 A2 P Q) by Cop.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.

*****
H15 : Coplanar A1 A2 P Q
H14 : Coplanar A1 A2 P C2
H13 : Coplanar A1 A2 P C1
H12 : Coplanar A1 A2 C1 C2
H11 : Coplanar A1 A2 P B2
H10 : Coplanar A1 A2 P B1
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B3 : Tpoint => and (Col B1 B2 B3) (OS P Q C1 B3))
+++++
assert (Coplanar B1 B2 P Q) by Cop.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.

*****
H16 : Coplanar B1 B2 P Q
H15 : Coplanar A1 A2 P Q
H14 : Coplanar A1 A2 P C2
H13 : Coplanar A1 A2 P C1
H12 : Coplanar A1 A2 C1 C2
H11 : Coplanar A1 A2 P B2
H10 : Coplanar A1 A2 P B1
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B3 : Tpoint => and (Col B1 B2 B3) (OS P Q C1 B3))
+++++
elim(col_dec P Q B1).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
elim(col_dec P Q B1).

*****
H16 : Coplanar B1 B2 P Q
H15 : Coplanar A1 A2 P Q
H14 : Coplanar A1 A2 P C2
H13 : Coplanar A1 A2 P C1
H12 : Coplanar A1 A2 C1 C2
H11 : Coplanar A1 A2 P B2
H10 : Coplanar A1 A2 P B1
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col P Q B1, ex (fun B3 : Tpoint => and (Col B1 B2 B3) (OS P Q C1 B3))
+++++
2: intro; apply (cop_not_par_same_side _ _ _ _ P); Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
elim(col_dec P Q B1).
2: intro; apply (cop_not_par_same_side _ _ _ _ P); Col.

*****
H16 : Coplanar B1 B2 P Q
H15 : Coplanar A1 A2 P Q
H14 : Coplanar A1 A2 P C2
H13 : Coplanar A1 A2 P C1
H12 : Coplanar A1 A2 C1 C2
H11 : Coplanar A1 A2 P B2
H10 : Coplanar A1 A2 P B1
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col P Q B1, ex (fun B3 : Tpoint => and (Col B1 B2 B3) (OS P Q C1 B3))
+++++
intro.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
elim(col_dec P Q B1).
2: intro; apply (cop_not_par_same_side _ _ _ _ P); Col.
intro.

*****
H17 : Col P Q B1
H16 : Coplanar B1 B2 P Q
H15 : Coplanar A1 A2 P Q
H14 : Coplanar A1 A2 P C2
H13 : Coplanar A1 A2 P C1
H12 : Coplanar A1 A2 C1 C2
H11 : Coplanar A1 A2 P B2
H10 : Coplanar A1 A2 P B1
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B3 : Tpoint => and (Col B1 B2 B3) (OS P Q C1 B3))
+++++
assert(HB3 := cop_not_par_same_side P Q B2 B1 P C1).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
elim(col_dec P Q B1).
2: intro; apply (cop_not_par_same_side _ _ _ _ P); Col.
intro.
assert(HB3 := cop_not_par_same_side P Q B2 B1 P C1).

*****
HB3 : forall (_ : not (eq B2 B1)) (_ : Col P Q P) (_ : Col B2 B1 P)\n (_ : not (Col P Q B2)) (_ : not (Col P Q C1))\n (_ : Coplanar P Q B2 C1),\nex (fun Q0 : Tpoint => and (Col B2 B1 Q0) (OS P Q C1 Q0))
H17 : Col P Q B1
H16 : Coplanar B1 B2 P Q
H15 : Coplanar A1 A2 P Q
H14 : Coplanar A1 A2 P C2
H13 : Coplanar A1 A2 P C1
H12 : Coplanar A1 A2 C1 C2
H11 : Coplanar A1 A2 P B2
H10 : Coplanar A1 A2 P B1
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B3 : Tpoint => and (Col B1 B2 B3) (OS P Q C1 B3))
+++++
destruct HB3 as [B3 []]; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
elim(col_dec P Q B1).
2: intro; apply (cop_not_par_same_side _ _ _ _ P); Col.
intro.
assert(HB3 := cop_not_par_same_side P Q B2 B1 P C1).
destruct HB3 as [B3 []]; Col.

*****
H17 : Col P Q B1
H16 : Coplanar B1 B2 P Q
H15 : Coplanar A1 A2 P Q
H14 : Coplanar A1 A2 P C2
H13 : Coplanar A1 A2 P C1
H12 : Coplanar A1 A2 C1 C2
H11 : Coplanar A1 A2 P B2
H10 : Coplanar A1 A2 P B1
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P Q B2)
+++++
intro; assert(Col B1 B2 Q); Col; ColR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
elim(col_dec P Q B1).
2: intro; apply (cop_not_par_same_side _ _ _ _ P); Col.
intro.
assert(HB3 := cop_not_par_same_side P Q B2 B1 P C1).
destruct HB3 as [B3 []]; Col.
intro; assert(Col B1 B2 Q); Col; ColR.

*****
H17 : Col P Q B1
H16 : Coplanar B1 B2 P Q
H15 : Coplanar A1 A2 P Q
H14 : Coplanar A1 A2 P C2
H13 : Coplanar A1 A2 P C1
H12 : Coplanar A1 A2 C1 C2
H11 : Coplanar A1 A2 P B2
H10 : Coplanar A1 A2 P B1
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q B2 C1
+++++
CopR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
elim(col_dec P Q B1).
2: intro; apply (cop_not_par_same_side _ _ _ _ P); Col.
intro.
assert(HB3 := cop_not_par_same_side P Q B2 B1 P C1).
destruct HB3 as [B3 []]; Col.
intro; assert(Col B1 B2 Q); Col; ColR.
CopR.

*****
H19 : OS P Q C1 B3
H18 : Col B2 B1 B3
B3 : Tpoint
H17 : Col P Q B1
H16 : Coplanar B1 B2 P Q
H15 : Coplanar A1 A2 P Q
H14 : Coplanar A1 A2 P C2
H13 : Coplanar A1 A2 P C1
H12 : Coplanar A1 A2 C1 C2
H11 : Coplanar A1 A2 P B2
H10 : Coplanar A1 A2 P B1
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B3 : Tpoint => and (Col B1 B2 B3) (OS P Q C1 B3))
+++++
exists B3; split; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
elim(col_dec P Q B1).
2: intro; apply (cop_not_par_same_side _ _ _ _ P); Col.
intro.
assert(HB3 := cop_not_par_same_side P Q B2 B1 P C1).
destruct HB3 as [B3 []]; Col.
intro; assert(Col B1 B2 Q); Col; ColR.
CopR.
exists B3; split; Col.

*****
H17 : not (Col P Q B1)
H16 : Coplanar B1 B2 P Q
H15 : Coplanar A1 A2 P Q
H14 : Coplanar A1 A2 P C2
H13 : Coplanar A1 A2 P C1
H12 : Coplanar A1 A2 C1 C2
H11 : Coplanar A1 A2 P B2
H10 : Coplanar A1 A2 P B1
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q B1 C1
+++++
CopR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).

*****
HB3 : ex (fun B3 : Tpoint => and (Col B1 B2 B3) (OS P Q C1 B3))
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HB3 as [B3 []].
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].

*****
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(HB4 := symmetric_point_construction B3 P).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).

*****
HB4 : ex (fun P' : Tpoint => Midpoint P B3 P')
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HB4 as [B4].
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].

*****
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).

*****
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(HA3 : exists A3, Col A1 A2 A3 /\ OS P Q C1 A3).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).

*****
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A3 : Tpoint => and (Col A1 A2 A3) (OS P Q C1 A3))
+++++
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).

*****
H14 : Coplanar A1 A2 P B1
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A3 : Tpoint => and (Col A1 A2 A3) (OS P Q C1 A3))
+++++
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).

*****
H15 : Coplanar A1 A2 P B2
H14 : Coplanar A1 A2 P B1
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A3 : Tpoint => and (Col A1 A2 A3) (OS P Q C1 A3))
+++++
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).

*****
H16 : Coplanar A1 A2 C1 C2
H15 : Coplanar A1 A2 P B2
H14 : Coplanar A1 A2 P B1
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A3 : Tpoint => and (Col A1 A2 A3) (OS P Q C1 A3))
+++++
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).

*****
H17 : Coplanar A1 A2 P C1
H16 : Coplanar A1 A2 C1 C2
H15 : Coplanar A1 A2 P B2
H14 : Coplanar A1 A2 P B1
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A3 : Tpoint => and (Col A1 A2 A3) (OS P Q C1 A3))
+++++
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).

*****
H18 : Coplanar A1 A2 P C2
H17 : Coplanar A1 A2 P C1
H16 : Coplanar A1 A2 C1 C2
H15 : Coplanar A1 A2 P B2
H14 : Coplanar A1 A2 P B1
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A3 : Tpoint => and (Col A1 A2 A3) (OS P Q C1 A3))
+++++
assert (Coplanar A1 A2 P Q) by Cop.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.

*****
H19 : Coplanar A1 A2 P Q
H18 : Coplanar A1 A2 P C2
H17 : Coplanar A1 A2 P C1
H16 : Coplanar A1 A2 C1 C2
H15 : Coplanar A1 A2 P B2
H14 : Coplanar A1 A2 P B1
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A3 : Tpoint => and (Col A1 A2 A3) (OS P Q C1 A3))
+++++
assert (Coplanar B1 B2 P Q) by Cop.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.

*****
H20 : Coplanar B1 B2 P Q
H19 : Coplanar A1 A2 P Q
H18 : Coplanar A1 A2 P C2
H17 : Coplanar A1 A2 P C1
H16 : Coplanar A1 A2 C1 C2
H15 : Coplanar A1 A2 P B2
H14 : Coplanar A1 A2 P B1
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A3 : Tpoint => and (Col A1 A2 A3) (OS P Q C1 A3))
+++++
elim(col_dec P Q A1).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
elim(col_dec P Q A1).

*****
H20 : Coplanar B1 B2 P Q
H19 : Coplanar A1 A2 P Q
H18 : Coplanar A1 A2 P C2
H17 : Coplanar A1 A2 P C1
H16 : Coplanar A1 A2 C1 C2
H15 : Coplanar A1 A2 P B2
H14 : Coplanar A1 A2 P B1
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col P Q A1, ex (fun A3 : Tpoint => and (Col A1 A2 A3) (OS P Q C1 A3))
+++++
2: intro; apply (cop_not_par_same_side _ _ _ _ Q); Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
elim(col_dec P Q A1).
2: intro; apply (cop_not_par_same_side _ _ _ _ Q); Col.

*****
H20 : Coplanar B1 B2 P Q
H19 : Coplanar A1 A2 P Q
H18 : Coplanar A1 A2 P C2
H17 : Coplanar A1 A2 P C1
H16 : Coplanar A1 A2 C1 C2
H15 : Coplanar A1 A2 P B2
H14 : Coplanar A1 A2 P B1
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col P Q A1, ex (fun A3 : Tpoint => and (Col A1 A2 A3) (OS P Q C1 A3))
+++++
intro.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
elim(col_dec P Q A1).
2: intro; apply (cop_not_par_same_side _ _ _ _ Q); Col.
intro.

*****
H21 : Col P Q A1
H20 : Coplanar B1 B2 P Q
H19 : Coplanar A1 A2 P Q
H18 : Coplanar A1 A2 P C2
H17 : Coplanar A1 A2 P C1
H16 : Coplanar A1 A2 C1 C2
H15 : Coplanar A1 A2 P B2
H14 : Coplanar A1 A2 P B1
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A3 : Tpoint => and (Col A1 A2 A3) (OS P Q C1 A3))
+++++
assert(HA3 := cop_not_par_same_side P Q A2 A1 Q C1).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
elim(col_dec P Q A1).
2: intro; apply (cop_not_par_same_side _ _ _ _ Q); Col.
intro.
assert(HA3 := cop_not_par_same_side P Q A2 A1 Q C1).

*****
HA3 : forall (_ : not (eq A2 A1)) (_ : Col P Q Q) (_ : Col A2 A1 Q)\n (_ : not (Col P Q A2)) (_ : not (Col P Q C1))\n (_ : Coplanar P Q A2 C1),\nex (fun Q0 : Tpoint => and (Col A2 A1 Q0) (OS P Q C1 Q0))
H21 : Col P Q A1
H20 : Coplanar B1 B2 P Q
H19 : Coplanar A1 A2 P Q
H18 : Coplanar A1 A2 P C2
H17 : Coplanar A1 A2 P C1
H16 : Coplanar A1 A2 C1 C2
H15 : Coplanar A1 A2 P B2
H14 : Coplanar A1 A2 P B1
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A3 : Tpoint => and (Col A1 A2 A3) (OS P Q C1 A3))
+++++
destruct HA3 as [A3 []]; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
elim(col_dec P Q A1).
2: intro; apply (cop_not_par_same_side _ _ _ _ Q); Col.
intro.
assert(HA3 := cop_not_par_same_side P Q A2 A1 Q C1).
destruct HA3 as [A3 []]; Col.

*****
H21 : Col P Q A1
H20 : Coplanar B1 B2 P Q
H19 : Coplanar A1 A2 P Q
H18 : Coplanar A1 A2 P C2
H17 : Coplanar A1 A2 P C1
H16 : Coplanar A1 A2 C1 C2
H15 : Coplanar A1 A2 P B2
H14 : Coplanar A1 A2 P B1
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P Q A2)
+++++
intro; apply HStrict; ColR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
elim(col_dec P Q A1).
2: intro; apply (cop_not_par_same_side _ _ _ _ Q); Col.
intro.
assert(HA3 := cop_not_par_same_side P Q A2 A1 Q C1).
destruct HA3 as [A3 []]; Col.
intro; apply HStrict; ColR.

*****
H21 : Col P Q A1
H20 : Coplanar B1 B2 P Q
H19 : Coplanar A1 A2 P Q
H18 : Coplanar A1 A2 P C2
H17 : Coplanar A1 A2 P C1
H16 : Coplanar A1 A2 C1 C2
H15 : Coplanar A1 A2 P B2
H14 : Coplanar A1 A2 P B1
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q A2 C1
+++++
CopR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
elim(col_dec P Q A1).
2: intro; apply (cop_not_par_same_side _ _ _ _ Q); Col.
intro.
assert(HA3 := cop_not_par_same_side P Q A2 A1 Q C1).
destruct HA3 as [A3 []]; Col.
intro; apply HStrict; ColR.
CopR.

*****
H23 : OS P Q C1 A3
H22 : Col A2 A1 A3
A3 : Tpoint
H21 : Col P Q A1
H20 : Coplanar B1 B2 P Q
H19 : Coplanar A1 A2 P Q
H18 : Coplanar A1 A2 P C2
H17 : Coplanar A1 A2 P C1
H16 : Coplanar A1 A2 C1 C2
H15 : Coplanar A1 A2 P B2
H14 : Coplanar A1 A2 P B1
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A3 : Tpoint => and (Col A1 A2 A3) (OS P Q C1 A3))
+++++
exists A3; split; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
elim(col_dec P Q A1).
2: intro; apply (cop_not_par_same_side _ _ _ _ Q); Col.
intro.
assert(HA3 := cop_not_par_same_side P Q A2 A1 Q C1).
destruct HA3 as [A3 []]; Col.
intro; apply HStrict; ColR.
CopR.
exists A3; split; Col.

*****
H21 : not (Col P Q A1)
H20 : Coplanar B1 B2 P Q
H19 : Coplanar A1 A2 P Q
H18 : Coplanar A1 A2 P C2
H17 : Coplanar A1 A2 P C1
H16 : Coplanar A1 A2 C1 C2
H15 : Coplanar A1 A2 P B2
H14 : Coplanar A1 A2 P B1
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P Q A1 C1
+++++
CopR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).

*****
HA3 : ex (fun A3 : Tpoint => and (Col A1 A2 A3) (OS P Q C1 A3))
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HA3 as [A3 []].
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].

*****
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).

*****
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.

*****
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(HInAngle : InAngle C1 Q P B3).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).

*****
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle C1 Q P B3
+++++
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.

*****
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(LtA B3 P C1 B3 P Q).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).

*****
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA B3 P C1 B3 P Q
+++++
split.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.

*****
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA B3 P C1 B3 P Q
+++++
exists C1; split; try (apply l11_24); CongA.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.
exists C1; split; try (apply l11_24); CongA.

*****
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (CongA B3 P C1 B3 P Q)
+++++
intro HConga.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.
exists C1; split; try (apply l11_24); CongA.
intro HConga.

*****
HConga : CongA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply conga_cop__or_out_ts in HConga.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.
exists C1; split; try (apply l11_24); CongA.
intro HConga.
apply conga_cop__or_out_ts in HConga.

*****
HConga : or (Out P C1 Q) (TS B3 P C1 Q)
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HConga as [Habs|Habs].
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.
exists C1; split; try (apply l11_24); CongA.
intro HConga.
apply conga_cop__or_out_ts in HConga.
destruct HConga as [Habs|Habs].

*****
Habs : Out P C1 Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_cols; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.
exists C1; split; try (apply l11_24); CongA.
intro HConga.
apply conga_cop__or_out_ts in HConga.
destruct HConga as [Habs|Habs].
assert_cols; Col.

*****
Habs : TS B3 P C1 Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply l9_9 in Habs.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.
exists C1; split; try (apply l11_24); CongA.
intro HConga.
apply conga_cop__or_out_ts in HConga.
destruct HConga as [Habs|Habs].
assert_cols; Col.
apply l9_9 in Habs.

*****
Habs : not (OS B3 P C1 Q)
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply Habs.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.
exists C1; split; try (apply l11_24); CongA.
intro HConga.
apply conga_cop__or_out_ts in HConga.
destruct HConga as [Habs|Habs].
assert_cols; Col.
apply l9_9 in Habs.
apply Habs.

*****
Habs : not (OS B3 P C1 Q)
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B3 P C1 Q
+++++
apply one_side_symmetry.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.
exists C1; split; try (apply l11_24); CongA.
intro HConga.
apply conga_cop__or_out_ts in HConga.
destruct HConga as [Habs|Habs].
assert_cols; Col.
apply l9_9 in Habs.
apply Habs.
apply one_side_symmetry.

*****
Habs : not (OS B3 P C1 Q)
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B3 P Q C1
+++++
apply (col2_os__os B1 B2); Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.
exists C1; split; try (apply l11_24); CongA.
intro HConga.
apply conga_cop__or_out_ts in HConga.
destruct HConga as [Habs|Habs].
assert_cols; Col.
apply l9_9 in Habs.
apply Habs.
apply one_side_symmetry.
apply (col2_os__os B1 B2); Col.

*****
HConga : CongA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B3 P C1 Q
+++++
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.
exists C1; split; try (apply l11_24); CongA.
intro HConga.
apply conga_cop__or_out_ts in HConga.
destruct HConga as [Habs|Habs].
assert_cols; Col.
apply l9_9 in Habs.
apply Habs.
apply one_side_symmetry.
apply (col2_os__os B1 B2); Col.
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).

*****
H17 : Coplanar A1 A2 P B1
HConga : CongA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B3 P C1 Q
+++++
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.
exists C1; split; try (apply l11_24); CongA.
intro HConga.
apply conga_cop__or_out_ts in HConga.
destruct HConga as [Habs|Habs].
assert_cols; Col.
apply l9_9 in Habs.
apply Habs.
apply one_side_symmetry.
apply (col2_os__os B1 B2); Col.
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).

*****
H27 : Coplanar A1 A2 P B2
H17 : Coplanar A1 A2 P B1
HConga : CongA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B3 P C1 Q
+++++
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.
exists C1; split; try (apply l11_24); CongA.
intro HConga.
apply conga_cop__or_out_ts in HConga.
destruct HConga as [Habs|Habs].
assert_cols; Col.
apply l9_9 in Habs.
apply Habs.
apply one_side_symmetry.
apply (col2_os__os B1 B2); Col.
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).

*****
H28 : Coplanar A1 A2 C1 C2
H27 : Coplanar A1 A2 P B2
H17 : Coplanar A1 A2 P B1
HConga : CongA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B3 P C1 Q
+++++
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.
exists C1; split; try (apply l11_24); CongA.
intro HConga.
apply conga_cop__or_out_ts in HConga.
destruct HConga as [Habs|Habs].
assert_cols; Col.
apply l9_9 in Habs.
apply Habs.
apply one_side_symmetry.
apply (col2_os__os B1 B2); Col.
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).

*****
H29 : Coplanar A1 A2 P C1
H28 : Coplanar A1 A2 C1 C2
H27 : Coplanar A1 A2 P B2
H17 : Coplanar A1 A2 P B1
HConga : CongA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B3 P C1 Q
+++++
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.
exists C1; split; try (apply l11_24); CongA.
intro HConga.
apply conga_cop__or_out_ts in HConga.
destruct HConga as [Habs|Habs].
assert_cols; Col.
apply l9_9 in Habs.
apply Habs.
apply one_side_symmetry.
apply (col2_os__os B1 B2); Col.
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).

*****
H30 : Coplanar A1 A2 P C2
H29 : Coplanar A1 A2 P C1
H28 : Coplanar A1 A2 C1 C2
H27 : Coplanar A1 A2 P B2
H17 : Coplanar A1 A2 P B1
HConga : CongA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B3 P C1 Q
+++++
assert (Coplanar A1 A2 P Q) by Cop.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.
exists C1; split; try (apply l11_24); CongA.
intro HConga.
apply conga_cop__or_out_ts in HConga.
destruct HConga as [Habs|Habs].
assert_cols; Col.
apply l9_9 in Habs.
apply Habs.
apply one_side_symmetry.
apply (col2_os__os B1 B2); Col.
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.

*****
H31 : Coplanar A1 A2 P Q
H30 : Coplanar A1 A2 P C2
H29 : Coplanar A1 A2 P C1
H28 : Coplanar A1 A2 C1 C2
H27 : Coplanar A1 A2 P B2
H17 : Coplanar A1 A2 P B1
HConga : CongA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B3 P C1 Q
+++++
assert (Coplanar B1 B2 P Q) by Cop.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
split.
exists C1; split; try (apply l11_24); CongA.
intro HConga.
apply conga_cop__or_out_ts in HConga.
destruct HConga as [Habs|Habs].
assert_cols; Col.
apply l9_9 in Habs.
apply Habs.
apply one_side_symmetry.
apply (col2_os__os B1 B2); Col.
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.

*****
H32 : Coplanar B1 B2 P Q
H31 : Coplanar A1 A2 P Q
H30 : Coplanar A1 A2 P C2
H29 : Coplanar A1 A2 P C1
H28 : Coplanar A1 A2 C1 C2
H27 : Coplanar A1 A2 P B2
H17 : Coplanar A1 A2 P B1
HConga : CongA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B3 P C1 Q
+++++
apply coplanar_perm_16, col2_cop__cop with B1 B2; Col; CopR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).

*****
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(Acute B3 P C1).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).

*****
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Acute B3 P C1
+++++
exists B3.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
exists B3.

*****
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B' : Tpoint => ex (fun C' : Tpoint => and (Per B3 B' C') (LtA B3 P C1 B3 B' C')))
+++++
exists P.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
exists B3.
exists P.

*****
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C' : Tpoint => and (Per B3 P C') (LtA B3 P C1 B3 P C'))
+++++
exists Q.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
exists B3.
exists P.
exists Q.

*****
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Per B3 P Q) (LtA B3 P C1 B3 P Q)
+++++
split; auto.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
exists B3.
exists P.
exists Q.
split; auto.

*****
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B3 P Q
+++++
apply perp_per_2; auto.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
exists B3.
exists P.
exists Q.
split; auto.
apply perp_per_2; auto.

*****
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P B3 P Q
+++++
apply (perp_col2 B1 B2); Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).

*****
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(HR:= greenberg P Q A3 B3 P C1).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).

*****
HR : forall (_ : not (Col B3 P C1)) (_ : Acute B3 P C1) \n (_ : not (eq Q A3)) (_ : Per P Q A3),\nex (fun S : Tpoint => and (LtA P S Q B3 P C1) (Out Q S A3))
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HR as [R []]; auto.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.

*****
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B3 P C1)
+++++
intro; assert_cols; apply HC1NotB; ColR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.

*****
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per P Q A3
+++++
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.

*****
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(P<>R) by (intro; subst R; assert_cols; Col).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).

*****
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).

*****
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.

*****
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(OS P C1 R Q).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).

*****
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P C1 R Q
+++++
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.

*****
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(Hsuma1 := ex_suma B4 P R P R Q).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).

*****
Hsuma1 : forall (_ : not (eq B4 P)) (_ : not (eq P R)) (_ : not (eq P R))\n (_ : not (eq R Q)),\nex\n (fun G : Tpoint =>\n ex\n (fun H : Tpoint => ex (fun I : Tpoint => SumA B4 P R P R Q G H I)))
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(Htri : TriSumA R Q P A B C).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TriSumA R Q P A B C
+++++
exists B4.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun H : Tpoint => ex (fun I : Tpoint => and (SumA R Q P Q P R B4 H I) (SumA B4 H I P R Q A B C)))
+++++
exists P.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun I : Tpoint => and (SumA R Q P Q P R B4 P I) (SumA B4 P I P R Q A B C))
+++++
exists R.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (SumA R Q P Q P R B4 P R) (SumA B4 P R P R Q A B C)
+++++
split; auto.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA R Q P Q P R B4 P R
+++++
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA B4 P Q Q P R B4 P R
+++++
-
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA B4 P Q Q P R B4 P R
+++++
exists R.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (CongA Q P R Q P R) (and (not (OS P Q B4 R)) (and (Coplanar B4 P Q R) (CongA B4 P R B4 P R)))
+++++
repeat (split; CongA).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (OS P Q B4 R)
+++++
apply l9_9.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS P Q B4 R
+++++
apply l9_2.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS P Q R B4
+++++
apply (l9_8_2 _ _ B3).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS P Q B3 B4
+++++
repeat split; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
repeat split; Col.

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B4 P Q)
+++++
intro; assert(Col P Q B3); Col; ColR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
repeat split; Col.
intro; assert(Col P Q B3); Col; ColR.

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T P Q) (Bet B3 T B4))
+++++
exists P.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
repeat split; Col.
intro; assert(Col P Q B3); Col; ColR.
exists P.

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P P Q) (Bet B3 P B4)
+++++
split; Col; Between.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P Q B3 R
+++++
apply (one_side_transitivity _ _ _ A3); Side.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
apply (one_side_transitivity _ _ _ A3); Side.

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P Q B3 A3
+++++
apply (one_side_transitivity _ _ _ C1); Side.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
apply (one_side_transitivity _ _ _ A3); Side.
apply (one_side_transitivity _ _ _ C1); Side.

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B4 P Q R
+++++
assert (Coplanar P Q R C1) by (apply os__coplanar, one_side_transitivity with A3; Side).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
apply (one_side_transitivity _ _ _ A3); Side.
apply (one_side_transitivity _ _ _ C1); Side.
assert (Coplanar P Q R C1) by (apply os__coplanar, one_side_transitivity with A3; Side).

*****
H34 : Coplanar P Q R C1
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B4 P Q R
+++++
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
apply (one_side_transitivity _ _ _ A3); Side.
apply (one_side_transitivity _ _ _ C1); Side.
assert (Coplanar P Q R C1) by (apply os__coplanar, one_side_transitivity with A3; Side).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).

*****
H35 : Coplanar A1 A2 P B1
H34 : Coplanar P Q R C1
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B4 P Q R
+++++
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
apply (one_side_transitivity _ _ _ A3); Side.
apply (one_side_transitivity _ _ _ C1); Side.
assert (Coplanar P Q R C1) by (apply os__coplanar, one_side_transitivity with A3; Side).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).

*****
H36 : Coplanar A1 A2 P B2
H35 : Coplanar A1 A2 P B1
H34 : Coplanar P Q R C1
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B4 P Q R
+++++
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
apply (one_side_transitivity _ _ _ A3); Side.
apply (one_side_transitivity _ _ _ C1); Side.
assert (Coplanar P Q R C1) by (apply os__coplanar, one_side_transitivity with A3; Side).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).

*****
H37 : Coplanar A1 A2 C1 C2
H36 : Coplanar A1 A2 P B2
H35 : Coplanar A1 A2 P B1
H34 : Coplanar P Q R C1
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B4 P Q R
+++++
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
apply (one_side_transitivity _ _ _ A3); Side.
apply (one_side_transitivity _ _ _ C1); Side.
assert (Coplanar P Q R C1) by (apply os__coplanar, one_side_transitivity with A3; Side).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).

*****
H38 : Coplanar A1 A2 P C1
H37 : Coplanar A1 A2 C1 C2
H36 : Coplanar A1 A2 P B2
H35 : Coplanar A1 A2 P B1
H34 : Coplanar P Q R C1
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B4 P Q R
+++++
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
apply (one_side_transitivity _ _ _ A3); Side.
apply (one_side_transitivity _ _ _ C1); Side.
assert (Coplanar P Q R C1) by (apply os__coplanar, one_side_transitivity with A3; Side).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).

*****
H39 : Coplanar A1 A2 P C2
H38 : Coplanar A1 A2 P C1
H37 : Coplanar A1 A2 C1 C2
H36 : Coplanar A1 A2 P B2
H35 : Coplanar A1 A2 P B1
H34 : Coplanar P Q R C1
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B4 P Q R
+++++
assert (Coplanar A1 A2 P Q) by Cop.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
apply (one_side_transitivity _ _ _ A3); Side.
apply (one_side_transitivity _ _ _ C1); Side.
assert (Coplanar P Q R C1) by (apply os__coplanar, one_side_transitivity with A3; Side).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.

*****
H40 : Coplanar A1 A2 P Q
H39 : Coplanar A1 A2 P C2
H38 : Coplanar A1 A2 P C1
H37 : Coplanar A1 A2 C1 C2
H36 : Coplanar A1 A2 P B2
H35 : Coplanar A1 A2 P B1
H34 : Coplanar P Q R C1
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B4 P Q R
+++++
assert (Coplanar B1 B2 P Q) by Cop.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
apply (one_side_transitivity _ _ _ A3); Side.
apply (one_side_transitivity _ _ _ C1); Side.
assert (Coplanar P Q R C1) by (apply os__coplanar, one_side_transitivity with A3; Side).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.

*****
H41 : Coplanar B1 B2 P Q
H40 : Coplanar A1 A2 P Q
H39 : Coplanar A1 A2 P C2
H38 : Coplanar A1 A2 P C1
H37 : Coplanar A1 A2 C1 C2
H36 : Coplanar A1 A2 P B2
H35 : Coplanar A1 A2 P B1
H34 : Coplanar P Q R C1
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B4 P Q R
+++++
apply coplanar_perm_16.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
apply (one_side_transitivity _ _ _ A3); Side.
apply (one_side_transitivity _ _ _ C1); Side.
assert (Coplanar P Q R C1) by (apply os__coplanar, one_side_transitivity with A3; Side).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
apply coplanar_perm_16.

*****
H41 : Coplanar B1 B2 P Q
H40 : Coplanar A1 A2 P Q
H39 : Coplanar A1 A2 P C2
H38 : Coplanar A1 A2 P C1
H37 : Coplanar A1 A2 C1 C2
H36 : Coplanar A1 A2 P B2
H35 : Coplanar A1 A2 P B1
H34 : Coplanar P Q R C1
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar Q R B4 P
+++++
elim (perp_not_col2 _ _ _ _ (perp_sym _ _ _ _ HPerpBP)); intro; [apply col2_cop__cop with P B1|apply col2_cop__cop with P B2]; assert_diffs; Col; try ColR; CopR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
apply (one_side_transitivity _ _ _ A3); Side.
apply (one_side_transitivity _ _ _ C1); Side.
assert (Coplanar P Q R C1) by (apply os__coplanar, one_side_transitivity with A3; Side).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
apply coplanar_perm_16.
elim (perp_not_col2 _ _ _ _ (perp_sym _ _ _ _ HPerpBP)); intro; [apply col2_cop__cop with P B1|apply col2_cop__cop with P B2]; assert_diffs; Col; try ColR; CopR.

*****

*****

+++++
-
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
apply (one_side_transitivity _ _ _ A3); Side.
apply (one_side_transitivity _ _ _ C1); Side.
assert (Coplanar P Q R C1) by (apply os__coplanar, one_side_transitivity with A3; Side).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
apply coplanar_perm_16.
elim (perp_not_col2 _ _ _ _ (perp_sym _ _ _ _ HPerpBP)); intro; [apply col2_cop__cop with P B1|apply col2_cop__cop with P B2]; assert_diffs; Col; try ColR; CopR.
-

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA B4 P Q R Q P
+++++
apply l11_16; auto.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
apply (one_side_transitivity _ _ _ A3); Side.
apply (one_side_transitivity _ _ _ C1); Side.
assert (Coplanar P Q R C1) by (apply os__coplanar, one_side_transitivity with A3; Side).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
apply coplanar_perm_16.
elim (perp_not_col2 _ _ _ _ (perp_sym _ _ _ _ HPerpBP)); intro; [apply col2_cop__cop with P B1|apply col2_cop__cop with P B2]; assert_diffs; Col; try ColR; CopR.
-
apply l11_16; auto.

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B4 P Q
+++++
apply perp_per_2; auto; apply (perp_col2 B1 B2); Col; ColR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
exists B4.
exists P.
exists R.
split; auto.
apply (conga3_suma__suma B4 P Q Q P R B4 P R); try (apply conga_refl; auto).
-
exists R.
repeat (split; CongA).
apply l9_9.
apply l9_2.
apply (l9_8_2 _ _ B3).
apply (one_side_transitivity _ _ _ A3); Side.
apply (one_side_transitivity _ _ _ C1); Side.
assert (Coplanar P Q R C1) by (apply os__coplanar, one_side_transitivity with A3; Side).
assert (Coplanar A1 A2 P B1) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 P B2) by (apply col2_cop__cop with B1 B2; Col; Cop).
assert (Coplanar A1 A2 C1 C2) by (apply pars__coplanar; auto).
assert (Coplanar A1 A2 P C1) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P C2) by (apply col2_cop__cop with C1 C2; Col; Cop).
assert (Coplanar A1 A2 P Q) by Cop.
assert (Coplanar B1 B2 P Q) by Cop.
apply coplanar_perm_16.
elim (perp_not_col2 _ _ _ _ (perp_sym _ _ _ _ HPerpBP)); intro; [apply col2_cop__cop with P B1|apply col2_cop__cop with P B2]; assert_diffs; Col; try ColR; CopR.
-
apply l11_16; auto.
apply perp_per_2; auto; apply (perp_col2 B1 B2); Col; ColR.

*****
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per R Q P
+++++
apply perp_per_1; auto; apply (perp_col2 A1 A2); Col; ColR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).

*****
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).

*****
Hsuma2 : forall (_ : not (eq B4 P)) (_ : not (eq P R)) (_ : not (eq C1 P))\n (_ : not (eq P B3)),\nex\n (fun G : Tpoint =>\n ex\n (fun H : Tpoint =>\n ex (fun I : Tpoint => SumA B4 P R C1 P B3 G H I)))
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.

*****
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(~ Col R P B4).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).

*****
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col R P B4)
+++++
apply (par_not_col A1 A2); auto.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
apply (par_not_col A1 A2); auto.

*****
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict A1 A2 P B4
+++++
apply (par_strict_col2_par_strict _ _ B1 B2); auto; ColR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
apply (par_not_col A1 A2); auto.
apply (par_strict_col2_par_strict _ _ B1 B2); auto; ColR.

*****
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col R A1 A2
+++++
ColR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).

*****
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(~ OS P R B4 B3).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).

*****
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (OS P R B4 B3)
+++++
apply l9_9.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
apply l9_9.

*****
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS P R B4 B3
+++++
repeat split; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
apply l9_9.
repeat split; Col.

*****
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col B3 P R)
+++++
intro; assert(Col R P B4); Col; ColR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
apply l9_9.
repeat split; Col.
intro; assert(Col R P B4); Col; ColR.

*****
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T P R) (Bet B4 T B3))
+++++
exists P.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
apply l9_9.
repeat split; Col.
intro; assert(Col R P B4); Col; ColR.
exists P.

*****
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P P R) (Bet B4 P B3)
+++++
split; Col; Between.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).

*****
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).

*****
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(Hsams3 : SAMS B4 P R R P B3).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).

*****
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SAMS B4 P R R P B3
+++++
repeat split; auto.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
repeat split; auto.

*****
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Out P R B3) (not (Bet B4 P R))
+++++
right; intro; assert_cols; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
repeat split; auto.
right; intro; assert_cols; Col.

*****
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun J : Tpoint => and (CongA R P J R P B3) (and (not (OS P R B4 J)) (and (not (TS B4 P R J)) (Coplanar B4 P R J))))
+++++
exists B3; repeat (split; CongA); Cop.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
repeat split; auto.
right; intro; assert_cols; Col.
exists B3; repeat (split; CongA); Cop.

*****
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (TS B4 P R B3)
+++++
intro Habs.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
repeat split; auto.
right; intro; assert_cols; Col.
exists B3; repeat (split; CongA); Cop.
intro Habs.

*****
Habs : TS B4 P R B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct Habs as [_ [Habs]].
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
repeat split; auto.
right; intro; assert_cols; Col.
exists B3; repeat (split; CongA); Cop.
intro Habs.
destruct Habs as [_ [Habs]].

*****
H36 : ex (fun T : Tpoint => and (Col T B4 P) (Bet R T B3))
Habs : not (Col B3 B4 P)
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_cols; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).

*****
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(LeA C1 P B3 R P B3).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).

*****
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA C1 P B3 R P B3
+++++
apply lea_comm.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
apply lea_comm.

*****
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA B3 P C1 B3 P R
+++++
exists C1.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
apply lea_comm.
exists C1.

*****
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (InAngle C1 B3 P R) (CongA B3 P C1 B3 P C1)
+++++
split; CongA.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
apply lea_comm.
exists C1.
split; CongA.

*****
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle C1 B3 P R
+++++
apply os_ts__inangle.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
apply lea_comm.
exists C1.
split; CongA.
apply os_ts__inangle.

*****
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS P C1 B3 R
+++++
-
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
apply lea_comm.
exists C1.
split; CongA.
apply os_ts__inangle.
-

*****
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS P C1 B3 R
+++++
apply l9_2.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
apply lea_comm.
exists C1.
split; CongA.
apply os_ts__inangle.
-
apply l9_2.

*****
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS P C1 R B3
+++++
apply (l9_8_2 _ _ Q); Side.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
apply lea_comm.
exists C1.
split; CongA.
apply os_ts__inangle.
-
apply l9_2.
apply (l9_8_2 _ _ Q); Side.

*****
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS P C1 Q B3
+++++
apply invert_two_sides; apply in_angle_two_sides; Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
apply lea_comm.
exists C1.
split; CongA.
apply os_ts__inangle.
-
apply l9_2.
apply (l9_8_2 _ _ Q); Side.
apply invert_two_sides; apply in_angle_two_sides; Col.

*****
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col P B3 C1)
+++++
intro; apply HC1NotB; ColR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
apply lea_comm.
exists C1.
split; CongA.
apply os_ts__inangle.
-
apply l9_2.
apply (l9_8_2 _ _ Q); Side.
apply invert_two_sides; apply in_angle_two_sides; Col.
intro; apply HC1NotB; ColR.

*****

*****

+++++
-
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
apply lea_comm.
exists C1.
split; CongA.
apply os_ts__inangle.
-
apply l9_2.
apply (l9_8_2 _ _ Q); Side.
apply invert_two_sides; apply in_angle_two_sides; Col.
intro; apply HC1NotB; ColR.
-

*****
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS P B3 R C1
+++++
apply (one_side_transitivity _ _ _ Q); apply (col2_os__os B1 B2); Col.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
apply lea_comm.
exists C1.
split; CongA.
apply os_ts__inangle.
-
apply l9_2.
apply (l9_8_2 _ _ Q); Side.
apply invert_two_sides; apply in_angle_two_sides; Col.
intro; apply HC1NotB; ColR.
-
apply (one_side_transitivity _ _ _ Q); apply (col2_os__os B1 B2); Col.

*****
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B1 B2 R Q
+++++
apply l12_6.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
apply lea_comm.
exists C1.
split; CongA.
apply os_ts__inangle.
-
apply l9_2.
apply (l9_8_2 _ _ Q); Side.
apply invert_two_sides; apply in_angle_two_sides; Col.
intro; apply HC1NotB; ColR.
-
apply (one_side_transitivity _ _ _ Q); apply (col2_os__os B1 B2); Col.
apply l12_6.

*****
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict B1 B2 R Q
+++++
apply (par_strict_col2_par_strict _ _ A1 A2); Col; Par.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
apply lea_comm.
exists C1.
split; CongA.
apply os_ts__inangle.
-
apply l9_2.
apply (l9_8_2 _ _ Q); Side.
apply invert_two_sides; apply in_angle_two_sides; Col.
intro; apply HC1NotB; ColR.
-
apply (one_side_transitivity _ _ _ Q); apply (col2_os__os B1 B2); Col.
apply l12_6.
apply (par_strict_col2_par_strict _ _ A1 A2); Col; Par.

*****
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A1 A2 R
+++++
ColR.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).

*****
H36 : LeA C1 P B3 R P B3
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(Habs : LtA A B C B4 P B3).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
assert(Habs : LtA A B C B4 P B3).

*****
H36 : LeA C1 P B3 R P B3
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA A B C B4 P B3
+++++
apply (lea456789_lta__lta _ _ _ D E F).
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
assert(Habs : LtA A B C B4 P B3).
apply (lea456789_lta__lta _ _ _ D E F).

*****
H36 : LeA C1 P B3 R P B3
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA A B C D E F
+++++
2: apply (sams_lea2_suma2__lea B4 P R C1 P B3 _ _ _ B4 P R R P B3); Lea.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
assert(Habs : LtA A B C B4 P B3).
apply (lea456789_lta__lta _ _ _ D E F).
2: apply (sams_lea2_suma2__lea B4 P R C1 P B3 _ _ _ B4 P R R P B3); Lea.

*****
H36 : LeA C1 P B3 R P B3
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA A B C D E F
+++++
apply (sams_lea_lta456_suma2__lta B4 P R P R Q _ _ _ B4 P R C1 P B3); Lea.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
assert(Habs : LtA A B C B4 P B3).
apply (lea456789_lta__lta _ _ _ D E F).
2: apply (sams_lea2_suma2__lea B4 P R C1 P B3 _ _ _ B4 P R R P B3); Lea.
apply (sams_lea_lta456_suma2__lta B4 P R P R Q _ _ _ B4 P R C1 P B3); Lea.

*****
H36 : LeA C1 P B3 R P B3
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA P R Q C1 P B3
+++++
apply lta_right_comm; auto.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
assert(Habs : LtA A B C B4 P B3).
apply (lea456789_lta__lta _ _ _ D E F).
2: apply (sams_lea2_suma2__lea B4 P R C1 P B3 _ _ _ B4 P R R P B3); Lea.
apply (sams_lea_lta456_suma2__lta B4 P R P R Q _ _ _ B4 P R C1 P B3); Lea.
apply lta_right_comm; auto.

*****
H36 : LeA C1 P B3 R P B3
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SAMS B4 P R C1 P B3
+++++
apply (sams_lea2__sams _ _ _ _ _ _ B4 P R R P B3); Lea.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
assert(Habs : LtA A B C B4 P B3).

*****
Habs : LtA A B C B4 P B3
H36 : LeA C1 P B3 R P B3
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct Habs as [_ Habs].
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
assert(Habs : LtA A B C B4 P B3).
destruct Habs as [_ Habs].

*****
Habs : not (CongA A B C B4 P B3)
H36 : LeA C1 P B3 R P B3
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply Habs.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
assert(Habs : LtA A B C B4 P B3).
destruct Habs as [_ Habs].
apply Habs.

*****
Habs : not (CongA A B C B4 P B3)
H36 : LeA C1 P B3 R P B3
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : SumA B4 P R P R Q A B C
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C B4 P B3
+++++
apply suma_distincts in Hsuma1.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
assert(Habs : LtA A B C B4 P B3).
destruct Habs as [_ Habs].
apply Habs.
apply suma_distincts in Hsuma1.

*****
Habs : not (CongA A B C B4 P B3)
H36 : LeA C1 P B3 R P B3
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
Hsuma1 : and (not (eq B4 P))\n (and (not (eq P R))\n (and (not (eq P R))\n (and (not (eq R Q)) (and (not (eq A B)) (not (eq B C))))))
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C B4 P B3
+++++
spliter.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
assert(Habs : LtA A B C B4 P B3).
destruct Habs as [_ Habs].
apply Habs.
apply suma_distincts in Hsuma1.
spliter.

*****
Habs : not (CongA A B C B4 P B3)
H36 : LeA C1 P B3 R P B3
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
H42 : not (eq B C)
H41 : not (eq A B)
H40 : not (eq R Q)
H38,H39 : not (eq P R)
H37 : not (eq B4 P)
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A B C B4 P B3
+++++
apply conga_line; Between.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
assert(Habs : LtA A B C B4 P B3).
destruct Habs as [_ Habs].
apply Habs.
apply suma_distincts in Hsuma1.
spliter.
apply conga_line; Between.

*****
Habs : not (CongA A B C B4 P B3)
H36 : LeA C1 P B3 R P B3
Hsams3 : SAMS B4 P R R P B3
Hsuma3 : SumA B4 P R R P B3 B4 P B3
H35 : not (OS P R B4 B3)
H34 : not (Col R P B4)
Hsuma2 : SumA B4 P R C1 P B3 D E F
D,E,F : Tpoint
Htri : TriSumA R Q P A B C
H42 : not (eq B C)
H41 : not (eq A B)
H40 : not (eq R Q)
H38,H39 : not (eq P R)
H37 : not (eq B4 P)
A,B,C : Tpoint
H32 : OS P C1 R Q
H33 : not (eq R Q)
H31 : OS P Q R A3
H30 : not (eq P R)
H29 : Out Q R A3
H28 : LtA P R Q B3 P C1
R : Tpoint
H27 : Acute B3 P C1
H17 : LtA B3 P C1 B3 P Q
HInAngle : InAngle C1 Q P B3
H23 : not (eq P B4)
H18 : not (eq B3 B4)
H25 : not (eq Q C1)
H26 : not (eq B1 Q)
H21 : not (eq B2 Q)
H24 : not (eq P B3)
H20 : not (eq Q B3)
H22 : not (eq P A3)
H19 : not (eq Q A3)
H16 : not (Col P Q A3)
H15 : OS P Q C1 A3
H14 : Col A1 A2 A3
A3 : Tpoint
H13 : not (Col P Q B3)
H12 : Midpoint P B3 B4
B4 : Tpoint
H11 : OS P Q C1 B3
H10 : Col B1 B2 B3
B3 : Tpoint
H8 : not (Col B1 B2 Q)
H2 : not (Col Q C1 P)
Hos : OS B1 B2 Q C1
H1 : not (eq C1 C2)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : not (eq P Q)
HQA : Col Q A1 A2
H : not (eq P C1)
HC1NotB : not (Col C1 B1 B2)
HStrict : not (Col P A1 A2)
HParAB : Par_strict A1 A2 B1 B2
HNts : not (TS B1 B2 A1 C1)
HPC : Col P C1 C2
HParAC : Par_strict A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerpBP : Perp B1 B2 P Q
HPerpAP : Perp A1 A2 P Q
A1,A2,B1,B2,C1,C2,P,Q : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
apply (triangle R Q P); auto.
-----
Lemma legendre_aux1 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> ~ TS B1 B2 A1 C1 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC HNts.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
apply (par_not_col_strict _ _ _ _ P) in HParAB; Col.
apply (par_not_col_strict _ _ _ _ P) in HParAC; Col.
elim(col_dec C1 B1 B2); auto.
intro HC1NotB.
exfalso.
assert(P<>C1) by (intro; subst C1; Col).
destruct HPerp2 as [P1 [P2 [HP [HPerpAP HPerpBP]]]].
assert(HQ := HPerpAP); auto.
destruct HQ as [Q [_ [_ [HQP[HQA _]]]]].
assert(HP' := HPerpBP); auto.
destruct HP' as [P' HPerpP].
assert(P'=P) by (apply (l8_14_2_1b _ P1 P2 B1 B2); Col).
subst P'.
destruct HPerpP as [_ [_ [HPP _]]].
assert(P<>Q) by (intro; subst Q; auto).
apply (perp_col0 _ _ _ _ P Q) in HPerpAP; Col.
apply (perp_col0 _ _ _ _ P Q) in HPerpBP; Col.
clear dependent P1.
clear dependent P2.
assert_diffs.
assert(Hos : OS B1 B2 Q C1).
assert(~ Col Q C1 P) by (apply (par_not_col A1 A2); auto; apply (par_strict_col_par_strict _ _ _ C2); Col).
assert(~ Col B1 B2 Q) by (apply (one_side_not_col123 _ _ _ C1); auto).
assert(HB3 : exists B3, Col B1 B2 B3 /\\ OS P Q C1 B3).
destruct HB3 as [B3 []].
assert(HB4 := symmetric_point_construction B3 P).
destruct HB4 as [B4].
assert(~ Col P Q B3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert(HA3 : exists A3, Col A1 A2 A3 /\\ OS P Q C1 A3).
destruct HA3 as [A3 []].
assert(~ Col P Q A3) by (apply (one_side_not_col123 _ _ _ C1); Side).
assert_diffs.
assert(HInAngle : InAngle C1 Q P B3).
apply os2__inangle; Side; apply (col2_os__os B1 B2); Col.
assert(LtA B3 P C1 B3 P Q).
assert(Acute B3 P C1).
assert(HR:= greenberg P Q A3 B3 P C1).
destruct HR as [R []]; auto.
intro; assert_cols; apply HC1NotB; ColR.
apply perp_per_1; auto; apply (perp_col2_bis _ _ _ _ A1 A2); Perp; ColR.
assert(P<>R) by (intro; subst R; assert_cols; Col).
assert(OS P Q R A3) by (apply invert_one_side; apply out_one_side; Col).
assert_diffs.
assert(OS P C1 R Q).
apply l12_6; apply (par_strict_col4__par_strict C1 C2 A1 A2); Col; Par; ColR.
assert(Hsuma1 := ex_suma B4 P R P R Q).
destruct Hsuma1 as [A [B [C Hsuma1]]]; auto.
assert(Htri : TriSumA R Q P A B C).
assert(Hsuma2 := ex_suma B4 P R C1 P B3).
destruct Hsuma2 as [D [E [F Hsuma2]]]; auto.
assert(~ Col R P B4).
assert(~ OS P R B4 B3).
assert(Hsuma3 : SumA B4 P R R P B3 B4 P B3) by (exists B3; repeat (split; CongA); Cop).
assert(Hsams3 : SAMS B4 P R R P B3).
assert(LeA C1 P B3 R P B3).
assert(Habs : LtA A B C B4 P B3).
destruct Habs as [_ Habs].
apply Habs.
apply suma_distincts in Hsuma1.
spliter.
apply conga_line; Between.
apply (triangle R Q P); auto.

*****

*****

+++++
Qed.
-----
Lemma legendre_aux2 :\n  greenberg_s_axiom ->\n  triangle_postulate ->\n  forall A1 A2 B1 B2 C1 C2 P,\n    Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 ->\n    Par A1 A2 C1 C2 -> Col P C1 C2 ->\n    Col C1 B1 B2.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : greenberg_s_axiom) (_ : triangle_postulate) (A1 A2 B1 B2 C1 C2 P : Tpoint) (_ : Perp2 A1 A2 B1 B2 P) (_ : not (Col A1 A2 P)) (_ : Col P B1 B2) (_ : Coplanar A1 A2 B1 B2) (_ : Par A1 A2 C1 C2) (_ : Col P C1 C2), Col C1 B1 B2
+++++
Proof.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : greenberg_s_axiom) (_ : triangle_postulate) (A1 A2 B1 B2 C1 C2 P : Tpoint) (_ : Perp2 A1 A2 B1 B2 P) (_ : not (Col A1 A2 P)) (_ : Col P B1 B2) (_ : Coplanar A1 A2 B1 B2) (_ : Par A1 A2 C1 C2) (_ : Col P C1 C2), Col C1 B1 B2
+++++
intros greenberg triangle.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.

*****
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A1 A2 B1 B2 C1 C2 P : Tpoint) (_ : Perp2 A1 A2 B1 B2 P) (_ : not (Col A1 A2 P)) (_ : Col P B1 B2) (_ : Coplanar A1 A2 B1 B2) (_ : Par A1 A2 C1 C2) (_ : Col P C1 C2), Col C1 B1 B2
+++++
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.

*****
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
assert(HParAB : Par A1 A2 B1 B2).
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).

*****
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 B1 B2
+++++
assert (Par_strict A1 A2 B1 B2); [|Par].
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].

*****
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict A1 A2 B1 B2
+++++
apply (par_not_col_strict _ _ _ _ P); Col.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.

*****
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 B1 B2
+++++
apply par_symmetry.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.

*****
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].

*****
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).

*****
HI2 : Perp X Y B1 B2
HI1 : Perp X Y A1 A2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].

*****
H2 : Perp_at I2 X Y B1 B2
I2 : Tpoint
H1 : Perp_at I1 X Y A1 A2
I1 : Tpoint
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
apply perp_in_col in H1; apply perp_in_col in H2.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
apply perp_in_col in H1; apply perp_in_col in H2.

*****
H2 : and (Col X Y I2) (Col B1 B2 I2)
I2 : Tpoint
H1 : and (Col X Y I1) (Col A1 A2 I1)
I1 : Tpoint
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
destruct H1 as [HCol2 HCol3]; destruct H2 as [HCol4 HCol5].
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
apply perp_in_col in H1; apply perp_in_col in H2.
destruct H1 as [HCol2 HCol3]; destruct H2 as [HCol4 HCol5].

*****
HCol5 : Col B1 B2 I2
HCol4 : Col X Y I2
I2 : Tpoint
HCol3 : Col A1 A2 I1
HCol2 : Col X Y I1
I1 : Tpoint
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
assert (P = I2); [|treat_equalities; rename I1 into R].
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
apply perp_in_col in H1; apply perp_in_col in H2.
destruct H1 as [HCol2 HCol3]; destruct H2 as [HCol4 HCol5].
assert (P = I2); [|treat_equalities; rename I1 into R].

*****
HCol5 : Col B1 B2 I2
HCol4 : Col X Y I2
I2 : Tpoint
HCol3 : Col A1 A2 I1
HCol2 : Col X Y I1
I1 : Tpoint
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq P I2
+++++
elim (perp_not_col2 _ _ _ _ (perp_sym _ _ _ _ HPerp2)); intro; [apply l6_21 with B1 B2 X Y|apply l6_21 with B1 B2 Y X]; assert_diffs; Col.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
apply perp_in_col in H1; apply perp_in_col in H2.
destruct H1 as [HCol2 HCol3]; destruct H2 as [HCol4 HCol5].
assert (P = I2); [|treat_equalities; rename I1 into R].

*****
HCol3 : Col A1 A2 R
HCol2 : Col X Y R
R : Tpoint
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
elim (eq_dec_points P R); intro HNE; treat_equalities; [exfalso; Col|].
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
assert (Par_strict A1 A2 B1 B2); [|Par].
apply (par_not_col_strict _ _ _ _ P); Col.
apply par_symmetry.
destruct HPerp2 as [X [Y [HCol1 [HPerp1 HPerp2]]]].
assert (HI1 := HPerp1); assert (HI2 := HPerp2).
destruct HI1 as [I1 H1]; destruct HI2 as [I2 H2].
apply perp_in_col in H1; apply perp_in_col in H2.
destruct H1 as [HCol2 HCol3]; destruct H2 as [HCol4 HCol5].
assert (P = I2); [|treat_equalities; rename I1 into R].
elim (eq_dec_points P R); intro HNE; treat_equalities; [exfalso; Col|].

*****
HNE : not (eq P R)
HCol3 : Col A1 A2 R
HCol2 : Col X Y R
R : Tpoint
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp X Y B1 B2
HPerp1 : Perp X Y A1 A2
HCol1 : Col P X Y
A1,A2,B1,B2,C1,C2,P,X,Y : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B1 B2 A1 A2
+++++
apply (l12_9 _ _ _ _ X Y); Perp; apply coplanar_perm_16; apply col2_cop__cop with P R; try solve [assert_diffs; ColR]; apply coplanar_perm_2; [apply col_cop__cop with A2|apply col_cop__cop with A1| apply col_cop__cop with A2|apply col_cop__cop with A1]; Col; try solve [assert_diffs; auto]; apply coplanar_perm_16; [apply col_cop__cop with B2|apply col_cop__cop with B2| apply col_cop__cop with B1|apply col_cop__cop with B1]; assert_diffs; Col; Cop.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).

*****
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
elim(col_dec P A1 A2).
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).

*****
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col P A1 A2, Col C1 B1 B2
+++++
intro HConf.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HConf.

*****
HConf : Col P A1 A2
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
assert_diffs.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HConf.
assert_diffs.

*****
H0 : not (eq C1 C2)
H : not (eq B1 B2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HConf : Col P A1 A2
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply (not_strict_par _ _ _ _ P) in HParAB; Col.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HConf.
assert_diffs.
apply (not_strict_par _ _ _ _ P) in HParAB; Col.

*****
H0 : not (eq C1 C2)
H : not (eq B1 B2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HConf : Col P A1 A2
HParAB : and (Col A1 A2 B1) (Col A1 A2 B2)
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply (not_strict_par _ _ _ _ P) in HParAC; Col.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HConf.
assert_diffs.
apply (not_strict_par _ _ _ _ P) in HParAB; Col.
apply (not_strict_par _ _ _ _ P) in HParAC; Col.

*****
H0 : not (eq C1 C2)
H : not (eq B1 B2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HConf : Col P A1 A2
HParAB : and (Col A1 A2 B1) (Col A1 A2 B2)
HPC : Col P C1 C2
HParAC : and (Col A1 A2 C1) (Col A1 A2 C2)
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
spliter.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HConf.
assert_diffs.
apply (not_strict_par _ _ _ _ P) in HParAB; Col.
apply (not_strict_par _ _ _ _ P) in HParAC; Col.
spliter.

*****
H0 : not (eq C1 C2)
H : not (eq B1 B2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HConf : Col P A1 A2
H5 : Col A1 A2 B2
H3 : Col A1 A2 B1
HPC : Col P C1 C2
H7 : Col A1 A2 C2
H6 : Col A1 A2 C1
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply(col3 A1 A2); auto.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).

*****
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col P A1 A2), Col C1 B1 B2
+++++
intro HStrict.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.

*****
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
elim(two_sides_dec B1 B2 A1 C1).
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).

*****
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : TS B1 B2 A1 C1, Col C1 B1 B2
+++++
intro Hts.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.

*****
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
exfalso.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.

*****
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).

*****
HC1NotB : not (Col C1 B1 B2)
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(C1<>P) by (intro; subst C1; Col).
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
assert(C1<>P) by (intro; subst C1; Col).

*****
H : not (eq C1 P)
HC1NotB : not (Col C1 B1 B2)
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(HC3 := (symmetric_point_construction C1 P)).
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
assert(C1<>P) by (intro; subst C1; Col).
assert(HC3 := (symmetric_point_construction C1 P)).

*****
HC3 : ex (fun P' : Tpoint => Midpoint P C1 P')
H : not (eq C1 P)
HC1NotB : not (Col C1 B1 B2)
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct HC3 as [C3].
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
assert(C1<>P) by (intro; subst C1; Col).
assert(HC3 := (symmetric_point_construction C1 P)).
destruct HC3 as [C3].

*****
H0 : Midpoint P C1 C3
C3 : Tpoint
H : not (eq C1 P)
HC1NotB : not (Col C1 B1 B2)
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert_diffs.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
assert(C1<>P) by (intro; subst C1; Col).
assert(HC3 := (symmetric_point_construction C1 P)).
destruct HC3 as [C3].
assert_diffs.

*****
H1 : not (eq C1 C2)
H16 : not (eq A1 C1)
H13 : not (eq B2 A1)
H12 : not (eq B1 A1)
H8 : not (eq P C3)
H2 : not (eq C1 C3)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : Midpoint P C1 C3
C3 : Tpoint
H : not (eq C1 P)
HC1NotB : not (Col C1 B1 B2)
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert(HC3NotB : ~ Col C3 B1 B2) by (intro; apply HC1NotB; ColR).
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
assert(C1<>P) by (intro; subst C1; Col).
assert(HC3 := (symmetric_point_construction C1 P)).
destruct HC3 as [C3].
assert_diffs.
assert(HC3NotB : ~ Col C3 B1 B2) by (intro; apply HC1NotB; ColR).

*****
HC3NotB : not (Col C3 B1 B2)
H1 : not (eq C1 C2)
H16 : not (eq A1 C1)
H13 : not (eq B2 A1)
H12 : not (eq B1 A1)
H8 : not (eq P C3)
H2 : not (eq C1 C3)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : Midpoint P C1 C3
C3 : Tpoint
H : not (eq C1 P)
HC1NotB : not (Col C1 B1 B2)
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HC3NotB.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
assert(C1<>P) by (intro; subst C1; Col).
assert(HC3 := (symmetric_point_construction C1 P)).
destruct HC3 as [C3].
assert_diffs.
assert(HC3NotB : ~ Col C3 B1 B2) by (intro; apply HC1NotB; ColR).
apply HC3NotB.

*****
HC3NotB : not (Col C3 B1 B2)
H1 : not (eq C1 C2)
H16 : not (eq A1 C1)
H13 : not (eq B2 A1)
H12 : not (eq B1 A1)
H8 : not (eq P C3)
H2 : not (eq C1 C3)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : Midpoint P C1 C3
C3 : Tpoint
H : not (eq C1 P)
HC1NotB : not (Col C1 B1 B2)
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C3 B1 B2
+++++
apply (legendre_aux1 greenberg triangle A1 A2 _ _ _ C1 P); Col.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
assert(C1<>P) by (intro; subst C1; Col).
assert(HC3 := (symmetric_point_construction C1 P)).
destruct HC3 as [C3].
assert_diffs.
assert(HC3NotB : ~ Col C3 B1 B2) by (intro; apply HC1NotB; ColR).
apply HC3NotB.
apply (legendre_aux1 greenberg triangle A1 A2 _ _ _ C1 P); Col.

*****
HC3NotB : not (Col C3 B1 B2)
H1 : not (eq C1 C2)
H16 : not (eq A1 C1)
H13 : not (eq B2 A1)
H12 : not (eq B1 A1)
H8 : not (eq P C3)
H2 : not (eq C1 C3)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : Midpoint P C1 C3
C3 : Tpoint
H : not (eq C1 P)
HC1NotB : not (Col C1 B1 B2)
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C3 C1
+++++
-
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
assert(C1<>P) by (intro; subst C1; Col).
assert(HC3 := (symmetric_point_construction C1 P)).
destruct HC3 as [C3].
assert_diffs.
assert(HC3NotB : ~ Col C3 B1 B2) by (intro; apply HC1NotB; ColR).
apply HC3NotB.
apply (legendre_aux1 greenberg triangle A1 A2 _ _ _ C1 P); Col.
-

*****
HC3NotB : not (Col C3 B1 B2)
H1 : not (eq C1 C2)
H16 : not (eq A1 C1)
H13 : not (eq B2 A1)
H12 : not (eq B1 A1)
H8 : not (eq P C3)
H2 : not (eq C1 C3)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : Midpoint P C1 C3
C3 : Tpoint
H : not (eq C1 P)
HC1NotB : not (Col C1 B1 B2)
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C3 C1
+++++
apply par_right_comm.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
assert(C1<>P) by (intro; subst C1; Col).
assert(HC3 := (symmetric_point_construction C1 P)).
destruct HC3 as [C3].
assert_diffs.
assert(HC3NotB : ~ Col C3 B1 B2) by (intro; apply HC1NotB; ColR).
apply HC3NotB.
apply (legendre_aux1 greenberg triangle A1 A2 _ _ _ C1 P); Col.
-
apply par_right_comm.

*****
HC3NotB : not (Col C3 B1 B2)
H1 : not (eq C1 C2)
H16 : not (eq A1 C1)
H13 : not (eq B2 A1)
H12 : not (eq B1 A1)
H8 : not (eq P C3)
H2 : not (eq C1 C3)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : Midpoint P C1 C3
C3 : Tpoint
H : not (eq C1 P)
HC1NotB : not (Col C1 B1 B2)
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C3
+++++
apply (par_col_par _ _ _ P); Col.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
assert(C1<>P) by (intro; subst C1; Col).
assert(HC3 := (symmetric_point_construction C1 P)).
destruct HC3 as [C3].
assert_diffs.
assert(HC3NotB : ~ Col C3 B1 B2) by (intro; apply HC1NotB; ColR).
apply HC3NotB.
apply (legendre_aux1 greenberg triangle A1 A2 _ _ _ C1 P); Col.
-
apply par_right_comm.
apply (par_col_par _ _ _ P); Col.

*****
HC3NotB : not (Col C3 B1 B2)
H1 : not (eq C1 C2)
H16 : not (eq A1 C1)
H13 : not (eq B2 A1)
H12 : not (eq B1 A1)
H8 : not (eq P C3)
H2 : not (eq C1 C3)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : Midpoint P C1 C3
C3 : Tpoint
H : not (eq C1 P)
HC1NotB : not (Col C1 B1 B2)
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 P
+++++
apply (par_col_par _ _ _ C2); Col.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
assert(C1<>P) by (intro; subst C1; Col).
assert(HC3 := (symmetric_point_construction C1 P)).
destruct HC3 as [C3].
assert_diffs.
assert(HC3NotB : ~ Col C3 B1 B2) by (intro; apply HC1NotB; ColR).
apply HC3NotB.
apply (legendre_aux1 greenberg triangle A1 A2 _ _ _ C1 P); Col.
-
apply par_right_comm.
apply (par_col_par _ _ _ P); Col.
apply (par_col_par _ _ _ C2); Col.

*****

*****

+++++
-
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
assert(C1<>P) by (intro; subst C1; Col).
assert(HC3 := (symmetric_point_construction C1 P)).
destruct HC3 as [C3].
assert_diffs.
assert(HC3NotB : ~ Col C3 B1 B2) by (intro; apply HC1NotB; ColR).
apply HC3NotB.
apply (legendre_aux1 greenberg triangle A1 A2 _ _ _ C1 P); Col.
-
apply par_right_comm.
apply (par_col_par _ _ _ P); Col.
apply (par_col_par _ _ _ C2); Col.
-

*****
HC3NotB : not (Col C3 B1 B2)
H1 : not (eq C1 C2)
H16 : not (eq A1 C1)
H13 : not (eq B2 A1)
H12 : not (eq B1 A1)
H8 : not (eq P C3)
H2 : not (eq C1 C3)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : Midpoint P C1 C3
C3 : Tpoint
H : not (eq C1 P)
HC1NotB : not (Col C1 B1 B2)
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (TS B1 B2 A1 C3)
+++++
apply l9_9_bis.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
assert(C1<>P) by (intro; subst C1; Col).
assert(HC3 := (symmetric_point_construction C1 P)).
destruct HC3 as [C3].
assert_diffs.
assert(HC3NotB : ~ Col C3 B1 B2) by (intro; apply HC1NotB; ColR).
apply HC3NotB.
apply (legendre_aux1 greenberg triangle A1 A2 _ _ _ C1 P); Col.
-
apply par_right_comm.
apply (par_col_par _ _ _ P); Col.
apply (par_col_par _ _ _ C2); Col.
-
apply l9_9_bis.

*****
HC3NotB : not (Col C3 B1 B2)
H1 : not (eq C1 C2)
H16 : not (eq A1 C1)
H13 : not (eq B2 A1)
H12 : not (eq B1 A1)
H8 : not (eq P C3)
H2 : not (eq C1 C3)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : Midpoint P C1 C3
C3 : Tpoint
H : not (eq C1 P)
HC1NotB : not (Col C1 B1 B2)
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B1 B2 A1 C3
+++++
exists C1.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
assert(C1<>P) by (intro; subst C1; Col).
assert(HC3 := (symmetric_point_construction C1 P)).
destruct HC3 as [C3].
assert_diffs.
assert(HC3NotB : ~ Col C3 B1 B2) by (intro; apply HC1NotB; ColR).
apply HC3NotB.
apply (legendre_aux1 greenberg triangle A1 A2 _ _ _ C1 P); Col.
-
apply par_right_comm.
apply (par_col_par _ _ _ P); Col.
apply (par_col_par _ _ _ C2); Col.
-
apply l9_9_bis.
exists C1.

*****
HC3NotB : not (Col C3 B1 B2)
H1 : not (eq C1 C2)
H16 : not (eq A1 C1)
H13 : not (eq B2 A1)
H12 : not (eq B1 A1)
H8 : not (eq P C3)
H2 : not (eq C1 C3)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : Midpoint P C1 C3
C3 : Tpoint
H : not (eq C1 P)
HC1NotB : not (Col C1 B1 B2)
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (TS B1 B2 A1 C1) (TS B1 B2 C3 C1)
+++++
repeat (split; auto).
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
assert(C1<>P) by (intro; subst C1; Col).
assert(HC3 := (symmetric_point_construction C1 P)).
destruct HC3 as [C3].
assert_diffs.
assert(HC3NotB : ~ Col C3 B1 B2) by (intro; apply HC1NotB; ColR).
apply HC3NotB.
apply (legendre_aux1 greenberg triangle A1 A2 _ _ _ C1 P); Col.
-
apply par_right_comm.
apply (par_col_par _ _ _ P); Col.
apply (par_col_par _ _ _ C2); Col.
-
apply l9_9_bis.
exists C1.
repeat (split; auto).

*****
HC3NotB : not (Col C3 B1 B2)
H1 : not (eq C1 C2)
H16 : not (eq A1 C1)
H13 : not (eq B2 A1)
H12 : not (eq B1 A1)
H8 : not (eq P C3)
H2 : not (eq C1 C3)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : Midpoint P C1 C3
C3 : Tpoint
H : not (eq C1 P)
HC1NotB : not (Col C1 B1 B2)
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun T : Tpoint => and (Col T B1 B2) (Bet C3 T C1))
+++++
exists P.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro Hts.
exfalso.
assert(HC1NotB : ~ Col C1 B1 B2) by (destruct Hts as [_ []]; auto).
assert(C1<>P) by (intro; subst C1; Col).
assert(HC3 := (symmetric_point_construction C1 P)).
destruct HC3 as [C3].
assert_diffs.
assert(HC3NotB : ~ Col C3 B1 B2) by (intro; apply HC1NotB; ColR).
apply HC3NotB.
apply (legendre_aux1 greenberg triangle A1 A2 _ _ _ C1 P); Col.
-
apply par_right_comm.
apply (par_col_par _ _ _ P); Col.
apply (par_col_par _ _ _ C2); Col.
-
apply l9_9_bis.
exists C1.
repeat (split; auto).
exists P.

*****
HC3NotB : not (Col C3 B1 B2)
H1 : not (eq C1 C2)
H16 : not (eq A1 C1)
H13 : not (eq B2 A1)
H12 : not (eq B1 A1)
H8 : not (eq P C3)
H2 : not (eq C1 C3)
H9 : not (eq P A2)
H5 : not (eq A1 A2)
H7 : not (eq P A1)
H6 : not (eq C1 B2)
H3 : not (eq B1 B2)
H4 : not (eq C1 B1)
H0 : Midpoint P C1 C3
C3 : Tpoint
H : not (eq C1 P)
HC1NotB : not (Col C1 B1 B2)
Hts : TS B1 B2 A1 C1
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P B1 B2) (Bet C3 P C1)
+++++
split; Between.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).

*****
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (TS B1 B2 A1 C1), Col C1 B1 B2
+++++
intro.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro.

*****
H : not (TS B1 B2 A1 C1)
HStrict : not (Col P A1 A2)
HParAB : Par A1 A2 B1 B2
HPC : Col P C1 C2
HParAC : Par A1 A2 C1 C2
HCop : Coplanar A1 A2 B1 B2
HPB : Col P B1 B2
HNC : not (Col A1 A2 P)
HPerp2 : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply (legendre_aux1 greenberg triangle A1 A2 _ _ _ C2 P); auto.
-----
Lemma legendre_aux2 : greenberg_s_axiom -> triangle_postulate -> forall A1 A2 B1 B2 C1 C2 P, Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 -> Par A1 A2 C1 C2 -> Col P C1 C2 -> Col C1 B1 B2.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P HPerp2 HNC HPB HCop HParAC HPC.
assert(HParAB : Par A1 A2 B1 B2).
elim(col_dec P A1 A2).
intro HStrict.
elim(two_sides_dec B1 B2 A1 C1).
intro.
apply (legendre_aux1 greenberg triangle A1 A2 _ _ _ C2 P); auto.

*****

*****

+++++
Qed.
-----
Lemma triangle__playfair_bis :\n  greenberg_s_axiom ->\n  triangle_postulate ->\n  alternative_playfair_s_postulate.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : greenberg_s_axiom) (_ : triangle_postulate), alternative_playfair_s_postulate
+++++
Proof.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : greenberg_s_axiom) (_ : triangle_postulate), alternative_playfair_s_postulate
+++++
intros greenberg triangle.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.

*****
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
alternative_playfair_s_postulate
+++++
intros A1 A2 B1 B2 C1 C2 P.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.

*****
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (_ : Perp2 A1 A2 B1 B2 P) (_ : not (Col A1 A2 P)) (_ : Col P B1 B2) (_ : Coplanar A1 A2 B1 B2) (_ : Par A1 A2 C1 C2) (_ : Col P C1 C2), and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
split.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.
split.

*****
H4 : Col P C1 C2
H3 : Par A1 A2 C1 C2
H2 : Coplanar A1 A2 B1 B2
H1 : Col P B1 B2
H0 : not (Col A1 A2 P)
H : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
apply (legendre_aux2 greenberg triangle A1 A2 _ _ _ C2 P).
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.
split.
apply (legendre_aux2 greenberg triangle A1 A2 _ _ _ C2 P).

*****
H4 : Col P C1 C2
H3 : Par A1 A2 C1 C2
H2 : Coplanar A1 A2 B1 B2
H1 : Col P B1 B2
H0 : not (Col A1 A2 P)
H : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp2 A1 A2 B1 B2 P
+++++
auto.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.
split.
apply (legendre_aux2 greenberg triangle A1 A2 _ _ _ C2 P).

*****
H4 : Col P C1 C2
H3 : Par A1 A2 C1 C2
H2 : Coplanar A1 A2 B1 B2
H1 : Col P B1 B2
H0 : not (Col A1 A2 P)
H : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A1 A2 P)
+++++
auto.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.
split.
apply (legendre_aux2 greenberg triangle A1 A2 _ _ _ C2 P).

*****
H4 : Col P C1 C2
H3 : Par A1 A2 C1 C2
H2 : Coplanar A1 A2 B1 B2
H1 : Col P B1 B2
H0 : not (Col A1 A2 P)
H : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P B1 B2
+++++
auto.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.
split.
apply (legendre_aux2 greenberg triangle A1 A2 _ _ _ C2 P).

*****
H4 : Col P C1 C2
H3 : Par A1 A2 C1 C2
H2 : Coplanar A1 A2 B1 B2
H1 : Col P B1 B2
H0 : not (Col A1 A2 P)
H : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 B1 B2
+++++
auto.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.
split.
apply (legendre_aux2 greenberg triangle A1 A2 _ _ _ C2 P).

*****
H4 : Col P C1 C2
H3 : Par A1 A2 C1 C2
H2 : Coplanar A1 A2 B1 B2
H1 : Col P B1 B2
H0 : not (Col A1 A2 P)
H : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C2
+++++
auto.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.
split.
apply (legendre_aux2 greenberg triangle A1 A2 _ _ _ C2 P).

*****
H4 : Col P C1 C2
H3 : Par A1 A2 C1 C2
H2 : Coplanar A1 A2 B1 B2
H1 : Col P B1 B2
H0 : not (Col A1 A2 P)
H : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C1 C2
+++++
auto.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.
split.

*****
H4 : Col P C1 C2
H3 : Par A1 A2 C1 C2
H2 : Coplanar A1 A2 B1 B2
H1 : Col P B1 B2
H0 : not (Col A1 A2 P)
H : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C2 B1 B2
+++++
apply (legendre_aux2 greenberg triangle A1 A2 _ _ _ C1 P).
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.
split.
apply (legendre_aux2 greenberg triangle A1 A2 _ _ _ C1 P).

*****
H4 : Col P C1 C2
H3 : Par A1 A2 C1 C2
H2 : Coplanar A1 A2 B1 B2
H1 : Col P B1 B2
H0 : not (Col A1 A2 P)
H : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp2 A1 A2 B1 B2 P
+++++
Par.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.
split.
apply (legendre_aux2 greenberg triangle A1 A2 _ _ _ C1 P).

*****
H4 : Col P C1 C2
H3 : Par A1 A2 C1 C2
H2 : Coplanar A1 A2 B1 B2
H1 : Col P B1 B2
H0 : not (Col A1 A2 P)
H : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col A1 A2 P)
+++++
Par.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.
split.
apply (legendre_aux2 greenberg triangle A1 A2 _ _ _ C1 P).

*****
H4 : Col P C1 C2
H3 : Par A1 A2 C1 C2
H2 : Coplanar A1 A2 B1 B2
H1 : Col P B1 B2
H0 : not (Col A1 A2 P)
H : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P B1 B2
+++++
Par.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.
split.
apply (legendre_aux2 greenberg triangle A1 A2 _ _ _ C1 P).

*****
H4 : Col P C1 C2
H3 : Par A1 A2 C1 C2
H2 : Coplanar A1 A2 B1 B2
H1 : Col P B1 B2
H0 : not (Col A1 A2 P)
H : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 B1 B2
+++++
Par.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.
split.
apply (legendre_aux2 greenberg triangle A1 A2 _ _ _ C1 P).

*****
H4 : Col P C1 C2
H3 : Par A1 A2 C1 C2
H2 : Coplanar A1 A2 B1 B2
H1 : Col P B1 B2
H0 : not (Col A1 A2 P)
H : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C2 C1
+++++
Par.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.
split.
apply (legendre_aux2 greenberg triangle A1 A2 _ _ _ C1 P).

*****
H4 : Col P C1 C2
H3 : Par A1 A2 C1 C2
H2 : Coplanar A1 A2 B1 B2
H1 : Col P B1 B2
H0 : not (Col A1 A2 P)
H : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C2 C1
+++++
Par.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.
split.
apply (legendre_aux2 greenberg triangle A1 A2 _ _ _ C1 P).
Par.

*****
H4 : Col P C1 C2
H3 : Par A1 A2 C1 C2
H2 : Coplanar A1 A2 B1 B2
H1 : Col P B1 B2
H0 : not (Col A1 A2 P)
H : Perp2 A1 A2 B1 B2 P
A1,A2,B1,B2,C1,C2,P : Tpoint
triangle : triangle_postulate
greenberg : greenberg_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C2 C1
+++++
Col.
-----
Lemma triangle__playfair_bis : greenberg_s_axiom -> triangle_postulate -> alternative_playfair_s_postulate.
Proof.
intros greenberg triangle.
intros A1 A2 B1 B2 C1 C2 P.
split.

*****

*****

+++++
Qed.
-----
End triangle_playfair_bis.
-----
