Require Export GeoCoq.Highschool.circumcenter.
-----
Section Concyclic.
-----
Context `{TE:Tarski_euclidean}.
-----
Definition Concyclic A B C D := Coplanar A B C D /\ exists O, Cong O A O B /\ Cong O A O C /\ Cong O A O D.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D ->\n  exists O, Cong O A O B /\ Cong O A O C /\ Cong O A O D /\ Coplanar A B C O.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O C) (and (Cong O A O D) (Coplanar A B C O))))
+++++
Proof.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O C) (and (Cong O A O D) (Coplanar A B C O))))
+++++
intros A B C D [HCop [O1]].
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].

*****
H : and (Cong O1 A O1 B) (and (Cong O1 A O1 C) (Cong O1 A O1 D))
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O C) (and (Cong O A O D) (Coplanar A B C O))))
+++++
spliter.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.

*****
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O C) (and (Cong O A O D) (Coplanar A B C O))))
+++++
destruct (col_dec A B C).
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).

*****
H2 : Col A B C
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O C) (and (Cong O A O D) (Coplanar A B C O))))
+++++
exists O1.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
exists O1.

*****
H2 : Col A B C
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong O1 A O1 B) (and (Cong O1 A O1 C) (and (Cong O1 A O1 D) (Coplanar A B C O1)))
+++++
repeat split.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
exists O1.
repeat split.

*****
H2 : Col A B C
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O1 A O1 B
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
exists O1.
repeat split.

*****
H2 : Col A B C
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O1 A O1 C
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
exists O1.
repeat split.

*****
H2 : Col A B C
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O1 A O1 D
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
exists O1.
repeat split.

*****
H2 : Col A B C
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).

*****
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O C) (and (Cong O A O D) (Coplanar A B C O))))
+++++
destruct (l11_62_existence A B C O1) as [O []].
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O C) (and (Cong O A O D) (Coplanar A B C O))))
+++++
exists O.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong O A O B) (and (Cong O A O C) (and (Cong O A O D) (Coplanar A B C O)))
+++++
repeat split.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O B
+++++
try apply cong2_per2__cong with O1 O1.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A O O1
+++++
Cong.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.
Cong.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B O O1
+++++
Cong.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.
Cong.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per B O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A O1 B O1
+++++
Cong.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O O1 O O1
+++++
Cong.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O C
+++++
try apply cong2_per2__cong with O1 O1.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A O O1
+++++
Cong.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.
Cong.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per C O O1
+++++
Cong.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.
Cong.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per C O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A O1 C O1
+++++
Cong.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O O1 O O1
+++++
Cong.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O A O D
+++++
try apply cong2_per2__cong with O1 O1.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A O O1
+++++
Cong.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.
Cong.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per A O O1
+++++
Cop.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Per D O O1
+++++
Cong.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A O1 D O1
+++++
Cong.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong O O1 O O1
+++++
Cong.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C O
+++++
try apply cong2_per2__cong with O1 O1.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).
destruct (l11_62_existence A B C O1) as [O []].
exists O.
repeat split.
try apply cong2_per2__cong with O1 O1.

*****
H4 : forall (E : Tpoint) (_ : Coplanar A B C E), Per E O O1
H3 : Coplanar A B C O
O : Tpoint
H2 : not (Col A B C)
H1 : Cong O1 A O1 D
H0 : Cong O1 A O1 C
H : Cong O1 A O1 B
O1 : Tpoint
HCop : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B C O
+++++
Cong.
-----
Lemma concyclic_aux : forall A B C D, Concyclic A B C D -> exists O, Cong O A O B /\\ Cong O A O C /\\ Cong O A O D /\\ Coplanar A B C O.
Proof.
intros A B C D [HCop [O1]].
spliter.
destruct (col_dec A B C).

*****

*****

+++++
Qed.
-----
Lemma concyclic_trans : forall A B C D E,\n ~ Col A B C ->\n Concyclic A B C D  -> Concyclic A B C E -> Concyclic A B D E.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D E : Tpoint) (_ : not (Col A B C)) (_ : Concyclic A B C D) (_ : Concyclic A B C E), Concyclic A B D E
+++++
Proof.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D E : Tpoint) (_ : not (Col A B C)) (_ : Concyclic A B C D) (_ : Concyclic A B C E), Concyclic A B D E
+++++
intros.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.

*****
H1 : Concyclic A B C E
H0 : Concyclic A B C D
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic A B D E
+++++
split.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.

*****
H1 : Concyclic A B C E
H0 : Concyclic A B C D
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B D E
+++++
unfold Concyclic in *.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
unfold Concyclic in *.

*****
H1 : and (Coplanar A B C E)\n (ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O E))))
H0 : and (Coplanar A B C D)\n (ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O D))))
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B D E
+++++
spliter.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
unfold Concyclic in *.
spliter.

*****
H2 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O E)))
H1 : Coplanar A B C E
H3 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O D)))
H0 : Coplanar A B C D
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B D E
+++++
apply coplanar_trans_1 with C.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
unfold Concyclic in *.
spliter.
apply coplanar_trans_1 with C.

*****
H2 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O E)))
H1 : Coplanar A B C E
H3 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O D)))
H0 : Coplanar A B C D
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col C A B)
+++++
Col.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
unfold Concyclic in *.
spliter.
apply coplanar_trans_1 with C.

*****
H2 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O E)))
H1 : Coplanar A B C E
H3 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O D)))
H0 : Coplanar A B C D
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B D
+++++
Col.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
unfold Concyclic in *.
spliter.
apply coplanar_trans_1 with C.
Col.

*****
H2 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O E)))
H1 : Coplanar A B C E
H3 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O D)))
H0 : Coplanar A B C D
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B D
+++++
Cop.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
unfold Concyclic in *.
spliter.
apply coplanar_trans_1 with C.

*****
H2 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O E)))
H1 : Coplanar A B C E
H3 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O D)))
H0 : Coplanar A B C D
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B E
+++++
Col.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
unfold Concyclic in *.
spliter.
apply coplanar_trans_1 with C.
Col.

*****
H2 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O E)))
H1 : Coplanar A B C E
H3 : ex\n (fun O : Tpoint =>\n and (Cong O A O B) (and (Cong O A O C) (Cong O A O D)))
H0 : Coplanar A B C D
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B E
+++++
Cop.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.

*****
H1 : Concyclic A B C E
H0 : Concyclic A B C D
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O D) (Cong O A O E)))
+++++
apply concyclic_aux in H0.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.

*****
H1 : Concyclic A B C E
H0 : ex\n (fun O : Tpoint =>\n and (Cong O A O B)\n (and (Cong O A O C) (and (Cong O A O D) (Coplanar A B C O))))
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O D) (Cong O A O E)))
+++++
apply concyclic_aux in H1.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.

*****
H1 : ex\n (fun O : Tpoint =>\n and (Cong O A O B)\n (and (Cong O A O C) (and (Cong O A O E) (Coplanar A B C O))))
H0 : ex\n (fun O : Tpoint =>\n and (Cong O A O B)\n (and (Cong O A O C) (and (Cong O A O D) (Coplanar A B C O))))
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O D) (Cong O A O E)))
+++++
decompose [ex and] H0.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.

*****
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H1 : ex\n (fun O : Tpoint =>\n and (Cong O A O B)\n (and (Cong O A O C) (and (Cong O A O E) (Coplanar A B C O))))
H0 : ex\n (fun O : Tpoint =>\n and (Cong O A O B)\n (and (Cong O A O C) (and (Cong O A O D) (Coplanar A B C O))))
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O D) (Cong O A O E)))
+++++
clear H0.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.

*****
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H1 : ex\n (fun O : Tpoint =>\n and (Cong O A O B)\n (and (Cong O A O C) (and (Cong O A O E) (Coplanar A B C O))))
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O D) (Cong O A O E)))
+++++
decompose [ex and] H1.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.

*****
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H1 : ex\n (fun O : Tpoint =>\n and (Cong O A O B)\n (and (Cong O A O C) (and (Cong O A O E) (Coplanar A B C O))))
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O D) (Cong O A O E)))
+++++
clear H1.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.

*****
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O D) (Cong O A O E)))
+++++
exists x.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.

*****
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong x A x B) (and (Cong x A x D) (Cong x A x E))
+++++
repeat split.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.

*****
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong x A x B
+++++
Cong.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.

*****
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong x A x D
+++++
Cong.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.

*****
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong x A x E
+++++
Cong.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.

*****
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong x A x E
+++++
assert (x=x0).
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).

*****
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq x x0
+++++
assert_diffs.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
assert_diffs.

*****
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq x x0
+++++
apply is_circumcenter_uniqueness with A B C.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
assert_diffs.
apply is_circumcenter_uniqueness with A B C.

*****
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
try assumption.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
assert_diffs.
apply is_circumcenter_uniqueness with A B C.

*****
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
try assumption.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
assert_diffs.
apply is_circumcenter_uniqueness with A B C.

*****
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
try assumption.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
assert_diffs.
apply is_circumcenter_uniqueness with A B C.

*****
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_circumcenter x A B C
+++++
try assumption.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
assert_diffs.
apply is_circumcenter_uniqueness with A B C.
try assumption.

*****
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_circumcenter x A B C
+++++
unfold is_circumcenter.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
assert_diffs.
apply is_circumcenter_uniqueness with A B C.
try assumption.
unfold is_circumcenter.

*****
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong A x B x) (and (Cong B x C x) (Coplanar x A B C))
+++++
repeat split.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
assert_diffs.
apply is_circumcenter_uniqueness with A B C.
try assumption.
unfold is_circumcenter.
repeat split.

*****
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A x B x
+++++
eCong.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
assert_diffs.
apply is_circumcenter_uniqueness with A B C.
try assumption.
unfold is_circumcenter.
repeat split.

*****
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B x C x
+++++
eCong.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
assert_diffs.
apply is_circumcenter_uniqueness with A B C.
try assumption.
unfold is_circumcenter.
repeat split.

*****
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar x A B C
+++++
Cop.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
assert_diffs.
apply is_circumcenter_uniqueness with A B C.

*****
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_circumcenter x0 A B C
+++++
try assumption.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
assert_diffs.
apply is_circumcenter_uniqueness with A B C.
try assumption.

*****
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
is_circumcenter x0 A B C
+++++
unfold is_circumcenter.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
assert_diffs.
apply is_circumcenter_uniqueness with A B C.
try assumption.
unfold is_circumcenter.

*****
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong A x0 B x0) (and (Cong B x0 C x0) (Coplanar x0 A B C))
+++++
repeat split.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
assert_diffs.
apply is_circumcenter_uniqueness with A B C.
try assumption.
unfold is_circumcenter.
repeat split.

*****
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A x0 B x0
+++++
eCong.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
assert_diffs.
apply is_circumcenter_uniqueness with A B C.
try assumption.
unfold is_circumcenter.
repeat split.

*****
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong B x0 C x0
+++++
eCong.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
assert_diffs.
apply is_circumcenter_uniqueness with A B C.
try assumption.
unfold is_circumcenter.
repeat split.

*****
H13 : not (eq A C)
H10 : not (eq B C)
H11 : not (eq A B)
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar x0 A B C
+++++
Cop.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).

*****
H1 : eq x x0
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H5 : Cong x0 A x0 B
x0 : Tpoint
H6 : Coplanar A B C x
H4 : Cong x A x D
H2 : Cong x A x C
H3 : Cong x A x B
x : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong x A x E
+++++
subst.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.
apply concyclic_aux in H0.
apply concyclic_aux in H1.
decompose [ex and] H0.
clear H0.
decompose [ex and] H1.
clear H1.
exists x.
repeat split.
Cong.
assert (x=x0).
subst.

*****
H9 : Coplanar A B C x0
H7 : Cong x0 A x0 E
H0 : Cong x0 A x0 C
H3,H5 : Cong x0 A x0 B
H2 : Cong x0 A x0 C
H4 : Cong x0 A x0 D
H6 : Coplanar A B C x0
x0 : Tpoint
H : not (Col A B C)
A,B,C,D,E : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong x0 A x0 E
+++++
Cong.
-----
Lemma concyclic_trans : forall A B C D E, ~ Col A B C -> Concyclic A B C D -> Concyclic A B C E -> Concyclic A B D E.
Proof.
intros.
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_1: forall A B C D,\n  Concyclic A B C D -> Concyclic A B D C.
-----
Lemma concyclic_perm_1: forall A B C D, Concyclic A B C D -> Concyclic A B D C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic A B D C
+++++
Proof.
-----
Lemma concyclic_perm_1: forall A B C D, Concyclic A B C D -> Concyclic A B D C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic A B D C
+++++
intros A B C D H.
-----
Lemma concyclic_perm_1: forall A B C D, Concyclic A B C D -> Concyclic A B D C.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic A B D C
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_1: forall A B C D, Concyclic A B C D -> Concyclic A B D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic A B D C
+++++
split.
-----
Lemma concyclic_perm_1: forall A B C D, Concyclic A B C D -> Concyclic A B D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A B D C
+++++
Cop.
-----
Lemma concyclic_perm_1: forall A B C D, Concyclic A B C D -> Concyclic A B D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O D) (Cong O A O C)))
+++++
spliter.
-----
Lemma concyclic_perm_1: forall A B C D, Concyclic A B C D -> Concyclic A B D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O B) (and (Cong O A O D) (Cong O A O C)))
+++++
exists X.
-----
Lemma concyclic_perm_1: forall A B C D, Concyclic A B C D -> Concyclic A B D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X A X B) (and (Cong X A X D) (Cong X A X C))
+++++
repeat split.
-----
Lemma concyclic_perm_1: forall A B C D, Concyclic A B C D -> Concyclic A B D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X B
+++++
eCong.
-----
Lemma concyclic_perm_1: forall A B C D, Concyclic A B C D -> Concyclic A B D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X D
+++++
eCong.
-----
Lemma concyclic_perm_1: forall A B C D, Concyclic A B C D -> Concyclic A B D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X C
+++++
eCong.
-----
Lemma concyclic_perm_1: forall A B C D, Concyclic A B C D -> Concyclic A B D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_2 : forall A B C D,\n  Concyclic A B C D -> Concyclic A C B D.
-----
Lemma concyclic_perm_2 : forall A B C D, Concyclic A B C D -> Concyclic A C B D.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic A C B D
+++++
Proof.
-----
Lemma concyclic_perm_2 : forall A B C D, Concyclic A B C D -> Concyclic A C B D.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic A C B D
+++++
intros A B C D H.
-----
Lemma concyclic_perm_2 : forall A B C D, Concyclic A B C D -> Concyclic A C B D.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic A C B D
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_2 : forall A B C D, Concyclic A B C D -> Concyclic A C B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic A C B D
+++++
split.
-----
Lemma concyclic_perm_2 : forall A B C D, Concyclic A B C D -> Concyclic A C B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A C B D
+++++
Cop.
-----
Lemma concyclic_perm_2 : forall A B C D, Concyclic A B C D -> Concyclic A C B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O C) (and (Cong O A O B) (Cong O A O D)))
+++++
spliter.
-----
Lemma concyclic_perm_2 : forall A B C D, Concyclic A B C D -> Concyclic A C B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O C) (and (Cong O A O B) (Cong O A O D)))
+++++
exists X.
-----
Lemma concyclic_perm_2 : forall A B C D, Concyclic A B C D -> Concyclic A C B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X A X C) (and (Cong X A X B) (Cong X A X D))
+++++
repeat split.
-----
Lemma concyclic_perm_2 : forall A B C D, Concyclic A B C D -> Concyclic A C B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X C
+++++
eCong.
-----
Lemma concyclic_perm_2 : forall A B C D, Concyclic A B C D -> Concyclic A C B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X B
+++++
eCong.
-----
Lemma concyclic_perm_2 : forall A B C D, Concyclic A B C D -> Concyclic A C B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X D
+++++
eCong.
-----
Lemma concyclic_perm_2 : forall A B C D, Concyclic A B C D -> Concyclic A C B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_3 : forall A B C D,\n  Concyclic A B C D -> Concyclic A C D B.
-----
Lemma concyclic_perm_3 : forall A B C D, Concyclic A B C D -> Concyclic A C D B.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic A C D B
+++++
Proof.
-----
Lemma concyclic_perm_3 : forall A B C D, Concyclic A B C D -> Concyclic A C D B.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic A C D B
+++++
intros A B C D H.
-----
Lemma concyclic_perm_3 : forall A B C D, Concyclic A B C D -> Concyclic A C D B.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic A C D B
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_3 : forall A B C D, Concyclic A B C D -> Concyclic A C D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic A C D B
+++++
split.
-----
Lemma concyclic_perm_3 : forall A B C D, Concyclic A B C D -> Concyclic A C D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A C D B
+++++
Cop.
-----
Lemma concyclic_perm_3 : forall A B C D, Concyclic A B C D -> Concyclic A C D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O C) (and (Cong O A O D) (Cong O A O B)))
+++++
spliter.
-----
Lemma concyclic_perm_3 : forall A B C D, Concyclic A B C D -> Concyclic A C D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O C) (and (Cong O A O D) (Cong O A O B)))
+++++
exists X.
-----
Lemma concyclic_perm_3 : forall A B C D, Concyclic A B C D -> Concyclic A C D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X A X C) (and (Cong X A X D) (Cong X A X B))
+++++
repeat split.
-----
Lemma concyclic_perm_3 : forall A B C D, Concyclic A B C D -> Concyclic A C D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X C
+++++
eCong.
-----
Lemma concyclic_perm_3 : forall A B C D, Concyclic A B C D -> Concyclic A C D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X D
+++++
eCong.
-----
Lemma concyclic_perm_3 : forall A B C D, Concyclic A B C D -> Concyclic A C D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X B
+++++
eCong.
-----
Lemma concyclic_perm_3 : forall A B C D, Concyclic A B C D -> Concyclic A C D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_4 : forall A B C D,\n  Concyclic A B C D -> Concyclic A D B C.
-----
Lemma concyclic_perm_4 : forall A B C D, Concyclic A B C D -> Concyclic A D B C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic A D B C
+++++
Proof.
-----
Lemma concyclic_perm_4 : forall A B C D, Concyclic A B C D -> Concyclic A D B C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic A D B C
+++++
intros A B C D H.
-----
Lemma concyclic_perm_4 : forall A B C D, Concyclic A B C D -> Concyclic A D B C.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic A D B C
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_4 : forall A B C D, Concyclic A B C D -> Concyclic A D B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic A D B C
+++++
split.
-----
Lemma concyclic_perm_4 : forall A B C D, Concyclic A B C D -> Concyclic A D B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A D B C
+++++
Cop.
-----
Lemma concyclic_perm_4 : forall A B C D, Concyclic A B C D -> Concyclic A D B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O D) (and (Cong O A O B) (Cong O A O C)))
+++++
spliter.
-----
Lemma concyclic_perm_4 : forall A B C D, Concyclic A B C D -> Concyclic A D B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O D) (and (Cong O A O B) (Cong O A O C)))
+++++
exists X.
-----
Lemma concyclic_perm_4 : forall A B C D, Concyclic A B C D -> Concyclic A D B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X A X D) (and (Cong X A X B) (Cong X A X C))
+++++
repeat split.
-----
Lemma concyclic_perm_4 : forall A B C D, Concyclic A B C D -> Concyclic A D B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X D
+++++
eCong.
-----
Lemma concyclic_perm_4 : forall A B C D, Concyclic A B C D -> Concyclic A D B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X B
+++++
eCong.
-----
Lemma concyclic_perm_4 : forall A B C D, Concyclic A B C D -> Concyclic A D B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X C
+++++
eCong.
-----
Lemma concyclic_perm_4 : forall A B C D, Concyclic A B C D -> Concyclic A D B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_5 : forall A B C D,\n  Concyclic A B C D -> Concyclic A D C B.
-----
Lemma concyclic_perm_5 : forall A B C D, Concyclic A B C D -> Concyclic A D C B.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic A D C B
+++++
Proof.
-----
Lemma concyclic_perm_5 : forall A B C D, Concyclic A B C D -> Concyclic A D C B.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic A D C B
+++++
intros A B C D H.
-----
Lemma concyclic_perm_5 : forall A B C D, Concyclic A B C D -> Concyclic A D C B.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic A D C B
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_5 : forall A B C D, Concyclic A B C D -> Concyclic A D C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic A D C B
+++++
split.
-----
Lemma concyclic_perm_5 : forall A B C D, Concyclic A B C D -> Concyclic A D C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A D C B
+++++
Cop.
-----
Lemma concyclic_perm_5 : forall A B C D, Concyclic A B C D -> Concyclic A D C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O D) (and (Cong O A O C) (Cong O A O B)))
+++++
spliter.
-----
Lemma concyclic_perm_5 : forall A B C D, Concyclic A B C D -> Concyclic A D C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O D) (and (Cong O A O C) (Cong O A O B)))
+++++
exists X.
-----
Lemma concyclic_perm_5 : forall A B C D, Concyclic A B C D -> Concyclic A D C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X A X D) (and (Cong X A X C) (Cong X A X B))
+++++
repeat split.
-----
Lemma concyclic_perm_5 : forall A B C D, Concyclic A B C D -> Concyclic A D C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X D
+++++
eCong.
-----
Lemma concyclic_perm_5 : forall A B C D, Concyclic A B C D -> Concyclic A D C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X C
+++++
eCong.
-----
Lemma concyclic_perm_5 : forall A B C D, Concyclic A B C D -> Concyclic A D C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X A X B
+++++
eCong.
-----
Lemma concyclic_perm_5 : forall A B C D, Concyclic A B C D -> Concyclic A D C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_6 : forall A B C D,\n  Concyclic A B C D -> Concyclic B A C D.
-----
Lemma concyclic_perm_6 : forall A B C D, Concyclic A B C D -> Concyclic B A C D.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic B A C D
+++++
Proof.
-----
Lemma concyclic_perm_6 : forall A B C D, Concyclic A B C D -> Concyclic B A C D.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic B A C D
+++++
intros A B C D H.
-----
Lemma concyclic_perm_6 : forall A B C D, Concyclic A B C D -> Concyclic B A C D.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic B A C D
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_6 : forall A B C D, Concyclic A B C D -> Concyclic B A C D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic B A C D
+++++
split.
-----
Lemma concyclic_perm_6 : forall A B C D, Concyclic A B C D -> Concyclic B A C D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A C D
+++++
Cop.
-----
Lemma concyclic_perm_6 : forall A B C D, Concyclic A B C D -> Concyclic B A C D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O B O A) (and (Cong O B O C) (Cong O B O D)))
+++++
spliter.
-----
Lemma concyclic_perm_6 : forall A B C D, Concyclic A B C D -> Concyclic B A C D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O B O A) (and (Cong O B O C) (Cong O B O D)))
+++++
exists X.
-----
Lemma concyclic_perm_6 : forall A B C D, Concyclic A B C D -> Concyclic B A C D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X B X A) (and (Cong X B X C) (Cong X B X D))
+++++
repeat split.
-----
Lemma concyclic_perm_6 : forall A B C D, Concyclic A B C D -> Concyclic B A C D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X A
+++++
eCong.
-----
Lemma concyclic_perm_6 : forall A B C D, Concyclic A B C D -> Concyclic B A C D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X C
+++++
eCong.
-----
Lemma concyclic_perm_6 : forall A B C D, Concyclic A B C D -> Concyclic B A C D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X D
+++++
eCong.
-----
Lemma concyclic_perm_6 : forall A B C D, Concyclic A B C D -> Concyclic B A C D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_7 : forall A B C D,\n  Concyclic A B C D -> Concyclic B A D C.
-----
Lemma concyclic_perm_7 : forall A B C D, Concyclic A B C D -> Concyclic B A D C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic B A D C
+++++
Proof.
-----
Lemma concyclic_perm_7 : forall A B C D, Concyclic A B C D -> Concyclic B A D C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic B A D C
+++++
intros A B C D H.
-----
Lemma concyclic_perm_7 : forall A B C D, Concyclic A B C D -> Concyclic B A D C.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic B A D C
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_7 : forall A B C D, Concyclic A B C D -> Concyclic B A D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic B A D C
+++++
split.
-----
Lemma concyclic_perm_7 : forall A B C D, Concyclic A B C D -> Concyclic B A D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B A D C
+++++
Cop.
-----
Lemma concyclic_perm_7 : forall A B C D, Concyclic A B C D -> Concyclic B A D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O B O A) (and (Cong O B O D) (Cong O B O C)))
+++++
spliter.
-----
Lemma concyclic_perm_7 : forall A B C D, Concyclic A B C D -> Concyclic B A D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O B O A) (and (Cong O B O D) (Cong O B O C)))
+++++
exists X.
-----
Lemma concyclic_perm_7 : forall A B C D, Concyclic A B C D -> Concyclic B A D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X B X A) (and (Cong X B X D) (Cong X B X C))
+++++
repeat split.
-----
Lemma concyclic_perm_7 : forall A B C D, Concyclic A B C D -> Concyclic B A D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X A
+++++
eCong.
-----
Lemma concyclic_perm_7 : forall A B C D, Concyclic A B C D -> Concyclic B A D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X D
+++++
eCong.
-----
Lemma concyclic_perm_7 : forall A B C D, Concyclic A B C D -> Concyclic B A D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X C
+++++
eCong.
-----
Lemma concyclic_perm_7 : forall A B C D, Concyclic A B C D -> Concyclic B A D C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_8 : forall A B C D,\n  Concyclic A B C D -> Concyclic B C A D.
-----
Lemma concyclic_perm_8 : forall A B C D, Concyclic A B C D -> Concyclic B C A D.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic B C A D
+++++
Proof.
-----
Lemma concyclic_perm_8 : forall A B C D, Concyclic A B C D -> Concyclic B C A D.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic B C A D
+++++
intros A B C D H.
-----
Lemma concyclic_perm_8 : forall A B C D, Concyclic A B C D -> Concyclic B C A D.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic B C A D
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_8 : forall A B C D, Concyclic A B C D -> Concyclic B C A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic B C A D
+++++
split.
-----
Lemma concyclic_perm_8 : forall A B C D, Concyclic A B C D -> Concyclic B C A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B C A D
+++++
Cop.
-----
Lemma concyclic_perm_8 : forall A B C D, Concyclic A B C D -> Concyclic B C A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O B O C) (and (Cong O B O A) (Cong O B O D)))
+++++
spliter.
-----
Lemma concyclic_perm_8 : forall A B C D, Concyclic A B C D -> Concyclic B C A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O B O C) (and (Cong O B O A) (Cong O B O D)))
+++++
exists X.
-----
Lemma concyclic_perm_8 : forall A B C D, Concyclic A B C D -> Concyclic B C A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X B X C) (and (Cong X B X A) (Cong X B X D))
+++++
repeat split.
-----
Lemma concyclic_perm_8 : forall A B C D, Concyclic A B C D -> Concyclic B C A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X C
+++++
eCong.
-----
Lemma concyclic_perm_8 : forall A B C D, Concyclic A B C D -> Concyclic B C A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X A
+++++
eCong.
-----
Lemma concyclic_perm_8 : forall A B C D, Concyclic A B C D -> Concyclic B C A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X D
+++++
eCong.
-----
Lemma concyclic_perm_8 : forall A B C D, Concyclic A B C D -> Concyclic B C A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_9 : forall A B C D,\n  Concyclic A B C D -> Concyclic B C D A.
-----
Lemma concyclic_perm_9 : forall A B C D, Concyclic A B C D -> Concyclic B C D A.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic B C D A
+++++
Proof.
-----
Lemma concyclic_perm_9 : forall A B C D, Concyclic A B C D -> Concyclic B C D A.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic B C D A
+++++
intros A B C D H.
-----
Lemma concyclic_perm_9 : forall A B C D, Concyclic A B C D -> Concyclic B C D A.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic B C D A
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_9 : forall A B C D, Concyclic A B C D -> Concyclic B C D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic B C D A
+++++
split.
-----
Lemma concyclic_perm_9 : forall A B C D, Concyclic A B C D -> Concyclic B C D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B C D A
+++++
Cop.
-----
Lemma concyclic_perm_9 : forall A B C D, Concyclic A B C D -> Concyclic B C D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O B O C) (and (Cong O B O D) (Cong O B O A)))
+++++
spliter.
-----
Lemma concyclic_perm_9 : forall A B C D, Concyclic A B C D -> Concyclic B C D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O B O C) (and (Cong O B O D) (Cong O B O A)))
+++++
exists X.
-----
Lemma concyclic_perm_9 : forall A B C D, Concyclic A B C D -> Concyclic B C D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X B X C) (and (Cong X B X D) (Cong X B X A))
+++++
repeat split.
-----
Lemma concyclic_perm_9 : forall A B C D, Concyclic A B C D -> Concyclic B C D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X C
+++++
eCong.
-----
Lemma concyclic_perm_9 : forall A B C D, Concyclic A B C D -> Concyclic B C D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X D
+++++
eCong.
-----
Lemma concyclic_perm_9 : forall A B C D, Concyclic A B C D -> Concyclic B C D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X A
+++++
eCong.
-----
Lemma concyclic_perm_9 : forall A B C D, Concyclic A B C D -> Concyclic B C D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_10 : forall A B C D,\n  Concyclic A B C D -> Concyclic B D A C.
-----
Lemma concyclic_perm_10 : forall A B C D, Concyclic A B C D -> Concyclic B D A C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic B D A C
+++++
Proof.
-----
Lemma concyclic_perm_10 : forall A B C D, Concyclic A B C D -> Concyclic B D A C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic B D A C
+++++
intros A B C D H.
-----
Lemma concyclic_perm_10 : forall A B C D, Concyclic A B C D -> Concyclic B D A C.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic B D A C
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_10 : forall A B C D, Concyclic A B C D -> Concyclic B D A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic B D A C
+++++
split.
-----
Lemma concyclic_perm_10 : forall A B C D, Concyclic A B C D -> Concyclic B D A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B D A C
+++++
Cop.
-----
Lemma concyclic_perm_10 : forall A B C D, Concyclic A B C D -> Concyclic B D A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O B O D) (and (Cong O B O A) (Cong O B O C)))
+++++
spliter.
-----
Lemma concyclic_perm_10 : forall A B C D, Concyclic A B C D -> Concyclic B D A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O B O D) (and (Cong O B O A) (Cong O B O C)))
+++++
exists X.
-----
Lemma concyclic_perm_10 : forall A B C D, Concyclic A B C D -> Concyclic B D A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X B X D) (and (Cong X B X A) (Cong X B X C))
+++++
repeat split.
-----
Lemma concyclic_perm_10 : forall A B C D, Concyclic A B C D -> Concyclic B D A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X D
+++++
eCong.
-----
Lemma concyclic_perm_10 : forall A B C D, Concyclic A B C D -> Concyclic B D A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X A
+++++
eCong.
-----
Lemma concyclic_perm_10 : forall A B C D, Concyclic A B C D -> Concyclic B D A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X C
+++++
eCong.
-----
Lemma concyclic_perm_10 : forall A B C D, Concyclic A B C D -> Concyclic B D A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_11 : forall A B C D,\n  Concyclic A B C D -> Concyclic B D C A.
-----
Lemma concyclic_perm_11 : forall A B C D, Concyclic A B C D -> Concyclic B D C A.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic B D C A
+++++
Proof.
-----
Lemma concyclic_perm_11 : forall A B C D, Concyclic A B C D -> Concyclic B D C A.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic B D C A
+++++
intros A B C D H.
-----
Lemma concyclic_perm_11 : forall A B C D, Concyclic A B C D -> Concyclic B D C A.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic B D C A
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_11 : forall A B C D, Concyclic A B C D -> Concyclic B D C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic B D C A
+++++
split.
-----
Lemma concyclic_perm_11 : forall A B C D, Concyclic A B C D -> Concyclic B D C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B D C A
+++++
Cop.
-----
Lemma concyclic_perm_11 : forall A B C D, Concyclic A B C D -> Concyclic B D C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O B O D) (and (Cong O B O C) (Cong O B O A)))
+++++
spliter.
-----
Lemma concyclic_perm_11 : forall A B C D, Concyclic A B C D -> Concyclic B D C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O B O D) (and (Cong O B O C) (Cong O B O A)))
+++++
exists X.
-----
Lemma concyclic_perm_11 : forall A B C D, Concyclic A B C D -> Concyclic B D C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X B X D) (and (Cong X B X C) (Cong X B X A))
+++++
repeat split.
-----
Lemma concyclic_perm_11 : forall A B C D, Concyclic A B C D -> Concyclic B D C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X D
+++++
eCong.
-----
Lemma concyclic_perm_11 : forall A B C D, Concyclic A B C D -> Concyclic B D C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X C
+++++
eCong.
-----
Lemma concyclic_perm_11 : forall A B C D, Concyclic A B C D -> Concyclic B D C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X B X A
+++++
eCong.
-----
Lemma concyclic_perm_11 : forall A B C D, Concyclic A B C D -> Concyclic B D C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_12 : forall A B C D,\n  Concyclic A B C D -> Concyclic C A B D.
-----
Lemma concyclic_perm_12 : forall A B C D, Concyclic A B C D -> Concyclic C A B D.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic C A B D
+++++
Proof.
-----
Lemma concyclic_perm_12 : forall A B C D, Concyclic A B C D -> Concyclic C A B D.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic C A B D
+++++
intros A B C D H.
-----
Lemma concyclic_perm_12 : forall A B C D, Concyclic A B C D -> Concyclic C A B D.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic C A B D
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_12 : forall A B C D, Concyclic A B C D -> Concyclic C A B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic C A B D
+++++
split.
-----
Lemma concyclic_perm_12 : forall A B C D, Concyclic A B C D -> Concyclic C A B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A B D
+++++
Cop.
-----
Lemma concyclic_perm_12 : forall A B C D, Concyclic A B C D -> Concyclic C A B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O C O A) (and (Cong O C O B) (Cong O C O D)))
+++++
spliter.
-----
Lemma concyclic_perm_12 : forall A B C D, Concyclic A B C D -> Concyclic C A B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O C O A) (and (Cong O C O B) (Cong O C O D)))
+++++
exists X.
-----
Lemma concyclic_perm_12 : forall A B C D, Concyclic A B C D -> Concyclic C A B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X C X A) (and (Cong X C X B) (Cong X C X D))
+++++
repeat split.
-----
Lemma concyclic_perm_12 : forall A B C D, Concyclic A B C D -> Concyclic C A B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X A
+++++
eCong.
-----
Lemma concyclic_perm_12 : forall A B C D, Concyclic A B C D -> Concyclic C A B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X B
+++++
eCong.
-----
Lemma concyclic_perm_12 : forall A B C D, Concyclic A B C D -> Concyclic C A B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X D
+++++
eCong.
-----
Lemma concyclic_perm_12 : forall A B C D, Concyclic A B C D -> Concyclic C A B D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_13 : forall A B C D,\n  Concyclic A B C D -> Concyclic C A D B.
-----
Lemma concyclic_perm_13 : forall A B C D, Concyclic A B C D -> Concyclic C A D B.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic C A D B
+++++
Proof.
-----
Lemma concyclic_perm_13 : forall A B C D, Concyclic A B C D -> Concyclic C A D B.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic C A D B
+++++
intros A B C D H.
-----
Lemma concyclic_perm_13 : forall A B C D, Concyclic A B C D -> Concyclic C A D B.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic C A D B
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_13 : forall A B C D, Concyclic A B C D -> Concyclic C A D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic C A D B
+++++
split.
-----
Lemma concyclic_perm_13 : forall A B C D, Concyclic A B C D -> Concyclic C A D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C A D B
+++++
Cop.
-----
Lemma concyclic_perm_13 : forall A B C D, Concyclic A B C D -> Concyclic C A D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O C O A) (and (Cong O C O D) (Cong O C O B)))
+++++
spliter.
-----
Lemma concyclic_perm_13 : forall A B C D, Concyclic A B C D -> Concyclic C A D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O C O A) (and (Cong O C O D) (Cong O C O B)))
+++++
exists X.
-----
Lemma concyclic_perm_13 : forall A B C D, Concyclic A B C D -> Concyclic C A D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X C X A) (and (Cong X C X D) (Cong X C X B))
+++++
repeat split.
-----
Lemma concyclic_perm_13 : forall A B C D, Concyclic A B C D -> Concyclic C A D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X A
+++++
eCong.
-----
Lemma concyclic_perm_13 : forall A B C D, Concyclic A B C D -> Concyclic C A D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X D
+++++
eCong.
-----
Lemma concyclic_perm_13 : forall A B C D, Concyclic A B C D -> Concyclic C A D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X B
+++++
eCong.
-----
Lemma concyclic_perm_13 : forall A B C D, Concyclic A B C D -> Concyclic C A D B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_14 : forall A B C D,\n  Concyclic A B C D -> Concyclic C B A D.
-----
Lemma concyclic_perm_14 : forall A B C D, Concyclic A B C D -> Concyclic C B A D.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic C B A D
+++++
Proof.
-----
Lemma concyclic_perm_14 : forall A B C D, Concyclic A B C D -> Concyclic C B A D.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic C B A D
+++++
intros A B C D H.
-----
Lemma concyclic_perm_14 : forall A B C D, Concyclic A B C D -> Concyclic C B A D.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic C B A D
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_14 : forall A B C D, Concyclic A B C D -> Concyclic C B A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic C B A D
+++++
split.
-----
Lemma concyclic_perm_14 : forall A B C D, Concyclic A B C D -> Concyclic C B A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C B A D
+++++
Cop.
-----
Lemma concyclic_perm_14 : forall A B C D, Concyclic A B C D -> Concyclic C B A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O C O B) (and (Cong O C O A) (Cong O C O D)))
+++++
spliter.
-----
Lemma concyclic_perm_14 : forall A B C D, Concyclic A B C D -> Concyclic C B A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O C O B) (and (Cong O C O A) (Cong O C O D)))
+++++
exists X.
-----
Lemma concyclic_perm_14 : forall A B C D, Concyclic A B C D -> Concyclic C B A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X C X B) (and (Cong X C X A) (Cong X C X D))
+++++
repeat split.
-----
Lemma concyclic_perm_14 : forall A B C D, Concyclic A B C D -> Concyclic C B A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X B
+++++
eCong.
-----
Lemma concyclic_perm_14 : forall A B C D, Concyclic A B C D -> Concyclic C B A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X A
+++++
eCong.
-----
Lemma concyclic_perm_14 : forall A B C D, Concyclic A B C D -> Concyclic C B A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X D
+++++
eCong.
-----
Lemma concyclic_perm_14 : forall A B C D, Concyclic A B C D -> Concyclic C B A D.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_15 : forall A B C D,\n  Concyclic A B C D -> Concyclic C B D A.
-----
Lemma concyclic_perm_15 : forall A B C D, Concyclic A B C D -> Concyclic C B D A.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic C B D A
+++++
Proof.
-----
Lemma concyclic_perm_15 : forall A B C D, Concyclic A B C D -> Concyclic C B D A.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic C B D A
+++++
intros A B C D H.
-----
Lemma concyclic_perm_15 : forall A B C D, Concyclic A B C D -> Concyclic C B D A.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic C B D A
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_15 : forall A B C D, Concyclic A B C D -> Concyclic C B D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic C B D A
+++++
split.
-----
Lemma concyclic_perm_15 : forall A B C D, Concyclic A B C D -> Concyclic C B D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C B D A
+++++
Cop.
-----
Lemma concyclic_perm_15 : forall A B C D, Concyclic A B C D -> Concyclic C B D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O C O B) (and (Cong O C O D) (Cong O C O A)))
+++++
spliter.
-----
Lemma concyclic_perm_15 : forall A B C D, Concyclic A B C D -> Concyclic C B D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O C O B) (and (Cong O C O D) (Cong O C O A)))
+++++
exists X.
-----
Lemma concyclic_perm_15 : forall A B C D, Concyclic A B C D -> Concyclic C B D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X C X B) (and (Cong X C X D) (Cong X C X A))
+++++
repeat split.
-----
Lemma concyclic_perm_15 : forall A B C D, Concyclic A B C D -> Concyclic C B D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X B
+++++
eCong.
-----
Lemma concyclic_perm_15 : forall A B C D, Concyclic A B C D -> Concyclic C B D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X D
+++++
eCong.
-----
Lemma concyclic_perm_15 : forall A B C D, Concyclic A B C D -> Concyclic C B D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X A
+++++
eCong.
-----
Lemma concyclic_perm_15 : forall A B C D, Concyclic A B C D -> Concyclic C B D A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_16 : forall A B C D,\n  Concyclic A B C D -> Concyclic C D A B.
-----
Lemma concyclic_perm_16 : forall A B C D, Concyclic A B C D -> Concyclic C D A B.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic C D A B
+++++
Proof.
-----
Lemma concyclic_perm_16 : forall A B C D, Concyclic A B C D -> Concyclic C D A B.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic C D A B
+++++
intros A B C D H.
-----
Lemma concyclic_perm_16 : forall A B C D, Concyclic A B C D -> Concyclic C D A B.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic C D A B
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_16 : forall A B C D, Concyclic A B C D -> Concyclic C D A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic C D A B
+++++
split.
-----
Lemma concyclic_perm_16 : forall A B C D, Concyclic A B C D -> Concyclic C D A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C D A B
+++++
Cop.
-----
Lemma concyclic_perm_16 : forall A B C D, Concyclic A B C D -> Concyclic C D A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O C O D) (and (Cong O C O A) (Cong O C O B)))
+++++
spliter.
-----
Lemma concyclic_perm_16 : forall A B C D, Concyclic A B C D -> Concyclic C D A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O C O D) (and (Cong O C O A) (Cong O C O B)))
+++++
exists X.
-----
Lemma concyclic_perm_16 : forall A B C D, Concyclic A B C D -> Concyclic C D A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X C X D) (and (Cong X C X A) (Cong X C X B))
+++++
repeat split.
-----
Lemma concyclic_perm_16 : forall A B C D, Concyclic A B C D -> Concyclic C D A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X D
+++++
eCong.
-----
Lemma concyclic_perm_16 : forall A B C D, Concyclic A B C D -> Concyclic C D A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X A
+++++
eCong.
-----
Lemma concyclic_perm_16 : forall A B C D, Concyclic A B C D -> Concyclic C D A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X B
+++++
eCong.
-----
Lemma concyclic_perm_16 : forall A B C D, Concyclic A B C D -> Concyclic C D A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_17 : forall A B C D,\n  Concyclic A B C D -> Concyclic C D B A.
-----
Lemma concyclic_perm_17 : forall A B C D, Concyclic A B C D -> Concyclic C D B A.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic C D B A
+++++
Proof.
-----
Lemma concyclic_perm_17 : forall A B C D, Concyclic A B C D -> Concyclic C D B A.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic C D B A
+++++
intros A B C D H.
-----
Lemma concyclic_perm_17 : forall A B C D, Concyclic A B C D -> Concyclic C D B A.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic C D B A
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_17 : forall A B C D, Concyclic A B C D -> Concyclic C D B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic C D B A
+++++
split.
-----
Lemma concyclic_perm_17 : forall A B C D, Concyclic A B C D -> Concyclic C D B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C D B A
+++++
Cop.
-----
Lemma concyclic_perm_17 : forall A B C D, Concyclic A B C D -> Concyclic C D B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O C O D) (and (Cong O C O B) (Cong O C O A)))
+++++
spliter.
-----
Lemma concyclic_perm_17 : forall A B C D, Concyclic A B C D -> Concyclic C D B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O C O D) (and (Cong O C O B) (Cong O C O A)))
+++++
exists X.
-----
Lemma concyclic_perm_17 : forall A B C D, Concyclic A B C D -> Concyclic C D B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X C X D) (and (Cong X C X B) (Cong X C X A))
+++++
repeat split.
-----
Lemma concyclic_perm_17 : forall A B C D, Concyclic A B C D -> Concyclic C D B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X D
+++++
eCong.
-----
Lemma concyclic_perm_17 : forall A B C D, Concyclic A B C D -> Concyclic C D B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X B
+++++
eCong.
-----
Lemma concyclic_perm_17 : forall A B C D, Concyclic A B C D -> Concyclic C D B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X C X A
+++++
eCong.
-----
Lemma concyclic_perm_17 : forall A B C D, Concyclic A B C D -> Concyclic C D B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_18 : forall A B C D,\n  Concyclic A B C D -> Concyclic D A B C.
-----
Lemma concyclic_perm_18 : forall A B C D, Concyclic A B C D -> Concyclic D A B C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic D A B C
+++++
Proof.
-----
Lemma concyclic_perm_18 : forall A B C D, Concyclic A B C D -> Concyclic D A B C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic D A B C
+++++
intros A B C D H.
-----
Lemma concyclic_perm_18 : forall A B C D, Concyclic A B C D -> Concyclic D A B C.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic D A B C
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_18 : forall A B C D, Concyclic A B C D -> Concyclic D A B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic D A B C
+++++
split.
-----
Lemma concyclic_perm_18 : forall A B C D, Concyclic A B C D -> Concyclic D A B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D A B C
+++++
Cop.
-----
Lemma concyclic_perm_18 : forall A B C D, Concyclic A B C D -> Concyclic D A B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O D O A) (and (Cong O D O B) (Cong O D O C)))
+++++
spliter.
-----
Lemma concyclic_perm_18 : forall A B C D, Concyclic A B C D -> Concyclic D A B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O D O A) (and (Cong O D O B) (Cong O D O C)))
+++++
exists X.
-----
Lemma concyclic_perm_18 : forall A B C D, Concyclic A B C D -> Concyclic D A B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X D X A) (and (Cong X D X B) (Cong X D X C))
+++++
repeat split.
-----
Lemma concyclic_perm_18 : forall A B C D, Concyclic A B C D -> Concyclic D A B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X A
+++++
eCong.
-----
Lemma concyclic_perm_18 : forall A B C D, Concyclic A B C D -> Concyclic D A B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X B
+++++
eCong.
-----
Lemma concyclic_perm_18 : forall A B C D, Concyclic A B C D -> Concyclic D A B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X C
+++++
eCong.
-----
Lemma concyclic_perm_18 : forall A B C D, Concyclic A B C D -> Concyclic D A B C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_19 : forall A B C D,\n  Concyclic A B C D -> Concyclic D A C B.
-----
Lemma concyclic_perm_19 : forall A B C D, Concyclic A B C D -> Concyclic D A C B.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic D A C B
+++++
Proof.
-----
Lemma concyclic_perm_19 : forall A B C D, Concyclic A B C D -> Concyclic D A C B.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic D A C B
+++++
intros A B C D H.
-----
Lemma concyclic_perm_19 : forall A B C D, Concyclic A B C D -> Concyclic D A C B.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic D A C B
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_19 : forall A B C D, Concyclic A B C D -> Concyclic D A C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic D A C B
+++++
split.
-----
Lemma concyclic_perm_19 : forall A B C D, Concyclic A B C D -> Concyclic D A C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D A C B
+++++
Cop.
-----
Lemma concyclic_perm_19 : forall A B C D, Concyclic A B C D -> Concyclic D A C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O D O A) (and (Cong O D O C) (Cong O D O B)))
+++++
spliter.
-----
Lemma concyclic_perm_19 : forall A B C D, Concyclic A B C D -> Concyclic D A C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O D O A) (and (Cong O D O C) (Cong O D O B)))
+++++
exists X.
-----
Lemma concyclic_perm_19 : forall A B C D, Concyclic A B C D -> Concyclic D A C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X D X A) (and (Cong X D X C) (Cong X D X B))
+++++
repeat split.
-----
Lemma concyclic_perm_19 : forall A B C D, Concyclic A B C D -> Concyclic D A C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X A
+++++
eCong.
-----
Lemma concyclic_perm_19 : forall A B C D, Concyclic A B C D -> Concyclic D A C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X C
+++++
eCong.
-----
Lemma concyclic_perm_19 : forall A B C D, Concyclic A B C D -> Concyclic D A C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X B
+++++
eCong.
-----
Lemma concyclic_perm_19 : forall A B C D, Concyclic A B C D -> Concyclic D A C B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_20 : forall A B C D,\n  Concyclic A B C D -> Concyclic D B A C.
-----
Lemma concyclic_perm_20 : forall A B C D, Concyclic A B C D -> Concyclic D B A C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic D B A C
+++++
Proof.
-----
Lemma concyclic_perm_20 : forall A B C D, Concyclic A B C D -> Concyclic D B A C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic D B A C
+++++
intros A B C D H.
-----
Lemma concyclic_perm_20 : forall A B C D, Concyclic A B C D -> Concyclic D B A C.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic D B A C
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_20 : forall A B C D, Concyclic A B C D -> Concyclic D B A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic D B A C
+++++
split.
-----
Lemma concyclic_perm_20 : forall A B C D, Concyclic A B C D -> Concyclic D B A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D B A C
+++++
Cop.
-----
Lemma concyclic_perm_20 : forall A B C D, Concyclic A B C D -> Concyclic D B A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O D O B) (and (Cong O D O A) (Cong O D O C)))
+++++
spliter.
-----
Lemma concyclic_perm_20 : forall A B C D, Concyclic A B C D -> Concyclic D B A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O D O B) (and (Cong O D O A) (Cong O D O C)))
+++++
exists X.
-----
Lemma concyclic_perm_20 : forall A B C D, Concyclic A B C D -> Concyclic D B A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X D X B) (and (Cong X D X A) (Cong X D X C))
+++++
repeat split.
-----
Lemma concyclic_perm_20 : forall A B C D, Concyclic A B C D -> Concyclic D B A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X B
+++++
eCong.
-----
Lemma concyclic_perm_20 : forall A B C D, Concyclic A B C D -> Concyclic D B A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X A
+++++
eCong.
-----
Lemma concyclic_perm_20 : forall A B C D, Concyclic A B C D -> Concyclic D B A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X C
+++++
eCong.
-----
Lemma concyclic_perm_20 : forall A B C D, Concyclic A B C D -> Concyclic D B A C.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_21 : forall A B C D,\n  Concyclic A B C D -> Concyclic D B C A.
-----
Lemma concyclic_perm_21 : forall A B C D, Concyclic A B C D -> Concyclic D B C A.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic D B C A
+++++
Proof.
-----
Lemma concyclic_perm_21 : forall A B C D, Concyclic A B C D -> Concyclic D B C A.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic D B C A
+++++
intros A B C D H.
-----
Lemma concyclic_perm_21 : forall A B C D, Concyclic A B C D -> Concyclic D B C A.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic D B C A
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_21 : forall A B C D, Concyclic A B C D -> Concyclic D B C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic D B C A
+++++
split.
-----
Lemma concyclic_perm_21 : forall A B C D, Concyclic A B C D -> Concyclic D B C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D B C A
+++++
Cop.
-----
Lemma concyclic_perm_21 : forall A B C D, Concyclic A B C D -> Concyclic D B C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O D O B) (and (Cong O D O C) (Cong O D O A)))
+++++
spliter.
-----
Lemma concyclic_perm_21 : forall A B C D, Concyclic A B C D -> Concyclic D B C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O D O B) (and (Cong O D O C) (Cong O D O A)))
+++++
exists X.
-----
Lemma concyclic_perm_21 : forall A B C D, Concyclic A B C D -> Concyclic D B C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X D X B) (and (Cong X D X C) (Cong X D X A))
+++++
repeat split.
-----
Lemma concyclic_perm_21 : forall A B C D, Concyclic A B C D -> Concyclic D B C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X B
+++++
eCong.
-----
Lemma concyclic_perm_21 : forall A B C D, Concyclic A B C D -> Concyclic D B C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X C
+++++
eCong.
-----
Lemma concyclic_perm_21 : forall A B C D, Concyclic A B C D -> Concyclic D B C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X A
+++++
eCong.
-----
Lemma concyclic_perm_21 : forall A B C D, Concyclic A B C D -> Concyclic D B C A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_22 : forall A B C D,\n  Concyclic A B C D -> Concyclic D C A B.
-----
Lemma concyclic_perm_22 : forall A B C D, Concyclic A B C D -> Concyclic D C A B.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic D C A B
+++++
Proof.
-----
Lemma concyclic_perm_22 : forall A B C D, Concyclic A B C D -> Concyclic D C A B.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic D C A B
+++++
intros A B C D H.
-----
Lemma concyclic_perm_22 : forall A B C D, Concyclic A B C D -> Concyclic D C A B.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic D C A B
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_22 : forall A B C D, Concyclic A B C D -> Concyclic D C A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic D C A B
+++++
split.
-----
Lemma concyclic_perm_22 : forall A B C D, Concyclic A B C D -> Concyclic D C A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D C A B
+++++
Cop.
-----
Lemma concyclic_perm_22 : forall A B C D, Concyclic A B C D -> Concyclic D C A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O D O C) (and (Cong O D O A) (Cong O D O B)))
+++++
spliter.
-----
Lemma concyclic_perm_22 : forall A B C D, Concyclic A B C D -> Concyclic D C A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O D O C) (and (Cong O D O A) (Cong O D O B)))
+++++
exists X.
-----
Lemma concyclic_perm_22 : forall A B C D, Concyclic A B C D -> Concyclic D C A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X D X C) (and (Cong X D X A) (Cong X D X B))
+++++
repeat split.
-----
Lemma concyclic_perm_22 : forall A B C D, Concyclic A B C D -> Concyclic D C A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X C
+++++
eCong.
-----
Lemma concyclic_perm_22 : forall A B C D, Concyclic A B C D -> Concyclic D C A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X A
+++++
eCong.
-----
Lemma concyclic_perm_22 : forall A B C D, Concyclic A B C D -> Concyclic D C A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X B
+++++
eCong.
-----
Lemma concyclic_perm_22 : forall A B C D, Concyclic A B C D -> Concyclic D C A B.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_perm_23 : forall A B C D,\n  Concyclic A B C D -> Concyclic D C B A.
-----
Lemma concyclic_perm_23 : forall A B C D, Concyclic A B C D -> Concyclic D C B A.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic D C B A
+++++
Proof.
-----
Lemma concyclic_perm_23 : forall A B C D, Concyclic A B C D -> Concyclic D C B A.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Concyclic A B C D), Concyclic D C B A
+++++
intros A B C D H.
-----
Lemma concyclic_perm_23 : forall A B C D, Concyclic A B C D -> Concyclic D C B A.
Proof.
intros A B C D H.

*****
H : Concyclic A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic D C B A
+++++
destruct H as [H1 [X H2]].
-----
Lemma concyclic_perm_23 : forall A B C D, Concyclic A B C D -> Concyclic D C B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic D C B A
+++++
split.
-----
Lemma concyclic_perm_23 : forall A B C D, Concyclic A B C D -> Concyclic D C B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar D C B A
+++++
Cop.
-----
Lemma concyclic_perm_23 : forall A B C D, Concyclic A B C D -> Concyclic D C B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****
H2 : and (Cong X A X B) (and (Cong X A X C) (Cong X A X D))
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O D O C) (and (Cong O D O B) (Cong O D O A)))
+++++
spliter.
-----
Lemma concyclic_perm_23 : forall A B C D, Concyclic A B C D -> Concyclic D C B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O D O C) (and (Cong O D O B) (Cong O D O A)))
+++++
exists X.
-----
Lemma concyclic_perm_23 : forall A B C D, Concyclic A B C D -> Concyclic D C B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong X D X C) (and (Cong X D X B) (Cong X D X A))
+++++
repeat split.
-----
Lemma concyclic_perm_23 : forall A B C D, Concyclic A B C D -> Concyclic D C B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X C
+++++
eCong.
-----
Lemma concyclic_perm_23 : forall A B C D, Concyclic A B C D -> Concyclic D C B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X B
+++++
eCong.
-----
Lemma concyclic_perm_23 : forall A B C D, Concyclic A B C D -> Concyclic D C B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.
spliter.
exists X.
repeat split.

*****
H2 : Cong X A X D
H0 : Cong X A X C
H : Cong X A X B
X : Tpoint
H1 : Coplanar A B C D
A,B,C,D : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X D X A
+++++
eCong.
-----
Lemma concyclic_perm_23 : forall A B C D, Concyclic A B C D -> Concyclic D C B A.
Proof.
intros A B C D H.
destruct H as [H1 [X H2]].
split.

*****

*****

+++++
Qed.
-----
Lemma concyclic_1123 : forall A B C,\n ~ Col A B C ->\n Concyclic A A B C.
-----
Lemma concyclic_1123 : forall A B C, ~ Col A B C -> Concyclic A A B C.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (Col A B C)), Concyclic A A B C
+++++
Proof.
-----
Lemma concyclic_1123 : forall A B C, ~ Col A B C -> Concyclic A A B C.
Proof.

*****
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C : Tpoint) (_ : not (Col A B C)), Concyclic A A B C
+++++
intros A B C HABC.
-----
Lemma concyclic_1123 : forall A B C, ~ Col A B C -> Concyclic A A B C.
Proof.
intros A B C HABC.

*****
HABC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Concyclic A A B C
+++++
unfold Concyclic.
-----
Lemma concyclic_1123 : forall A B C, ~ Col A B C -> Concyclic A A B C.
Proof.
intros A B C HABC.
unfold Concyclic.

*****
HABC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Coplanar A A B C) (ex (fun O : Tpoint => and (Cong O A O A) (and (Cong O A O B) (Cong O A O C))))
+++++
split.
-----
Lemma concyclic_1123 : forall A B C, ~ Col A B C -> Concyclic A A B C.
Proof.
intros A B C HABC.
unfold Concyclic.
split.

*****
HABC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A A B C
+++++
apply coplanar_trivial.
-----
Lemma concyclic_1123 : forall A B C, ~ Col A B C -> Concyclic A A B C.
Proof.
intros A B C HABC.
unfold Concyclic.
split.

*****
HABC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O A) (and (Cong O A O B) (Cong O A O C)))
+++++
destruct (exists_circumcenter A B C HABC) as [G HG].
-----
Lemma concyclic_1123 : forall A B C, ~ Col A B C -> Concyclic A A B C.
Proof.
intros A B C HABC.
unfold Concyclic.
split.
destruct (exists_circumcenter A B C HABC) as [G HG].

*****
HG : is_circumcenter G A B C
G : Tpoint
HABC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun O : Tpoint => and (Cong O A O A) (and (Cong O A O B) (Cong O A O C)))
+++++
exists G.
-----
Lemma concyclic_1123 : forall A B C, ~ Col A B C -> Concyclic A A B C.
Proof.
intros A B C HABC.
unfold Concyclic.
split.
destruct (exists_circumcenter A B C HABC) as [G HG].
exists G.

*****
HG : is_circumcenter G A B C
G : Tpoint
HABC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong G A G A) (and (Cong G A G B) (Cong G A G C))
+++++
apply circumcenter_cong in HG.
-----
Lemma concyclic_1123 : forall A B C, ~ Col A B C -> Concyclic A A B C.
Proof.
intros A B C HABC.
unfold Concyclic.
split.
destruct (exists_circumcenter A B C HABC) as [G HG].
exists G.
apply circumcenter_cong in HG.

*****
HG : and (Cong A G B G) (and (Cong B G C G) (Cong C G A G))
G : Tpoint
HABC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong G A G A) (and (Cong G A G B) (Cong G A G C))
+++++
spliter.
-----
Lemma concyclic_1123 : forall A B C, ~ Col A B C -> Concyclic A A B C.
Proof.
intros A B C HABC.
unfold Concyclic.
split.
destruct (exists_circumcenter A B C HABC) as [G HG].
exists G.
apply circumcenter_cong in HG.
spliter.

*****
H1 : Cong C G A G
H0 : Cong B G C G
H : Cong A G B G
G : Tpoint
HABC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Cong G A G A) (and (Cong G A G B) (Cong G A G C))
+++++
repeat split.
-----
Lemma concyclic_1123 : forall A B C, ~ Col A B C -> Concyclic A A B C.
Proof.
intros A B C HABC.
unfold Concyclic.
split.
destruct (exists_circumcenter A B C HABC) as [G HG].
exists G.
apply circumcenter_cong in HG.
spliter.
repeat split.

*****
H1 : Cong C G A G
H0 : Cong B G C G
H : Cong A G B G
G : Tpoint
HABC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong G A G A
+++++
Cong.
-----
Lemma concyclic_1123 : forall A B C, ~ Col A B C -> Concyclic A A B C.
Proof.
intros A B C HABC.
unfold Concyclic.
split.
destruct (exists_circumcenter A B C HABC) as [G HG].
exists G.
apply circumcenter_cong in HG.
spliter.
repeat split.

*****
H1 : Cong C G A G
H0 : Cong B G C G
H : Cong A G B G
G : Tpoint
HABC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong G A G B
+++++
Cong.
-----
Lemma concyclic_1123 : forall A B C, ~ Col A B C -> Concyclic A A B C.
Proof.
intros A B C HABC.
unfold Concyclic.
split.
destruct (exists_circumcenter A B C HABC) as [G HG].
exists G.
apply circumcenter_cong in HG.
spliter.
repeat split.

*****
H1 : Cong C G A G
H0 : Cong B G C G
H : Cong A G B G
G : Tpoint
HABC : not (Col A B C)
A,B,C : Tpoint
TE : Tarski_euclidean TnEQD
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong G A G C
+++++
Cong.
-----
Lemma concyclic_1123 : forall A B C, ~ Col A B C -> Concyclic A A B C.
Proof.
intros A B C HABC.
unfold Concyclic.
split.

*****

*****

+++++
Qed.
-----
End Concyclic.
-----
