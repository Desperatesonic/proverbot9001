Require Import Coq.Relations.Relations.
-----
Require Import ExtLib.Core.Type.
-----
Require Import ExtLib.Data.Fun.
-----
Require Import ExtLib.Structures.Identity.
-----
Require Import ExtLib.Structures.Proper.
-----
Require Import ExtLib.Structures.Functor.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Section laws.
-----
Polymorphic Class FunctorLaws@{t u X}\n              (F : Type@{t} -> Type@{u})\n              (Functor_F : Functor F)\n              (Feq : type1@{t u X} F)\n  : Type :=\n  { fmap_id : forall (T : Type@{t}) (tT : type@{t} T)\n      (tTo : typeOk@{t} tT) (f : T -> T),\n        IsIdent f ->\n        equal (fmap f) (@id (F T))\n  ; fmap_compose : forall (T U V : Type@{t})\n                          (tT : type@{t} T) (tU : type@{t} U) (tV : type@{t} V),\n      typeOk tT -> typeOk tU -> typeOk tV ->\n      forall (f : T -> U) (g : U -> V),\n        proper f -> proper g ->\n        equal (fmap (compose g f)) (compose (fmap g) (fmap f))\n  ; fmap_proper :> forall (T : Type@{t}) (U : Type@{u}) (tT : type T) (tU : type U),\n      typeOk@{t} tT -> typeOk@{u} tU ->\n      proper (@fmap _ _ T U)\n  }.
-----
End laws.
-----
