Require Export GeoCoq.Elements.OriginalProofs.lemma_NCorder.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_oppositesidesymmetric.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_crossimpliesopposite : \n   forall A B C D, \n   CR A B C D -> nCol A C D ->\n   TS A C D B /\ TS A D C B /\ TS B C D A /\ TS B D C A.
-----
Lemma lemma_crossimpliesopposite : forall A B C D, CR A B C D -> nCol A C D -> TS A C D B /\\ TS A D C B /\\ TS B C D A /\\ TS B D C A.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D : Point) (_ : CR A B C D) (_ : nCol A C D), and (TS A C D B) (and (TS A D C B) (and (TS B C D A) (TS B D C A)))
+++++
Proof.
-----
Lemma lemma_crossimpliesopposite : forall A B C D, CR A B C D -> nCol A C D -> TS A C D B /\\ TS A D C B /\\ TS B C D A /\\ TS B D C A.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D : Point) (_ : CR A B C D) (_ : nCol A C D), and (TS A C D B) (and (TS A D C B) (and (TS B C D A) (TS B D C A)))
+++++
intros.
-----
Lemma lemma_crossimpliesopposite : forall A B C D, CR A B C D -> nCol A C D -> TS A C D B /\\ TS A D C B /\\ TS B C D A /\\ TS B D C A.
Proof.
intros.

*****
H0 : nCol A C D
H : CR A B C D
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (TS A C D B) (and (TS A D C B) (and (TS B C D A) (TS B D C A)))
+++++
let Tf:=fresh in assert (Tf:exists M, (BetS A M B /\ BetS C M D)) by (conclude_def CR );destruct Tf as [M];spliter.
-----
Lemma lemma_crossimpliesopposite : forall A B C D, CR A B C D -> nCol A C D -> TS A C D B /\\ TS A D C B /\\ TS B C D A /\\ TS B D C A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M B /\\ BetS C M D)) by (conclude_def CR );destruct Tf as [M];spliter.

*****
H2 : BetS C M D
H1 : BetS A M B
M : Point
H0 : nCol A C D
H : CR A B C D
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (TS A C D B) (and (TS A D C B) (and (TS B C D A) (TS B D C A)))
+++++
assert (Col C M D) by (conclude_def Col ).
-----
Lemma lemma_crossimpliesopposite : forall A B C D, CR A B C D -> nCol A C D -> TS A C D B /\\ TS A D C B /\\ TS B C D A /\\ TS B D C A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M B /\\ BetS C M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (Col C M D) by (conclude_def Col ).

*****
H3 : Col C M D
H2 : BetS C M D
H1 : BetS A M B
M : Point
H0 : nCol A C D
H : CR A B C D
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (TS A C D B) (and (TS A D C B) (and (TS B C D A) (TS B D C A)))
+++++
assert (Col C D M) by (forward_using lemma_collinearorder).
-----
Lemma lemma_crossimpliesopposite : forall A B C D, CR A B C D -> nCol A C D -> TS A C D B /\\ TS A D C B /\\ TS B C D A /\\ TS B D C A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M B /\\ BetS C M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (Col C M D) by (conclude_def Col ).
assert (Col C D M) by (forward_using lemma_collinearorder).

*****
H4 : Col C D M
H3 : Col C M D
H2 : BetS C M D
H1 : BetS A M B
M : Point
H0 : nCol A C D
H : CR A B C D
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (TS A C D B) (and (TS A D C B) (and (TS B C D A) (TS B D C A)))
+++++
assert (nCol C D A) by (forward_using lemma_NCorder).
-----
Lemma lemma_crossimpliesopposite : forall A B C D, CR A B C D -> nCol A C D -> TS A C D B /\\ TS A D C B /\\ TS B C D A /\\ TS B D C A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M B /\\ BetS C M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (Col C M D) by (conclude_def Col ).
assert (Col C D M) by (forward_using lemma_collinearorder).
assert (nCol C D A) by (forward_using lemma_NCorder).

*****
H5 : nCol C D A
H4 : Col C D M
H3 : Col C M D
H2 : BetS C M D
H1 : BetS A M B
M : Point
H0 : nCol A C D
H : CR A B C D
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (TS A C D B) (and (TS A D C B) (and (TS B C D A) (TS B D C A)))
+++++
assert (nCol D C A) by (forward_using lemma_NCorder).
-----
Lemma lemma_crossimpliesopposite : forall A B C D, CR A B C D -> nCol A C D -> TS A C D B /\\ TS A D C B /\\ TS B C D A /\\ TS B D C A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M B /\\ BetS C M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (Col C M D) by (conclude_def Col ).
assert (Col C D M) by (forward_using lemma_collinearorder).
assert (nCol C D A) by (forward_using lemma_NCorder).
assert (nCol D C A) by (forward_using lemma_NCorder).

*****
H6 : nCol D C A
H5 : nCol C D A
H4 : Col C D M
H3 : Col C M D
H2 : BetS C M D
H1 : BetS A M B
M : Point
H0 : nCol A C D
H : CR A B C D
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (TS A C D B) (and (TS A D C B) (and (TS B C D A) (TS B D C A)))
+++++
assert (TS A C D B) by (conclude_def TS ).
-----
Lemma lemma_crossimpliesopposite : forall A B C D, CR A B C D -> nCol A C D -> TS A C D B /\\ TS A D C B /\\ TS B C D A /\\ TS B D C A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M B /\\ BetS C M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (Col C M D) by (conclude_def Col ).
assert (Col C D M) by (forward_using lemma_collinearorder).
assert (nCol C D A) by (forward_using lemma_NCorder).
assert (nCol D C A) by (forward_using lemma_NCorder).
assert (TS A C D B) by (conclude_def TS ).

*****
H7 : TS A C D B
H6 : nCol D C A
H5 : nCol C D A
H4 : Col C D M
H3 : Col C M D
H2 : BetS C M D
H1 : BetS A M B
M : Point
H0 : nCol A C D
H : CR A B C D
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (TS A C D B) (and (TS A D C B) (and (TS B C D A) (TS B D C A)))
+++++
assert (Col D C M) by (forward_using lemma_collinearorder).
-----
Lemma lemma_crossimpliesopposite : forall A B C D, CR A B C D -> nCol A C D -> TS A C D B /\\ TS A D C B /\\ TS B C D A /\\ TS B D C A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M B /\\ BetS C M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (Col C M D) by (conclude_def Col ).
assert (Col C D M) by (forward_using lemma_collinearorder).
assert (nCol C D A) by (forward_using lemma_NCorder).
assert (nCol D C A) by (forward_using lemma_NCorder).
assert (TS A C D B) by (conclude_def TS ).
assert (Col D C M) by (forward_using lemma_collinearorder).

*****
H8 : Col D C M
H7 : TS A C D B
H6 : nCol D C A
H5 : nCol C D A
H4 : Col C D M
H3 : Col C M D
H2 : BetS C M D
H1 : BetS A M B
M : Point
H0 : nCol A C D
H : CR A B C D
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (TS A C D B) (and (TS A D C B) (and (TS B C D A) (TS B D C A)))
+++++
assert (TS A D C B) by (conclude_def TS ).
-----
Lemma lemma_crossimpliesopposite : forall A B C D, CR A B C D -> nCol A C D -> TS A C D B /\\ TS A D C B /\\ TS B C D A /\\ TS B D C A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M B /\\ BetS C M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (Col C M D) by (conclude_def Col ).
assert (Col C D M) by (forward_using lemma_collinearorder).
assert (nCol C D A) by (forward_using lemma_NCorder).
assert (nCol D C A) by (forward_using lemma_NCorder).
assert (TS A C D B) by (conclude_def TS ).
assert (Col D C M) by (forward_using lemma_collinearorder).
assert (TS A D C B) by (conclude_def TS ).

*****
H9 : TS A D C B
H8 : Col D C M
H7 : TS A C D B
H6 : nCol D C A
H5 : nCol C D A
H4 : Col C D M
H3 : Col C M D
H2 : BetS C M D
H1 : BetS A M B
M : Point
H0 : nCol A C D
H : CR A B C D
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (TS A C D B) (and (TS A D C B) (and (TS B C D A) (TS B D C A)))
+++++
assert (TS B C D A) by (conclude lemma_oppositesidesymmetric).
-----
Lemma lemma_crossimpliesopposite : forall A B C D, CR A B C D -> nCol A C D -> TS A C D B /\\ TS A D C B /\\ TS B C D A /\\ TS B D C A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M B /\\ BetS C M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (Col C M D) by (conclude_def Col ).
assert (Col C D M) by (forward_using lemma_collinearorder).
assert (nCol C D A) by (forward_using lemma_NCorder).
assert (nCol D C A) by (forward_using lemma_NCorder).
assert (TS A C D B) by (conclude_def TS ).
assert (Col D C M) by (forward_using lemma_collinearorder).
assert (TS A D C B) by (conclude_def TS ).
assert (TS B C D A) by (conclude lemma_oppositesidesymmetric).

*****
H10 : TS B C D A
H9 : TS A D C B
H8 : Col D C M
H7 : TS A C D B
H6 : nCol D C A
H5 : nCol C D A
H4 : Col C D M
H3 : Col C M D
H2 : BetS C M D
H1 : BetS A M B
M : Point
H0 : nCol A C D
H : CR A B C D
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (TS A C D B) (and (TS A D C B) (and (TS B C D A) (TS B D C A)))
+++++
assert (TS B D C A) by (conclude lemma_oppositesidesymmetric).
-----
Lemma lemma_crossimpliesopposite : forall A B C D, CR A B C D -> nCol A C D -> TS A C D B /\\ TS A D C B /\\ TS B C D A /\\ TS B D C A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M B /\\ BetS C M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (Col C M D) by (conclude_def Col ).
assert (Col C D M) by (forward_using lemma_collinearorder).
assert (nCol C D A) by (forward_using lemma_NCorder).
assert (nCol D C A) by (forward_using lemma_NCorder).
assert (TS A C D B) by (conclude_def TS ).
assert (Col D C M) by (forward_using lemma_collinearorder).
assert (TS A D C B) by (conclude_def TS ).
assert (TS B C D A) by (conclude lemma_oppositesidesymmetric).
assert (TS B D C A) by (conclude lemma_oppositesidesymmetric).

*****
H11 : TS B D C A
H10 : TS B C D A
H9 : TS A D C B
H8 : Col D C M
H7 : TS A C D B
H6 : nCol D C A
H5 : nCol C D A
H4 : Col C D M
H3 : Col C M D
H2 : BetS C M D
H1 : BetS A M B
M : Point
H0 : nCol A C D
H : CR A B C D
A,B,C,D : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
and (TS A C D B) (and (TS A D C B) (and (TS B C D A) (TS B D C A)))
+++++
close.
-----
Lemma lemma_crossimpliesopposite : forall A B C D, CR A B C D -> nCol A C D -> TS A C D B /\\ TS A D C B /\\ TS B C D A /\\ TS B D C A.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists M, (BetS A M B /\\ BetS C M D)) by (conclude_def CR );destruct Tf as [M];spliter.
assert (Col C M D) by (conclude_def Col ).
assert (Col C D M) by (forward_using lemma_collinearorder).
assert (nCol C D A) by (forward_using lemma_NCorder).
assert (nCol D C A) by (forward_using lemma_NCorder).
assert (TS A C D B) by (conclude_def TS ).
assert (Col D C M) by (forward_using lemma_collinearorder).
assert (TS A D C B) by (conclude_def TS ).
assert (TS B C D A) by (conclude lemma_oppositesidesymmetric).
assert (TS B D C A) by (conclude lemma_oppositesidesymmetric).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
