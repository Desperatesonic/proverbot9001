Require Export GeoCoq.Elements.OriginalProofs.lemma_8_2.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_8_3.
-----
Section Euclid.
-----
Context `{Ax1:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_collinearright : \n   forall A B C D, \n   Per A B D -> Col A B C -> neq C B ->\n   Per C B D.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.

*****
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
forall (A B C D : Point) (_ : Per A B D) (_ : Col A B C) (_ : neq C B), Per C B D
+++++
Proof.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.

*****
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
forall (A B C D : Point) (_ : Per A B D) (_ : Col A B C) (_ : neq C B), Per C B D
+++++
intros.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.

*****
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per C B D
+++++
assert ((eq A B \/ eq A C \/ eq B C \/ BetS B A C \/ BetS A B C \/ BetS A C B)) by (conclude_def Col ).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).

*****
H2 : or (eq A B)\n (or (eq A C)\n (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per C B D
+++++
assert (nCol A B D) by (conclude lemma_rightangleNC).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).

*****
H3 : nCol A B D
H2 : or (eq A B)\n (or (eq A C)\n (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per C B D
+++++
assert (~ eq A B).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).

*****
H3 : nCol A B D
H2 : or (eq A B)\n (or (eq A C)\n (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (eq A B)
+++++
intro.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
intro.

*****
H4 : eq A B
H3 : nCol A B D
H2 : or (eq A B)\n (or (eq A C)\n (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (nCol A A D) by (conclude cn_equalitysub).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
intro.
assert (nCol A A D) by (conclude cn_equalitysub).

*****
H5 : nCol A A D
H4 : eq A B
H3 : nCol A B D
H2 : or (eq A B)\n (or (eq A C)\n (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (eq A A) by (conclude cn_equalityreflexive).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
intro.
assert (nCol A A D) by (conclude cn_equalitysub).
assert (eq A A) by (conclude cn_equalityreflexive).

*****
H6 : eq A A
H5 : nCol A A D
H4 : eq A B
H3 : nCol A B D
H2 : or (eq A B)\n (or (eq A C)\n (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col D A A) by (conclude_def Col ).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
intro.
assert (nCol A A D) by (conclude cn_equalitysub).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col D A A) by (conclude_def Col ).

*****
H7 : Col D A A
H6 : eq A A
H5 : nCol A A D
H4 : eq A B
H3 : nCol A B D
H2 : or (eq A B)\n (or (eq A C)\n (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col A A D) by (forward_using lemma_collinearorder).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
intro.
assert (nCol A A D) by (conclude cn_equalitysub).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (Col D A A) by (conclude_def Col ).
assert (Col A A D) by (forward_using lemma_collinearorder).

*****
H8 : Col A A D
H7 : Col D A A
H6 : eq A A
H5 : nCol A A D
H4 : eq A B
H3 : nCol A B D
H2 : or (eq A B)\n (or (eq A C)\n (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).

*****
H4 : not (eq A B)
H3 : nCol A B D
H2 : or (eq A B)\n (or (eq A C)\n (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per C B D
+++++
assert (Per D B A) by (conclude lemma_8_2).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).

*****
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H2 : or (eq A B)\n (or (eq A C)\n (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per C B D
+++++
assert (Per D B C).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).

*****
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H2 : or (eq A B)\n (or (eq A C)\n (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
by cases on (eq A B \/ eq A C \/ eq B C \/ BetS B A C \/ BetS A B C \/ BetS A C B).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).

*****
H6 : eq A B
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (~ ~ Per D B C).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (~ ~ Per D B C).

*****
H6 : eq A B
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (not (Per D B C))
+++++
intro.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (~ ~ Per D B C).
intro.

*****
H2 : not (Per D B C)
H6 : eq A B
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col A B D) by (conclude_def Col ).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (~ ~ Per D B C).
intro.
assert (Col A B D) by (conclude_def Col ).

*****
H7 : Col A B D
H2 : not (Per D B C)
H6 : eq A B
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (~ ~ Per D B C).

*****
H2 : not (not (Per D B C))
H6 : eq A B
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
close.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).

*****
H7 : eq A C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (Per D B C) by (conclude cn_equalitysub).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (Per D B C) by (conclude cn_equalitysub).

*****
H2 : Per D B C
H7 : eq A C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
close.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).

*****
H6 : eq B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (~ ~ Per D B C).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (~ ~ Per D B C).

*****
H6 : eq B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (not (Per D B C))
+++++
intro.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (~ ~ Per D B C).
intro.

*****
H2 : not (Per D B C)
H6 : eq B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (eq C B) by (conclude lemma_equalitysymmetric).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (~ ~ Per D B C).
intro.
assert (eq C B) by (conclude lemma_equalitysymmetric).

*****
H7 : eq C B
H2 : not (Per D B C)
H6 : eq B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (~ ~ Per D B C).

*****
H2 : not (not (Per D B C))
H6 : eq B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
close.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).

*****
H7 : BetS B A C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (neq B A) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (neq B A) by (conclude lemma_inequalitysymmetric).

*****
H2 : neq B A
H7 : BetS B A C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (Out B A C) by (conclude lemma_ray4).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out B A C) by (conclude lemma_ray4).

*****
H6 : Out B A C
H2 : neq B A
H7 : BetS B A C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (Per D B C) by (conclude lemma_8_3).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (neq B A) by (conclude lemma_inequalitysymmetric).
assert (Out B A C) by (conclude lemma_ray4).
assert (Per D B C) by (conclude lemma_8_3).

*****
H8 : Per D B C
H6 : Out B A C
H2 : neq B A
H7 : BetS B A C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
close.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).

*****
H6 : BetS A B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
let Tf:=fresh in assert (Tf:exists E, (BetS A B E /\ Cong A B E B /\ Cong A D E D /\ neq B D)) by (conclude_def Per );destruct Tf as [E];spliter.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
let Tf:=fresh in assert (Tf:exists E, (BetS A B E /\\ Cong A B E B /\\ Cong A D E D /\\ neq B D)) by (conclude_def Per );destruct Tf as [E];spliter.

*****
H9 : neq B D
H8 : Cong A D E D
H7 : Cong A B E B
H2 : BetS A B E
E : Point
H6 : BetS A B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (BetS E B A) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
let Tf:=fresh in assert (Tf:exists E, (BetS A B E /\\ Cong A B E B /\\ Cong A D E D /\\ neq B D)) by (conclude_def Per );destruct Tf as [E];spliter.
assert (BetS E B A) by (conclude axiom_betweennesssymmetry).

*****
H10 : BetS E B A
H9 : neq B D
H8 : Cong A D E D
H7 : Cong A B E B
H2 : BetS A B E
E : Point
H6 : BetS A B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (Cong E B A B) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
let Tf:=fresh in assert (Tf:exists E, (BetS A B E /\\ Cong A B E B /\\ Cong A D E D /\\ neq B D)) by (conclude_def Per );destruct Tf as [E];spliter.
assert (BetS E B A) by (conclude axiom_betweennesssymmetry).
assert (Cong E B A B) by (conclude lemma_congruencesymmetric).

*****
H11 : Cong E B A B
H10 : BetS E B A
H9 : neq B D
H8 : Cong A D E D
H7 : Cong A B E B
H2 : BetS A B E
E : Point
H6 : BetS A B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (Cong E D A D) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
let Tf:=fresh in assert (Tf:exists E, (BetS A B E /\\ Cong A B E B /\\ Cong A D E D /\\ neq B D)) by (conclude_def Per );destruct Tf as [E];spliter.
assert (BetS E B A) by (conclude axiom_betweennesssymmetry).
assert (Cong E B A B) by (conclude lemma_congruencesymmetric).
assert (Cong E D A D) by (conclude lemma_congruencesymmetric).

*****
H12 : Cong E D A D
H11 : Cong E B A B
H10 : BetS E B A
H9 : neq B D
H8 : Cong A D E D
H7 : Cong A B E B
H2 : BetS A B E
E : Point
H6 : BetS A B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (Per E B D) by (conclude_def Per ).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
let Tf:=fresh in assert (Tf:exists E, (BetS A B E /\\ Cong A B E B /\\ Cong A D E D /\\ neq B D)) by (conclude_def Per );destruct Tf as [E];spliter.
assert (BetS E B A) by (conclude axiom_betweennesssymmetry).
assert (Cong E B A B) by (conclude lemma_congruencesymmetric).
assert (Cong E D A D) by (conclude lemma_congruencesymmetric).
assert (Per E B D) by (conclude_def Per ).

*****
H13 : Per E B D
H12 : Cong E D A D
H11 : Cong E B A B
H10 : BetS E B A
H9 : neq B D
H8 : Cong A D E D
H7 : Cong A B E B
H2 : BetS A B E
E : Point
H6 : BetS A B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (Per D B E) by (conclude lemma_8_2).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
let Tf:=fresh in assert (Tf:exists E, (BetS A B E /\\ Cong A B E B /\\ Cong A D E D /\\ neq B D)) by (conclude_def Per );destruct Tf as [E];spliter.
assert (BetS E B A) by (conclude axiom_betweennesssymmetry).
assert (Cong E B A B) by (conclude lemma_congruencesymmetric).
assert (Cong E D A D) by (conclude lemma_congruencesymmetric).
assert (Per E B D) by (conclude_def Per ).
assert (Per D B E) by (conclude lemma_8_2).

*****
H14 : Per D B E
H13 : Per E B D
H12 : Cong E D A D
H11 : Cong E B A B
H10 : BetS E B A
H9 : neq B D
H8 : Cong A D E D
H7 : Cong A B E B
H2 : BetS A B E
E : Point
H6 : BetS A B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (BetS A B E) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
let Tf:=fresh in assert (Tf:exists E, (BetS A B E /\\ Cong A B E B /\\ Cong A D E D /\\ neq B D)) by (conclude_def Per );destruct Tf as [E];spliter.
assert (BetS E B A) by (conclude axiom_betweennesssymmetry).
assert (Cong E B A B) by (conclude lemma_congruencesymmetric).
assert (Cong E D A D) by (conclude lemma_congruencesymmetric).
assert (Per E B D) by (conclude_def Per ).
assert (Per D B E) by (conclude lemma_8_2).
assert (BetS A B E) by (conclude axiom_betweennesssymmetry).

*****
H15 : BetS A B E
H14 : Per D B E
H13 : Per E B D
H12 : Cong E D A D
H11 : Cong E B A B
H10 : BetS E B A
H9 : neq B D
H8 : Cong A D E D
H7 : Cong A B E B
H2 : BetS A B E
E : Point
H6 : BetS A B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (Out B E C) by (conclude_def Out ).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
let Tf:=fresh in assert (Tf:exists E, (BetS A B E /\\ Cong A B E B /\\ Cong A D E D /\\ neq B D)) by (conclude_def Per );destruct Tf as [E];spliter.
assert (BetS E B A) by (conclude axiom_betweennesssymmetry).
assert (Cong E B A B) by (conclude lemma_congruencesymmetric).
assert (Cong E D A D) by (conclude lemma_congruencesymmetric).
assert (Per E B D) by (conclude_def Per ).
assert (Per D B E) by (conclude lemma_8_2).
assert (BetS A B E) by (conclude axiom_betweennesssymmetry).
assert (Out B E C) by (conclude_def Out ).

*****
H16 : Out B E C
H15 : BetS A B E
H14 : Per D B E
H13 : Per E B D
H12 : Cong E D A D
H11 : Cong E B A B
H10 : BetS E B A
H9 : neq B D
H8 : Cong A D E D
H7 : Cong A B E B
H2 : BetS A B E
E : Point
H6 : BetS A B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (Per D B C) by (conclude lemma_8_3).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
let Tf:=fresh in assert (Tf:exists E, (BetS A B E /\\ Cong A B E B /\\ Cong A D E D /\\ neq B D)) by (conclude_def Per );destruct Tf as [E];spliter.
assert (BetS E B A) by (conclude axiom_betweennesssymmetry).
assert (Cong E B A B) by (conclude lemma_congruencesymmetric).
assert (Cong E D A D) by (conclude lemma_congruencesymmetric).
assert (Per E B D) by (conclude_def Per ).
assert (Per D B E) by (conclude lemma_8_2).
assert (BetS A B E) by (conclude axiom_betweennesssymmetry).
assert (Out B E C) by (conclude_def Out ).
assert (Per D B C) by (conclude lemma_8_3).

*****
H17 : Per D B C
H16 : Out B E C
H15 : BetS A B E
H14 : Per D B E
H13 : Per E B D
H12 : Cong E D A D
H11 : Cong E B A B
H10 : BetS E B A
H9 : neq B D
H8 : Cong A D E D
H7 : Cong A B E B
H2 : BetS A B E
E : Point
H6 : BetS A B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
close.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).

*****
H6 : BetS A C B
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (BetS B C A) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (BetS B C A) by (conclude axiom_betweennesssymmetry).

*****
H2 : BetS B C A
H6 : BetS A C B
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (neq C B) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (BetS B C A) by (conclude axiom_betweennesssymmetry).
assert (neq C B) by (forward_using lemma_betweennotequal).

*****
H7 : neq C B
H2 : BetS B C A
H6 : BetS A C B
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (neq B C) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (BetS B C A) by (conclude axiom_betweennesssymmetry).
assert (neq C B) by (forward_using lemma_betweennotequal).
assert (neq B C) by (conclude lemma_inequalitysymmetric).

*****
H8 : neq B C
H7 : neq C B
H2 : BetS B C A
H6 : BetS A C B
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (Out B C A) by (conclude lemma_ray4).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (BetS B C A) by (conclude axiom_betweennesssymmetry).
assert (neq C B) by (forward_using lemma_betweennotequal).
assert (neq B C) by (conclude lemma_inequalitysymmetric).
assert (Out B C A) by (conclude lemma_ray4).

*****
H9 : Out B C A
H8 : neq B C
H7 : neq C B
H2 : BetS B C A
H6 : BetS A C B
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (Per D B A) by (conclude lemma_8_2).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (BetS B C A) by (conclude axiom_betweennesssymmetry).
assert (neq C B) by (forward_using lemma_betweennotequal).
assert (neq B C) by (conclude lemma_inequalitysymmetric).
assert (Out B C A) by (conclude lemma_ray4).
assert (Per D B A) by (conclude lemma_8_2).

*****
H10 : Per D B A
H9 : Out B C A
H8 : neq B C
H7 : neq C B
H2 : BetS B C A
H6 : BetS A C B
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (Out B A C) by (conclude lemma_ray5).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (BetS B C A) by (conclude axiom_betweennesssymmetry).
assert (neq C B) by (forward_using lemma_betweennotequal).
assert (neq B C) by (conclude lemma_inequalitysymmetric).
assert (Out B C A) by (conclude lemma_ray4).
assert (Per D B A) by (conclude lemma_8_2).
assert (Out B A C) by (conclude lemma_ray5).

*****
H11 : Out B A C
H10 : Per D B A
H9 : Out B C A
H8 : neq B C
H7 : neq C B
H2 : BetS B C A
H6 : BetS A C B
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
assert (Per D B C) by (conclude lemma_8_3).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (BetS B C A) by (conclude axiom_betweennesssymmetry).
assert (neq C B) by (forward_using lemma_betweennotequal).
assert (neq B C) by (conclude lemma_inequalitysymmetric).
assert (Out B C A) by (conclude lemma_ray4).
assert (Per D B A) by (conclude lemma_8_2).
assert (Out B A C) by (conclude lemma_ray5).
assert (Per D B C) by (conclude lemma_8_3).

*****
H12 : Per D B C
H11 : Out B A C
H10 : Per D B A
H9 : Out B C A
H8 : neq B C
H7 : neq C B
H2 : BetS B C A
H6 : BetS A C B
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per D B C
+++++
close.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).

*****
H6 : Per D B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H2 : or (eq A B)\n (or (eq A C)\n (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per C B D
+++++
assert (Per C B D) by (conclude lemma_8_2).
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (Per C B D) by (conclude lemma_8_2).

*****
H7 : Per C B D
H6 : Per D B C
H5 : Per D B A
H4 : not (eq A B)
H3 : nCol A B D
H2 : or (eq A B)\n (or (eq A C)\n (or (eq B C) (or (BetS B A C) (or (BetS A B C) (BetS A C B)))))
H1 : neq C B
H0 : Col A B C
H : Per A B D
A,B,C,D : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Per C B D
+++++
close.
-----
Lemma lemma_collinearright : forall A B C D, Per A B D -> Col A B C -> neq C B -> Per C B D.
Proof.
intros.
assert ((eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B)) by (conclude_def Col ).
assert (nCol A B D) by (conclude lemma_rightangleNC).
assert (~ eq A B).
assert (Per D B A) by (conclude lemma_8_2).
assert (Per D B C).
by cases on (eq A B \\/ eq A C \\/ eq B C \\/ BetS B A C \\/ BetS A B C \\/ BetS A C B).
assert (Per C B D) by (conclude lemma_8_2).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
