Require Export GeoCoq.Elements.OriginalProofs.lemma_extension.
-----
Section Euclid.
-----
Context `{Ax1:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_samesidereflexive : \n   forall A B P, \n   nCol A B P ->\n   OS P P A B.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.

*****
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
forall (A B P : Point) (_ : nCol A B P), OS P P A B
+++++
Proof.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.

*****
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
forall (A B P : Point) (_ : nCol A B P), OS P P A B
+++++
intros.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.

*****
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
OS P P A B
+++++
assert (eq A A).
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).

*****
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
eq A A
+++++
conclude cn_equalityreflexive.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).

*****
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
OS P P A B
+++++
idtac.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.

*****
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
OS P P A B
+++++
assert (~ eq P A).
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).

*****
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
not (eq P A)
+++++
intro.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
intro.

*****
H1 : eq P A
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col A B A).
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
intro.
assert (Col A B A).

*****
H1 : eq P A
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Col A B A
+++++
conclude_def Col .
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
intro.
assert (Col A B A).

*****
H2 : Col A B A
H1 : eq P A
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
intro.
assert (Col A B A).
idtac.

*****
H2 : Col A B A
H1 : eq P A
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
assert (Col A B P).
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
intro.
assert (Col A B A).
idtac.
assert (Col A B P).

*****
H2 : Col A B A
H1 : eq P A
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Col A B P
+++++
conclude cn_equalitysub.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
intro.
assert (Col A B A).
idtac.
assert (Col A B P).

*****
H3 : Col A B P
H2 : Col A B A
H1 : eq P A
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
idtac.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
intro.
assert (Col A B A).
idtac.
assert (Col A B P).
idtac.

*****
H3 : Col A B P
H2 : Col A B A
H1 : eq P A
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).

*****
H1 : not (eq P A)
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
OS P P A B
+++++
assert (neq A P).
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
assert (neq A P).

*****
H1 : not (eq P A)
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
neq A P
+++++
conclude lemma_inequalitysymmetric.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
assert (neq A P).

*****
H2 : neq A P
H1 : not (eq P A)
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
OS P P A B
+++++
idtac.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
assert (neq A P).
idtac.

*****
H2 : neq A P
H1 : not (eq P A)
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
OS P P A B
+++++
let Tf:=fresh in assert (Tf:exists C, (BetS P A C /\ Cong A C A P)).
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
assert (neq A P).
idtac.
let Tf:=fresh in assert (Tf:exists C, (BetS P A C /\\ Cong A C A P)).

*****
H2 : neq A P
H1 : not (eq P A)
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
ex (fun C : Point => and (BetS P A C) (Cong A C A P))
+++++
conclude lemma_extension.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
assert (neq A P).
idtac.
let Tf:=fresh in assert (Tf:exists C, (BetS P A C /\\ Cong A C A P)).

*****
H3 : ex (fun C : Point => and (BetS P A C) (Cong A C A P))
H2 : neq A P
H1 : not (eq P A)
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
OS P P A B
+++++
idtac.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
assert (neq A P).
idtac.
let Tf:=fresh in assert (Tf:exists C, (BetS P A C /\\ Cong A C A P)).
idtac.

*****
H3 : ex (fun C : Point => and (BetS P A C) (Cong A C A P))
H2 : neq A P
H1 : not (eq P A)
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
OS P P A B
+++++
assert (Col A B A).
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
assert (neq A P).
idtac.
let Tf:=fresh in assert (Tf:exists C, (BetS P A C /\\ Cong A C A P)).
idtac.
assert (Col A B A).

*****
H3 : ex (fun C : Point => and (BetS P A C) (Cong A C A P))
H2 : neq A P
H1 : not (eq P A)
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
Col A B A
+++++
conclude_def Col .
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
assert (neq A P).
idtac.
let Tf:=fresh in assert (Tf:exists C, (BetS P A C /\\ Cong A C A P)).
idtac.
assert (Col A B A).

*****
H4 : Col A B A
H3 : ex (fun C : Point => and (BetS P A C) (Cong A C A P))
H2 : neq A P
H1 : not (eq P A)
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
OS P P A B
+++++
idtac.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
assert (neq A P).
idtac.
let Tf:=fresh in assert (Tf:exists C, (BetS P A C /\\ Cong A C A P)).
idtac.
assert (Col A B A).
idtac.

*****
H4 : Col A B A
H3 : ex (fun C : Point => and (BetS P A C) (Cong A C A P))
H2 : neq A P
H1 : not (eq P A)
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
OS P P A B
+++++
assert (OS P P A B).
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
assert (neq A P).
idtac.
let Tf:=fresh in assert (Tf:exists C, (BetS P A C /\\ Cong A C A P)).
idtac.
assert (Col A B A).
idtac.
assert (OS P P A B).

*****
H4 : Col A B A
H3 : ex (fun C : Point => and (BetS P A C) (Cong A C A P))
H2 : neq A P
H1 : not (eq P A)
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
OS P P A B
+++++
conclude_def OS .
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
assert (neq A P).
idtac.
let Tf:=fresh in assert (Tf:exists C, (BetS P A C /\\ Cong A C A P)).
idtac.
assert (Col A B A).
idtac.
assert (OS P P A B).

*****
H5 : OS P P A B
H4 : Col A B A
H3 : ex (fun C : Point => and (BetS P A C) (Cong A C A P))
H2 : neq A P
H1 : not (eq P A)
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
OS P P A B
+++++
idtac.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).
idtac.
assert (~ eq P A).
assert (neq A P).
idtac.
let Tf:=fresh in assert (Tf:exists C, (BetS P A C /\\ Cong A C A P)).
idtac.
assert (Col A B A).
idtac.
assert (OS P P A B).
idtac.

*****
H5 : OS P P A B
H4 : Col A B A
H3 : ex (fun C : Point => and (BetS P A C) (Cong A C A P))
H2 : neq A P
H1 : not (eq P A)
H0 : eq A A
H : nCol A B P
A,B,P : Point
Ax1 : euclidean_neutral_ruler_compass Ax
Ax : euclidean_neutral
*****
OS P P A B
+++++
close.
-----
Lemma lemma_samesidereflexive : forall A B P, nCol A B P -> OS P P A B.
Proof.
intros.
assert (eq A A).

*****

*****

+++++
Qed.
-----
End Euclid.
-----
