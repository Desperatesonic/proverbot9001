Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Annexes.saccheri.
-----
Require Import GeoCoq.Tarski_dev.Ch12_parallel.
-----
Section similar_rah.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma similar__rah_aux : forall A B C D E F,\n  ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E ->\n  LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D E F : Tpoint) (_ : not (Col A B C)) (_ : CongA A B C D E F) (_ : CongA B C A E F D) (_ : CongA C A B F D E) (_ : LeA B C A A B C) (_ : Lt D E A B), postulate_of_right_saccheri_quadrilaterals
+++++
Proof.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D E F : Tpoint) (_ : not (Col A B C)) (_ : CongA A B C D E F) (_ : CongA B C A E F D) (_ : CongA C A B F D E) (_ : LeA B C A A B C) (_ : Lt D E A B), postulate_of_right_saccheri_quadrilaterals
+++++
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.

*****
Hlt : Lt D E A B
Hlea : LeA B C A A B C
HCongaA : CongA C A B F D E
HCongaC : CongA B C A E F D
HCongaB : CongA A B C D E F
HNCol : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert_diffs.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.

*****
H3 : not (eq D E)
H0 : not (eq E F)
H : not (eq F D)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt D E A B
Hlea : LeA B C A A B C
HCongaA : CongA C A B F D E
HCongaC : CongA B C A E F D
HCongaB : CongA A B C D E F
HNCol : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
destruct (segment_construction_3 A B D E) as [G []]; auto.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.

*****
H6 : Cong A G D E
H5 : Out A B G
G : Tpoint
H3 : not (eq D E)
H0 : not (eq E F)
H : not (eq F D)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt D E A B
Hlea : LeA B C A A B C
HCongaA : CongA C A B F D E
HCongaC : CongA B C A E F D
HCongaB : CongA A B C D E F
HNCol : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
rename H into HFD.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.

*****
H6 : Cong A G D E
H5 : Out A B G
G : Tpoint
H3 : not (eq D E)
H0 : not (eq E F)
HFD : not (eq F D)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt D E A B
Hlea : LeA B C A A B C
HCongaA : CongA C A B F D E
HCongaC : CongA B C A E F D
HCongaB : CongA A B C D E F
HNCol : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
destruct (segment_construction_3 A C D F) as [H []]; auto.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.

*****
H8 : Cong A H D F
H7 : Out A C H
H : Tpoint
H6 : Cong A G D E
H5 : Out A B G
G : Tpoint
H3 : not (eq D E)
H0 : not (eq E F)
HFD : not (eq F D)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt D E A B
Hlea : LeA B C A A B C
HCongaA : CongA C A B F D E
HCongaC : CongA B C A E F D
HCongaB : CongA A B C D E F
HNCol : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.

*****
H8 : Cong A H D F
H7 : Out A C H
H : Tpoint
H6 : Cong A G D E
H5 : Out A B G
H3 : not (eq D E)
H0 : not (eq E F)
HFD : not (eq F D)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
G : Tpoint
Hlea : LeA B C A A B C
HCongaA : CongA C A B F D E
HCongaC : CongA B C A E F D
HCongaB : CongA A B C D E F
HNCol : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).

*****
H9 : Bet A G B
H8 : Cong A H D F
H7 : Out A C H
H : Tpoint
H6 : Cong A G D E
H5 : Out A B G
H3 : not (eq D E)
H0 : not (eq E F)
HFD : not (eq F D)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
G : Tpoint
Hlea : LeA B C A A B C
HCongaA : CongA C A B F D E
HCongaC : CongA B C A E F D
HCongaB : CongA A B C D E F
HNCol : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).

*****
H10 : not (eq B G)
H9 : Bet A G B
H8 : Cong A H D F
H7 : Out A C H
H : Tpoint
H6 : Cong A G D E
H5 : Out A B G
H3 : not (eq D E)
H0 : not (eq E F)
HFD : not (eq F D)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
G : Tpoint
Hlea : LeA B C A A B C
HCongaA : CongA C A B F D E
HCongaC : CongA B C A E F D
HCongaB : CongA A B C D E F
HNCol : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).

*****
HCongaA' : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H8 : Cong A H D F
H7 : Out A C H
H : Tpoint
H6 : Cong A G D E
H5 : Out A B G
H3 : not (eq D E)
H0 : not (eq E F)
HFD : not (eq F D)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
G : Tpoint
Hlea : LeA B C A A B C
HCongaA : CongA C A B F D E
HCongaC : CongA B C A E F D
HCongaB : CongA A B C D E F
HNCol : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.

*****
HCongaA' : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H8 : Cong A H D F
H7 : Out A C H
H : Tpoint
H6 : Cong A G D E
H5 : Out A B G
H3 : not (eq D E)
H0 : not (eq E F)
HFD : not (eq F D)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
G : Tpoint
Hlea : LeA B C A A B C
HCongaA : CongA C A B F D E
HCongaC : CongA B C A E F D
HCongaB : CongA A B C D E F
HNCol : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA F D E H A G
+++++
apply (conga_trans _ _ _ C A B); CongA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.

*****
HConga2 : CongA D E F A G H
HConga1 : CongA D F E A H G
HCongaA' : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H8 : Cong A H D F
H7 : Out A C H
H : Tpoint
H6 : Cong A G D E
H5 : Out A B G
H3 : not (eq D E)
H0 : not (eq E F)
HFD : not (eq F D)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
G : Tpoint
Hlea : LeA B C A A B C
HCongaA : CongA C A B F D E
HCongaC : CongA B C A E F D
HCongaB : CongA A B C D E F
HNCol : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.

*****
HConga2 : CongA D E F A G H
HConga1 : CongA D F E A H G
HCongaA' : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H8 : Cong A H D F
H7 : Out A C H
H6 : Cong A G D E
H5 : Out A B G
H3 : not (eq D E)
H0 : not (eq E F)
HFD : not (eq F D)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaA : CongA C A B F D E
HCongaC : CongA B C A E F D
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.

*****
HConga2 : CongA D E F A G H
HConga1 : CongA D F E A H G
HCongaA' : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H8 : Cong A H D F
H7 : Out A C H
H6 : Cong A G D E
H5 : Out A B G
H3 : not (eq D E)
H0 : not (eq E F)
HFD : not (eq F D)
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaA : CongA C A B F D E
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
clear dependent D; clear dependent E; clear dependent F.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.

*****
HCongaA' : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
rename HCongaA' into HCongaA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.

*****
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).

*****
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).

*****
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(Par_strict G H B C).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).

*****
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par_strict G H B C
+++++
apply (par_not_col_strict _ _ _ _ B); Col.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
apply (par_not_col_strict _ _ _ _ B); Col.

*****
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par G H B C
+++++
apply par_symmetry.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
apply (par_not_col_strict _ _ _ _ B); Col.
apply par_symmetry.

*****
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par B C G H
+++++
apply (l12_22_b _ _ _ _ A); CongA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
apply (par_not_col_strict _ _ _ _ B); Col.
apply par_symmetry.
apply (l12_22_b _ _ _ _ A); CongA.

*****
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS A B C H
+++++
apply out_one_side; auto.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).

*****
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).

*****
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).

*****
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).

*****
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert_diffs.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.

*****
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(Out C H A).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).

*****
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out C H A
+++++
apply (col_one_side_out _ B); Col.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
apply (col_one_side_out _ B); Col.

*****
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS C B H A
+++++
apply invert_one_side.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
apply (col_one_side_out _ B); Col.
apply invert_one_side.

*****
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B C H A
+++++
apply (one_side_transitivity _ _ _ G).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
apply (col_one_side_out _ B); Col.
apply invert_one_side.
apply (one_side_transitivity _ _ _ G).

*****
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B C H G
+++++
apply l12_6; Par.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
apply (col_one_side_out _ B); Col.
apply invert_one_side.
apply (one_side_transitivity _ _ _ G).
apply l12_6; Par.

*****
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B C G A
+++++
apply out_one_side; Col; apply bet_out; Between.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).

*****
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).

*****
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(SAMS B G H H C B).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).

*****
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SAMS B G H H C B
+++++
apply (sams_chara _ _ _ _ _ _ A); Between.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
apply (sams_chara _ _ _ _ _ _ A); Between.

*****
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA H C B H G A
+++++
apply (l11_30 B C A A B C); auto; apply conga_right_comm; auto.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
apply (sams_chara _ _ _ _ _ _ A); Between.
apply (l11_30 B C A A B C); auto; apply conga_right_comm; auto.

*****
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA B C A B C H
+++++
apply (out_conga B C H B C H); try (apply out_trivial); CongA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).

*****
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(CongA A G H G B C).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).

*****
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA A G H G B C
+++++
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.

*****
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(CongA G H A B C H).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).

*****
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
CongA G H A B C H
+++++
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.

*****
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(TS G H A B) by (repeat split; auto; exists G; Col).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).

*****
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(TS G H A C) by (repeat split; Col; exists H; Col).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).

*****
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(TS C G B H).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).

*****
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
TS C G B H
+++++
apply l9_31; eauto with side.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
apply l9_31; eauto with side.

*****
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS C H G B
+++++
apply (col_one_side _ A); Col.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
apply l9_31; eauto with side.
apply (col_one_side _ A); Col.

*****
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS C A G B
+++++
apply invert_one_side; apply out_one_side; try (apply l6_6); Col.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).

*****
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(SAMS B G H C B G).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).

*****
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SAMS B G H C B G
+++++
apply (conga2_sams__sams B G H H G A); CongA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
apply (conga2_sams__sams B G H H G A); CongA.

*****
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SAMS B G H H G A
+++++
repeat split; auto.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
apply (conga2_sams__sams B G H H G A); CongA.
repeat split; auto.

*****
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Out G H A) (not (Bet B G H))
+++++
right; intro; Col.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
apply (conga2_sams__sams B G H H G A); CongA.
repeat split; auto.
right; intro; Col.

*****
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun J : Tpoint => and (CongA H G J H G A) (and (not (OS G H B J)) (and (not (TS B G H J)) (Coplanar B G H J))))
+++++
exists A; split; CongA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
apply (conga2_sams__sams B G H H G A); CongA.
repeat split; auto.
right; intro; Col.
exists A; split; CongA.

*****
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (OS G H B A)) (and (not (TS B G H A)) (Coplanar B G H A))
+++++
split; Side.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
apply (conga2_sams__sams B G H H G A); CongA.
repeat split; auto.
right; intro; Col.
exists A; split; CongA.
split; Side.

*****
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (TS B G H A)) (Coplanar B G H A)
+++++
split; Cop.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
apply (conga2_sams__sams B G H H G A); CongA.
repeat split; auto.
right; intro; Col.
exists A; split; CongA.
split; Side.
split; Cop.

*****
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (TS B G H A)
+++++
intro Hts.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
apply (conga2_sams__sams B G H H G A); CongA.
repeat split; auto.
right; intro; Col.
exists A; split; CongA.
split; Side.
split; Cop.
intro Hts.

*****
Hts : TS B G H A
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct Hts as [_ []]; Col.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).

*****
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(SAMS C H G B C H).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).

*****
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SAMS C H G B C H
+++++
apply (conga2_sams__sams C H G G H A); CongA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
apply (conga2_sams__sams C H G G H A); CongA.

*****
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SAMS C H G G H A
+++++
repeat split; auto.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
apply (conga2_sams__sams C H G G H A); CongA.
repeat split; auto.

*****
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Out H G A) (not (Bet C H G))
+++++
right; intro; apply HNCol3; Col.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
apply (conga2_sams__sams C H G G H A); CongA.
repeat split; auto.
right; intro; apply HNCol3; Col.

*****
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun J : Tpoint => and (CongA G H J G H A) (and (not (OS H G C J)) (and (not (TS C H G J)) (Coplanar C H G J))))
+++++
exists A; split; CongA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
apply (conga2_sams__sams C H G G H A); CongA.
repeat split; auto.
right; intro; apply HNCol3; Col.
exists A; split; CongA.

*****
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (OS H G C A)) (and (not (TS C H G A)) (Coplanar C H G A))
+++++
split; Side.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
apply (conga2_sams__sams C H G G H A); CongA.
repeat split; auto.
right; intro; apply HNCol3; Col.
exists A; split; CongA.
split; Side.

*****
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (TS C H G A)) (Coplanar C H G A)
+++++
split; Cop.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
apply (conga2_sams__sams C H G G H A); CongA.
repeat split; auto.
right; intro; apply HNCol3; Col.
exists A; split; CongA.
split; Side.
split; Cop.

*****
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (TS C H G A)
+++++
intro Hts.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
apply (conga2_sams__sams C H G G H A); CongA.
repeat split; auto.
right; intro; apply HNCol3; Col.
exists A; split; CongA.
split; Side.
split; Cop.
intro Hts.

*****
Hts : TS C H G A
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct Hts as [_ []]; Col.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).

*****
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.

*****
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.

*****
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
suma.assert_diffs.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.

*****
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.

*****
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.

*****
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.

*****
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
suma.assert_diffs.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.

*****
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert(HInter : SAMS I J K L M N /\ SumA H G B B C H U V W).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).

*****
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (SAMS I J K L M N) (SumA H G B B C H U V W)
+++++
assert(SAMS H G B B C G).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).

*****
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SAMS H G B B C G
+++++
apply (sams_lea2__sams _ _ _ _ _ _ H G B B C H); try (apply lea_refl); SumA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
apply (sams_lea2__sams _ _ _ _ _ _ H G B B C H); try (apply lea_refl); SumA.

*****
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA B C G B C H
+++++
exists G; split; CongA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
apply (sams_lea2__sams _ _ _ _ _ _ H G B B C H); try (apply lea_refl); SumA.
exists G; split; CongA.

*****
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
InAngle G B C H
+++++
apply os_ts__inangle; SumA; eauto with side.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).

*****
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (SAMS I J K L M N) (SumA H G B B C H U V W)
+++++
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.

*****
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (SAMS I J K L M N) (SumA H G B B C H U V W)
+++++
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).

*****
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (SAMS I J K L M N) (SumA H G B B C H U V W)
+++++
assert(SAMS B G C C G H).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).

*****
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SAMS B G C C G H
+++++
repeat split; auto.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
repeat split; auto.

*****
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
or (Out G C H) (not (Bet B G C))
+++++
right; intro; apply HNCol4; Col.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
repeat split; auto.
right; intro; apply HNCol4; Col.

*****
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun J : Tpoint => and (CongA C G J C G H) (and (not (OS G C B J)) (and (not (TS B G C J)) (Coplanar B G C J))))
+++++
exists H; split; CongA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
repeat split; auto.
right; intro; apply HNCol4; Col.
exists H; split; CongA.

*****
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (OS G C B H)) (and (not (TS B G C H)) (Coplanar B G C H))
+++++
split; Side.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
repeat split; auto.
right; intro; apply HNCol4; Col.
exists H; split; CongA.
split; Side.

*****
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (not (TS B G C H)) (Coplanar B G C H)
+++++
split; Cop.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
repeat split; auto.
right; intro; apply HNCol4; Col.
exists H; split; CongA.
split; Side.
split; Cop.

*****
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (TS B G C H)
+++++
apply l9_9_bis.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
repeat split; auto.
right; intro; apply HNCol4; Col.
exists H; split; CongA.
split; Side.
split; Cop.
apply l9_9_bis.

*****
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B G C H
+++++
apply (col_one_side _ A); Col.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
repeat split; auto.
right; intro; apply HNCol4; Col.
exists H; split; CongA.
split; Side.
split; Cop.
apply l9_9_bis.
apply (col_one_side _ A); Col.

*****
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
OS B A C H
+++++
apply invert_one_side, out_one_side; Col.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).

*****
H36 : SAMS B G C C G H
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (SAMS I J K L M N) (SumA H G B B C H U V W)
+++++
assert(SAMS I J K C G H) by (apply (sams_assoc B C G C G B _ _ _ _ _ _ H G B); SumA).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
assert(SAMS I J K C G H) by (apply (sams_assoc B C G C G B _ _ _ _ _ _ H G B); SumA).

*****
H37 : SAMS I J K C G H
H36 : SAMS B G C C G H
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (SAMS I J K L M N) (SumA H G B B C H U V W)
+++++
assert(SumA I J K C G H X Y Z) by (apply (suma_assoc B C G C G B _ _ _ _ _ _ _ _ _ H G B); SumA).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
assert(SAMS I J K C G H) by (apply (sams_assoc B C G C G B _ _ _ _ _ _ H G B); SumA).
assert(SumA I J K C G H X Y Z) by (apply (suma_assoc B C G C G B _ _ _ _ _ _ _ _ _ H G B); SumA).

*****
H43 : SumA I J K C G H X Y Z
H37 : SAMS I J K C G H
H36 : SAMS B G C C G H
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (SAMS I J K L M N) (SumA H G B B C H U V W)
+++++
assert(SAMS B C G H C G).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
assert(SAMS I J K C G H) by (apply (sams_assoc B C G C G B _ _ _ _ _ _ H G B); SumA).
assert(SumA I J K C G H X Y Z) by (apply (suma_assoc B C G C G B _ _ _ _ _ _ _ _ _ H G B); SumA).
assert(SAMS B C G H C G).

*****
H43 : SumA I J K C G H X Y Z
H37 : SAMS I J K C G H
H36 : SAMS B G C C G H
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SAMS B C G H C G
+++++
repeat split; auto; [right; intro; Col|exists H; split; CongA; repeat split; Side; Cop].
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
assert(SAMS I J K C G H) by (apply (sams_assoc B C G C G B _ _ _ _ _ _ H G B); SumA).
assert(SumA I J K C G H X Y Z) by (apply (suma_assoc B C G C G B _ _ _ _ _ _ _ _ _ H G B); SumA).
assert(SAMS B C G H C G).
repeat split; auto; [right; intro; Col|exists H; split; CongA; repeat split; Side; Cop].

*****
H45 : SAMS B C G H C G
H43 : SumA I J K C G H X Y Z
H37 : SAMS I J K C G H
H36 : SAMS B G C C G H
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (SAMS I J K L M N) (SumA H G B B C H U V W)
+++++
assert(SumA B C G H C G H C B) by (exists H; repeat (split; CongA); Side; Cop).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
assert(SAMS I J K C G H) by (apply (sams_assoc B C G C G B _ _ _ _ _ _ H G B); SumA).
assert(SumA I J K C G H X Y Z) by (apply (suma_assoc B C G C G B _ _ _ _ _ _ _ _ _ H G B); SumA).
assert(SAMS B C G H C G).
repeat split; auto; [right; intro; Col|exists H; split; CongA; repeat split; Side; Cop].
assert(SumA B C G H C G H C B) by (exists H; repeat (split; CongA); Side; Cop).

*****
H46 : SumA B C G H C G H C B
H45 : SAMS B C G H C G
H43 : SumA I J K C G H X Y Z
H37 : SAMS I J K C G H
H36 : SAMS B G C C G H
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (SAMS I J K L M N) (SumA H G B B C H U V W)
+++++
split.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
assert(SAMS I J K C G H) by (apply (sams_assoc B C G C G B _ _ _ _ _ _ H G B); SumA).
assert(SumA I J K C G H X Y Z) by (apply (suma_assoc B C G C G B _ _ _ _ _ _ _ _ _ H G B); SumA).
assert(SAMS B C G H C G).
repeat split; auto; [right; intro; Col|exists H; split; CongA; repeat split; Side; Cop].
assert(SumA B C G H C G H C B) by (exists H; repeat (split; CongA); Side; Cop).
split.

*****
H46 : SumA B C G H C G H C B
H45 : SAMS B C G H C G
H43 : SumA I J K C G H X Y Z
H37 : SAMS I J K C G H
H36 : SAMS B G C C G H
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SAMS I J K L M N
+++++
-
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
assert(SAMS I J K C G H) by (apply (sams_assoc B C G C G B _ _ _ _ _ _ H G B); SumA).
assert(SumA I J K C G H X Y Z) by (apply (suma_assoc B C G C G B _ _ _ _ _ _ _ _ _ H G B); SumA).
assert(SAMS B C G H C G).
repeat split; auto; [right; intro; Col|exists H; split; CongA; repeat split; Side; Cop].
assert(SumA B C G H C G H C B) by (exists H; repeat (split; CongA); Side; Cop).
split.
-

*****
H46 : SumA B C G H C G H C B
H45 : SAMS B C G H C G
H43 : SumA I J K C G H X Y Z
H37 : SAMS I J K C G H
H36 : SAMS B G C C G H
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SAMS I J K L M N
+++++
assert(SAMS X Y Z H C G) by (apply (sams_assoc H G B B C G _ _ _ _ _ _ H C B); SumA).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
assert(SAMS I J K C G H) by (apply (sams_assoc B C G C G B _ _ _ _ _ _ H G B); SumA).
assert(SumA I J K C G H X Y Z) by (apply (suma_assoc B C G C G B _ _ _ _ _ _ _ _ _ H G B); SumA).
assert(SAMS B C G H C G).
repeat split; auto; [right; intro; Col|exists H; split; CongA; repeat split; Side; Cop].
assert(SumA B C G H C G H C B) by (exists H; repeat (split; CongA); Side; Cop).
split.
-
assert(SAMS X Y Z H C G) by (apply (sams_assoc H G B B C G _ _ _ _ _ _ H C B); SumA).

*****
H47 : SAMS X Y Z H C G
H46 : SumA B C G H C G H C B
H45 : SAMS B C G H C G
H43 : SumA I J K C G H X Y Z
H37 : SAMS I J K C G H
H36 : SAMS B G C C G H
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SAMS I J K L M N
+++++
apply (sams_assoc _ _ _ C G H H C G X Y Z); SumA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
assert(SAMS I J K C G H) by (apply (sams_assoc B C G C G B _ _ _ _ _ _ H G B); SumA).
assert(SumA I J K C G H X Y Z) by (apply (suma_assoc B C G C G B _ _ _ _ _ _ _ _ _ H G B); SumA).
assert(SAMS B C G H C G).
repeat split; auto; [right; intro; Col|exists H; split; CongA; repeat split; Side; Cop].
assert(SumA B C G H C G H C B) by (exists H; repeat (split; CongA); Side; Cop).
split.
-
assert(SAMS X Y Z H C G) by (apply (sams_assoc H G B B C G _ _ _ _ _ _ H C B); SumA).
apply (sams_assoc _ _ _ C G H H C G X Y Z); SumA.

*****

*****

+++++
-
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
assert(SAMS I J K C G H) by (apply (sams_assoc B C G C G B _ _ _ _ _ _ H G B); SumA).
assert(SumA I J K C G H X Y Z) by (apply (suma_assoc B C G C G B _ _ _ _ _ _ _ _ _ H G B); SumA).
assert(SAMS B C G H C G).
repeat split; auto; [right; intro; Col|exists H; split; CongA; repeat split; Side; Cop].
assert(SumA B C G H C G H C B) by (exists H; repeat (split; CongA); Side; Cop).
split.
-
assert(SAMS X Y Z H C G) by (apply (sams_assoc H G B B C G _ _ _ _ _ _ H C B); SumA).
apply (sams_assoc _ _ _ C G H H C G X Y Z); SumA.
-

*****
H46 : SumA B C G H C G H C B
H45 : SAMS B C G H C G
H43 : SumA I J K C G H X Y Z
H37 : SAMS I J K C G H
H36 : SAMS B G C C G H
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA H G B B C H U V W
+++++
assert(SumA X Y Z H C G U V W) by (apply (suma_assoc I J K C G H _ _ _ _ _ _ _ _ _ L M N); SumA).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
assert(SAMS H G B B C G).
destruct(ex_suma B C G H G B) as [X [Y [Z]]]; auto.
assert(SumA B G C C G H H G B) by (exists H; repeat (split; CongA); Side; Cop).
assert(SAMS B G C C G H).
assert(SAMS I J K C G H) by (apply (sams_assoc B C G C G B _ _ _ _ _ _ H G B); SumA).
assert(SumA I J K C G H X Y Z) by (apply (suma_assoc B C G C G B _ _ _ _ _ _ _ _ _ H G B); SumA).
assert(SAMS B C G H C G).
repeat split; auto; [right; intro; Col|exists H; split; CongA; repeat split; Side; Cop].
assert(SumA B C G H C G H C B) by (exists H; repeat (split; CongA); Side; Cop).
split.
-
assert(SAMS X Y Z H C G) by (apply (sams_assoc H G B B C G _ _ _ _ _ _ H C B); SumA).
apply (sams_assoc _ _ _ C G H H C G X Y Z); SumA.
-
assert(SumA X Y Z H C G U V W) by (apply (suma_assoc I J K C G H _ _ _ _ _ _ _ _ _ L M N); SumA).

*****
H47 : SumA X Y Z H C G U V W
H46 : SumA B C G H C G H C B
H45 : SAMS B C G H C G
H43 : SumA I J K C G H X Y Z
H37 : SAMS I J K C G H
H36 : SAMS B G C C G H
H34 : SumA B G C C G H H G B
H30 : SumA B C G H G B X Y Z
X,Y,Z : Tpoint
H29 : SAMS H G B B C G
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA H G B B C H U V W
+++++
apply (suma_assoc _ _ _ B C G H C G _ _ _ X Y Z); SumA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).

*****
HInter : and (SAMS I J K L M N) (SumA H G B B C H U V W)
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
destruct HInter.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.

*****
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
elim(saccheri_s_three_hypotheses).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).

*****
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : hypothesis_of_acute_saccheri_quadrilaterals, postulate_of_right_saccheri_quadrilaterals
+++++
-
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-

*****
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : hypothesis_of_acute_saccheri_quadrilaterals, postulate_of_right_saccheri_quadrilaterals
+++++
intro aah.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.

*****
aah : hypothesis_of_acute_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
exfalso.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.

*****
aah : hypothesis_of_acute_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply(nlta U V W).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).

*****
aah : hypothesis_of_acute_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA U V W U V W
+++++
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.

*****
aah : hypothesis_of_acute_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA I J K H G B
+++++
destruct (t22_14__sams_nbet aah C G B I J K O P Q) as [HIsi HNBet]; Col.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G B I J K O P Q) as [HIsi HNBet]; Col.

*****
HNBet : not (Bet O P Q)
HIsi : SAMS I J K G B C
aah : hypothesis_of_acute_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA I J K H G B
+++++
apply (sams_lea_lta789_suma2__lta123 _ _ _ G B C O P Q _ _ _ G B C A G B); Lea.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G B I J K O P Q) as [HIsi HNBet]; Col.
apply (sams_lea_lta789_suma2__lta123 _ _ _ G B C O P Q _ _ _ G B C A G B); Lea.

*****
HNBet : not (Bet O P Q)
HIsi : SAMS I J K G B C
aah : hypothesis_of_acute_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA O P Q A G B
+++++
split; eauto with lea; intro; apply HNBet; apply (bet_conga__bet A G B); CongA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G B I J K O P Q) as [HIsi HNBet]; Col.
apply (sams_lea_lta789_suma2__lta123 _ _ _ G B C O P Q _ _ _ G B C A G B); Lea.
split; eauto with lea; intro; apply HNBet; apply (bet_conga__bet A G B); CongA.

*****
HNBet : not (Bet O P Q)
HIsi : SAMS I J K G B C
aah : hypothesis_of_acute_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA H G B G B C A G B
+++++
apply (conga3_suma__suma B G H H G A A G B); CongA; exists A; repeat (split; CongA); Side; Cop.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.

*****
aah : hypothesis_of_acute_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA L M N B C H
+++++
destruct (t22_14__sams_nbet aah C G H L M N R S T) as [HIsi HNBet]; Col.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G H L M N R S T) as [HIsi HNBet]; Col.

*****
HNBet : not (Bet R S T)
HIsi : SAMS L M N G H C
aah : hypothesis_of_acute_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA L M N B C H
+++++
apply (sams_lea_lta789_suma2__lta123 _ _ _ G H C R S T _ _ _ G H C A H C); Lea.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G H L M N R S T) as [HIsi HNBet]; Col.
apply (sams_lea_lta789_suma2__lta123 _ _ _ G H C R S T _ _ _ G H C A H C); Lea.

*****
HNBet : not (Bet R S T)
HIsi : SAMS L M N G H C
aah : hypothesis_of_acute_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA R S T A H C
+++++
split; eauto with lea; intro; apply HNBet; apply (bet_conga__bet A H C); CongA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G H L M N R S T) as [HIsi HNBet]; Col.
apply (sams_lea_lta789_suma2__lta123 _ _ _ G H C R S T _ _ _ G H C A H C); Lea.
split; eauto with lea; intro; apply HNBet; apply (bet_conga__bet A H C); CongA.

*****
HNBet : not (Bet R S T)
HIsi : SAMS L M N G H C
aah : hypothesis_of_acute_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SumA B C H G H C A H C
+++++
apply (conga3_suma__suma A H G G H C A H C); CongA; exists C; repeat (split; CongA); Side; Cop.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G H L M N R S T) as [HIsi HNBet]; Col.
apply (sams_lea_lta789_suma2__lta123 _ _ _ G H C R S T _ _ _ G H C A H C); Lea.
split; eauto with lea; intro; apply HNBet; apply (bet_conga__bet A H C); CongA.
apply (conga3_suma__suma A H G G H C A H C); CongA; exists C; repeat (split; CongA); Side; Cop.

*****

*****

+++++
-
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G H L M N R S T) as [HIsi HNBet]; Col.
apply (sams_lea_lta789_suma2__lta123 _ _ _ G H C R S T _ _ _ G H C A H C); Lea.
split; eauto with lea; intro; apply HNBet; apply (bet_conga__bet A H C); CongA.
apply (conga3_suma__suma A H G G H C A H C); CongA; exists C; repeat (split; CongA); Side; Cop.
-

*****
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : or hypothesis_of_right_saccheri_quadrilaterals hypothesis_of_obtuse_saccheri_quadrilaterals, postulate_of_right_saccheri_quadrilaterals
+++++
intro HUn.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G H L M N R S T) as [HIsi HNBet]; Col.
apply (sams_lea_lta789_suma2__lta123 _ _ _ G H C R S T _ _ _ G H C A H C); Lea.
split; eauto with lea; intro; apply HNBet; apply (bet_conga__bet A H C); CongA.
apply (conga3_suma__suma A H G G H C A H C); CongA; exists C; repeat (split; CongA); Side; Cop.
-
intro HUn.

*****
HUn : or hypothesis_of_right_saccheri_quadrilaterals\n hypothesis_of_obtuse_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
destruct HUn as [|oah]; auto.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G H L M N R S T) as [HIsi HNBet]; Col.
apply (sams_lea_lta789_suma2__lta123 _ _ _ G H C R S T _ _ _ G H C A H C); Lea.
split; eauto with lea; intro; apply HNBet; apply (bet_conga__bet A H C); CongA.
apply (conga3_suma__suma A H G G H C A H C); CongA; exists C; repeat (split; CongA); Side; Cop.
-
intro HUn.
destruct HUn as [|oah]; auto.

*****
oah : hypothesis_of_obtuse_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
exfalso.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G H L M N R S T) as [HIsi HNBet]; Col.
apply (sams_lea_lta789_suma2__lta123 _ _ _ G H C R S T _ _ _ G H C A H C); Lea.
split; eauto with lea; intro; apply HNBet; apply (bet_conga__bet A H C); CongA.
apply (conga3_suma__suma A H G G H C A H C); CongA; exists C; repeat (split; CongA); Side; Cop.
-
intro HUn.
destruct HUn as [|oah]; auto.
exfalso.

*****
oah : hypothesis_of_obtuse_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply(nlta U V W).
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G H L M N R S T) as [HIsi HNBet]; Col.
apply (sams_lea_lta789_suma2__lta123 _ _ _ G H C R S T _ _ _ G H C A H C); Lea.
split; eauto with lea; intro; apply HNBet; apply (bet_conga__bet A H C); CongA.
apply (conga3_suma__suma A H G G H C A H C); CongA; exists C; repeat (split; CongA); Side; Cop.
-
intro HUn.
destruct HUn as [|oah]; auto.
exfalso.
apply(nlta U V W).

*****
oah : hypothesis_of_obtuse_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LtA U V W U V W
+++++
apply (sams_lta2_suma2__lta H G B B C H _ _ _ I J K L M N); SumA; apply nlea__lta; auto; intro.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G H L M N R S T) as [HIsi HNBet]; Col.
apply (sams_lea_lta789_suma2__lta123 _ _ _ G H C R S T _ _ _ G H C A H C); Lea.
split; eauto with lea; intro; apply HNBet; apply (bet_conga__bet A H C); CongA.
apply (conga3_suma__suma A H G G H C A H C); CongA; exists C; repeat (split; CongA); Side; Cop.
-
intro HUn.
destruct HUn as [|oah]; auto.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta H G B B C H _ _ _ I J K L M N); SumA; apply nlea__lta; auto; intro.

*****
H34 : LeA I J K H G B
oah : hypothesis_of_obtuse_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (t22_14__nsams oah C G B I J K); Col.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G H L M N R S T) as [HIsi HNBet]; Col.
apply (sams_lea_lta789_suma2__lta123 _ _ _ G H C R S T _ _ _ G H C A H C); Lea.
split; eauto with lea; intro; apply HNBet; apply (bet_conga__bet A H C); CongA.
apply (conga3_suma__suma A H G G H C A H C); CongA; exists C; repeat (split; CongA); Side; Cop.
-
intro HUn.
destruct HUn as [|oah]; auto.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta H G B B C H _ _ _ I J K L M N); SumA; apply nlea__lta; auto; intro.
apply (t22_14__nsams oah C G B I J K); Col.

*****
H34 : LeA I J K H G B
oah : hypothesis_of_obtuse_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SAMS I J K G B C
+++++
apply (sams_lea2__sams _ _ _ _ _ _ H G B G B C); Lea; SumA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G H L M N R S T) as [HIsi HNBet]; Col.
apply (sams_lea_lta789_suma2__lta123 _ _ _ G H C R S T _ _ _ G H C A H C); Lea.
split; eauto with lea; intro; apply HNBet; apply (bet_conga__bet A H C); CongA.
apply (conga3_suma__suma A H G G H C A H C); CongA; exists C; repeat (split; CongA); Side; Cop.
-
intro HUn.
destruct HUn as [|oah]; auto.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta H G B B C H _ _ _ I J K L M N); SumA; apply nlea__lta; auto; intro.

*****
H34 : LeA L M N B C H
oah : hypothesis_of_obtuse_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply (t22_14__nsams oah C G H L M N); Col.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G H L M N R S T) as [HIsi HNBet]; Col.
apply (sams_lea_lta789_suma2__lta123 _ _ _ G H C R S T _ _ _ G H C A H C); Lea.
split; eauto with lea; intro; apply HNBet; apply (bet_conga__bet A H C); CongA.
apply (conga3_suma__suma A H G G H C A H C); CongA; exists C; repeat (split; CongA); Side; Cop.
-
intro HUn.
destruct HUn as [|oah]; auto.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta H G B B C H _ _ _ I J K L M N); SumA; apply nlea__lta; auto; intro.
apply (t22_14__nsams oah C G H L M N); Col.

*****
H34 : LeA L M N B C H
oah : hypothesis_of_obtuse_saccheri_quadrilaterals
H30 : SumA H G B B C H U V W
H29 : SAMS I J K L M N
H44 : not (eq P Q)
H41 : not (eq O P)
H42 : not (eq S T)
H39 : not (eq R S)
H40 : not (eq V W)
H38 : not (eq U V)
H28 : SumA I J K L M N U V W
U,V,W : Tpoint
H27 : SumA L M N G H C R S T
R,S,T : Tpoint
H26 : SumA I J K G B C O P Q
O,P,Q : Tpoint
H35 : not (eq J K)
H32 : not (eq I J)
H33 : not (eq M N)
H31 : not (eq L M)
H25 : SumA H C G C G H L M N
L,M,N : Tpoint
H24 : SumA B C G C G B I J K
I,J,K : Tpoint
H23 : SAMS C H G B C H
H22 : SAMS B G H C B G
H21 : TS C G B H
H20 : TS G H A C
H19 : TS G H A B
H18 : CongA G H A B C H
H16 : CongA A G H G B C
H12 : SAMS B G H H C B
H6 : Bet A H C
H3 : Out C H A
H17 : not (eq A H)
H15 : not (eq A G)
H14 : not (eq G H)
H8 : not (eq C G)
H13 : not (eq H C)
H11 : not (eq H B)
HNCol5 : not (Col H B C)
HNCol4 : not (Col B C G)
HNCol3 : not (Col G H C)
H0 : Par_strict G H B C
HNCol2 : not (Col B G H)
HNCol1 : not (Col A G H)
HCongaA : CongA C A B H A G
H10 : not (eq B G)
H9 : Bet A G B
H7 : Out A C H
H5 : Out A B G
H4 : not (eq A C)
H1 : not (eq B C)
H2 : not (eq A B)
Hlt : Lt A G A B
Hlea : LeA B C A A B C
HCongaC : CongA B C A G H A
HCongaB : CongA A B C A G H
G,H : Tpoint
HNCol : not (Col A B C)
A,B,C : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
SAMS L M N G H C
+++++
apply (sams_lea2__sams _ _ _ _ _ _ B C H G H C); Lea; SumA.
-----
Lemma similar__rah_aux : forall A B C D E F, ~ Col A B C -> CongA A B C D E F -> CongA B C A E F D -> CongA C A B F D E -> LeA B C A A B C -> Lt D E A B -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intros A B C D E F HNCol HCongaB HCongaC HCongaA Hlea Hlt.
assert_diffs.
destruct (segment_construction_3 A B D E) as [G []]; auto.
rename H into HFD.
destruct (segment_construction_3 A C D F) as [H []]; auto.
apply (cong2_lt__lt _ _ _ _ A G A B) in Hlt; Cong.
assert(Bet A G B) by (apply (l6_13_1); Le; apply l6_6; auto).
assert(B <> G) by (intro; subst; destruct Hlt; Cong).
assert(HCongaA' : CongA C A B H A G) by (apply (out_conga C A B C A B); try (apply out_trivial); CongA).
destruct(l11_49 F D E H A G) as [_ [HConga1 HConga2]]; Cong.
apply (conga_trans _ _ _ C A B); CongA.
apply (conga_trans _ _ _ _ _ _ A G H) in HCongaB; auto.
apply (conga_trans _ _ _ _ _ _ G H A) in HCongaC; CongA.
clear dependent D; clear dependent E; clear dependent F.
rename HCongaA' into HCongaA.
assert(HNCol1 : ~ Col A G H) by (apply (ncol_conga_ncol A B C); auto).
assert(HNCol2 : ~ Col B G H) by (intro; apply HNCol1; ColR).
assert(Par_strict G H B C).
assert(HNCol3 : ~ Col G H C) by (apply (par_strict_not_col_4 _ _ B); auto).
assert(HNCol4 : ~ Col B C G) by (apply (par_strict_not_col_3 _ H); auto).
assert(HNCol5 : ~ Col H B C) by (apply (par_strict_not_col_2 G); auto).
assert_diffs.
assert(Out C H A).
assert(Bet A H C) by (apply out2__bet; apply l6_6; auto).
assert(SAMS B G H H C B).
assert(CongA A G H G B C).
apply (out_conga A G H A B C); try (apply out_trivial); CongA; apply l6_6; apply bet_out; Between.
assert(CongA G H A B C H).
apply (out_conga G H A B C A); try (apply out_trivial); CongA; apply l6_6; auto.
assert(TS G H A B) by (repeat split; auto; exists G; Col).
assert(TS G H A C) by (repeat split; Col; exists H; Col).
assert(TS C G B H).
assert(SAMS B G H C B G).
assert(SAMS C H G B C H).
destruct(ex_suma B C G C G B) as [I [J [K]]]; auto.
destruct(ex_suma H C G C G H) as [L [M [N]]]; auto.
suma.assert_diffs.
destruct(ex_suma I J K G B C) as [O [P [Q]]]; auto.
destruct(ex_suma L M N G H C) as [R [S [T]]]; auto.
destruct(ex_suma I J K L M N) as [U [V [W]]]; auto.
suma.assert_diffs.
assert(HInter : SAMS I J K L M N /\\ SumA H G B B C H U V W).
destruct HInter.
elim(saccheri_s_three_hypotheses).
-
intro aah.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta I J K L M N _ _ _ H G B B C H); SumA.
destruct (t22_14__sams_nbet aah C G H L M N R S T) as [HIsi HNBet]; Col.
apply (sams_lea_lta789_suma2__lta123 _ _ _ G H C R S T _ _ _ G H C A H C); Lea.
split; eauto with lea; intro; apply HNBet; apply (bet_conga__bet A H C); CongA.
apply (conga3_suma__suma A H G G H C A H C); CongA; exists C; repeat (split; CongA); Side; Cop.
-
intro HUn.
destruct HUn as [|oah]; auto.
exfalso.
apply(nlta U V W).
apply (sams_lta2_suma2__lta H G B B C H _ _ _ I J K L M N); SumA; apply nlea__lta; auto; intro.
apply (t22_14__nsams oah C G H L M N); Col.
apply (sams_lea2__sams _ _ _ _ _ _ B C H G H C); Lea; SumA.

*****

*****

+++++
Qed.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : postulate_of_existence_of_similar_triangles, postulate_of_right_saccheri_quadrilaterals
+++++
Proof.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : postulate_of_existence_of_similar_triangles, postulate_of_right_saccheri_quadrilaterals
+++++
intro similar.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.

*****
similar : postulate_of_existence_of_similar_triangles
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
destruct similar as [A [B [C [D [E [F]]]]]].
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].

*****
H : and (not (Col A B C))\n (and (not (Cong A B D E))\n (and (CongA A B C D E F)\n (and (CongA B C A E F D) (CongA C A B F D E))))
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
spliter.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.

*****
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
assert_diffs.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.

*****
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].

*****
H10 : LeA B C A A B C
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Le D E A B, postulate_of_right_saccheri_quadrilaterals
+++++
-
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-

*****
H10 : LeA B C A A B C
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Le D E A B, postulate_of_right_saccheri_quadrilaterals
+++++
intro.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.

*****
H11 : Le D E A B
H10 : LeA B C A A B C
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
apply (similar__rah_aux A B C D E F); auto.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.

*****
H11 : Le D E A B
H10 : LeA B C A A B C
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt D E A B
+++++
split; Cong.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.

*****

*****

+++++
-
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-

*****
H10 : LeA B C A A B C
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Le A B D E, postulate_of_right_saccheri_quadrilaterals
+++++
intro.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-
intro.

*****
H11 : Le A B D E
H10 : LeA B C A A B C
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
apply (similar__rah_aux D E F A B C); CongA.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-
intro.
apply (similar__rah_aux D E F A B C); CongA.

*****
H11 : Le A B D E
H10 : LeA B C A A B C
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col D E F)
+++++
apply (ncol_conga_ncol A B C); auto.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-
intro.
apply (similar__rah_aux D E F A B C); CongA.
apply (ncol_conga_ncol A B C); auto.

*****
H11 : Le A B D E
H10 : LeA B C A A B C
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA E F D D E F
+++++
apply (l11_30 B C A A B C); auto.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-
intro.
apply (similar__rah_aux D E F A B C); CongA.
apply (ncol_conga_ncol A B C); auto.
apply (l11_30 B C A A B C); auto.

*****
H11 : Le A B D E
H10 : LeA B C A A B C
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt A B D E
+++++
split; auto.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-
intro.
apply (similar__rah_aux D E F A B C); CongA.
apply (ncol_conga_ncol A B C); auto.
apply (l11_30 B C A A B C); auto.
split; auto.

*****

*****

+++++
-
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-
intro.
apply (similar__rah_aux D E F A B C); CongA.
apply (ncol_conga_ncol A B C); auto.
apply (l11_30 B C A A B C); auto.
split; auto.
-

*****
H10 : LeA A B C B C A
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Le D F A C, postulate_of_right_saccheri_quadrilaterals
+++++
intro.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-
intro.
apply (similar__rah_aux D E F A B C); CongA.
apply (ncol_conga_ncol A B C); auto.
apply (l11_30 B C A A B C); auto.
split; auto.
-
intro.

*****
H11 : Le D F A C
H10 : LeA A B C B C A
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
apply (similar__rah_aux A C B D F E); Col; CongA.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-
intro.
apply (similar__rah_aux D E F A B C); CongA.
apply (ncol_conga_ncol A B C); auto.
apply (l11_30 B C A A B C); auto.
split; auto.
-
intro.
apply (similar__rah_aux A C B D F E); Col; CongA.

*****
H11 : Le D F A C
H10 : LeA A B C B C A
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA C B A A C B
+++++
apply lea_comm; trivial.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-
intro.
apply (similar__rah_aux D E F A B C); CongA.
apply (ncol_conga_ncol A B C); auto.
apply (l11_30 B C A A B C); auto.
split; auto.
-
intro.
apply (similar__rah_aux A C B D F E); Col; CongA.
apply lea_comm; trivial.

*****
H11 : Le D F A C
H10 : LeA A B C B C A
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt D F A C
+++++
split; auto; intro; destruct(l11_50_1 A C B D F E); Col; CongA; Cong.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-
intro.
apply (similar__rah_aux D E F A B C); CongA.
apply (ncol_conga_ncol A B C); auto.
apply (l11_30 B C A A B C); auto.
split; auto.
-
intro.
apply (similar__rah_aux A C B D F E); Col; CongA.
apply lea_comm; trivial.
split; auto; intro; destruct(l11_50_1 A C B D F E); Col; CongA; Cong.

*****

*****

+++++
-
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-
intro.
apply (similar__rah_aux D E F A B C); CongA.
apply (ncol_conga_ncol A B C); auto.
apply (l11_30 B C A A B C); auto.
split; auto.
-
intro.
apply (similar__rah_aux A C B D F E); Col; CongA.
apply lea_comm; trivial.
split; auto; intro; destruct(l11_50_1 A C B D F E); Col; CongA; Cong.
-

*****
H10 : LeA A B C B C A
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Le A C D F, postulate_of_right_saccheri_quadrilaterals
+++++
intro.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-
intro.
apply (similar__rah_aux D E F A B C); CongA.
apply (ncol_conga_ncol A B C); auto.
apply (l11_30 B C A A B C); auto.
split; auto.
-
intro.
apply (similar__rah_aux A C B D F E); Col; CongA.
apply lea_comm; trivial.
split; auto; intro; destruct(l11_50_1 A C B D F E); Col; CongA; Cong.
-
intro.

*****
H11 : Le A C D F
H10 : LeA A B C B C A
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
postulate_of_right_saccheri_quadrilaterals
+++++
apply (similar__rah_aux D F E A C B); CongA.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-
intro.
apply (similar__rah_aux D E F A B C); CongA.
apply (ncol_conga_ncol A B C); auto.
apply (l11_30 B C A A B C); auto.
split; auto.
-
intro.
apply (similar__rah_aux A C B D F E); Col; CongA.
apply lea_comm; trivial.
split; auto; intro; destruct(l11_50_1 A C B D F E); Col; CongA; Cong.
-
intro.
apply (similar__rah_aux D F E A C B); CongA.

*****
H11 : Le A C D F
H10 : LeA A B C B C A
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (Col D F E)
+++++
apply (ncol_conga_ncol A C B); Col; CongA.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-
intro.
apply (similar__rah_aux D E F A B C); CongA.
apply (ncol_conga_ncol A B C); auto.
apply (l11_30 B C A A B C); auto.
split; auto.
-
intro.
apply (similar__rah_aux A C B D F E); Col; CongA.
apply lea_comm; trivial.
split; auto; intro; destruct(l11_50_1 A C B D F E); Col; CongA; Cong.
-
intro.
apply (similar__rah_aux D F E A C B); CongA.
apply (ncol_conga_ncol A C B); Col; CongA.

*****
H11 : Le A C D F
H10 : LeA A B C B C A
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
LeA F E D D F E
+++++
apply (l11_30 A B C B C A); CongA.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-
intro.
apply (similar__rah_aux D E F A B C); CongA.
apply (ncol_conga_ncol A B C); auto.
apply (l11_30 B C A A B C); auto.
split; auto.
-
intro.
apply (similar__rah_aux A C B D F E); Col; CongA.
apply lea_comm; trivial.
split; auto; intro; destruct(l11_50_1 A C B D F E); Col; CongA; Cong.
-
intro.
apply (similar__rah_aux D F E A C B); CongA.
apply (ncol_conga_ncol A C B); Col; CongA.
apply (l11_30 A B C B C A); CongA.

*****
H11 : Le A C D F
H10 : LeA A B C B C A
H8 : not (eq D E)
H5 : not (eq E F)
H4 : not (eq F D)
H9 : not (eq A C)
H6 : not (eq B C)
H7 : not (eq A B)
H3 : CongA C A B F D E
H2 : CongA B C A E F D
H1 : CongA A B C D E F
H0 : not (Cong A B D E)
H : not (Col A B C)
A,B,C,D,E,F : Tpoint
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt A C D F
+++++
split; auto; intro; destruct(l11_50_1 A C B D F E); Col; CongA; Cong.
-----
Lemma similar__rah : postulate_of_existence_of_similar_triangles -> postulate_of_right_saccheri_quadrilaterals.
Proof.
intro similar.
destruct similar as [A [B [C [D [E [F]]]]]].
spliter.
assert_diffs.
elim (lea_total B C A A B C); auto; intro; [elim (le_cases D E A B)|elim (le_cases D F A C)].
-
intro.
apply (similar__rah_aux A B C D E F); auto.
split; Cong.
-
intro.
apply (similar__rah_aux D E F A B C); CongA.
apply (ncol_conga_ncol A B C); auto.
apply (l11_30 B C A A B C); auto.
split; auto.
-
intro.
apply (similar__rah_aux A C B D F E); Col; CongA.
apply lea_comm; trivial.
split; auto; intro; destruct(l11_50_1 A C B D F E); Col; CongA; Cong.
-
intro.
apply (similar__rah_aux D F E A C B); CongA.
apply (ncol_conga_ncol A C B); Col; CongA.
apply (l11_30 A B C B C A); CongA.
split; auto; intro; destruct(l11_50_1 A C B D F E); Col; CongA; Cong.

*****

*****

+++++
Qed.
-----
End similar_rah.
-----
