Require Import GeoCoq.Axioms.continuity_axioms.
-----
Require Import GeoCoq.Meta_theory.Continuity.completeness.
-----
Require Import GeoCoq.Meta_theory.Continuity.grad.
-----
Require Import GeoCoq.Tarski_dev.Ch08_orthogonality.
-----
Section Line_extension.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma line_extension_symmetry : forall {Tm : Tarski_neutral_dimensionless}\n  (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> line_extension f Q P.
-----
Lemma line_extension_symmetry : forall {Tm : Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> line_extension f Q P.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint) (_ : line_extension f P Q), line_extension f Q P
+++++
Proof.
-----
Lemma line_extension_symmetry : forall {Tm : Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> line_extension f Q P.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint) (_ : line_extension f P Q), line_extension f Q P
+++++
intros Tm f P Q [HPQ [fInj [fBet fCong]]].
-----
Lemma line_extension_symmetry : forall {Tm : Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> line_extension f Q P.
Proof.
intros Tm f P Q [HPQ [fInj [fBet fCong]]].

*****
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
line_extension f Q P
+++++
repeat split; auto; intro; intros; [apply fInj|apply fBet|apply fCong]; Col.
-----
Lemma line_extension_symmetry : forall {Tm : Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> line_extension f Q P.
Proof.
intros Tm f P Q [HPQ [fInj [fBet fCong]]].
repeat split; auto; intro; intros; [apply fInj|apply fBet|apply fCong]; Col.

*****

*****

+++++
Qed.
-----
Lemma line_extension_stability : forall {Tm: Tarski_neutral_dimensionless}\n  (f : @Tpoint Tn -> @Tpoint Tm) P Q R,\n  Col P Q R -> P <> R -> line_extension f P Q -> line_extension f P R.
-----
Lemma line_extension_stability : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q R, Col P Q R -> P <> R -> line_extension f P Q -> line_extension f P R.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (f : forall _ : Tpoint, Tpoint) (P Q R : Tpoint) (_ : Col P Q R) (_ : not (eq P R)) (_ : line_extension f P Q), line_extension f P R
+++++
Proof.
-----
Lemma line_extension_stability : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q R, Col P Q R -> P <> R -> line_extension f P Q -> line_extension f P R.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (f : forall _ : Tpoint, Tpoint) (P Q R : Tpoint) (_ : Col P Q R) (_ : not (eq P R)) (_ : line_extension f P Q), line_extension f P R
+++++
intros Tm f P Q R HCol HPR [HPQ [fInj [fBet fCong]]].
-----
Lemma line_extension_stability : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q R, Col P Q R -> P <> R -> line_extension f P Q -> line_extension f P R.
Proof.
intros Tm f P Q R HCol HPR [HPQ [fInj [fBet fCong]]].

*****
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HPR : not (eq P R)
HCol : Col P Q R
P,Q,R : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
line_extension f P R
+++++
repeat split; auto; intro; intros; [apply fInj|apply fBet|apply fCong]; trivial; apply col_transitivity_1 with R; Col.
-----
Lemma line_extension_stability : forall {Tm: Tarski_neutral_dimensionless} (f : @Tpoint Tn -> @Tpoint Tm) P Q R, Col P Q R -> P <> R -> line_extension f P Q -> line_extension f P R.
Proof.
intros Tm f P Q R HCol HPR [HPQ [fInj [fBet fCong]]].
repeat split; auto; intro; intros; [apply fInj|apply fBet|apply fCong]; trivial; apply col_transitivity_1 with R; Col.

*****

*****

+++++
Qed.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless}\n  {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm}\n  (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q ->\n  forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint) (_ : line_extension f P Q) (A B C : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : Col P Q C) (_ : Bet (f A) (f B) (f C)), Bet A B C
+++++
Proof.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint) (_ : line_extension f P Q) (A B C : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : Col P Q C) (_ : Bet (f A) (f B) (f C)), Bet A B C
+++++
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.

*****
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].

*****
Heq : eq (f A) (f B)
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
apply fInj in Heq.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
apply fInj in Heq.

*****
Heq : eq A B
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
subst.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
apply fInj in Heq.
subst.

*****
HBet : Bet (f B) (f B) (f C)
HC : Col P Q C
HA,HB : Col P Q B
B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet B B C
+++++
Between.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
apply fInj in Heq.

*****
Heq : eq (f A) (f B)
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q A
+++++
subst.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
apply fInj in Heq.
subst.

*****
Heq : eq (f A) (f B)
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q A
+++++
Between.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
apply fInj in Heq.

*****
Heq : eq (f A) (f B)
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q B
+++++
subst.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
apply fInj in Heq.
subst.

*****
Heq : eq (f A) (f B)
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q B
+++++
Between.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].

*****
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
assert (A <> B).
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).

*****
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
intro.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
intro.

*****
H : eq A B
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
intro.
subst.

*****
HBet : Bet (f B) (f B) (f C)
Hdiff : not (eq (f B) (f B))
HC : Col P Q C
HA,HB : Col P Q B
B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).

*****
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
idtac.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.

*****
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
destruct (segment_construction A B B C) as [D [HD1 HD2]].
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].

*****
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
assert (C = D).
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).

*****
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq C D
+++++
idtac.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.

*****
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq C D
+++++
assert (Col P Q D).
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
assert (Col P Q D).

*****
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q D
+++++
apply (colx A B).
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
assert (Col P Q D).
apply (colx A B).

*****
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
Col.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
assert (Col P Q D).
apply (colx A B).

*****
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q A
+++++
Col.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
assert (Col P Q D).
apply (colx A B).

*****
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q B
+++++
Col.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
assert (Col P Q D).
apply (colx A B).

*****
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A B D
+++++
Col.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
assert (Col P Q D).

*****
H0 : Col P Q D
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq C D
+++++
idtac.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
assert (Col P Q D).
idtac.

*****
H0 : Col P Q D
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq C D
+++++
apply fInj.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
assert (Col P Q D).
idtac.
apply fInj.

*****
H0 : Col P Q D
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q C
+++++
trivial.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
assert (Col P Q D).
idtac.
apply fInj.

*****
H0 : Col P Q D
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q D
+++++
trivial.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
assert (Col P Q D).
idtac.
apply fInj.

*****
H0 : Col P Q D
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f C) (f D)
+++++
trivial.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
assert (Col P Q D).
idtac.
apply fInj.
trivial.

*****
H0 : Col P Q D
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f C) (f D)
+++++
apply between_cong_3 with (f A) (f B).
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
assert (Col P Q D).
idtac.
apply fInj.
trivial.
apply between_cong_3 with (f A) (f B).

*****
H0 : Col P Q D
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f A) (f B))
+++++
Cong.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
assert (Col P Q D).
idtac.
apply fInj.
trivial.
apply between_cong_3 with (f A) (f B).

*****
H0 : Col P Q D
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f A) (f B) (f C)
+++++
Cong.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
assert (Col P Q D).
idtac.
apply fInj.
trivial.
apply between_cong_3 with (f A) (f B).

*****
H0 : Col P Q D
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f A) (f B) (f D)
+++++
Cong.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
idtac.
assert (Col P Q D).
idtac.
apply fInj.
trivial.
apply between_cong_3 with (f A) (f B).

*****
H0 : Col P Q D
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong (f B) (f C) (f B) (f D)
+++++
Cong.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).

*****
H0 : eq C D
HD2 : Cong B D B C
HD1 : Bet A B D
D : Tpoint
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
subst.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].
assert (A <> B).
idtac.
destruct (segment_construction A B B C) as [D [HD1 HD2]].
assert (C = D).
subst.

*****
HD2 : Cong B D B D
HD1 : Bet A B D
H : not (eq A B)
Hdiff : not (eq (f A) (f B))
HC : Col P Q D
HBet : Bet (f A) (f B) (f D)
D : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A B D
+++++
auto.
-----
Lemma line_extension_reverse_bet : forall {Tm: Tarski_neutral_dimensionless} {Tm2: Tarski_neutral_dimensionless_with_decidable_point_equality Tm} (f : @Tpoint Tn -> @Tpoint Tm) P Q, line_extension f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Bet (f A) (f B) (f C) -> Bet A B C.
Proof.
intros Tm Tm2 f P Q [HPQ [fInj [fBet fCong]]] A B C HA HB HC HBet.
destruct (eq_dec_points (f A) (f B)) as [Heq|Hdiff].

*****

*****

+++++
Qed.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless}\n  f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q ->\n  forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint) (_ : not (eq P Q)) (_ : pres_bet_line f P Q) (A B C : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : Col P Q C), Col (f A) (f B) (f C)
+++++
Proof.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint) (_ : not (eq P Q)) (_ : pres_bet_line f P Q) (A B C : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : Col P Q C), Col (f A) (f B) (f C)
+++++
intros Tm f P Q HPQ fBet A B C HA HB HC.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.

*****
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].

*****
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Q)
+++++
trivial.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].

*****
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q A
+++++
trivial.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].

*****
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q B
+++++
trivial.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].

*****
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q C
+++++
trivial.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].

*****
HBet : Bet A B C
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
trivial.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].
trivial.

*****
HBet : Bet A B C
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
apply fBet in HBet.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].
trivial.
apply fBet in HBet.

*****
HBet : Bet (f A) (f B) (f C)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
Col.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].
trivial.
apply fBet in HBet.

*****
HBet : Bet A B C
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q A
+++++
Col.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].
trivial.
apply fBet in HBet.

*****
HBet : Bet A B C
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q B
+++++
Col.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].
trivial.
apply fBet in HBet.

*****
HBet : Bet A B C
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q C
+++++
Col.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].

*****
HBet : Bet B C A
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
trivial.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].
trivial.

*****
HBet : Bet B C A
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
apply fBet in HBet.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].
trivial.
apply fBet in HBet.

*****
HBet : Bet (f B) (f C) (f A)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
Col.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].
trivial.
apply fBet in HBet.

*****
HBet : Bet B C A
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q B
+++++
Col.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].
trivial.
apply fBet in HBet.

*****
HBet : Bet B C A
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q C
+++++
Col.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].
trivial.
apply fBet in HBet.

*****
HBet : Bet B C A
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q A
+++++
Col.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].

*****
HBet : Bet C A B
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
trivial.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].
trivial.

*****
HBet : Bet C A B
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
apply fBet in HBet.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].
trivial.
apply fBet in HBet.

*****
HBet : Bet (f C) (f A) (f B)
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f A) (f B) (f C)
+++++
Col.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].
trivial.
apply fBet in HBet.

*****
HBet : Bet C A B
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q C
+++++
Col.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].
trivial.
apply fBet in HBet.

*****
HBet : Bet C A B
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q A
+++++
Col.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].
trivial.
apply fBet in HBet.

*****
HBet : Bet C A B
HC : Col P Q C
HB : Col P Q B
HA : Col P Q A
A,B,C : Tpoint
fBet : pres_bet_line f P Q
HPQ : not (eq P Q)
P,Q : Tpoint
f : forall _ : Tpoint, Tpoint
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q B
+++++
Col.
-----
Lemma pres_bet_line__col : forall {Tm: Tarski_neutral_dimensionless} f (P Q : @Tpoint Tn), P <> Q -> pres_bet_line f P Q -> forall A B C, Col P Q A -> Col P Q B -> Col P Q C -> Col (f A) (f B) (f C).
Proof.
intros Tm f P Q HPQ fBet A B C HA HB HC.
destruct (col3 P Q A B C) as [HBet|[HBet|HBet]].

*****

*****

+++++
Qed.
-----
End Line_extension.
-----
Section Completeness.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless}\n  {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm}\n  P Q (f : @Tpoint Tn -> @Tpoint Tm),\n  line_extension f P Q ->\n  forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X ->\n  exists C, Col P Q C /\ Grad A B C /\ f C = X.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (P Q : Tpoint) (f : forall _ : Tpoint, Tpoint) (_ : line_extension f P Q) (A B X : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : Grad (f A) (f B) X), ex (fun C : Tpoint => and (Col P Q C) (and (Grad A B C) (eq (f C) X)))
+++++
Proof.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (P Q : Tpoint) (f : forall _ : Tpoint, Tpoint) (_ : line_extension f P Q) (A B X : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : Grad (f A) (f B) X), ex (fun C : Tpoint => and (Col P Q C) (and (Grad A B C) (eq (f C) X)))
+++++
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.

*****
HGrad : Grad (f A) (f B) X
HB : Col P Q B
HA : Col P Q A
X : Tpoint
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (Grad A B C) (eq (f C) X)))
+++++
destruct (eq_dec_points A B).
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).

*****
H : eq A B
HGrad : Grad (f A) (f B) X
HB : Col P Q B
HA : Col P Q A
X : Tpoint
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (Grad A B C) (eq (f C) X)))
+++++
subst B.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
subst B.

*****
HB : Col P Q A
HGrad : Grad (f A) (f A) X
HA : Col P Q A
X : Tpoint
A : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (Grad A A C) (eq (f C) X)))
+++++
apply grad112__eq in HGrad.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
subst B.
apply grad112__eq in HGrad.

*****
HB : Col P Q A
HGrad : eq (f A) X
HA : Col P Q A
X : Tpoint
A : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (Grad A A C) (eq (f C) X)))
+++++
subst X.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
subst B.
apply grad112__eq in HGrad.
subst X.

*****
HA,HB : Col P Q A
A : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (Grad A A C) (eq (f C) (f A))))
+++++
exists A.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
subst B.
apply grad112__eq in HGrad.
subst X.
exists A.

*****
HA,HB : Col P Q A
A : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q A) (and (Grad A A A) (eq (f A) (f A)))
+++++
repeat split.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
subst B.
apply grad112__eq in HGrad.
subst X.
exists A.
repeat split.

*****
HA,HB : Col P Q A
A : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q A
+++++
assumption.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
subst B.
apply grad112__eq in HGrad.
subst X.
exists A.
repeat split.

*****
HA,HB : Col P Q A
A : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Grad A A A
+++++
constructor.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).

*****
H : not (eq A B)
HGrad : Grad (f A) (f B) X
HB : Col P Q B
HA : Col P Q A
X : Tpoint
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (Grad A B C) (eq (f C) X)))
+++++
remember (f A) as A0.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.

*****
H : not (eq A B)
HGrad : Grad A0 (f B) X
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
X : Tpoint
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (Grad A B C) (eq (f C) X)))
+++++
remember (f B) as B0.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.

*****
H : not (eq A B)
HGrad : Grad A0 B0 X
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
X : Tpoint
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (Grad A B C) (eq (f C) X)))
+++++
induction HGrad.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.

*****
H : not (eq A B)
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (Grad A B C) (eq (f C) B0)))
+++++
exists B.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
exists B.

*****
H : not (eq A B)
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q B) (and (Grad A B B) (eq (f B) B0))
+++++
repeat split.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
exists B.
repeat split.

*****
H : not (eq A B)
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q B
+++++
auto.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
exists B.
repeat split.

*****
H : not (eq A B)
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Grad A B B
+++++
auto.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
exists B.
repeat split.
auto.

*****
H : not (eq A B)
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Grad A B B
+++++
constructor.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
exists B.
repeat split.

*****
H : not (eq A B)
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f B) B0
+++++
auto.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.

*****
IHHGrad : forall (_ : eq A0 (f A)) (_ : eq B0 (f B)),\nex\n (fun C0 : Tpoint =>\n and (Col P Q C0) (and (Grad A B C0) (eq (f C0) C)))
H : not (eq A B)
H1 : Cong A0 B0 C C'
H0 : Bet A0 C C'
HGrad : Grad A0 B0 C
C,C' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (Grad A B C) (eq (f C) C')))
+++++
rename C into X, C' into X'.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.

*****
IHHGrad : forall (_ : eq A0 (f A)) (_ : eq B0 (f B)),\nex (fun C : Tpoint => and (Col P Q C) (and (Grad A B C) (eq (f C) X)))
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (Grad A B C) (eq (f C) X')))
+++++
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].

*****
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq A0 (f A)
+++++
trivial.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].

*****
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq B0 (f B)
+++++
trivial.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].

*****
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (Grad A B C) (eq (f C) X')))
+++++
trivial.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.

*****
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (Grad A B C) (eq (f C) X')))
+++++
assert (A0 <> X).
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).

*****
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A0 X)
+++++
intro.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
intro.

*****
H2 : eq A0 X
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst X.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
intro.
subst X.

*****
H2 : eq A0 (f C)
HC2 : Grad A B C
HC1 : Col P Q C
H : not (eq A B)
HGrad : Grad A0 B0 (f C)
H0 : Bet A0 (f C) X'
H1 : Cong A0 B0 (f C) X'
C : Tpoint
X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (A = C).
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
intro.
subst X.
assert (A = C).

*****
H2 : eq A0 (f C)
HC2 : Grad A B C
HC1 : Col P Q C
H : not (eq A B)
HGrad : Grad A0 B0 (f C)
H0 : Bet A0 (f C) X'
H1 : Cong A0 B0 (f C) X'
C : Tpoint
X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq A C
+++++
apply fInj.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
intro.
subst X.
assert (A = C).
apply fInj.

*****
H2 : eq A0 (f C)
HC2 : Grad A B C
HC1 : Col P Q C
H : not (eq A B)
HGrad : Grad A0 B0 (f C)
H0 : Bet A0 (f C) X'
H1 : Cong A0 B0 (f C) X'
C : Tpoint
X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q A
+++++
auto.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
intro.
subst X.
assert (A = C).
apply fInj.

*****
H2 : eq A0 (f C)
HC2 : Grad A B C
HC1 : Col P Q C
H : not (eq A B)
HGrad : Grad A0 B0 (f C)
H0 : Bet A0 (f C) X'
H1 : Cong A0 B0 (f C) X'
C : Tpoint
X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q C
+++++
auto.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
intro.
subst X.
assert (A = C).
apply fInj.

*****
H2 : eq A0 (f C)
HC2 : Grad A B C
HC1 : Col P Q C
H : not (eq A B)
HGrad : Grad A0 B0 (f C)
H0 : Bet A0 (f C) X'
H1 : Cong A0 B0 (f C) X'
C : Tpoint
X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f A) (f C)
+++++
auto.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
intro.
subst X.
assert (A = C).
apply fInj.
auto.

*****
H2 : eq A0 (f C)
HC2 : Grad A B C
HC1 : Col P Q C
H : not (eq A B)
HGrad : Grad A0 B0 (f C)
H0 : Bet A0 (f C) X'
H1 : Cong A0 B0 (f C) X'
C : Tpoint
X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f A) (f C)
+++++
congruence.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
intro.
subst X.
assert (A = C).

*****
H3 : eq A C
H2 : eq A0 (f C)
HC2 : Grad A B C
HC1 : Col P Q C
H : not (eq A B)
HGrad : Grad A0 B0 (f C)
H0 : Bet A0 (f C) X'
H1 : Cong A0 B0 (f C) X'
C : Tpoint
X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
intro.
subst X.
assert (A = C).
idtac.

*****
H3 : eq A C
H2 : eq A0 (f C)
HC2 : Grad A B C
HC1 : Col P Q C
H : not (eq A B)
HGrad : Grad A0 B0 (f C)
H0 : Bet A0 (f C) X'
H1 : Cong A0 B0 (f C) X'
C : Tpoint
X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
intro.
subst X.
assert (A = C).
idtac.
subst.

*****
HC2 : Grad C B C
H2 : eq (f C) (f C)
HC1 : Col P Q C
HB : Col P Q B
HA : Col P Q C
HGrad : Grad (f C) (f B) (f C)
H0 : Bet (f C) (f C) X'
H1 : Cong (f C) (f B) (f C) X'
X' : Tpoint
H : not (eq C B)
B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply grad121__eq in HGrad.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
intro.
subst X.
assert (A = C).
idtac.
subst.
apply grad121__eq in HGrad.

*****
HC2 : Grad C B C
H2 : eq (f C) (f C)
HC1 : Col P Q C
HB : Col P Q B
HA : Col P Q C
HGrad : eq (f C) (f B)
H0 : Bet (f C) (f C) X'
H1 : Cong (f C) (f B) (f C) X'
X' : Tpoint
H : not (eq C B)
B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply fInj in HGrad.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
intro.
subst X.
assert (A = C).
idtac.
subst.
apply grad121__eq in HGrad.
apply fInj in HGrad.

*****
HC2 : Grad C B C
H2 : eq (f C) (f C)
HC1 : Col P Q C
HB : Col P Q B
HA : Col P Q C
HGrad : eq C B
H0 : Bet (f C) (f C) X'
H1 : Cong (f C) (f B) (f C) X'
X' : Tpoint
H : not (eq C B)
B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
intro.
subst X.
assert (A = C).
idtac.
subst.
apply grad121__eq in HGrad.
apply fInj in HGrad.

*****
HC2 : Grad C B C
H2 : eq (f C) (f C)
HC1 : Col P Q C
HB : Col P Q B
HA : Col P Q C
HGrad : eq (f C) (f B)
H0 : Bet (f C) (f C) X'
H1 : Cong (f C) (f B) (f C) X'
X' : Tpoint
H : not (eq C B)
B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q C
+++++
auto.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
intro.
subst X.
assert (A = C).
idtac.
subst.
apply grad121__eq in HGrad.
apply fInj in HGrad.

*****
HC2 : Grad C B C
H2 : eq (f C) (f C)
HC1 : Col P Q C
HB : Col P Q B
HA : Col P Q C
HGrad : eq (f C) (f B)
H0 : Bet (f C) (f C) X'
H1 : Cong (f C) (f B) (f C) X'
X' : Tpoint
H : not (eq C B)
B,C : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q B
+++++
auto.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).

*****
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (Grad A B C) (eq (f C) X')))
+++++
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].

*****
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (Grad A B C) (eq (f C) X')))
+++++
exists C'.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.

*****
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q C') (and (Grad A B C') (eq (f C') X'))
+++++
assert (Col P Q C').
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').

*****
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q C'
+++++
apply (colx A C).
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
apply (colx A C).

*****
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
Col.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
apply (colx A C).
Col.

*****
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
apply grad_neq__neq13 with B.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
apply (colx A C).
Col.
apply grad_neq__neq13 with B.

*****
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Grad A B C
+++++
auto.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
apply (colx A C).
Col.
apply grad_neq__neq13 with B.

*****
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
apply (colx A C).

*****
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q A
+++++
Col.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
apply (colx A C).

*****
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q C
+++++
Col.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
apply (colx A C).

*****
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col A C C'
+++++
Col.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q C') (and (Grad A B C') (eq (f C') X'))
+++++
repeat split.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q C'
+++++
trivial.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Grad A B C'
+++++
trivial.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.
trivial.

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Grad A B C'
+++++
apply grad_stab with C.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.
trivial.
apply grad_stab with C.

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Grad A B C
+++++
Cong.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.
trivial.
apply grad_stab with C.

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A C C'
+++++
Cong.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.
trivial.
apply grad_stab with C.

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong A B C C'
+++++
Cong.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f C') X'
+++++
trivial.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.
trivial.

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f C') X'
+++++
apply (construction_uniqueness A0 X A0 B0).
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.
trivial.
apply (construction_uniqueness A0 X A0 B0).

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A0 X)
+++++
Cong.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.
trivial.
apply (construction_uniqueness A0 X A0 B0).

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A0 X (f C')
+++++
Cong.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.
trivial.
apply (construction_uniqueness A0 X A0 B0).
Cong.

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A0 X (f C')
+++++
subst.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.
trivial.
apply (construction_uniqueness A0 X A0 B0).
Cong.
subst.

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq (f A) (f C))
HC2 : Grad A B C
HC1 : Col P Q C
H : not (eq A B)
H1 : Cong (f A) (f B) (f C) X'
H0 : Bet (f A) (f C) X'
HGrad : Grad (f A) (f B) (f C)
C : Tpoint
X' : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f A) (f C) (f C')
+++++
auto.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.
trivial.
apply (construction_uniqueness A0 X A0 B0).

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X (f C') A0 B0
+++++
Cong.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.
trivial.
apply (construction_uniqueness A0 X A0 B0).
Cong.

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X (f C') A0 B0
+++++
subst.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.
trivial.
apply (construction_uniqueness A0 X A0 B0).
Cong.
subst.

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq (f A) (f C))
HC2 : Grad A B C
HC1 : Col P Q C
H : not (eq A B)
H1 : Cong (f A) (f B) (f C) X'
H0 : Bet (f A) (f C) X'
HGrad : Grad (f A) (f B) (f C)
C : Tpoint
X' : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong (f C) (f C') (f A) (f B)
+++++
auto.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.
trivial.
apply (construction_uniqueness A0 X A0 B0).

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A0 X X'
+++++
Cong.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).
remember (f A) as A0.
remember (f B) as B0.
induction HGrad.
rename C into X, C' into X'.
destruct IHHGrad as [C [HC1 [HC2 HC3]]].
trivial.
assert (A0 <> X).
destruct (segment_construction A C A B) as [C' [HC'1 HC'2]].
exists C'.
assert (Col P Q C').
repeat split.
trivial.
apply (construction_uniqueness A0 X A0 B0).

*****
H3 : Col P Q C'
HC'2 : Cong C C' A B
HC'1 : Bet A C C'
C' : Tpoint
H2 : not (eq A0 X)
HC3 : eq (f C) X
HC2 : Grad A B C
HC1 : Col P Q C
C : Tpoint
H : not (eq A B)
H1 : Cong A0 B0 X X'
H0 : Bet A0 X X'
HGrad : Grad A0 B0 X
X,X' : Tpoint
HeqB0 : eq B0 (f B)
B0 : Tpoint
HeqA0 : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong X X' A0 B0
+++++
Cong.
-----
Lemma extension_grad : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> Grad (f A) (f B) X -> exists C, Col P Q C /\\ Grad A B C /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB HGrad.
destruct (eq_dec_points A B).

*****

*****

+++++
Qed.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless}\n  {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm}\n  P Q (f : @Tpoint Tn -> @Tpoint Tm),\n  line_extension f P Q ->\n  forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) ->\n  exists C, Col P Q C /\ GradExp A C B /\ f C = X.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (P Q : Tpoint) (f : forall _ : Tpoint, Tpoint) (_ : line_extension f P Q) (A B X : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : GradExp (f A) X (f B)), ex (fun C : Tpoint => and (Col P Q C) (and (GradExp A C B) (eq (f C) X)))
+++++
Proof.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (P Q : Tpoint) (f : forall _ : Tpoint, Tpoint) (_ : line_extension f P Q) (A B X : Tpoint) (_ : Col P Q A) (_ : Col P Q B) (_ : GradExp (f A) X (f B)), ex (fun C : Tpoint => and (Col P Q C) (and (GradExp A C B) (eq (f C) X)))
+++++
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.

*****
HB : Col P Q B
HA : Col P Q A
X : Tpoint
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : GradExp (f A) X (f B), ex (fun C : Tpoint => and (Col P Q C) (and (GradExp A C B) (eq (f C) X)))
+++++
remember (f A) as A'.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
remember (f A) as A'.

*****
HeqA' : eq A' (f A)
A' : Tpoint
HB : Col P Q B
HA : Col P Q A
X : Tpoint
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : GradExp A' X (f B), ex (fun C : Tpoint => and (Col P Q C) (and (GradExp A C B) (eq (f C) X)))
+++++
remember (f B) as B'.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
remember (f A) as A'.
remember (f B) as B'.

*****
HeqB' : eq B' (f B)
B' : Tpoint
HeqA' : eq A' (f A)
A' : Tpoint
HB : Col P Q B
HA : Col P Q A
X : Tpoint
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : GradExp A' X B', ex (fun C : Tpoint => and (Col P Q C) (and (GradExp A C B) (eq (f C) X)))
+++++
rewrite gradexp__gradexpinv.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
remember (f A) as A'.
remember (f B) as B'.
rewrite gradexp__gradexpinv.

*****
HeqB' : eq B' (f B)
B' : Tpoint
HeqA' : eq A' (f A)
A' : Tpoint
HB : Col P Q B
HA : Col P Q A
X : Tpoint
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : GradExpInv A' X B', ex (fun C : Tpoint => and (Col P Q C) (and (GradExp A C B) (eq (f C) X)))
+++++
induction 1.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
remember (f A) as A'.
remember (f B) as B'.
rewrite gradexp__gradexpinv.
induction 1.

*****
HeqB' : eq B0 (f B)
B0 : Tpoint
HeqA' : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (GradExp A C B) (eq (f C) B0)))
+++++
exists B; repeat split; auto; constructor.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
remember (f A) as A'.
remember (f B) as B'.
rewrite gradexp__gradexpinv.
induction 1.
exists B; repeat split; auto; constructor.

*****
IHGradExpInv : forall (_ : eq A0 (f A)) (_ : eq C (f B)),\nex\n (fun C : Tpoint =>\n and (Col P Q C) (and (GradExp A C B) (eq (f C) B0)))
H1 : GradExpInv A0 B0 C
H0 : Cong A0 B' B' B0
H : Bet A0 B' B0
B0,B' : Tpoint
HeqB' : eq C (f B)
C : Tpoint
HeqA' : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (GradExp A C B) (eq (f C) B')))
+++++
destruct IHGradExpInv as [C' [HCol []]]; auto.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
remember (f A) as A'.
remember (f B) as B'.
rewrite gradexp__gradexpinv.
induction 1.
exists B; repeat split; auto; constructor.
destruct IHGradExpInv as [C' [HCol []]]; auto.

*****
H3 : eq (f C') B0
H2 : GradExp A C' B
HCol : Col P Q C'
C' : Tpoint
H1 : GradExpInv A0 B0 C
H0 : Cong A0 B' B' B0
H : Bet A0 B' B0
B0,B' : Tpoint
HeqB' : eq C (f B)
C : Tpoint
HeqA' : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (GradExp A C B) (eq (f C) B')))
+++++
destruct (midpoint_existence A C') as [M []].
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
remember (f A) as A'.
remember (f B) as B'.
rewrite gradexp__gradexpinv.
induction 1.
exists B; repeat split; auto; constructor.
destruct IHGradExpInv as [C' [HCol []]]; auto.
destruct (midpoint_existence A C') as [M []].

*****
H5 : Cong A M M C'
H4 : Bet A M C'
M : Tpoint
H3 : eq (f C') B0
H2 : GradExp A C' B
HCol : Col P Q C'
C' : Tpoint
H1 : GradExpInv A0 B0 C
H0 : Cong A0 B' B' B0
H : Bet A0 B' B0
B0,B' : Tpoint
HeqB' : eq C (f B)
C : Tpoint
HeqA' : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (GradExp A C B) (eq (f C) B')))
+++++
assert (Col P Q M).
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
remember (f A) as A'.
remember (f B) as B'.
rewrite gradexp__gradexpinv.
induction 1.
exists B; repeat split; auto; constructor.
destruct IHGradExpInv as [C' [HCol []]]; auto.
destruct (midpoint_existence A C') as [M []].
assert (Col P Q M).

*****
H5 : Cong A M M C'
H4 : Bet A M C'
M : Tpoint
H3 : eq (f C') B0
H2 : GradExp A C' B
HCol : Col P Q C'
C' : Tpoint
H1 : GradExpInv A0 B0 C
H0 : Cong A0 B' B' B0
H : Bet A0 B' B0
B0,B' : Tpoint
HeqB' : eq C (f B)
C : Tpoint
HeqA' : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q M
+++++
destruct (eq_dec_points A C').
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
remember (f A) as A'.
remember (f B) as B'.
rewrite gradexp__gradexpinv.
induction 1.
exists B; repeat split; auto; constructor.
destruct IHGradExpInv as [C' [HCol []]]; auto.
destruct (midpoint_existence A C') as [M []].
assert (Col P Q M).
destruct (eq_dec_points A C').

*****
H6 : eq A C'
H5 : Cong A M M C'
H4 : Bet A M C'
M : Tpoint
H3 : eq (f C') B0
H2 : GradExp A C' B
HCol : Col P Q C'
C' : Tpoint
H1 : GradExpInv A0 B0 C
H0 : Cong A0 B' B' B0
H : Bet A0 B' B0
B0,B' : Tpoint
HeqB' : eq C (f B)
C : Tpoint
HeqA' : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q M
+++++
treat_equalities; assumption.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
remember (f A) as A'.
remember (f B) as B'.
rewrite gradexp__gradexpinv.
induction 1.
exists B; repeat split; auto; constructor.
destruct IHGradExpInv as [C' [HCol []]]; auto.
destruct (midpoint_existence A C') as [M []].
assert (Col P Q M).
destruct (eq_dec_points A C').
treat_equalities; assumption.

*****
H6 : not (eq A C')
H5 : Cong A M M C'
H4 : Bet A M C'
M : Tpoint
H3 : eq (f C') B0
H2 : GradExp A C' B
HCol : Col P Q C'
C' : Tpoint
H1 : GradExpInv A0 B0 C
H0 : Cong A0 B' B' B0
H : Bet A0 B' B0
B0,B' : Tpoint
HeqB' : eq C (f B)
C : Tpoint
HeqA' : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q M
+++++
apply colx with A C'; Col.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
remember (f A) as A'.
remember (f B) as B'.
rewrite gradexp__gradexpinv.
induction 1.
exists B; repeat split; auto; constructor.
destruct IHGradExpInv as [C' [HCol []]]; auto.
destruct (midpoint_existence A C') as [M []].
assert (Col P Q M).

*****
H6 : Col P Q M
H5 : Cong A M M C'
H4 : Bet A M C'
M : Tpoint
H3 : eq (f C') B0
H2 : GradExp A C' B
HCol : Col P Q C'
C' : Tpoint
H1 : GradExpInv A0 B0 C
H0 : Cong A0 B' B' B0
H : Bet A0 B' B0
B0,B' : Tpoint
HeqB' : eq C (f B)
C : Tpoint
HeqA' : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Col P Q C) (and (GradExp A C B) (eq (f C) B')))
+++++
exists M; repeat split; trivial.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
remember (f A) as A'.
remember (f B) as B'.
rewrite gradexp__gradexpinv.
induction 1.
exists B; repeat split; auto; constructor.
destruct IHGradExpInv as [C' [HCol []]]; auto.
destruct (midpoint_existence A C') as [M []].
assert (Col P Q M).
exists M; repeat split; trivial.

*****
H6 : Col P Q M
H5 : Cong A M M C'
H4 : Bet A M C'
M : Tpoint
H3 : eq (f C') B0
H2 : GradExp A C' B
HCol : Col P Q C'
C' : Tpoint
H1 : GradExpInv A0 B0 C
H0 : Cong A0 B' B' B0
H : Bet A0 B' B0
B0,B' : Tpoint
HeqB' : eq C (f B)
C : Tpoint
HeqA' : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
GradExp A M B
+++++
rewrite gradexp__gradexpinv.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
remember (f A) as A'.
remember (f B) as B'.
rewrite gradexp__gradexpinv.
induction 1.
exists B; repeat split; auto; constructor.
destruct IHGradExpInv as [C' [HCol []]]; auto.
destruct (midpoint_existence A C') as [M []].
assert (Col P Q M).
exists M; repeat split; trivial.
rewrite gradexp__gradexpinv.

*****
H6 : Col P Q M
H5 : Cong A M M C'
H4 : Bet A M C'
M : Tpoint
H3 : eq (f C') B0
H2 : GradExp A C' B
HCol : Col P Q C'
C' : Tpoint
H1 : GradExpInv A0 B0 C
H0 : Cong A0 B' B' B0
H : Bet A0 B' B0
B0,B' : Tpoint
HeqB' : eq C (f B)
C : Tpoint
HeqA' : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
GradExpInv A M B
+++++
apply gradexpinv_stab with C'; trivial.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
remember (f A) as A'.
remember (f B) as B'.
rewrite gradexp__gradexpinv.
induction 1.
exists B; repeat split; auto; constructor.
destruct IHGradExpInv as [C' [HCol []]]; auto.
destruct (midpoint_existence A C') as [M []].
assert (Col P Q M).
exists M; repeat split; trivial.
rewrite gradexp__gradexpinv.
apply gradexpinv_stab with C'; trivial.

*****
H6 : Col P Q M
H5 : Cong A M M C'
H4 : Bet A M C'
M : Tpoint
H3 : eq (f C') B0
H2 : GradExp A C' B
HCol : Col P Q C'
C' : Tpoint
H1 : GradExpInv A0 B0 C
H0 : Cong A0 B' B' B0
H : Bet A0 B' B0
B0,B' : Tpoint
HeqB' : eq C (f B)
C : Tpoint
HeqA' : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
GradExpInv A C' B
+++++
rewrite <- gradexp__gradexpinv; assumption.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
remember (f A) as A'.
remember (f B) as B'.
rewrite gradexp__gradexpinv.
induction 1.
exists B; repeat split; auto; constructor.
destruct IHGradExpInv as [C' [HCol []]]; auto.
destruct (midpoint_existence A C') as [M []].
assert (Col P Q M).
exists M; repeat split; trivial.
rewrite gradexp__gradexpinv.
apply gradexpinv_stab with C'; trivial.
rewrite <- gradexp__gradexpinv; assumption.

*****
H6 : Col P Q M
H5 : Cong A M M C'
H4 : Bet A M C'
M : Tpoint
H3 : eq (f C') B0
H2 : GradExp A C' B
HCol : Col P Q C'
C' : Tpoint
H1 : GradExpInv A0 B0 C
H0 : Cong A0 B' B' B0
H : Bet A0 B' B0
B0,B' : Tpoint
HeqB' : eq C (f B)
C : Tpoint
HeqA' : eq A0 (f A)
A0 : Tpoint
HB : Col P Q B
HA : Col P Q A
A,B : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f M) B'
+++++
apply l7_17 with A0 B0; split; trivial; subst; [apply fBet|apply fCong]; assumption.
-----
Lemma extension_gradexp : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), line_extension f P Q -> forall A B X, Col P Q A -> Col P Q B -> GradExp (f A) X (f B) -> exists C, Col P Q C /\\ GradExp A C B /\\ f C = X.
Proof.
intros Tm Tm2 P Q f [HPQ [fInj [fBet fCong]]] A B X HA HB.
remember (f A) as A'.
remember (f B) as B'.
rewrite gradexp__gradexpinv.
induction 1.
exists B; repeat split; auto; constructor.
destruct IHGradExpInv as [C' [HCol []]]; auto.
destruct (midpoint_existence A C') as [M []].
assert (Col P Q M).
exists M; repeat split; trivial.
rewrite gradexp__gradexpinv.
apply gradexpinv_stab with C'; trivial.
rewrite <- gradexp__gradexpinv; assumption.
apply l7_17 with A0 B0; split; trivial; subst; [apply fBet|apply fCong]; assumption.

*****

*****

+++++
Qed.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless}\n  {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm}\n  P Q (f : @Tpoint Tn -> @Tpoint Tm),\n  @archimedes_axiom Tm ->\n  line_extension f P Q ->\n  forall A B, A <> B ->\n  Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B ->\n  exists X, Col P Q X /\ Bet A (f X) B /\ f X <> A /\ f X <> B.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (P Q : Tpoint) (f : forall _ : Tpoint, Tpoint) (_ : archimedes_axiom) (_ : line_extension f P Q) (A B : Tpoint) (_ : not (eq A B)) (_ : Lt (f P) (f Q) A B) (_ : Bet (f P) (f Q) A) (_ : Bet (f P) A B), ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
Proof.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (P Q : Tpoint) (f : forall _ : Tpoint, Tpoint) (_ : archimedes_axiom) (_ : line_extension f P Q) (A B : Tpoint) (_ : not (eq A B)) (_ : Lt (f P) (f Q) A B) (_ : Bet (f P) (f Q) A) (_ : Bet (f P) A B), ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.

*****
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
cut (exists C, Grad (f P) (f Q) C /\ Bet A C B /\ C <> A /\ C <> B).
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).

*****
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : ex (fun C : Tpoint => and (Grad (f P) (f Q) C) (and (Bet A C B) (and (not (eq C A)) (not (eq C B))))), ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
intros [C [HC1 [HC2 [HC3 HC4]]]].
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
intros [C [HC1 [HC2 [HC3 HC4]]]].

*****
HC4 : not (eq C B)
HC3 : not (eq C A)
HC2 : Bet A C B
HC1 : Grad (f P) (f Q) C
C : Tpoint
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
destruct (extension_grad P Q f fLineExt P Q C) as [X].
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
intros [C [HC1 [HC2 [HC3 HC4]]]].
destruct (extension_grad P Q f fLineExt P Q C) as [X].

*****
HC4 : not (eq C B)
HC3 : not (eq C A)
HC2 : Bet A C B
HC1 : Grad (f P) (f Q) C
C : Tpoint
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q P
+++++
Col.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
intros [C [HC1 [HC2 [HC3 HC4]]]].
destruct (extension_grad P Q f fLineExt P Q C) as [X].

*****
HC4 : not (eq C B)
HC3 : not (eq C A)
HC2 : Bet A C B
HC1 : Grad (f P) (f Q) C
C : Tpoint
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q Q
+++++
Col.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
intros [C [HC1 [HC2 [HC3 HC4]]]].
destruct (extension_grad P Q f fLineExt P Q C) as [X].

*****
HC4 : not (eq C B)
HC3 : not (eq C A)
HC2 : Bet A C B
HC1 : Grad (f P) (f Q) C
C : Tpoint
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Grad (f P) (f Q) C
+++++
Col.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
intros [C [HC1 [HC2 [HC3 HC4]]]].
destruct (extension_grad P Q f fLineExt P Q C) as [X].

*****
H : and (Col P Q X) (and (Grad P Q X) (eq (f X) C))
X : Tpoint
HC4 : not (eq C B)
HC3 : not (eq C A)
HC2 : Bet A C B
HC1 : Grad (f P) (f Q) C
C : Tpoint
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
Col.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
intros [C [HC1 [HC2 [HC3 HC4]]]].
destruct (extension_grad P Q f fLineExt P Q C) as [X].
Col.

*****
H : and (Col P Q X) (and (Grad P Q X) (eq (f X) C))
X : Tpoint
HC4 : not (eq C B)
HC3 : not (eq C A)
HC2 : Bet A C B
HC1 : Grad (f P) (f Q) C
C : Tpoint
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
exists X.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
intros [C [HC1 [HC2 [HC3 HC4]]]].
destruct (extension_grad P Q f fLineExt P Q C) as [X].
Col.
exists X.

*****
H : and (Col P Q X) (and (Grad P Q X) (eq (f X) C))
X : Tpoint
HC4 : not (eq C B)
HC3 : not (eq C A)
HC2 : Bet A C B
HC1 : Grad (f P) (f Q) C
C : Tpoint
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B))))
+++++
spliter.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
intros [C [HC1 [HC2 [HC3 HC4]]]].
destruct (extension_grad P Q f fLineExt P Q C) as [X].
Col.
exists X.
spliter.

*****
H1 : eq (f X) C
H0 : Grad P Q X
H : Col P Q X
X : Tpoint
HC4 : not (eq C B)
HC3 : not (eq C A)
HC2 : Bet A C B
HC1 : Grad (f P) (f Q) C
C : Tpoint
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B))))
+++++
subst.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
intros [C [HC1 [HC2 [HC3 HC4]]]].
destruct (extension_grad P Q f fLineExt P Q C) as [X].
Col.
exists X.
spliter.
subst.

*****
H0 : Grad P Q X
H : Col P Q X
HC1 : Grad (f P) (f Q) (f X)
HC2 : Bet A (f X) B
HC3 : not (eq (f X) A)
HC4 : not (eq (f X) B)
X : Tpoint
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B))))
+++++
auto.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).

*****
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Grad (f P) (f Q) C) (and (Bet A C B) (and (not (eq C A)) (not (eq C B)))))
+++++
assert (Hdiff : f P <> f Q).
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).

*****
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f P) (f Q))
+++++
intro.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
intro.

*****
H : eq (f P) (f Q)
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct fLineExt as [HPQ [fInj]].
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
intro.
destruct fLineExt as [HPQ [fInj]].

*****
H : eq (f P) (f Q)
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
H0 : and (pres_bet_line f P Q) (pres_cong_line f P Q)
fInj : inj_line f P Q
HPQ : not (eq P Q)
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HPQ, fInj.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
intro.
destruct fLineExt as [HPQ [fInj]].
apply HPQ, fInj.

*****
H : eq (f P) (f Q)
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
H0 : and (pres_bet_line f P Q) (pres_cong_line f P Q)
fInj : inj_line f P Q
HPQ : not (eq P Q)
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q P
+++++
Col.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
intro.
destruct fLineExt as [HPQ [fInj]].
apply HPQ, fInj.

*****
H : eq (f P) (f Q)
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
H0 : and (pres_bet_line f P Q) (pres_cong_line f P Q)
fInj : inj_line f P Q
HPQ : not (eq P Q)
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q Q
+++++
Col.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
intro.
destruct fLineExt as [HPQ [fInj]].
apply HPQ, fInj.

*****
H : eq (f P) (f Q)
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
H0 : and (pres_bet_line f P Q) (pres_cong_line f P Q)
fInj : inj_line f P Q
HPQ : not (eq P Q)
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f P) (f Q)
+++++
Col.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).

*****
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Grad (f P) (f Q) C) (and (Bet A C B) (and (not (eq C A)) (not (eq C B)))))
+++++
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].

*****
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f P) (f Q))
+++++
auto.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].

*****
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) (f Q) A
+++++
auto.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].

*****
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Reach (f P) (f Q) (f P) A
+++++
auto.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].

*****
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Grad (f P) (f Q) C) (and (Bet A C B) (and (not (eq C A)) (not (eq C B)))))
+++++
auto.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.

*****
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Grad (f P) (f Q) C) (and (Bet A C B) (and (not (eq C A)) (not (eq C B)))))
+++++
assert (Bet D A E).
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).

*****
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet D A E
+++++
apply (between_exchange3 (f P)).
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
apply (between_exchange3 (f P)).

*****
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) D A
+++++
assumption.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
apply (between_exchange3 (f P)).

*****
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) A E
+++++
assumption.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).

*****
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Grad (f P) (f Q) C) (and (Bet A C B) (and (not (eq C A)) (not (eq C B)))))
+++++
idtac.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.

*****
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Grad (f P) (f Q) C) (and (Bet A C B) (and (not (eq C A)) (not (eq C B)))))
+++++
assert (Le A E D E).
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).

*****
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le A E D E
+++++
Le.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Grad (f P) (f Q) C) (and (Bet A C B) (and (not (eq C A)) (not (eq C B)))))
+++++
idtac.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Grad (f P) (f Q) C) (and (Bet A C B) (and (not (eq C A)) (not (eq C B)))))
+++++
exists E.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Grad (f P) (f Q) E) (and (Bet A E B) (and (not (eq E A)) (not (eq E B))))
+++++
repeat split.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Grad (f P) (f Q) E
+++++
auto.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Grad (f P) (f Q) E
+++++
apply grad_stab with D.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply grad_stab with D.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Grad (f P) (f Q) D
+++++
assumption.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply grad_stab with D.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) D E
+++++
assumption.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply grad_stab with D.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Cong (f P) (f Q) D E
+++++
assumption.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A E B
+++++
auto.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A E B
+++++
apply l6_13_1.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out A E B
+++++
destruct (eq_dec_points A D).
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).

*****
H1 : eq A D
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out A E B
+++++
subst D.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
subst D.

*****
HDE1 : Bet (f P) A E
HDE2 : Cong (f P) (f Q) A E
H : Bet A A E
H0 : Le A E A E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD1 : Bet (f P) A A
HD2 : Grad (f P) (f Q) A
E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out A E B
+++++
apply l6_2 with (f P).
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
subst D.
apply l6_2 with (f P).

*****
HDE1 : Bet (f P) A E
HDE2 : Cong (f P) (f Q) A E
H : Bet A A E
H0 : Le A E A E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD1 : Bet (f P) A A
HD2 : Grad (f P) (f Q) A
E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq E A)
+++++
Between.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
subst D.
apply l6_2 with (f P).

*****
HDE1 : Bet (f P) A E
HDE2 : Cong (f P) (f Q) A E
H : Bet A A E
H0 : Le A E A E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD1 : Bet (f P) A A
HD2 : Grad (f P) (f Q) A
E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
Between.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
subst D.
apply l6_2 with (f P).

*****
HDE1 : Bet (f P) A E
HDE2 : Cong (f P) (f Q) A E
H : Bet A A E
H0 : Le A E A E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD1 : Bet (f P) A A
HD2 : Grad (f P) (f Q) A
E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f P) A)
+++++
Between.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
subst D.
apply l6_2 with (f P).
Between.

*****
HDE1 : Bet (f P) A E
HDE2 : Cong (f P) (f Q) A E
H : Bet A A E
H0 : Le A E A E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD1 : Bet (f P) A A
HD2 : Grad (f P) (f Q) A
E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f P) A)
+++++
apply bet_neq12__neq with (f Q).
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
subst D.
apply l6_2 with (f P).
Between.
apply bet_neq12__neq with (f Q).

*****
HDE1 : Bet (f P) A E
HDE2 : Cong (f P) (f Q) A E
H : Bet A A E
H0 : Le A E A E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD1 : Bet (f P) A A
HD2 : Grad (f P) (f Q) A
E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) (f Q) A
+++++
assumption.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
subst D.
apply l6_2 with (f P).
Between.
apply bet_neq12__neq with (f Q).

*****
HDE1 : Bet (f P) A E
HDE2 : Cong (f P) (f Q) A E
H : Bet A A E
H0 : Le A E A E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD1 : Bet (f P) A A
HD2 : Grad (f P) (f Q) A
E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f P) (f Q))
+++++
assumption.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
subst D.
apply l6_2 with (f P).

*****
HDE1 : Bet (f P) A E
HDE2 : Cong (f P) (f Q) A E
H : Bet A A E
H0 : Le A E A E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD1 : Bet (f P) A A
HD2 : Grad (f P) (f Q) A
E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet E A (f P)
+++++
Between.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
subst D.
apply l6_2 with (f P).

*****
HDE1 : Bet (f P) A E
HDE2 : Cong (f P) (f Q) A E
H : Bet A A E
H0 : Le A E A E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD1 : Bet (f P) A A
HD2 : Grad (f P) (f Q) A
E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet B A (f P)
+++++
Between.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).

*****
H1 : not (eq A D)
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out A E B
+++++
apply l6_2 with D.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
apply l6_2 with D.

*****
H1 : not (eq A D)
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq E A)
+++++
Between.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
apply l6_2 with D.

*****
H1 : not (eq A D)
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
Between.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
apply l6_2 with D.

*****
H1 : not (eq A D)
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq D A)
+++++
Between.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
apply l6_2 with D.

*****
H1 : not (eq A D)
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet E A D
+++++
Between.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
apply l6_2 with D.

*****
H1 : not (eq A D)
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet B A D
+++++
Between.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
apply l6_2 with D.
Between.

*****
H1 : not (eq A D)
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet B A D
+++++
apply between_symmetry, (between_exchange3 (f P)).
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
apply l6_2 with D.
Between.
apply between_symmetry, (between_exchange3 (f P)).

*****
H1 : not (eq A D)
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) D A
+++++
assumption.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
destruct (eq_dec_points A D).
apply l6_2 with D.
Between.
apply between_symmetry, (between_exchange3 (f P)).

*****
H1 : not (eq A D)
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) A B
+++++
assumption.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le A E A B
+++++
apply le_transitivity with D E.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
apply le_transitivity with D E.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le A E D E
+++++
trivial.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
apply le_transitivity with D E.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le D E A B
+++++
trivial.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
apply le_transitivity with D E.
trivial.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le D E A B
+++++
apply le_transitivity with (f P) (f Q).
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
apply le_transitivity with D E.
trivial.
apply le_transitivity with (f P) (f Q).

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le D E (f P) (f Q)
+++++
Le.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
apply l6_13_1.
apply le_transitivity with D E.
trivial.
apply le_transitivity with (f P) (f Q).

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le (f P) (f Q) A B
+++++
Le.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq E A)
+++++
auto.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq E B)
+++++
auto.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.

*****
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq E B)
+++++
intro.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
intro.

*****
H1 : eq E B
H0 : Le A E D E
H : Bet D A E
HDE2 : Cong (f P) (f Q) D E
HDE1 : Bet (f P) D E
HE2 : Bet (f P) A E
HE1 : not (eq E A)
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D,E : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst E.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
intro.
subst E.

*****
HE1 : not (eq B A)
HE2 : Bet (f P) A B
HDE1 : Bet (f P) D B
HDE2 : Cong (f P) (f Q) D B
H : Bet D A B
H0 : Le A B D B
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : Lt (f P) (f Q) A B
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply lt__nle in HLt.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
intro.
subst E.
apply lt__nle in HLt.

*****
HE1 : not (eq B A)
HE2 : Bet (f P) A B
HDE1 : Bet (f P) D B
HDE2 : Cong (f P) (f Q) D B
H : Bet D A B
H0 : Le A B D B
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : not (Le A B (f P) (f Q))
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HLt, le_transitivity with D B.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
intro.
subst E.
apply lt__nle in HLt.
apply HLt, le_transitivity with D B.

*****
HE1 : not (eq B A)
HE2 : Bet (f P) A B
HDE1 : Bet (f P) D B
HDE2 : Cong (f P) (f Q) D B
H : Bet D A B
H0 : Le A B D B
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : not (Le A B (f P) (f Q))
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le A B D B
+++++
Le.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).
assert (Hdiff : f P <> f Q).
destruct (reach__grad_min (f P) (f Q) A) as [D [E [HD1 [HD2 [HE1 [HE2 [HDE1 HDE2]]]]]]].
auto.
assert (Bet D A E).
idtac.
assert (Le A E D E).
idtac.
exists E.
repeat split.
auto.
intro.
subst E.
apply lt__nle in HLt.
apply HLt, le_transitivity with D B.

*****
HE1 : not (eq B A)
HE2 : Bet (f P) A B
HDE1 : Bet (f P) D B
HDE2 : Cong (f P) (f Q) D B
H : Bet D A B
H0 : Le A B D B
HD2 : Grad (f P) (f Q) D
HD1 : Bet (f P) D A
D : Tpoint
Hdiff : not (eq (f P) (f Q))
HBet2 : Bet (f P) A B
HBet1 : Bet (f P) (f Q) A
HLt : not (Le A B (f P) (f Q))
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le D B (f P) (f Q)
+++++
Le.
-----
Lemma extension_image_density_aux : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Lt (f P) (f Q) A B -> Bet (f P) (f Q) A -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HAB HLt HBet1 HBet2.
cut (exists C, Grad (f P) (f Q) C /\\ Bet A C B /\\ C <> A /\\ C <> B).

*****

*****

+++++
Qed.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless}\n  {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm}\n  P Q (f : @Tpoint Tn -> @Tpoint Tm),\n  @archimedes_axiom Tm ->\n  line_extension f P Q ->\n  forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B ->\n  Lt (f P) (f Q) A B -> Bet (f P) A B ->\n  exists X, Col P Q X /\ Bet A (f X) B /\ f X <> A /\ f X <> B.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (P Q : Tpoint) (f : forall _ : Tpoint, Tpoint) (_ : archimedes_axiom) (_ : line_extension f P Q) (A B : Tpoint) (_ : not (eq A B)) (_ : Col (f P) (f Q) A) (_ : Col (f P) (f Q) B) (_ : Lt (f P) (f Q) A B) (_ : Bet (f P) A B), ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
Proof.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (P Q : Tpoint) (f : forall _ : Tpoint, Tpoint) (_ : archimedes_axiom) (_ : line_extension f P Q) (A B : Tpoint) (_ : not (eq A B)) (_ : Col (f P) (f Q) A) (_ : Col (f P) (f Q) B) (_ : Lt (f P) (f Q) A B) (_ : Bet (f P) A B), ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
assert (Haux := line_extension_symmetry).
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).

*****
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (P Q : Tpoint) (f : forall _ : Tpoint, Tpoint) (_ : archimedes_axiom) (_ : line_extension f P Q) (A B : Tpoint) (_ : not (eq A B)) (_ : Col (f P) (f Q) A) (_ : Col (f P) (f Q) B) (_ : Lt (f P) (f Q) A B) (_ : Bet (f P) A B), ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.

*****
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
HColA : Col (f P) (f Q) A
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].

*****
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
HColA : Col (f P) (f Q) A
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
destruct (eq_dec_points (f P) A).
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).

*****
H : eq (f P) A
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
HColA : Col (f P) (f Q) A
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
treat_equalities.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.

*****
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet (f P) (f X) B) (and (not (eq (f X) (f P))) (not (eq (f X) B)))))
+++++
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).

*****
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet (f P) (f X) B) (and (not (eq (f X) (f P))) (not (eq (f X) B)))))
+++++
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].

*****
HBet : Bet (f Q) (f P) B
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet (f P) (f X) B) (and (not (eq (f X) (f P))) (not (eq (f X) B)))))
+++++
-
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-

*****
HBet : Bet (f Q) (f P) B
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet (f P) (f X) B) (and (not (eq (f X) (f P))) (not (eq (f X) B)))))
+++++
destruct (segment_construction Q P P Q) as [Q' []].
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-
destruct (segment_construction Q P P Q) as [Q' []].

*****
H1 : Cong P Q' P Q
H0 : Bet Q P Q'
Q' : Tpoint
HBet : Bet (f Q) (f P) B
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet (f P) (f X) B) (and (not (eq (f X) (f P))) (not (eq (f X) B)))))
+++++
exists Q'.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-
destruct (segment_construction Q P P Q) as [Q' []].
exists Q'.

*****
H1 : Cong P Q' P Q
H0 : Bet Q P Q'
Q' : Tpoint
HBet : Bet (f Q) (f P) B
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q Q') (and (Bet (f P) (f Q') B) (and (not (eq (f Q') (f P))) (not (eq (f Q') B))))
+++++
assert (HBet' : Bet (f Q) (f P) (f Q')) by (apply fBet; Col).
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-
destruct (segment_construction Q P P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f Q) (f P) (f Q')) by (apply fBet; Col).

*****
HBet' : Bet (f Q) (f P) (f Q')
H1 : Cong P Q' P Q
H0 : Bet Q P Q'
Q' : Tpoint
HBet : Bet (f Q) (f P) B
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q Q') (and (Bet (f P) (f Q') B) (and (not (eq (f Q') (f P))) (not (eq (f Q') B))))
+++++
assert (HCong' : Cong (f P) (f Q') (f P) (f Q)) by (apply fCong; Col).
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-
destruct (segment_construction Q P P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f Q) (f P) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f P) (f Q') (f P) (f Q)) by (apply fCong; Col).

*****
HCong' : Cong (f P) (f Q') (f P) (f Q)
HBet' : Bet (f Q) (f P) (f Q')
H1 : Cong P Q' P Q
H0 : Bet Q P Q'
Q' : Tpoint
HBet : Bet (f Q) (f P) B
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q Q') (and (Bet (f P) (f Q') B) (and (not (eq (f Q') (f P))) (not (eq (f Q') B))))
+++++
assert (f P <> f Q').
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-
destruct (segment_construction Q P P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f Q) (f P) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f P) (f Q') (f P) (f Q)) by (apply fCong; Col).
assert (f P <> f Q').

*****
HCong' : Cong (f P) (f Q') (f P) (f Q)
HBet' : Bet (f Q) (f P) (f Q')
H1 : Cong P Q' P Q
H0 : Bet Q P Q'
Q' : Tpoint
HBet : Bet (f Q) (f P) B
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f P) (f Q'))
+++++
intro; assert (P = Q') by (apply fInj; Col); assert_diffs; auto.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-
destruct (segment_construction Q P P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f Q) (f P) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f P) (f Q') (f P) (f Q)) by (apply fCong; Col).
assert (f P <> f Q').
intro; assert (P = Q') by (apply fInj; Col); assert_diffs; auto.

*****
H2 : not (eq (f P) (f Q'))
HCong' : Cong (f P) (f Q') (f P) (f Q)
HBet' : Bet (f Q) (f P) (f Q')
H1 : Cong P Q' P Q
H0 : Bet Q P Q'
Q' : Tpoint
HBet : Bet (f Q) (f P) B
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q Q') (and (Bet (f P) (f Q') B) (and (not (eq (f Q') (f P))) (not (eq (f Q') B))))
+++++
repeat split; Col.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-
destruct (segment_construction Q P P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f Q) (f P) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f P) (f Q') (f P) (f Q)) by (apply fCong; Col).
assert (f P <> f Q').
intro; assert (P = Q') by (apply fInj; Col); assert_diffs; auto.
repeat split; Col.

*****
H2 : not (eq (f P) (f Q'))
HCong' : Cong (f P) (f Q') (f P) (f Q)
HBet' : Bet (f Q) (f P) (f Q')
H1 : Cong P Q' P Q
H0 : Bet Q P Q'
Q' : Tpoint
HBet : Bet (f Q) (f P) B
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) (f Q') B
+++++
*
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-
destruct (segment_construction Q P P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f Q) (f P) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f P) (f Q') (f P) (f Q)) by (apply fCong; Col).
assert (f P <> f Q').
intro; assert (P = Q') by (apply fInj; Col); assert_diffs; auto.
repeat split; Col.
*

*****
H2 : not (eq (f P) (f Q'))
HCong' : Cong (f P) (f Q') (f P) (f Q)
HBet' : Bet (f Q) (f P) (f Q')
H1 : Cong P Q' P Q
H0 : Bet Q P Q'
Q' : Tpoint
HBet : Bet (f Q) (f P) B
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) (f Q') B
+++++
apply l6_13_1.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-
destruct (segment_construction Q P P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f Q) (f P) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f P) (f Q') (f P) (f Q)) by (apply fCong; Col).
assert (f P <> f Q').
intro; assert (P = Q') by (apply fInj; Col); assert_diffs; auto.
repeat split; Col.
*
apply l6_13_1.

*****
H2 : not (eq (f P) (f Q'))
HCong' : Cong (f P) (f Q') (f P) (f Q)
HBet' : Bet (f Q) (f P) (f Q')
H1 : Cong P Q' P Q
H0 : Bet Q P Q'
Q' : Tpoint
HBet : Bet (f Q) (f P) B
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Out (f P) (f Q') B
+++++
apply l6_2 with (f Q); Between.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-
destruct (segment_construction Q P P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f Q) (f P) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f P) (f Q') (f P) (f Q)) by (apply fCong; Col).
assert (f P <> f Q').
intro; assert (P = Q') by (apply fInj; Col); assert_diffs; auto.
repeat split; Col.
*
apply l6_13_1.
apply l6_2 with (f Q); Between.

*****
H2 : not (eq (f P) (f Q'))
HCong' : Cong (f P) (f Q') (f P) (f Q)
HBet' : Bet (f Q) (f P) (f Q')
H1 : Cong P Q' P Q
H0 : Bet Q P Q'
Q' : Tpoint
HBet : Bet (f Q) (f P) B
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Le (f P) (f Q') (f P) B
+++++
apply le_transitivity with (f P) (f Q); Le.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-
destruct (segment_construction Q P P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f Q) (f P) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f P) (f Q') (f P) (f Q)) by (apply fCong; Col).
assert (f P <> f Q').
intro; assert (P = Q') by (apply fInj; Col); assert_diffs; auto.
repeat split; Col.
*
apply l6_13_1.
apply l6_2 with (f Q); Between.
apply le_transitivity with (f P) (f Q); Le.

*****

*****

+++++
*
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-
destruct (segment_construction Q P P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f Q) (f P) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f P) (f Q') (f P) (f Q)) by (apply fCong; Col).
assert (f P <> f Q').
intro; assert (P = Q') by (apply fInj; Col); assert_diffs; auto.
repeat split; Col.
*
apply l6_13_1.
apply l6_2 with (f Q); Between.
apply le_transitivity with (f P) (f Q); Le.
*

*****
H2 : not (eq (f P) (f Q'))
HCong' : Cong (f P) (f Q') (f P) (f Q)
HBet' : Bet (f Q) (f P) (f Q')
H1 : Cong P Q' P Q
H0 : Bet Q P Q'
Q' : Tpoint
HBet : Bet (f Q) (f P) B
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f Q') B)
+++++
intro; subst; destruct HLt; Cong.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-
destruct (segment_construction Q P P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f Q) (f P) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f P) (f Q') (f P) (f Q)) by (apply fCong; Col).
assert (f P <> f Q').
intro; assert (P = Q') by (apply fInj; Col); assert_diffs; auto.
repeat split; Col.
*
apply l6_13_1.
apply l6_2 with (f Q); Between.
apply le_transitivity with (f P) (f Q); Le.
*
intro; subst; destruct HLt; Cong.

*****

*****

+++++
-
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-
destruct (segment_construction Q P P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f Q) (f P) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f P) (f Q') (f P) (f Q)) by (apply fCong; Col).
assert (f P <> f Q').
intro; assert (P = Q') by (apply fInj; Col); assert_diffs; auto.
repeat split; Col.
*
apply l6_13_1.
apply l6_2 with (f Q); Between.
apply le_transitivity with (f P) (f Q); Le.
*
intro; subst; destruct HLt; Cong.
-

*****
HOut : Out (f P) (f Q) B
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet (f P) (f X) B) (and (not (eq (f X) (f P))) (not (eq (f X) B)))))
+++++
exists Q; repeat split; Col.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-
destruct (segment_construction Q P P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f Q) (f P) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f P) (f Q') (f P) (f Q)) by (apply fCong; Col).
assert (f P <> f Q').
intro; assert (P = Q') by (apply fInj; Col); assert_diffs; auto.
repeat split; Col.
*
apply l6_13_1.
apply l6_2 with (f Q); Between.
apply le_transitivity with (f P) (f Q); Le.
*
intro; subst; destruct HLt; Cong.
-
exists Q; repeat split; Col.

*****
HOut : Out (f P) (f Q) B
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) (f Q) B
+++++
apply l6_13_1; Le.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
treat_equalities.
assert (f P <> f Q) by (intro; apply HPQ, fInj; Col).
destruct (or_bet_out (f Q) (f P) B) as [HBet|[HOut|]]; [..|exfalso; Col].
-
destruct (segment_construction Q P P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f Q) (f P) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f P) (f Q') (f P) (f Q)) by (apply fCong; Col).
assert (f P <> f Q').
intro; assert (P = Q') by (apply fInj; Col); assert_diffs; auto.
repeat split; Col.
*
apply l6_13_1.
apply l6_2 with (f Q); Between.
apply le_transitivity with (f P) (f Q); Le.
*
intro; subst; destruct HLt; Cong.
-
exists Q; repeat split; Col.
apply l6_13_1; Le.

*****
HOut : Out (f P) (f Q) B
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f P) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f P) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f Q) B)
+++++
intro; subst; destruct HLt; Cong.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).

*****
H : not (eq (f P) A)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
HColA : Col (f P) (f Q) A
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
destruct HColA as [|[|]].
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].

*****
H : not (eq (f P) A)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
H0 : Bet (f P) (f Q) A
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
-
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-

*****
H : not (eq (f P) A)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
H0 : Bet (f P) (f Q) A
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
apply (extension_image_density_aux P Q); trivial.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.

*****

*****

+++++
-
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-

*****
H : not (eq (f P) A)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
H0 : Bet (f Q) A (f P)
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
destruct (eq_dec_points (f Q) A).
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).

*****
H1 : eq (f Q) A
H : not (eq (f P) A)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
H0 : Bet (f Q) A (f P)
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
treat_equalities.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
treat_equalities.

*****
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f Q) B
HBet : Bet (f P) (f Q) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f Q) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet (f Q) (f X) B) (and (not (eq (f X) (f Q))) (not (eq (f X) B)))))
+++++
destruct (segment_construction P Q P Q) as [Q' []].
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
treat_equalities.
destruct (segment_construction P Q P Q) as [Q' []].

*****
H1 : Cong Q Q' P Q
H0 : Bet P Q Q'
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f Q) B
HBet : Bet (f P) (f Q) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f Q) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet (f Q) (f X) B) (and (not (eq (f X) (f Q))) (not (eq (f X) B)))))
+++++
exists Q'.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
treat_equalities.
destruct (segment_construction P Q P Q) as [Q' []].
exists Q'.

*****
H1 : Cong Q Q' P Q
H0 : Bet P Q Q'
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f Q) B
HBet : Bet (f P) (f Q) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f Q) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q Q') (and (Bet (f Q) (f Q') B) (and (not (eq (f Q') (f Q))) (not (eq (f Q') B))))
+++++
assert (HBet' : Bet (f P) (f Q) (f Q')) by (apply fBet; Col).
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
treat_equalities.
destruct (segment_construction P Q P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f P) (f Q) (f Q')) by (apply fBet; Col).

*****
HBet' : Bet (f P) (f Q) (f Q')
H1 : Cong Q Q' P Q
H0 : Bet P Q Q'
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f Q) B
HBet : Bet (f P) (f Q) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f Q) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q Q') (and (Bet (f Q) (f Q') B) (and (not (eq (f Q') (f Q))) (not (eq (f Q') B))))
+++++
assert (HCong' : Cong (f Q) (f Q') (f P) (f Q)) by (apply fCong; Col).
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
treat_equalities.
destruct (segment_construction P Q P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f P) (f Q) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f Q) (f Q') (f P) (f Q)) by (apply fCong; Col).

*****
HCong' : Cong (f Q) (f Q') (f P) (f Q)
HBet' : Bet (f P) (f Q) (f Q')
H1 : Cong Q Q' P Q
H0 : Bet P Q Q'
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f Q) B
HBet : Bet (f P) (f Q) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f Q) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q Q') (and (Bet (f Q) (f Q') B) (and (not (eq (f Q') (f Q))) (not (eq (f Q') B))))
+++++
assert (f Q <> f Q') by (assert_diffs; auto).
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
treat_equalities.
destruct (segment_construction P Q P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f P) (f Q) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f Q) (f Q') (f P) (f Q)) by (apply fCong; Col).
assert (f Q <> f Q') by (assert_diffs; auto).

*****
H2 : not (eq (f Q) (f Q'))
HCong' : Cong (f Q) (f Q') (f P) (f Q)
HBet' : Bet (f P) (f Q) (f Q')
H1 : Cong Q Q' P Q
H0 : Bet P Q Q'
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f Q) B
HBet : Bet (f P) (f Q) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f Q) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q Q') (and (Bet (f Q) (f Q') B) (and (not (eq (f Q') (f Q))) (not (eq (f Q') B))))
+++++
assert (HLt2 : Lt (f Q) (f Q') (f Q) B) by (apply (cong2_lt__lt (f P) (f Q) (f Q) B); Cong).
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
treat_equalities.
destruct (segment_construction P Q P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f P) (f Q) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f Q) (f Q') (f P) (f Q)) by (apply fCong; Col).
assert (f Q <> f Q') by (assert_diffs; auto).
assert (HLt2 : Lt (f Q) (f Q') (f Q) B) by (apply (cong2_lt__lt (f P) (f Q) (f Q) B); Cong).

*****
HLt2 : Lt (f Q) (f Q') (f Q) B
H2 : not (eq (f Q) (f Q'))
HCong' : Cong (f Q) (f Q') (f P) (f Q)
HBet' : Bet (f P) (f Q) (f Q')
H1 : Cong Q Q' P Q
H0 : Bet P Q Q'
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f Q) B
HBet : Bet (f P) (f Q) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f Q) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q Q') (and (Bet (f Q) (f Q') B) (and (not (eq (f Q') (f Q))) (not (eq (f Q') B))))
+++++
repeat split; Col.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
treat_equalities.
destruct (segment_construction P Q P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f P) (f Q) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f Q) (f Q') (f P) (f Q)) by (apply fCong; Col).
assert (f Q <> f Q') by (assert_diffs; auto).
assert (HLt2 : Lt (f Q) (f Q') (f Q) B) by (apply (cong2_lt__lt (f P) (f Q) (f Q) B); Cong).
repeat split; Col.

*****
HLt2 : Lt (f Q) (f Q') (f Q) B
H2 : not (eq (f Q) (f Q'))
HCong' : Cong (f Q) (f Q') (f P) (f Q)
HBet' : Bet (f P) (f Q) (f Q')
H1 : Cong Q Q' P Q
H0 : Bet P Q Q'
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f Q) B
HBet : Bet (f P) (f Q) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f Q) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f Q) (f Q') B
+++++
apply l6_13_1; Le; apply l6_2 with (f P); Between.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
treat_equalities.
destruct (segment_construction P Q P Q) as [Q' []].
exists Q'.
assert (HBet' : Bet (f P) (f Q) (f Q')) by (apply fBet; Col).
assert (HCong' : Cong (f Q) (f Q') (f P) (f Q)) by (apply fCong; Col).
assert (f Q <> f Q') by (assert_diffs; auto).
assert (HLt2 : Lt (f Q) (f Q') (f Q) B) by (apply (cong2_lt__lt (f P) (f Q) (f Q) B); Cong).
repeat split; Col.
apply l6_13_1; Le; apply l6_2 with (f P); Between.

*****
HLt2 : Lt (f Q) (f Q') (f Q) B
H2 : not (eq (f Q) (f Q'))
HCong' : Cong (f Q) (f Q') (f P) (f Q)
HBet' : Bet (f P) (f Q) (f Q')
H1 : Cong Q Q' P Q
H0 : Bet P Q Q'
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HLt : Lt (f P) (f Q) (f Q) B
HBet : Bet (f P) (f Q) B
HColB : Col (f P) (f Q) B
HAB : not (eq (f Q) B)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f Q') B)
+++++
intro; subst; destruct HLt2; Cong.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).

*****
H1 : not (eq (f Q) A)
H : not (eq (f P) A)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
H0 : Bet (f Q) A (f P)
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
exists Q.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
exists Q.

*****
H1 : not (eq (f Q) A)
H : not (eq (f P) A)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
H0 : Bet (f Q) A (f P)
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q Q) (and (Bet A (f Q) B) (and (not (eq (f Q) A)) (not (eq (f Q) B))))
+++++
assert (HLt2 : Lt A (f Q) A B) by (apply le1234_lt__lt with (f P) (f Q); Le).
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
exists Q.
assert (HLt2 : Lt A (f Q) A B) by (apply le1234_lt__lt with (f P) (f Q); Le).

*****
HLt2 : Lt A (f Q) A B
H1 : not (eq (f Q) A)
H : not (eq (f P) A)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
H0 : Bet (f Q) A (f P)
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q Q) (and (Bet A (f Q) B) (and (not (eq (f Q) A)) (not (eq (f Q) B))))
+++++
repeat split; Col.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
exists Q.
assert (HLt2 : Lt A (f Q) A B) by (apply le1234_lt__lt with (f P) (f Q); Le).
repeat split; Col.

*****
HLt2 : Lt A (f Q) A B
H1 : not (eq (f Q) A)
H : not (eq (f P) A)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
H0 : Bet (f Q) A (f P)
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A (f Q) B
+++++
apply l6_13_1; Le; apply l6_2 with (f P); Between.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
exists Q.
assert (HLt2 : Lt A (f Q) A B) by (apply le1234_lt__lt with (f P) (f Q); Le).
repeat split; Col.
apply l6_13_1; Le; apply l6_2 with (f P); Between.

*****
HLt2 : Lt A (f Q) A B
H1 : not (eq (f Q) A)
H : not (eq (f P) A)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
H0 : Bet (f Q) A (f P)
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f Q) B)
+++++
intro; subst; destruct HLt2; Cong.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
exists Q.
assert (HLt2 : Lt A (f Q) A B) by (apply le1234_lt__lt with (f P) (f Q); Le).
repeat split; Col.
apply l6_13_1; Le; apply l6_2 with (f P); Between.
intro; subst; destruct HLt2; Cong.

*****

*****

+++++
-
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
exists Q.
assert (HLt2 : Lt A (f Q) A B) by (apply le1234_lt__lt with (f P) (f Q); Le).
repeat split; Col.
apply l6_13_1; Le; apply l6_2 with (f P); Between.
intro; subst; destruct HLt2; Cong.
-

*****
H : not (eq (f P) A)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
H0 : Bet A (f P) (f Q)
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
apply line_extension_symmetry in fLineExt.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
exists Q.
assert (HLt2 : Lt A (f Q) A B) by (apply le1234_lt__lt with (f P) (f Q); Le).
repeat split; Col.
apply l6_13_1; Le; apply l6_2 with (f P); Between.
intro; subst; destruct HLt2; Cong.
-
apply line_extension_symmetry in fLineExt.

*****
H : not (eq (f P) A)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
H0 : Bet A (f P) (f Q)
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f Q P
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
destruct (extension_image_density_aux Q P f archi fLineExt A B) as [X]; Between.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
exists Q.
assert (HLt2 : Lt A (f Q) A B) by (apply le1234_lt__lt with (f P) (f Q); Le).
repeat split; Col.
apply l6_13_1; Le; apply l6_2 with (f P); Between.
intro; subst; destruct HLt2; Cong.
-
apply line_extension_symmetry in fLineExt.
destruct (extension_image_density_aux Q P f archi fLineExt A B) as [X]; Between.

*****
H : not (eq (f P) A)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
H0 : Bet A (f P) (f Q)
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f Q P
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt (f Q) (f P) A B
+++++
apply lt_left_comm, HLt.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
exists Q.
assert (HLt2 : Lt A (f Q) A B) by (apply le1234_lt__lt with (f P) (f Q); Le).
repeat split; Col.
apply l6_13_1; Le; apply l6_2 with (f P); Between.
intro; subst; destruct HLt2; Cong.
-
apply line_extension_symmetry in fLineExt.
destruct (extension_image_density_aux Q P f archi fLineExt A B) as [X]; Between.
apply lt_left_comm, HLt.

*****
H : not (eq (f P) A)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
H0 : Bet A (f P) (f Q)
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f Q P
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f Q) A B
+++++
apply outer_transitivity_between2 with (f P); Between.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
exists Q.
assert (HLt2 : Lt A (f Q) A B) by (apply le1234_lt__lt with (f P) (f Q); Le).
repeat split; Col.
apply l6_13_1; Le; apply l6_2 with (f P); Between.
intro; subst; destruct HLt2; Cong.
-
apply line_extension_symmetry in fLineExt.
destruct (extension_image_density_aux Q P f archi fLineExt A B) as [X]; Between.
apply lt_left_comm, HLt.
apply outer_transitivity_between2 with (f P); Between.

*****
H1 : and (Col Q P X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B))))
X : Tpoint
H : not (eq (f P) A)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HBet : Bet (f P) A B
HLt : Lt (f P) (f Q) A B
HColB : Col (f P) (f Q) B
H0 : Bet A (f P) (f Q)
HAB : not (eq A B)
A,B : Tpoint
fLineExt : line_extension f Q P
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
Haux : forall (f : forall _ : Tpoint, Tpoint) (P Q : Tpoint)\n (_ : line_extension f P Q), line_extension f Q P
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
spliter; exists X; repeat split; Col.
-----
Lemma extension_image_density_aux2 : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, A <> B -> Col (f P) (f Q) A -> Col (f P) (f Q) B -> Lt (f P) (f Q) A B -> Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
assert (Haux := line_extension_symmetry).
intros Tm Tm2 P Q f archi fLineExt A B HAB HColA HColB HLt HBet.
assert (Hf' := fLineExt); destruct Hf' as [HPQ [fInj [fBet fCong]]].
destruct (eq_dec_points (f P) A).
destruct HColA as [|[|]].
-
apply (extension_image_density_aux P Q); trivial.
-
destruct (eq_dec_points (f Q) A).
exists Q.
assert (HLt2 : Lt A (f Q) A B) by (apply le1234_lt__lt with (f P) (f Q); Le).
repeat split; Col.
apply l6_13_1; Le; apply l6_2 with (f P); Between.
intro; subst; destruct HLt2; Cong.
-
apply line_extension_symmetry in fLineExt.
destruct (extension_image_density_aux Q P f archi fLineExt A B) as [X]; Between.
apply lt_left_comm, HLt.
apply outer_transitivity_between2 with (f P); Between.
spliter; exists X; repeat split; Col.

*****

*****

+++++
Qed.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless}\n  {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm}\n  P Q (f : @Tpoint Tn -> @Tpoint Tm),\n  @archimedes_axiom Tm ->\n  line_extension f P Q ->\n  forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B ->\n  exists X, Col P Q X /\ Bet A (f X) B /\ f X <> A /\ f X <> B.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (P Q : Tpoint) (f : forall _ : Tpoint, Tpoint) (_ : archimedes_axiom) (_ : line_extension f P Q) (A B : Tpoint) (_ : Col (f P) (f Q) A) (_ : Col (f P) (f Q) B) (_ : not (eq A B)), ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
Proof.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (Tm : Tarski_neutral_dimensionless) (_ : Tarski_neutral_dimensionless_with_decidable_point_equality Tm) (P Q : Tpoint) (f : forall _ : Tpoint, Tpoint) (_ : archimedes_axiom) (_ : line_extension f P Q) (A B : Tpoint) (_ : Col (f P) (f Q) A) (_ : Col (f P) (f Q) B) (_ : not (eq A B)), ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.

*****
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
assert (Hf' := fLineExt).
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).

*****
Hf' : line_extension f P Q
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
destruct Hf' as [HPQ [fInj [fBet fCong]]].
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].

*****
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
assert (f P <> f Q).
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).

*****
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f P) (f Q))
+++++
intro.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
intro.

*****
H : eq (f P) (f Q)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HPQ, fInj.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
intro.
apply HPQ, fInj.

*****
H : eq (f P) (f Q)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q P
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
intro.
apply HPQ, fInj.

*****
H : eq (f P) (f Q)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q Q
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
intro.
apply HPQ, fInj.

*****
H : eq (f P) (f Q)
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f P) (f Q)
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).

*****
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].

*****
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f P) (f Q))
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].

*****
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Reach A B (f P) (f Q)
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].

*****
HLt : Lt (f P) fQ' A B
HGrad' : GradExp (f P) fQ' (f Q)
fQ' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.

*****
HLt : Lt (f P) fQ' A B
HGrad' : GradExp (f P) fQ' (f Q)
fQ' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].

*****
HLt : Lt (f P) fQ' A B
HGrad' : GradExp (f P) fQ' (f Q)
fQ' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q P
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].

*****
HLt : Lt (f P) fQ' A B
HGrad' : GradExp (f P) fQ' (f Q)
fQ' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q Q
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].

*****
HLt : Lt (f P) fQ' A B
HGrad' : GradExp (f P) fQ' (f Q)
fQ' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
GradExp (f P) fQ' (f Q)
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].

*****
H0 : eq (f Q') fQ'
HGrad : GradExp P Q' Q
HCol : Col P Q Q'
Q' : Tpoint
HLt : Lt (f P) fQ' A B
HGrad' : GradExp (f P) fQ' (f Q)
fQ' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.

*****
H0 : eq (f Q') fQ'
HGrad : GradExp P Q' Q
HCol : Col P Q Q'
Q' : Tpoint
HLt : Lt (f P) fQ' A B
HGrad' : GradExp (f P) fQ' (f Q)
fQ' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
subst fQ'.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.

*****
HGrad : GradExp P Q' Q
HCol : Col P Q Q'
HGrad' : GradExp (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
apply gradexp__grad in HGrad.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.

*****
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : GradExp (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
apply gradexp__grad in HGrad'.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.

*****
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
assert (HPQ' : P <> Q').
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').

*****
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Q')
+++++
intro.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
intro.

*****
H0 : eq P Q'
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
intro.
subst.

*****
HPQ : not (eq Q' Q)
fInj : inj_line f Q' Q
fBet : pres_bet_line f Q' Q
fCong : pres_cong_line f Q' Q
H : not (eq (f Q') (f Q))
HAB : not (eq A B)
HA : Col (f Q') (f Q) A
HB : Col (f Q') (f Q) B
fLineExt : line_extension f Q' Q
HLt : Lt (f Q') (f Q') A B
A,B : Tpoint
HGrad' : Grad (f Q') (f Q') (f Q)
HCol : Col Q' Q Q'
HGrad : Grad Q' Q' Q
Q' : Tpoint
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply grad112__eq in HGrad.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
intro.
subst.
apply grad112__eq in HGrad.

*****
HPQ : not (eq Q' Q)
fInj : inj_line f Q' Q
fBet : pres_bet_line f Q' Q
fCong : pres_cong_line f Q' Q
H : not (eq (f Q') (f Q))
HAB : not (eq A B)
HA : Col (f Q') (f Q) A
HB : Col (f Q') (f Q) B
fLineExt : line_extension f Q' Q
HLt : Lt (f Q') (f Q') A B
A,B : Tpoint
HGrad' : Grad (f Q') (f Q') (f Q)
HCol : Col Q' Q Q'
HGrad : eq Q' Q
Q' : Tpoint
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').

*****
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
assert (fLineExt' : line_extension f P Q').
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').

*****
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
line_extension f P Q'
+++++
apply line_extension_stability with Q.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
apply line_extension_stability with Q.

*****
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q Q'
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
apply line_extension_stability with Q.

*****
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Q')
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
apply line_extension_stability with Q.

*****
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
line_extension f P Q
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').

*****
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
assert (HCols : Col (f P) (f Q') A /\ Col (f P) (f Q') B /\ Col (f P) A B).
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).

*****
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col (f P) (f Q') A) (and (Col (f P) (f Q') B) (Col (f P) A B))
+++++
split.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
split.

*****
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q') A
+++++
idtac.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
split.
idtac.

*****
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q') A
+++++
apply col_transitivity_1 with (f Q).
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
split.
idtac.
apply col_transitivity_1 with (f Q).

*****
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f P) (f Q))
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
split.
idtac.
apply col_transitivity_1 with (f Q).

*****
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) (f Q')
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
split.
idtac.
apply col_transitivity_1 with (f Q).

*****
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) A
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
split.

*****
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col (f P) (f Q') B) (Col (f P) A B)
+++++
split.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
split.
split.

*****
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q') B
+++++
apply col_transitivity_1 with (f Q).
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
split.
split.
apply col_transitivity_1 with (f Q).

*****
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f P) (f Q))
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
split.
split.
apply col_transitivity_1 with (f Q).

*****
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) (f Q')
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
split.
split.
apply col_transitivity_1 with (f Q).

*****
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) B
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
split.
split.

*****
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) A B
+++++
apply col_transitivity_1 with (f Q).
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
split.
split.
apply col_transitivity_1 with (f Q).

*****
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f P) (f Q))
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
split.
split.
apply col_transitivity_1 with (f Q).

*****
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) A
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
split.
split.
apply col_transitivity_1 with (f Q).

*****
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) B
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).

*****
HCols : and (Col (f P) (f Q') A) (and (Col (f P) (f Q') B) (Col (f P) A B))
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
destruct HCols as [HA' [HB' Hdij]].
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].

*****
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
assert (HColX : forall X, Col P Q' X -> Col P Q X).
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).

*****
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
+++++
intros.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
intros.

*****
H0 : Col P Q' X
X : Tpoint
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q X
+++++
apply col_transitivity_1 with Q'.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
intros.
apply col_transitivity_1 with Q'.

*****
H0 : Col P Q' X
X : Tpoint
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P Q')
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
intros.
apply col_transitivity_1 with Q'.

*****
H0 : Col P Q' X
X : Tpoint
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q' Q
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
intros.
apply col_transitivity_1 with Q'.

*****
H0 : Col P Q' X
X : Tpoint
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q' X
+++++
Col.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).

*****
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\ Bet A (f X) B /\ f X <> A /\ f X <> B).
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).

*****
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet (f P) A B, ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
intro HBet.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.

*****
HBet : Bet (f P) A B
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
destruct (extension_image_density_aux2 P Q' f archi fLineExt' A B) as [X].
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' A B) as [X].

*****
HBet : Bet (f P) A B
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' A B) as [X].

*****
HBet : Bet (f P) A B
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q') A
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' A B) as [X].

*****
HBet : Bet (f P) A B
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q') B
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' A B) as [X].

*****
HBet : Bet (f P) A B
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt (f P) (f Q') A B
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' A B) as [X].

*****
HBet : Bet (f P) A B
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) A B
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' A B) as [X].

*****
H0 : and (Col P Q' X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B))))
X : Tpoint
HBet : Bet (f P) A B
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' A B) as [X].
auto.

*****
H0 : and (Col P Q' X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B))))
X : Tpoint
HBet : Bet (f P) A B
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
exists X.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' A B) as [X].
auto.
exists X.

*****
H0 : and (Col P Q' X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B))))
X : Tpoint
HBet : Bet (f P) A B
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B))))
+++++
spliter.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' A B) as [X].
auto.
exists X.
spliter.

*****
H3 : not (eq (f X) B)
H2 : not (eq (f X) A)
H1 : Bet A (f X) B
H0 : Col P Q' X
X : Tpoint
HBet : Bet (f P) A B
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B))))
+++++
repeat split.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' A B) as [X].
auto.
exists X.
spliter.
repeat split.

*****
H3 : not (eq (f X) B)
H2 : not (eq (f X) A)
H1 : Bet A (f X) B
H0 : Col P Q' X
X : Tpoint
HBet : Bet (f P) A B
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q X
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' A B) as [X].
auto.
exists X.
spliter.
repeat split.

*****
H3 : not (eq (f X) B)
H2 : not (eq (f X) A)
H1 : Bet A (f X) B
H0 : Col P Q' X
X : Tpoint
HBet : Bet (f P) A B
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A (f X) B
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' A B) as [X].
auto.
exists X.
spliter.
repeat split.

*****
H3 : not (eq (f X) B)
H2 : not (eq (f X) A)
H1 : Bet A (f X) B
H0 : Col P Q' X
X : Tpoint
HBet : Bet (f P) A B
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f X) A)
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' A B) as [X].
auto.
exists X.
spliter.
repeat split.

*****
H3 : not (eq (f X) B)
H2 : not (eq (f X) A)
H1 : Bet A (f X) B
H0 : Col P Q' X
X : Tpoint
HBet : Bet (f P) A B
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f X) B)
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).

*****
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\ Bet A (f X) B /\ f X <> A /\ f X <> B).
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).

*****
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet (f P) B A, ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
intro HBet.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.

*****
HBet : Bet (f P) B A
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
destruct (extension_image_density_aux2 P Q' f archi fLineExt' B A) as [X [HX1 [HX2 []]]].
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' B A) as [X [HX1 [HX2 []]]].

*****
HBet : Bet (f P) B A
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' B A) as [X [HX1 [HX2 []]]].

*****
HBet : Bet (f P) B A
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q') B
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' B A) as [X [HX1 [HX2 []]]].

*****
HBet : Bet (f P) B A
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q') A
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' B A) as [X [HX1 [HX2 []]]].

*****
HBet : Bet (f P) B A
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt (f P) (f Q') B A
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' B A) as [X [HX1 [HX2 []]]].
auto.

*****
HBet : Bet (f P) B A
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Lt (f P) (f Q') B A
+++++
apply lt_right_comm, HLt.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' B A) as [X [HX1 [HX2 []]]].

*****
HBet : Bet (f P) B A
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) B A
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' B A) as [X [HX1 [HX2 []]]].

*****
H1 : not (eq (f X) A)
H0 : not (eq (f X) B)
HX2 : Bet B (f X) A
HX1 : Col P Q' X
X : Tpoint
HBet : Bet (f P) B A
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
auto.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' B A) as [X [HX1 [HX2 []]]].
auto.

*****
H1 : not (eq (f X) A)
H0 : not (eq (f X) B)
HX2 : Bet B (f X) A
HX1 : Col P Q' X
X : Tpoint
HBet : Bet (f P) B A
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
exists X.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' B A) as [X [HX1 [HX2 []]]].
auto.
exists X.

*****
H1 : not (eq (f X) A)
H0 : not (eq (f X) B)
HX2 : Bet B (f X) A
HX1 : Col P Q' X
X : Tpoint
HBet : Bet (f P) B A
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B))))
+++++
repeat split.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' B A) as [X [HX1 [HX2 []]]].
auto.
exists X.
repeat split.

*****
H1 : not (eq (f X) A)
H0 : not (eq (f X) B)
HX2 : Bet B (f X) A
HX1 : Col P Q' X
X : Tpoint
HBet : Bet (f P) B A
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q X
+++++
Between.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' B A) as [X [HX1 [HX2 []]]].
auto.
exists X.
repeat split.

*****
H1 : not (eq (f X) A)
H0 : not (eq (f X) B)
HX2 : Bet B (f X) A
HX1 : Col P Q' X
X : Tpoint
HBet : Bet (f P) B A
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A (f X) B
+++++
Between.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' B A) as [X [HX1 [HX2 []]]].
auto.
exists X.
repeat split.

*****
H1 : not (eq (f X) A)
H0 : not (eq (f X) B)
HX2 : Bet B (f X) A
HX1 : Col P Q' X
X : Tpoint
HBet : Bet (f P) B A
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f X) A)
+++++
Between.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
intro HBet.
destruct (extension_image_density_aux2 P Q' f archi fLineExt' B A) as [X [HX1 [HX2 []]]].
auto.
exists X.
repeat split.

*****
H1 : not (eq (f X) A)
H0 : not (eq (f X) B)
HX2 : Bet B (f X) A
HX1 : Col P Q' X
X : Tpoint
HBet : Bet (f P) B A
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f X) B)
+++++
Between.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).

*****
HH' : forall _ : Bet (f P) B A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
Hdij : Col (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
destruct Hdij as [|[|]].
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].

*****
HH' : forall _ : Bet (f P) B A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
H0 : Bet (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
apply HH.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].
apply HH.

*****
HH' : forall _ : Bet (f P) B A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
H0 : Bet (f P) A B
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) A B
+++++
trivial.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].

*****
HH' : forall _ : Bet (f P) B A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
H0 : Bet A B (f P)
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
apply HH'.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].
apply HH'.

*****
HH' : forall _ : Bet (f P) B A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
H0 : Bet A B (f P)
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) B A
+++++
Between.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].

*****
HH' : forall _ : Bet (f P) B A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
H0 : Bet B (f P) A
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
destruct (eq_dec_points (f P) A).
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].
destruct (eq_dec_points (f P) A).

*****
H1 : eq (f P) A
HH' : forall _ : Bet (f P) B A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
H0 : Bet B (f P) A
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
subst.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].
destruct (eq_dec_points (f P) A).
subst.

*****
HH : forall _ : Bet (f P) (f P) B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet (f P) (f X) B)\n (and (not (eq (f X) (f P))) (not (eq (f X) B)))))
HH' : forall _ : Bet (f P) B (f P),\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet (f P) (f X) B)\n (and (not (eq (f X) (f P))) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
H0 : Bet B (f P) (f P)
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') (f P)
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') (f P) B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq (f P) B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) (f P)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet (f P) (f X) B) (and (not (eq (f X) (f P))) (not (eq (f X) B)))))
+++++
apply HH.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].
destruct (eq_dec_points (f P) A).
subst.
apply HH.

*****
HH : forall _ : Bet (f P) (f P) B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet (f P) (f X) B)\n (and (not (eq (f X) (f P))) (not (eq (f X) B)))))
HH' : forall _ : Bet (f P) B (f P),\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet (f P) (f X) B)\n (and (not (eq (f X) (f P))) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
H0 : Bet B (f P) (f P)
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') (f P)
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') (f P) B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq (f P) B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) (f P)
B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) (f P) B
+++++
Between.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].
destruct (eq_dec_points (f P) A).

*****
H1 : not (eq (f P) A)
HH' : forall _ : Bet (f P) B A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
H0 : Bet B (f P) A
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
destruct (eq_dec_points (f P) B).
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].
destruct (eq_dec_points (f P) A).
destruct (eq_dec_points (f P) B).

*****
H2 : eq (f P) B
H1 : not (eq (f P) A)
HH' : forall _ : Bet (f P) B A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
H0 : Bet B (f P) A
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
subst.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].
destruct (eq_dec_points (f P) A).
destruct (eq_dec_points (f P) B).
subst.

*****
H1 : not (eq (f P) A)
HH : forall _ : Bet (f P) A (f P),\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) (f P))\n (and (not (eq (f X) A)) (not (eq (f X) (f P))))))
HH' : forall _ : Bet (f P) (f P) A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) (f P))\n (and (not (eq (f X) A)) (not (eq (f X) (f P))))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
HB' : Col (f P) (f Q') (f P)
H0 : Bet (f P) (f P) A
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A (f P)
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HB : Col (f P) (f Q) (f P)
HAB : not (eq A (f P))
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) (f P)) (and (not (eq (f X) A)) (not (eq (f X) (f P))))))
+++++
apply HH'.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].
destruct (eq_dec_points (f P) A).
destruct (eq_dec_points (f P) B).
subst.
apply HH'.

*****
H1 : not (eq (f P) A)
HH : forall _ : Bet (f P) A (f P),\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) (f P))\n (and (not (eq (f X) A)) (not (eq (f X) (f P))))))
HH' : forall _ : Bet (f P) (f P) A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) (f P))\n (and (not (eq (f X) A)) (not (eq (f X) (f P))))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
HB' : Col (f P) (f Q') (f P)
H0 : Bet (f P) (f P) A
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A (f P)
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HB : Col (f P) (f Q) (f P)
HAB : not (eq A (f P))
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) (f P) A
+++++
Between.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].
destruct (eq_dec_points (f P) A).
destruct (eq_dec_points (f P) B).

*****
H2 : not (eq (f P) B)
H1 : not (eq (f P) A)
HH' : forall _ : Bet (f P) B A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
H0 : Bet B (f P) A
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (Col P Q X) (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
+++++
exists P.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].
destruct (eq_dec_points (f P) A).
destruct (eq_dec_points (f P) B).
exists P.

*****
H2 : not (eq (f P) B)
H1 : not (eq (f P) A)
HH' : forall _ : Bet (f P) B A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
H0 : Bet B (f P) A
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q P) (and (Bet A (f P) B) (and (not (eq (f P) A)) (not (eq (f P) B))))
+++++
repeat split.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].
destruct (eq_dec_points (f P) A).
destruct (eq_dec_points (f P) B).
exists P.
repeat split.

*****
H2 : not (eq (f P) B)
H1 : not (eq (f P) A)
HH' : forall _ : Bet (f P) B A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
H0 : Bet B (f P) A
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q P
+++++
finish.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].
destruct (eq_dec_points (f P) A).
destruct (eq_dec_points (f P) B).
exists P.
repeat split.

*****
H2 : not (eq (f P) B)
H1 : not (eq (f P) A)
HH' : forall _ : Bet (f P) B A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
H0 : Bet B (f P) A
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet A (f P) B
+++++
finish.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].
destruct (eq_dec_points (f P) A).
destruct (eq_dec_points (f P) B).
exists P.
repeat split.

*****
H2 : not (eq (f P) B)
H1 : not (eq (f P) A)
HH' : forall _ : Bet (f P) B A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
H0 : Bet B (f P) A
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f P) A)
+++++
finish.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).
destruct (reach__ex_gradexp_lt (f P) (f Q) A B) as [fQ' [HGrad' HLt]].
auto.
destruct (extension_gradexp P Q f fLineExt P Q fQ') as [Q' [HCol [HGrad]]].
Col.
subst fQ'.
apply gradexp__grad in HGrad.
apply gradexp__grad in HGrad'.
assert (HPQ' : P <> Q').
assert (fLineExt' : line_extension f P Q').
assert (HCols : Col (f P) (f Q') A /\\ Col (f P) (f Q') B /\\ Col (f P) A B).
destruct HCols as [HA' [HB' Hdij]].
assert (HColX : forall X, Col P Q' X -> Col P Q X).
assert (HH : Bet (f P) A B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
assert (HH' : Bet (f P) B A -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B).
destruct Hdij as [|[|]].
destruct (eq_dec_points (f P) A).
destruct (eq_dec_points (f P) B).
exists P.
repeat split.

*****
H2 : not (eq (f P) B)
H1 : not (eq (f P) A)
HH' : forall _ : Bet (f P) B A,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HH : forall _ : Bet (f P) A B,\nex\n (fun X : Tpoint =>\n and (Col P Q X)\n (and (Bet A (f X) B) (and (not (eq (f X) A)) (not (eq (f X) B)))))
HColX : forall (X : Tpoint) (_ : Col P Q' X), Col P Q X
H0 : Bet B (f P) A
HB' : Col (f P) (f Q') B
HA' : Col (f P) (f Q') A
fLineExt' : line_extension f P Q'
HPQ' : not (eq P Q')
HGrad : Grad P Q' Q
HCol : Col P Q Q'
HGrad' : Grad (f P) (f Q') (f Q)
HLt : Lt (f P) (f Q') A B
Q' : Tpoint
H : not (eq (f P) (f Q))
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
fInj : inj_line f P Q
HPQ : not (eq P Q)
HAB : not (eq A B)
HB : Col (f P) (f Q) B
HA : Col (f P) (f Q) A
A,B : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq (f P) B)
+++++
finish.
-----
Lemma extension_image_density : forall {Tm: Tarski_neutral_dimensionless} {Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm} P Q (f : @Tpoint Tn -> @Tpoint Tm), @archimedes_axiom Tm -> line_extension f P Q -> forall A B, Col (f P) (f Q) A -> Col (f P) (f Q) B -> A <> B -> exists X, Col P Q X /\\ Bet A (f X) B /\\ f X <> A /\\ f X <> B.
Proof.
intros Tm Tm2 P Q f archi fLineExt A B HA HB HAB.
assert (Hf' := fLineExt).
destruct Hf' as [HPQ [fInj [fBet fCong]]].
assert (f P <> f Q).

*****

*****

+++++
Qed.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : dedekind_s_axiom, line_completeness
+++++
Proof.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : dedekind_s_axiom, line_completeness
+++++
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.

*****
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Col P Q B) (eq (f B) A))
+++++
destruct (eq_dec_points (f P) A).
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).

*****
H : eq (f P) A
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Col P Q B) (eq (f B) A))
+++++
subst; exists P; split; Col.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.

*****
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Col P Q B) (eq (f B) A))
+++++
destruct (dedekind (fun X => Col P Q X /\ Bet (f P) (f X) A) (fun X => Col P Q X /\ Bet (f P) A (f X))) as [B HB].
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].

*****
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun A0 : Tpoint => forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A)) (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet A0 X Y)
+++++
exists P.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists P.

*****
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A)) (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet P X Y
+++++
intros X Y [] [].
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists P.
intros X Y [] [].

*****
H3 : Bet (f P) A (f Y)
H2 : Col P Q Y
H1 : Bet (f P) (f X) A
H0 : Col P Q X
X,Y : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P X Y
+++++
apply (line_extension_reverse_bet f P Q); Col.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists P.
intros X Y [] [].
apply (line_extension_reverse_bet f P Q); Col.

*****
H3 : Bet (f P) A (f Y)
H2 : Col P Q Y
H1 : Bet (f P) (f X) A
H0 : Col P Q X
X,Y : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) (f X) (f Y)
+++++
eBetween.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].

*****
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun B : Tpoint => and (Col P Q B) (eq (f B) A))
+++++
exists B.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.

*****
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q B) (eq (f B) A)
+++++
assert (HR : exists R, Col P Q R /\ Bet (f P) A (f R)).
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).

*****
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun R : Tpoint => and (Col P Q R) (Bet (f P) A (f R)))
+++++
destruct (segment_construction (f P) A (f P) A) as [A' []].
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct (segment_construction (f P) A (f P) A) as [A' []].

*****
H1 : Cong A A' (f P) A
H0 : Bet (f P) A A'
A' : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun R : Tpoint => and (Col P Q R) (Bet (f P) A (f R)))
+++++
assert_diffs.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct (segment_construction (f P) A (f P) A) as [A' []].
assert_diffs.

*****
H3 : not (eq A A')
H2 : not (eq (f P) A')
H1 : Cong A A' (f P) A
H0 : Bet (f P) A A'
A' : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun R : Tpoint => and (Col P Q R) (Bet (f P) A (f R)))
+++++
destruct (extension_image_density P Q f archi fLineExt A A') as [R [HR1 [HR2 []]]]; Col.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct (segment_construction (f P) A (f P) A) as [A' []].
assert_diffs.
destruct (extension_image_density P Q f archi fLineExt A A') as [R [HR1 [HR2 []]]]; Col.

*****
H3 : not (eq A A')
H2 : not (eq (f P) A')
H1 : Cong A A' (f P) A
H0 : Bet (f P) A A'
A' : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) A'
+++++
apply col_transitivity_1 with A; Col.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct (segment_construction (f P) A (f P) A) as [A' []].
assert_diffs.
destruct (extension_image_density P Q f archi fLineExt A A') as [R [HR1 [HR2 []]]]; Col.
apply col_transitivity_1 with A; Col.

*****
H5 : not (eq (f R) A')
H4 : not (eq (f R) A)
HR2 : Bet A (f R) A'
HR1 : Col P Q R
R : Tpoint
H3 : not (eq A A')
H2 : not (eq (f P) A')
H1 : Cong A A' (f P) A
H0 : Bet (f P) A A'
A' : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
ex (fun R : Tpoint => and (Col P Q R) (Bet (f P) A (f R)))
+++++
exists R; split; eBetween.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).

*****
HR : ex (fun R : Tpoint => and (Col P Q R) (Bet (f P) A (f R)))
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q B) (eq (f B) A)
+++++
destruct HR as [R []].
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].

*****
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q B) (eq (f B) A)
+++++
assert (HBet : Bet P B R).
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).

*****
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet P B R
+++++
apply HB; split; finish; eBetween.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.

*****
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q B) (eq (f B) A)
+++++
assert (Col P Q B).
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).

*****
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P Q B
+++++
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.

*****
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q B) (eq (f B) A)
+++++
destruct (eq_dec_points (f B) A); [split; assumption|].
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].

*****
H3 : not (eq (f B) A)
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col P Q B) (eq (f B) A)
+++++
exfalso.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.

*****
H3 : not (eq (f B) A)
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (Hf := fLineExt).
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.
assert (Hf := fLineExt).

*****
Hf : line_extension f P Q
H3 : not (eq (f B) A)
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct Hf as [HPQ [finj [fBet fCong]]].
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.
assert (Hf := fLineExt).
destruct Hf as [HPQ [finj [fBet fCong]]].

*****
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
finj : inj_line f P Q
HPQ : not (eq P Q)
H3 : not (eq (f B) A)
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (extension_image_density P Q f archi fLineExt A (f B)) as [X [HX1 [HX2 [HX3 Habs]]]]; auto.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.
assert (Hf := fLineExt).
destruct Hf as [HPQ [finj [fBet fCong]]].
destruct (extension_image_density P Q f archi fLineExt A (f B)) as [X [HX1 [HX2 [HX3 Habs]]]]; auto.

*****
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
finj : inj_line f P Q
HPQ : not (eq P Q)
H3 : not (eq (f B) A)
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col (f P) (f Q) (f B)
+++++
apply (pres_bet_line__col f P Q); Col.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.
assert (Hf := fLineExt).
destruct Hf as [HPQ [finj [fBet fCong]]].
destruct (extension_image_density P Q f archi fLineExt A (f B)) as [X [HX1 [HX2 [HX3 Habs]]]]; auto.
apply (pres_bet_line__col f P Q); Col.

*****
Habs : not (eq (f X) (f B))
HX3 : not (eq (f X) A)
HX2 : Bet A (f X) (f B)
HX1 : Col P Q X
X : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
finj : inj_line f P Q
HPQ : not (eq P Q)
H3 : not (eq (f B) A)
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
False
+++++
destruct (l5_3 (f P) A (f B) (f R)); auto; [apply fBet; Col|apply Habs..].
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.
assert (Hf := fLineExt).
destruct Hf as [HPQ [finj [fBet fCong]]].
destruct (extension_image_density P Q f archi fLineExt A (f B)) as [X [HX1 [HX2 [HX3 Habs]]]]; auto.
apply (pres_bet_line__col f P Q); Col.
destruct (l5_3 (f P) A (f B) (f R)); auto; [apply fBet; Col|apply Habs..].

*****
H4 : Bet (f P) A (f B)
Habs : not (eq (f X) (f B))
HX3 : not (eq (f X) A)
HX2 : Bet A (f X) (f B)
HX1 : Col P Q X
X : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
finj : inj_line f P Q
HPQ : not (eq P Q)
H3 : not (eq (f B) A)
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f X) (f B)
+++++
-
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.
assert (Hf := fLineExt).
destruct Hf as [HPQ [finj [fBet fCong]]].
destruct (extension_image_density P Q f archi fLineExt A (f B)) as [X [HX1 [HX2 [HX3 Habs]]]]; auto.
apply (pres_bet_line__col f P Q); Col.
destruct (l5_3 (f P) A (f B) (f R)); auto; [apply fBet; Col|apply Habs..].
-

*****
H4 : Bet (f P) A (f B)
Habs : not (eq (f X) (f B))
HX3 : not (eq (f X) A)
HX2 : Bet A (f X) (f B)
HX1 : Col P Q X
X : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
finj : inj_line f P Q
HPQ : not (eq P Q)
H3 : not (eq (f B) A)
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f X) (f B)
+++++
apply between_equality with (f P).
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.
assert (Hf := fLineExt).
destruct Hf as [HPQ [finj [fBet fCong]]].
destruct (extension_image_density P Q f archi fLineExt A (f B)) as [X [HX1 [HX2 [HX3 Habs]]]]; auto.
apply (pres_bet_line__col f P Q); Col.
destruct (l5_3 (f P) A (f B) (f R)); auto; [apply fBet; Col|apply Habs..].
-
apply between_equality with (f P).

*****
H4 : Bet (f P) A (f B)
Habs : not (eq (f X) (f B))
HX3 : not (eq (f X) A)
HX2 : Bet A (f X) (f B)
HX1 : Col P Q X
X : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
finj : inj_line f P Q
HPQ : not (eq P Q)
H3 : not (eq (f B) A)
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f X) (f B) (f P)
+++++
apply between_symmetry, fBet, HB; try split; Col; Between.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.
assert (Hf := fLineExt).
destruct Hf as [HPQ [finj [fBet fCong]]].
destruct (extension_image_density P Q f archi fLineExt A (f B)) as [X [HX1 [HX2 [HX3 Habs]]]]; auto.
apply (pres_bet_line__col f P Q); Col.
destruct (l5_3 (f P) A (f B) (f R)); auto; [apply fBet; Col|apply Habs..].
-
apply between_equality with (f P).
apply between_symmetry, fBet, HB; try split; Col; Between.

*****
H4 : Bet (f P) A (f B)
Habs : not (eq (f X) (f B))
HX3 : not (eq (f X) A)
HX2 : Bet A (f X) (f B)
HX1 : Col P Q X
X : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
finj : inj_line f P Q
HPQ : not (eq P Q)
H3 : not (eq (f B) A)
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f P) A (f X)
+++++
apply between_inner_transitivity with (f B); assumption.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.
assert (Hf := fLineExt).
destruct Hf as [HPQ [finj [fBet fCong]]].
destruct (extension_image_density P Q f archi fLineExt A (f B)) as [X [HX1 [HX2 [HX3 Habs]]]]; auto.
apply (pres_bet_line__col f P Q); Col.
destruct (l5_3 (f P) A (f B) (f R)); auto; [apply fBet; Col|apply Habs..].
-
apply between_equality with (f P).
apply between_symmetry, fBet, HB; try split; Col; Between.
apply between_inner_transitivity with (f B); assumption.

*****
H4 : Bet (f P) A (f B)
Habs : not (eq (f X) (f B))
HX3 : not (eq (f X) A)
HX2 : Bet A (f X) (f B)
HX1 : Col P Q X
X : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
finj : inj_line f P Q
HPQ : not (eq P Q)
H3 : not (eq (f B) A)
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f B) (f X) (f P)
+++++
clear dependent R; eBetween.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.
assert (Hf := fLineExt).
destruct Hf as [HPQ [finj [fBet fCong]]].
destruct (extension_image_density P Q f archi fLineExt A (f B)) as [X [HX1 [HX2 [HX3 Habs]]]]; auto.
apply (pres_bet_line__col f P Q); Col.
destruct (l5_3 (f P) A (f B) (f R)); auto; [apply fBet; Col|apply Habs..].
-
apply between_equality with (f P).
apply between_symmetry, fBet, HB; try split; Col; Between.
apply between_inner_transitivity with (f B); assumption.
clear dependent R; eBetween.

*****

*****

+++++
-
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.
assert (Hf := fLineExt).
destruct Hf as [HPQ [finj [fBet fCong]]].
destruct (extension_image_density P Q f archi fLineExt A (f B)) as [X [HX1 [HX2 [HX3 Habs]]]]; auto.
apply (pres_bet_line__col f P Q); Col.
destruct (l5_3 (f P) A (f B) (f R)); auto; [apply fBet; Col|apply Habs..].
-
apply between_equality with (f P).
apply between_symmetry, fBet, HB; try split; Col; Between.
apply between_inner_transitivity with (f B); assumption.
clear dependent R; eBetween.
-

*****
H4 : Bet (f P) (f B) A
Habs : not (eq (f X) (f B))
HX3 : not (eq (f X) A)
HX2 : Bet A (f X) (f B)
HX1 : Col P Q X
X : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
finj : inj_line f P Q
HPQ : not (eq P Q)
H3 : not (eq (f B) A)
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
eq (f X) (f B)
+++++
apply between_equality with (f P).
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.
assert (Hf := fLineExt).
destruct Hf as [HPQ [finj [fBet fCong]]].
destruct (extension_image_density P Q f archi fLineExt A (f B)) as [X [HX1 [HX2 [HX3 Habs]]]]; auto.
apply (pres_bet_line__col f P Q); Col.
destruct (l5_3 (f P) A (f B) (f R)); auto; [apply fBet; Col|apply Habs..].
-
apply between_equality with (f P).
apply between_symmetry, fBet, HB; try split; Col; Between.
apply between_inner_transitivity with (f B); assumption.
clear dependent R; eBetween.
-
apply between_equality with (f P).

*****
H4 : Bet (f P) (f B) A
Habs : not (eq (f X) (f B))
HX3 : not (eq (f X) A)
HX2 : Bet A (f X) (f B)
HX1 : Col P Q X
X : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
finj : inj_line f P Q
HPQ : not (eq P Q)
H3 : not (eq (f B) A)
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f X) (f B) (f P)
+++++
clear dependent R; eBetween.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.
assert (Hf := fLineExt).
destruct Hf as [HPQ [finj [fBet fCong]]].
destruct (extension_image_density P Q f archi fLineExt A (f B)) as [X [HX1 [HX2 [HX3 Habs]]]]; auto.
apply (pres_bet_line__col f P Q); Col.
destruct (l5_3 (f P) A (f B) (f R)); auto; [apply fBet; Col|apply Habs..].
-
apply between_equality with (f P).
apply between_symmetry, fBet, HB; try split; Col; Between.
apply between_inner_transitivity with (f B); assumption.
clear dependent R; eBetween.
-
apply between_equality with (f P).
clear dependent R; eBetween.

*****
H4 : Bet (f P) (f B) A
Habs : not (eq (f X) (f B))
HX3 : not (eq (f X) A)
HX2 : Bet A (f X) (f B)
HX1 : Col P Q X
X : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
finj : inj_line f P Q
HPQ : not (eq P Q)
H3 : not (eq (f B) A)
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f B) (f X) (f P)
+++++
apply between_exchange3 with (f R).
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.
assert (Hf := fLineExt).
destruct Hf as [HPQ [finj [fBet fCong]]].
destruct (extension_image_density P Q f archi fLineExt A (f B)) as [X [HX1 [HX2 [HX3 Habs]]]]; auto.
apply (pres_bet_line__col f P Q); Col.
destruct (l5_3 (f P) A (f B) (f R)); auto; [apply fBet; Col|apply Habs..].
-
apply between_equality with (f P).
apply between_symmetry, fBet, HB; try split; Col; Between.
apply between_inner_transitivity with (f B); assumption.
clear dependent R; eBetween.
-
apply between_equality with (f P).
clear dependent R; eBetween.
apply between_exchange3 with (f R).

*****
H4 : Bet (f P) (f B) A
Habs : not (eq (f X) (f B))
HX3 : not (eq (f X) A)
HX2 : Bet A (f X) (f B)
HX1 : Col P Q X
X : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
finj : inj_line f P Q
HPQ : not (eq P Q)
H3 : not (eq (f B) A)
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f R) (f B) (f X)
+++++
apply between_symmetry, fBet; Col; apply HB; split; Col; eBetween.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.
assert (Hf := fLineExt).
destruct Hf as [HPQ [finj [fBet fCong]]].
destruct (extension_image_density P Q f archi fLineExt A (f B)) as [X [HX1 [HX2 [HX3 Habs]]]]; auto.
apply (pres_bet_line__col f P Q); Col.
destruct (l5_3 (f P) A (f B) (f R)); auto; [apply fBet; Col|apply Habs..].
-
apply between_equality with (f P).
apply between_symmetry, fBet, HB; try split; Col; Between.
apply between_inner_transitivity with (f B); assumption.
clear dependent R; eBetween.
-
apply between_equality with (f P).
clear dependent R; eBetween.
apply between_exchange3 with (f R).
apply between_symmetry, fBet; Col; apply HB; split; Col; eBetween.

*****
H4 : Bet (f P) (f B) A
Habs : not (eq (f X) (f B))
HX3 : not (eq (f X) A)
HX2 : Bet A (f X) (f B)
HX1 : Col P Q X
X : Tpoint
fCong : pres_cong_line f P Q
fBet : pres_bet_line f P Q
finj : inj_line f P Q
HPQ : not (eq P Q)
H3 : not (eq (f B) A)
H2 : Col P Q B
HBet : Bet P B R
H1 : Bet (f P) A (f R)
H0 : Col P Q R
R : Tpoint
HB : forall (X Y : Tpoint) (_ : and (Col P Q X) (Bet (f P) (f X) A))\n (_ : and (Col P Q Y) (Bet (f P) A (f Y))), Bet X B Y
B : Tpoint
H : not (eq (f P) A)
HA : Col (f P) (f Q) A
A : Tpoint
fLineExt : line_extension f P Q
archi : archimedes_axiom
f : forall _ : Tpoint, Tpoint
P,Q : Tpoint
Tm2 : Tarski_neutral_dimensionless_with_decidable_point_equality Tm
Tm : Tarski_neutral_dimensionless
dedekind : dedekind_s_axiom
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Bet (f R) (f X) (f P)
+++++
apply bet3__bet with A (f B); finish.
-----
Lemma dedekind__completeness : dedekind_s_axiom -> line_completeness.
Proof.
intros dedekind Tm Tm2 P Q f archi fLineExt A HA.
destruct (eq_dec_points (f P) A).
subst; exists P; split; Col.
destruct (dedekind (fun X => Col P Q X /\\ Bet (f P) (f X) A) (fun X => Col P Q X /\\ Bet (f P) A (f X))) as [B HB].
exists B.
assert (HR : exists R, Col P Q R /\\ Bet (f P) A (f R)).
destruct HR as [R []].
assert (HBet : Bet P B R).
apply HB; split; finish; eBetween.
assert (Col P Q B).
apply col_transitivity_1 with R; Col; intro; treat_equalities; auto.
destruct (eq_dec_points (f B) A); [split; assumption|].
exfalso.
assert (Hf := fLineExt).
destruct Hf as [HPQ [finj [fBet fCong]]].
destruct (extension_image_density P Q f archi fLineExt A (f B)) as [X [HX1 [HX2 [HX3 Habs]]]]; auto.
apply (pres_bet_line__col f P Q); Col.
destruct (l5_3 (f P) A (f B) (f R)); auto; [apply fBet; Col|apply Habs..].
-
apply between_equality with (f P).
apply between_symmetry, fBet, HB; try split; Col; Between.
apply between_inner_transitivity with (f B); assumption.
clear dependent R; eBetween.
-
apply between_equality with (f P).
clear dependent R; eBetween.
apply between_exchange3 with (f R).
apply between_symmetry, fBet; Col; apply HB; split; Col; eBetween.
apply bet3__bet with A (f B); finish.

*****

*****

+++++
Qed.
-----
End Completeness.
-----
