Require Import Coq.Lists.List.
-----
Require Import Coq.PArith.PArith.
-----
Require Import Computation.
-----
Require Import Events.
-----
Import ListNotations.
-----
Local Open Scope type.
-----
Module Heap.
-----
Inductive t (A : Type) : Type :=\n  | Empty : t A\n  | Node : A -> t A -> t A -> t A.
-----
Arguments Empty {A}.
-----
Arguments Node {A} _ _ _.
-----
Fixpoint add {A : Type} (heap : t A) (x : A) (n : positive) : t A :=\n    match (heap, n) with\n    | (Empty, xH) => Node x Empty Empty\n    | (Node y heap1 heap2, xO n) => Node y (add heap1 x n) heap2\n    | (Node y heap1 heap2, xI n) => Node y heap1 (add heap2 x n)\n    | (Empty, _) | (Node _ _ _, xH) => heap\n    end.
-----
Fixpoint find {A : Type} (heap : t A) (n : positive) : option A :=\n    match (heap, n) with\n    | (Empty, _) => None\n    | (Node x _ _, xH) => Some x\n    | (Node x heap _, xO n) => find heap n\n    | (Node x _ heap, xI n) => find heap n\n    end.
-----
Fixpoint update {A : Type} (heap : t A) (n : positive) (x : A) : t A :=\n    match (heap, n) with\n    | (Empty, _) => heap\n    | (Node _ heap1 heap2, xH) => Node x heap1 heap2\n    | (Node y heap1 heap2, xO n) => Node y (update heap1 n x) heap2\n    | (Node y heap1 heap2, xI n) => Node y heap1 (update heap2 n x)\n    end.
-----
Module Tests.
-----
Definition h :=\n      let h := add Empty 1 1 in\n      let h := add h 2 2 in\n      let h := add h 3 3 in\n      let h := add h 4 4 in\n      add h 5 5.
-----
Definition test1 : h = Node 1 (Node 2 (Node 4 Empty Empty) Empty)\n      (Node 3 (Node 5 Empty Empty) Empty) :=\n      eq_refl.
-----
Definition test2 : find Empty 3 = None (A := nat) :=\n      eq_refl.
-----
Definition test3 : find h 3 = Some 3 :=\n      eq_refl.
-----
Definition test4 : update h 3 7 =\n      Node 1 (Node 2 (Node 4 Empty Empty) Empty)\n        (Node 7 (Node 5 Empty Empty) Empty) :=\n      eq_refl.
-----
End Tests.
-----
End Heap.
-----
Module CallBack.
-----
Record t (sig : Signature.t) (command : Command.t) : Type := New {\n    A : Type;\n    a : A;\n    handler : A -> Command.answer command -> C.t sig (option A) }.
-----
Arguments New {sig command A} _ _.
-----
Arguments A {sig command} _.
-----
Arguments a {sig command} _.
-----
Arguments handler {sig command} _ _ _.
-----
End CallBack.
-----
Module CallBacks.
-----
Record t (sig : Signature.t) : Type := New {\n    heap : Heap.t (option {command : Command.t & CallBack.t sig command});\n    next : positive }.
-----
Arguments New {sig} _ _.
-----
Arguments heap {sig} _.
-----
Arguments next {sig} _.
-----
Definition empty (sig : Signature.t) : t sig := {|\n    heap := Heap.Empty;\n    next := xH |}.
-----
Definition add {sig : Signature.t} (call_backs : t sig) {command : Command.t}\n    (call_back : CallBack.t sig command) : positive * t sig :=\n    let id := next call_backs in\n    (id, {|\n      heap := Heap.add (heap call_backs) (Some (existT _ command call_back)) id;\n      next := id + 1 |}).
-----
Definition find {sig : Signature.t} (call_backs : t sig) {command : Command.t}\n    (id : positive) : option (CallBack.t sig command) :=\n    match Heap.find (heap call_backs) id with\n    | None | Some None => None\n    | Some (Some (\n        existT _ command' call_back)) =>\n      match Command.eq_dec command command' with\n      | left Heq =>\n          eq_rect_r (fun c => option (CallBack.t sig c)) (Some call_back) Heq\n      | right _ => None\n      end\n    end.
-----
Definition update {sig : Signature.t} (call_backs : t sig) (id : positive)\n    {command : Command.t} (call_back : CallBack.t sig command) : t sig := {|\n    heap := Heap.update (heap call_backs) id\n      (Some (existT _ command call_back));\n    next := next call_backs |}.
-----
Definition remove {sig : Signature.t} (call_backs : t sig) (id : positive)\n    : t sig := {|\n    heap := Heap.update (heap call_backs) id None;\n    next := next call_backs |}.
-----
End CallBacks.
-----
Fixpoint run {sig : Signature.t} {A : Type} (call_backs : CallBacks.t sig)\n  (mem : Memory.t sig) (outputs : list Output.t) (x : C.t sig A)\n  : option A * CallBacks.t sig * Memory.t sig * list Output.t :=\n  match x in C.t _ A return option A  * _ * _ * _ with\n  | C.Ret  x => (Some x, call_backs, mem, outputs)\n  | C.Bind  x f =>\n    match run call_backs mem outputs x with\n    | (Some x, call_backs, mem, outputs) => run call_backs mem outputs (f x)\n    | (None, call_backs, mem, outputs) => (None, call_backs, mem, outputs)\n    end\n  | C.Read  _ => (Some (Ref.read mem), call_backs, mem, outputs)\n  | C.Write  _ v => (Some tt, call_backs, Ref.write mem v, outputs)\n  | C.Send  _ request a handler =>\n    let call_back := CallBack.New a handler in\n    let (id, call_backs) := CallBacks.add call_backs call_back in\n    let output := Output.New _ id request in\n    (Some tt, call_backs, mem, output :: outputs)\n  | C.Exit  => (None, call_backs, mem, outputs)\n  end.
-----
Fixpoint run_call_backs {sig : Signature.t} (call_backs : CallBacks.t sig)\n  (mem : Memory.t sig) (outputs : list Output.t) (inputs : list Input.t)\n  : bool * list Output.t :=\n  match inputs with\n  | [] => (false, outputs)\n  | input :: inputs =>\n    let (command, id, argument) := input in\n    match CallBacks.find call_backs id with\n    | None => run_call_backs call_backs mem outputs inputs\n    | Some (CallBack.New  a handler) =>\n      match run call_backs mem outputs (handler a argument) with\n      | (None, _, _, outputs) => (true, outputs)\n      | (Some a, call_backs, mem, outputs) =>\n        let call_backs :=\n          match a with\n          | None => call_backs\n          | Some a =>\n            let call_back := CallBack.New a handler in\n            CallBacks.update call_backs id call_back\n          end in\n        run_call_backs call_backs mem outputs inputs\n      end\n    end\n  end.
-----
Definition run_on_inputs {sig : Signature.t} (x : C.t sig unit)\n  (mem : Memory.t sig) (inputs : list Input.t) : bool * list Output.t :=\n  match run (CallBacks.empty _) mem [] x with\n  | (None, _, _, outputs) => (true, outputs)\n  | (Some _, call_backs, mem, outputs) =>\n    run_call_backs call_backs mem outputs inputs\n  end.
-----
