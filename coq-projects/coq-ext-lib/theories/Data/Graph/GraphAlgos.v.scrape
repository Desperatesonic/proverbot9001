Require Import Coq.Lists.List.
-----
Require Import Coq.PArith.BinPos.
-----
Require Import ExtLib.Structures.Monads.
-----
Require Import ExtLib.Structures.Reducible.
-----
Require Import ExtLib.Data.Graph.Graph.
-----
Require Import ExtLib.Data.Monads.FuelMonad.
-----
Require Import ExtLib.Data.Monads.IdentityMonad.
-----
Require Import ExtLib.Data.List.
-----
Require Import ExtLib.Core.RelDec.
-----
Set Implicit Arguments.
-----
Set Strict Implicit.
-----
Section GraphAlgos.
-----
Variable V : Type.
-----
Variable RelDec_V : RelDec (@eq V).
-----
Variable G : Type.
-----
Context {graph : Graph V G}.
-----
Section Traverse.
-----
Variable g : G.
-----
Fixpoint list_in_dec v (ls : list V) : bool :=\n      match ls with\n        | nil => false\n        | l :: ls =>\n          if eq_dec l v then true\n          else list_in_dec v ls\n      end.
-----
Section monadic.
-----
Variable m : Type -> Type.
-----
Context {Monad_m : Monad m} {MonadFix_m : MonadFix m}.
-----
Definition dfs' : V -> list V -> m (list V) :=\n        mfix_multi (V :: list V :: nil) (list V) (fun rec from seen =>\n          if list_in_dec from seen\n          then ret (m:=m) seen\n          else\n            foldM (fun v acc =>\n              if list_in_dec v acc\n              then ret (m:=m) acc\n              else rec v acc) (ret (m:=m) seen) (successors g from)).
-----
End monadic.
-----
Definition dfs (from : V) : list V :=\n      let count := Npos (List.fold_left (fun acc _ => Pos.succ acc) (verticies g) 1%positive) in\n      let res := runGFix (dfs' from nil) count in\n      match res with\n        | Diverge => \n          verticies g\n        | Term v => v\n      end.
-----
End Traverse.
-----
End GraphAlgos.
-----
