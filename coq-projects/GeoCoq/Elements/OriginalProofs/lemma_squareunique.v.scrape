Require Export GeoCoq.Elements.OriginalProofs.lemma_squareparallelogram.
-----
Section Euclid.
-----
Context `{Ax1:euclidean_euclidean}.
-----
Lemma lemma_squareunique : \n   forall A B C D E, \n   SQ A B C D -> SQ A B C E ->\n   eq E D.
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.

*****
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E : Point) (_ : SQ A B C D) (_ : SQ A B C E), eq E D
+++++
Proof.
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.

*****
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E : Point) (_ : SQ A B C D) (_ : SQ A B C E), eq E D
+++++
intros.
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.

*****
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (PG A B C D) by (conclude lemma_squareparallelogram).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).

*****
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.

*****
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (BetS B M D) by (conclude_def Midpoint ).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).

*****
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (BetS A M C) by (conclude_def Midpoint ).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).

*****
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Per D A B) by (conclude_def SQ ).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).

*****
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Per E A B) by (conclude_def SQ ).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).

*****
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (nCol D A B) by (conclude lemma_rightangleNC).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).

*****
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (nCol E A B) by (conclude lemma_rightangleNC).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).

*****
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong A B A B) by (conclude cn_congruencereflexive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).

*****
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong A B D A) by (conclude_def SQ ).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).

*****
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong A B E A) by (conclude_def SQ ).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).

*****
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).

*****
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).

*****
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).

*****
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).

*****
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert ((Cong E B D B /\ CongA A E B A D B /\ CongA A B E A B D)) by (conclude proposition_04).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).

*****
H17 : and (Cong E B D B) (and (CongA A E B A D B) (CongA A B E A B D))
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).

*****
H18 : CongA A B D A B E
H17 : and (Cong E B D B) (and (CongA A E B A D B) (CongA A B E A B D))
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (neq B E) by (forward_using lemma_NCdistinct).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).

*****
H19 : neq B E
H18 : CongA A B D A B E
H17 : and (Cong E B D B) (and (CongA A E B A D B) (CongA A B E A B D))
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (neq B M) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).

*****
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H17 : and (Cong E B D B) (and (CongA A E B A D B) (CongA A B E A B D))
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.

*****
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).

*****
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (eq A A) by (conclude cn_equalityreflexive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).

*****
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (neq B A) by (forward_using lemma_NCdistinct).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).

*****
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Out B A A) by (conclude lemma_ray4).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).

*****
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Out B M D) by (conclude lemma_ray4).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).

*****
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Out B D M) by (conclude lemma_ray5).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).

*****
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (nCol A B D) by (forward_using lemma_NCorder).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).

*****
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).

*****
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).

*****
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).

*****
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).

*****
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (nCol A B E) by (forward_using lemma_NCorder).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).

*****
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).

*****
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).

*****
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).

*****
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong B A B A) by (conclude cn_congruencereflexive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).

*****
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong A M A N) by (conclude proposition_04).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).

*****
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Per B C D) by (conclude_def SQ ).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).

*****
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Per B C E) by (conclude_def SQ ).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).

*****
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).

*****
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong A B C D) by (conclude_def SQ ).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).

*****
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong A B C E) by (conclude_def SQ ).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).

*****
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).

*****
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).

*****
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (nCol B C E) by (conclude lemma_rightangleNC).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).

*****
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (nCol B C D) by (conclude lemma_rightangleNC).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).

*****
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong C B C B) by (conclude cn_congruencereflexive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).

*****
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert ((Cong B E B D /\ CongA C B E C B D /\ CongA C E B C D B)) by (conclude proposition_04).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).

*****
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (neq B C) by (forward_using lemma_NCdistinct).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).

*****
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (eq C C) by (conclude cn_equalityreflexive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).

*****
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Out B C C) by (conclude lemma_ray4).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).

*****
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (nCol B C D) by (conclude lemma_rightangleNC).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).
assert (nCol B C D) by (conclude lemma_rightangleNC).

*****
H56 : nCol B C D
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (nCol C B D) by (forward_using lemma_NCorder).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (nCol C B D) by (forward_using lemma_NCorder).

*****
H57 : nCol C B D
H56 : nCol B C D
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (nCol C B D) by (forward_using lemma_NCorder).
assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).

*****
H58 : CongA C B D C B D
H57 : nCol C B D
H56 : nCol B C D
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA C B D C B M) by (conclude lemma_equalangleshelper).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (nCol C B D) by (forward_using lemma_NCorder).
assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).
assert (CongA C B D C B M) by (conclude lemma_equalangleshelper).

*****
H59 : CongA C B D C B M
H58 : CongA C B D C B D
H57 : nCol C B D
H56 : nCol B C D
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (nCol C B E) by (forward_using lemma_NCorder).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (nCol C B D) by (forward_using lemma_NCorder).
assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).
assert (CongA C B D C B M) by (conclude lemma_equalangleshelper).
assert (nCol C B E) by (forward_using lemma_NCorder).

*****
H60 : nCol C B E
H59 : CongA C B D C B M
H58 : CongA C B D C B D
H57 : nCol C B D
H56 : nCol B C D
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA C B E C B E) by (conclude lemma_equalanglesreflexive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (nCol C B D) by (forward_using lemma_NCorder).
assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).
assert (CongA C B D C B M) by (conclude lemma_equalangleshelper).
assert (nCol C B E) by (forward_using lemma_NCorder).
assert (CongA C B E C B E) by (conclude lemma_equalanglesreflexive).

*****
H61 : CongA C B E C B E
H60 : nCol C B E
H59 : CongA C B D C B M
H58 : CongA C B D C B D
H57 : nCol C B D
H56 : nCol B C D
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA C B E C B N) by (conclude lemma_equalangleshelper).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (nCol C B D) by (forward_using lemma_NCorder).
assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).
assert (CongA C B D C B M) by (conclude lemma_equalangleshelper).
assert (nCol C B E) by (forward_using lemma_NCorder).
assert (CongA C B E C B E) by (conclude lemma_equalanglesreflexive).
assert (CongA C B E C B N) by (conclude lemma_equalangleshelper).

*****
H62 : CongA C B E C B N
H61 : CongA C B E C B E
H60 : nCol C B E
H59 : CongA C B D C B M
H58 : CongA C B D C B D
H57 : nCol C B D
H56 : nCol B C D
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA C B E C B D) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (nCol C B D) by (forward_using lemma_NCorder).
assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).
assert (CongA C B D C B M) by (conclude lemma_equalangleshelper).
assert (nCol C B E) by (forward_using lemma_NCorder).
assert (CongA C B E C B E) by (conclude lemma_equalanglesreflexive).
assert (CongA C B E C B N) by (conclude lemma_equalangleshelper).
assert (CongA C B E C B D) by (conclude lemma_equalanglestransitive).

*****
H63 : CongA C B E C B D
H62 : CongA C B E C B N
H61 : CongA C B E C B E
H60 : nCol C B E
H59 : CongA C B D C B M
H58 : CongA C B D C B D
H57 : nCol C B D
H56 : nCol B C D
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA C B D C B E) by (conclude lemma_equalanglessymmetric).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (nCol C B D) by (forward_using lemma_NCorder).
assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).
assert (CongA C B D C B M) by (conclude lemma_equalangleshelper).
assert (nCol C B E) by (forward_using lemma_NCorder).
assert (CongA C B E C B E) by (conclude lemma_equalanglesreflexive).
assert (CongA C B E C B N) by (conclude lemma_equalangleshelper).
assert (CongA C B E C B D) by (conclude lemma_equalanglestransitive).
assert (CongA C B D C B E) by (conclude lemma_equalanglessymmetric).

*****
H64 : CongA C B D C B E
H63 : CongA C B E C B D
H62 : CongA C B E C B N
H61 : CongA C B E C B E
H60 : nCol C B E
H59 : CongA C B D C B M
H58 : CongA C B D C B D
H57 : nCol C B D
H56 : nCol B C D
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA C B M C B D) by (conclude lemma_equalanglessymmetric).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (nCol C B D) by (forward_using lemma_NCorder).
assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).
assert (CongA C B D C B M) by (conclude lemma_equalangleshelper).
assert (nCol C B E) by (forward_using lemma_NCorder).
assert (CongA C B E C B E) by (conclude lemma_equalanglesreflexive).
assert (CongA C B E C B N) by (conclude lemma_equalangleshelper).
assert (CongA C B E C B D) by (conclude lemma_equalanglestransitive).
assert (CongA C B D C B E) by (conclude lemma_equalanglessymmetric).
assert (CongA C B M C B D) by (conclude lemma_equalanglessymmetric).

*****
H65 : CongA C B M C B D
H64 : CongA C B D C B E
H63 : CongA C B E C B D
H62 : CongA C B E C B N
H61 : CongA C B E C B E
H60 : nCol C B E
H59 : CongA C B D C B M
H58 : CongA C B D C B D
H57 : nCol C B D
H56 : nCol B C D
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA C B M C B E) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (nCol C B D) by (forward_using lemma_NCorder).
assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).
assert (CongA C B D C B M) by (conclude lemma_equalangleshelper).
assert (nCol C B E) by (forward_using lemma_NCorder).
assert (CongA C B E C B E) by (conclude lemma_equalanglesreflexive).
assert (CongA C B E C B N) by (conclude lemma_equalangleshelper).
assert (CongA C B E C B D) by (conclude lemma_equalanglestransitive).
assert (CongA C B D C B E) by (conclude lemma_equalanglessymmetric).
assert (CongA C B M C B D) by (conclude lemma_equalanglessymmetric).
assert (CongA C B M C B E) by (conclude lemma_equalanglestransitive).

*****
H66 : CongA C B M C B E
H65 : CongA C B M C B D
H64 : CongA C B D C B E
H63 : CongA C B E C B D
H62 : CongA C B E C B N
H61 : CongA C B E C B E
H60 : nCol C B E
H59 : CongA C B D C B M
H58 : CongA C B D C B D
H57 : nCol C B D
H56 : nCol B C D
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA C B M C B N) by (conclude lemma_equalanglestransitive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (nCol C B D) by (forward_using lemma_NCorder).
assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).
assert (CongA C B D C B M) by (conclude lemma_equalangleshelper).
assert (nCol C B E) by (forward_using lemma_NCorder).
assert (CongA C B E C B E) by (conclude lemma_equalanglesreflexive).
assert (CongA C B E C B N) by (conclude lemma_equalangleshelper).
assert (CongA C B E C B D) by (conclude lemma_equalanglestransitive).
assert (CongA C B D C B E) by (conclude lemma_equalanglessymmetric).
assert (CongA C B M C B D) by (conclude lemma_equalanglessymmetric).
assert (CongA C B M C B E) by (conclude lemma_equalanglestransitive).
assert (CongA C B M C B N) by (conclude lemma_equalanglestransitive).

*****
H67 : CongA C B M C B N
H66 : CongA C B M C B E
H65 : CongA C B M C B D
H64 : CongA C B D C B E
H63 : CongA C B E C B D
H62 : CongA C B E C B N
H61 : CongA C B E C B E
H60 : nCol C B E
H59 : CongA C B D C B M
H58 : CongA C B D C B D
H57 : nCol C B D
H56 : nCol B C D
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (CongA M B C N B C) by (conclude lemma_equalanglesflip).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (nCol C B D) by (forward_using lemma_NCorder).
assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).
assert (CongA C B D C B M) by (conclude lemma_equalangleshelper).
assert (nCol C B E) by (forward_using lemma_NCorder).
assert (CongA C B E C B E) by (conclude lemma_equalanglesreflexive).
assert (CongA C B E C B N) by (conclude lemma_equalangleshelper).
assert (CongA C B E C B D) by (conclude lemma_equalanglestransitive).
assert (CongA C B D C B E) by (conclude lemma_equalanglessymmetric).
assert (CongA C B M C B D) by (conclude lemma_equalanglessymmetric).
assert (CongA C B M C B E) by (conclude lemma_equalanglestransitive).
assert (CongA C B M C B N) by (conclude lemma_equalanglestransitive).
assert (CongA M B C N B C) by (conclude lemma_equalanglesflip).

*****
H68 : CongA M B C N B C
H67 : CongA C B M C B N
H66 : CongA C B M C B E
H65 : CongA C B M C B D
H64 : CongA C B D C B E
H63 : CongA C B E C B D
H62 : CongA C B E C B N
H61 : CongA C B E C B E
H60 : nCol C B E
H59 : CongA C B D C B M
H58 : CongA C B D C B D
H57 : nCol C B D
H56 : nCol B C D
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong B C B C) by (conclude cn_congruencereflexive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (nCol C B D) by (forward_using lemma_NCorder).
assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).
assert (CongA C B D C B M) by (conclude lemma_equalangleshelper).
assert (nCol C B E) by (forward_using lemma_NCorder).
assert (CongA C B E C B E) by (conclude lemma_equalanglesreflexive).
assert (CongA C B E C B N) by (conclude lemma_equalangleshelper).
assert (CongA C B E C B D) by (conclude lemma_equalanglestransitive).
assert (CongA C B D C B E) by (conclude lemma_equalanglessymmetric).
assert (CongA C B M C B D) by (conclude lemma_equalanglessymmetric).
assert (CongA C B M C B E) by (conclude lemma_equalanglestransitive).
assert (CongA C B M C B N) by (conclude lemma_equalanglestransitive).
assert (CongA M B C N B C) by (conclude lemma_equalanglesflip).
assert (Cong B C B C) by (conclude cn_congruencereflexive).

*****
H69 : Cong B C B C
H68 : CongA M B C N B C
H67 : CongA C B M C B N
H66 : CongA C B M C B E
H65 : CongA C B M C B D
H64 : CongA C B D C B E
H63 : CongA C B E C B D
H62 : CongA C B E C B N
H61 : CongA C B E C B E
H60 : nCol C B E
H59 : CongA C B D C B M
H58 : CongA C B D C B D
H57 : nCol C B D
H56 : nCol B C D
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong M C N C) by (conclude (proposition_04 B M C B N C)).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (nCol C B D) by (forward_using lemma_NCorder).
assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).
assert (CongA C B D C B M) by (conclude lemma_equalangleshelper).
assert (nCol C B E) by (forward_using lemma_NCorder).
assert (CongA C B E C B E) by (conclude lemma_equalanglesreflexive).
assert (CongA C B E C B N) by (conclude lemma_equalangleshelper).
assert (CongA C B E C B D) by (conclude lemma_equalanglestransitive).
assert (CongA C B D C B E) by (conclude lemma_equalanglessymmetric).
assert (CongA C B M C B D) by (conclude lemma_equalanglessymmetric).
assert (CongA C B M C B E) by (conclude lemma_equalanglestransitive).
assert (CongA C B M C B N) by (conclude lemma_equalanglestransitive).
assert (CongA M B C N B C) by (conclude lemma_equalanglesflip).
assert (Cong B C B C) by (conclude cn_congruencereflexive).
assert (Cong M C N C) by (conclude (proposition_04 B M C B N C)).

*****
H70 : Cong M C N C
H69 : Cong B C B C
H68 : CongA M B C N B C
H67 : CongA C B M C B N
H66 : CongA C B M C B E
H65 : CongA C B M C B D
H64 : CongA C B D C B E
H63 : CongA C B E C B D
H62 : CongA C B E C B N
H61 : CongA C B E C B E
H60 : nCol C B E
H59 : CongA C B D C B M
H58 : CongA C B D C B D
H57 : nCol C B D
H56 : nCol B C D
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
assert (Cong A C A C) by (conclude cn_congruencereflexive).
-----
Lemma lemma_squareunique : forall A B C D E, SQ A B C D -> SQ A B C E -> eq E D.
Proof.
intros.
assert (PG A B C D) by (conclude lemma_squareparallelogram).
let Tf:=fresh in assert (Tf:exists M, (Midpoint A M C /\\ Midpoint B M D)) by (conclude lemma_diagonalsbisect);destruct Tf as [M];spliter.
assert (BetS B M D) by (conclude_def Midpoint ).
assert (BetS A M C) by (conclude_def Midpoint ).
assert (Per D A B) by (conclude_def SQ ).
assert (Per E A B) by (conclude_def SQ ).
assert (nCol D A B) by (conclude lemma_rightangleNC).
assert (nCol E A B) by (conclude lemma_rightangleNC).
assert (Cong A B A B) by (conclude cn_congruencereflexive).
assert (Cong A B D A) by (conclude_def SQ ).
assert (Cong A B E A) by (conclude_def SQ ).
assert (Cong E A A B) by (conclude lemma_congruencesymmetric).
assert (Cong E A D A) by (conclude lemma_congruencetransitive).
assert (Cong A E A D) by (forward_using lemma_congruenceflip).
assert (CongA E A B D A B) by (conclude lemma_Euclid4).
assert ((Cong E B D B /\\ CongA A E B A D B /\\ CongA A B E A B D)) by (conclude proposition_04).
assert (CongA A B D A B E) by (conclude lemma_equalanglessymmetric).
assert (neq B E) by (forward_using lemma_NCdistinct).
assert (neq B M) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists N, (Out B E N /\\ Cong B N B M)) by (conclude lemma_layoff);destruct Tf as [N];spliter.
assert (Cong B M B N) by (conclude lemma_congruencesymmetric).
assert (eq A A) by (conclude cn_equalityreflexive).
assert (neq B A) by (forward_using lemma_NCdistinct).
assert (Out B A A) by (conclude lemma_ray4).
assert (Out B M D) by (conclude lemma_ray4).
assert (Out B D M) by (conclude lemma_ray5).
assert (nCol A B D) by (forward_using lemma_NCorder).
assert (CongA A B D A B D) by (conclude lemma_equalanglesreflexive).
assert (CongA A B D A B M) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B D) by (conclude lemma_equalanglessymmetric).
assert (CongA A B M A B E) by (conclude lemma_equalanglestransitive).
assert (nCol A B E) by (forward_using lemma_NCorder).
assert (CongA A B E A B E) by (conclude lemma_equalanglesreflexive).
assert (CongA A B E A B N) by (conclude lemma_equalangleshelper).
assert (CongA A B M A B N) by (conclude lemma_equalanglestransitive).
assert (Cong B A B A) by (conclude cn_congruencereflexive).
assert (Cong A M A N) by (conclude proposition_04).
assert (Per B C D) by (conclude_def SQ ).
assert (Per B C E) by (conclude_def SQ ).
assert (CongA B C E B C D) by (conclude lemma_Euclid4).
assert (Cong A B C D) by (conclude_def SQ ).
assert (Cong A B C E) by (conclude_def SQ ).
assert (Cong C E A B) by (conclude lemma_congruencesymmetric).
assert (Cong C E C D) by (conclude lemma_congruencetransitive).
assert (nCol B C E) by (conclude lemma_rightangleNC).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (Cong C B C B) by (conclude cn_congruencereflexive).
assert ((Cong B E B D /\\ CongA C B E C B D /\\ CongA C E B C D B)) by (conclude proposition_04).
assert (neq B C) by (forward_using lemma_NCdistinct).
assert (eq C C) by (conclude cn_equalityreflexive).
assert (Out B C C) by (conclude lemma_ray4).
assert (nCol B C D) by (conclude lemma_rightangleNC).
assert (nCol C B D) by (forward_using lemma_NCorder).
assert (CongA C B D C B D) by (conclude lemma_equalanglesreflexive).
assert (CongA C B D C B M) by (conclude lemma_equalangleshelper).
assert (nCol C B E) by (forward_using lemma_NCorder).
assert (CongA C B E C B E) by (conclude lemma_equalanglesreflexive).
assert (CongA C B E C B N) by (conclude lemma_equalangleshelper).
assert (CongA C B E C B D) by (conclude lemma_equalanglestransitive).
assert (CongA C B D C B E) by (conclude lemma_equalanglessymmetric).
assert (CongA C B M C B D) by (conclude lemma_equalanglessymmetric).
assert (CongA C B M C B E) by (conclude lemma_equalanglestransitive).
assert (CongA C B M C B N) by (conclude lemma_equalanglestransitive).
assert (CongA M B C N B C) by (conclude lemma_equalanglesflip).
assert (Cong B C B C) by (conclude cn_congruencereflexive).
assert (Cong M C N C) by (conclude (proposition_04 B M C B N C)).
assert (Cong A C A C) by (conclude cn_congruencereflexive).

*****
H71 : Cong A C A C
H70 : Cong M C N C
H69 : Cong B C B C
H68 : CongA M B C N B C
H67 : CongA C B M C B N
H66 : CongA C B M C B E
H65 : CongA C B M C B D
H64 : CongA C B D C B E
H63 : CongA C B E C B D
H62 : CongA C B E C B N
H61 : CongA C B E C B E
H60 : nCol C B E
H59 : CongA C B D C B M
H58 : CongA C B D C B D
H57 : nCol C B D
H56 : nCol B C D
H55 : Out B C C
H54 : eq C C
H53 : neq B C
H52 : and (Cong B E B D) (and (CongA C B E C B D) (CongA C E B C D B))
H51 : Cong C B C B
H50 : nCol B C D
H49 : nCol B C E
H48 : Cong C E C D
H47 : Cong C E A B
H46 : Cong A B C E
H45 : Cong A B C D
H44 : CongA B C E B C D
H43 : Per B C E
H42 : Per B C D
H41 : Cong A M A N
H40 : Cong B A B A
H39 : CongA A B M A B N
H38 : CongA A B E A B N
H37 : CongA A B E A B E
H36 : nCol A B E
H35 : CongA A B M A B E
H34 : CongA A B M A B D
H33 : CongA A B D A B M
H32 : CongA A B D A B D
H31 : nCol A B D
H30 : Out B D M
H29 : Out B M D
H28 : Out B A A
H27 : neq B A
H26 : eq A A
H25 : Cong B M B N
H22 : Cong B N B M
H21 : Out B E N
N : Point
H20 : neq B M
H19 : neq B E
H18 : CongA A B D A B E
H24 : CongA A B E A B D
H23 : CongA A E B A D B
H17 : Cong E B D B
H16 : CongA E A B D A B
H15 : Cong A E A D
H14 : Cong E A D A
H13 : Cong E A A B
H12 : Cong A B E A
H11 : Cong A B D A
H10 : Cong A B A B
H9 : nCol E A B
H8 : nCol D A B
H7 : Per E A B
H6 : Per D A B
H5 : BetS A M C
H4 : BetS B M D
H3 : Midpoint B M D
H2 : Midpoint A M C
M : Point
H1 : PG A B C D
H0 : SQ A B C E
H : SQ A B C D
A,B,C,D,E : Point
Ax1 : euclidean_euclidean Ax
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
eq E D
+++++
