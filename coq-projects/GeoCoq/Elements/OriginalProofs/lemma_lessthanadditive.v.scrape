Require Export GeoCoq.Elements.OriginalProofs.lemma_lessthancongruence2.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_ray4.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_layoffunique.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_trichotomy2.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_outerconnectivity.
-----
Section Euclid.
-----
Context `{Ax:euclidean_neutral_ruler_compass}.
-----
Lemma lemma_lessthanadditive : \n   forall A B C D E F, \n   Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F ->\n   Lt A E C F.
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E F : Point) (_ : Lt A B C D) (_ : BetS A B E) (_ : BetS C D F) (_ : Cong B E D F), Lt A E C F
+++++
Proof.
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.

*****
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
forall (A B C D E F : Point) (_ : Lt A B C D) (_ : BetS A B E) (_ : BetS C D F) (_ : Cong B E D F), Lt A E C F
+++++
intros.
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.

*****
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.

*****
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).

*****
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
assert (neq C b) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).

*****
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
assert (neq b C) by (conclude lemma_inequalitysymmetric).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).

*****
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
assert (neq B E) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).

*****
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.

*****
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).

*****
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
assert (Cong A E C e) by (conclude cn_sumofparts).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).

*****
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
assert (Cong e D e D) by (conclude cn_congruencereflexive).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).

*****
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).

*****
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
assert (BetS C b F) by (conclude lemma_3_6b).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).

*****
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
assert (~ BetS b F e).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).

*****
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (BetS b F e)
+++++
intro.
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.

*****
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong b F b F) by (conclude cn_congruencereflexive).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).

*****
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Lt b F b e) by (conclude_def Lt ).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).

*****
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong F D F D) by (conclude cn_congruencereflexive).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).

*****
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS b D F) by (conclude lemma_3_6a).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).

*****
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).

*****
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Lt F D F b) by (conclude_def Lt ).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).

*****
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong F b b F) by (conclude cn_equalityreverse).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).

*****
H23 : Cong F b b F
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).

*****
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong F D D F) by (conclude cn_equalityreverse).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong F D D F) by (conclude cn_equalityreverse).

*****
H25 : Cong F D D F
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Lt D F b F) by (conclude lemma_lessthancongruence2).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong F D D F) by (conclude cn_equalityreverse).
assert (Lt D F b F) by (conclude lemma_lessthancongruence2).

*****
H26 : Lt D F b F
H25 : Cong F D D F
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong b e D F) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong F D D F) by (conclude cn_equalityreverse).
assert (Lt D F b F) by (conclude lemma_lessthancongruence2).
assert (Cong b e D F) by (conclude lemma_congruencetransitive).

*****
H27 : Cong b e D F
H26 : Lt D F b F
H25 : Cong F D D F
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong D F b e) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong F D D F) by (conclude cn_equalityreverse).
assert (Lt D F b F) by (conclude lemma_lessthancongruence2).
assert (Cong b e D F) by (conclude lemma_congruencetransitive).
assert (Cong D F b e) by (conclude lemma_congruencesymmetric).

*****
H28 : Cong D F b e
H27 : Cong b e D F
H26 : Lt D F b F
H25 : Cong F D D F
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Lt b e b F) by (conclude lemma_lessthancongruence2).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong F D D F) by (conclude cn_equalityreverse).
assert (Lt D F b F) by (conclude lemma_lessthancongruence2).
assert (Cong b e D F) by (conclude lemma_congruencetransitive).
assert (Cong D F b e) by (conclude lemma_congruencesymmetric).
assert (Lt b e b F) by (conclude lemma_lessthancongruence2).

*****
H29 : Lt b e b F
H28 : Cong D F b e
H27 : Cong b e D F
H26 : Lt D F b F
H25 : Cong F D D F
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
let Tf:=fresh in assert (Tf:exists q, (BetS b q F /\ Cong b q b e)) by (conclude_def Lt );destruct Tf as [q];spliter.
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong F D D F) by (conclude cn_equalityreverse).
assert (Lt D F b F) by (conclude lemma_lessthancongruence2).
assert (Cong b e D F) by (conclude lemma_congruencetransitive).
assert (Cong D F b e) by (conclude lemma_congruencesymmetric).
assert (Lt b e b F) by (conclude lemma_lessthancongruence2).
let Tf:=fresh in assert (Tf:exists q, (BetS b q F /\\ Cong b q b e)) by (conclude_def Lt );destruct Tf as [q];spliter.

*****
H31 : Cong b q b e
H30 : BetS b q F
q : Point
H29 : Lt b e b F
H28 : Cong D F b e
H27 : Cong b e D F
H26 : Lt D F b F
H25 : Cong F D D F
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq b q) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong F D D F) by (conclude cn_equalityreverse).
assert (Lt D F b F) by (conclude lemma_lessthancongruence2).
assert (Cong b e D F) by (conclude lemma_congruencetransitive).
assert (Cong D F b e) by (conclude lemma_congruencesymmetric).
assert (Lt b e b F) by (conclude lemma_lessthancongruence2).
let Tf:=fresh in assert (Tf:exists q, (BetS b q F /\\ Cong b q b e)) by (conclude_def Lt );destruct Tf as [q];spliter.
assert (neq b q) by (forward_using lemma_betweennotequal).

*****
H32 : neq b q
H31 : Cong b q b e
H30 : BetS b q F
q : Point
H29 : Lt b e b F
H28 : Cong D F b e
H27 : Cong b e D F
H26 : Lt D F b F
H25 : Cong F D D F
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (neq b F) by (forward_using lemma_betweennotequal).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong F D D F) by (conclude cn_equalityreverse).
assert (Lt D F b F) by (conclude lemma_lessthancongruence2).
assert (Cong b e D F) by (conclude lemma_congruencetransitive).
assert (Cong D F b e) by (conclude lemma_congruencesymmetric).
assert (Lt b e b F) by (conclude lemma_lessthancongruence2).
let Tf:=fresh in assert (Tf:exists q, (BetS b q F /\\ Cong b q b e)) by (conclude_def Lt );destruct Tf as [q];spliter.
assert (neq b q) by (forward_using lemma_betweennotequal).
assert (neq b F) by (forward_using lemma_betweennotequal).

*****
H33 : neq b F
H32 : neq b q
H31 : Cong b q b e
H30 : BetS b q F
q : Point
H29 : Lt b e b F
H28 : Cong D F b e
H27 : Cong b e D F
H26 : Lt D F b F
H25 : Cong F D D F
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Out b F q) by (conclude lemma_ray4).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong F D D F) by (conclude cn_equalityreverse).
assert (Lt D F b F) by (conclude lemma_lessthancongruence2).
assert (Cong b e D F) by (conclude lemma_congruencetransitive).
assert (Cong D F b e) by (conclude lemma_congruencesymmetric).
assert (Lt b e b F) by (conclude lemma_lessthancongruence2).
let Tf:=fresh in assert (Tf:exists q, (BetS b q F /\\ Cong b q b e)) by (conclude_def Lt );destruct Tf as [q];spliter.
assert (neq b q) by (forward_using lemma_betweennotequal).
assert (neq b F) by (forward_using lemma_betweennotequal).
assert (Out b F q) by (conclude lemma_ray4).

*****
H34 : Out b F q
H33 : neq b F
H32 : neq b q
H31 : Cong b q b e
H30 : BetS b q F
q : Point
H29 : Lt b e b F
H28 : Cong D F b e
H27 : Cong b e D F
H26 : Lt D F b F
H25 : Cong F D D F
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Out b F e) by (conclude lemma_ray4).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong F D D F) by (conclude cn_equalityreverse).
assert (Lt D F b F) by (conclude lemma_lessthancongruence2).
assert (Cong b e D F) by (conclude lemma_congruencetransitive).
assert (Cong D F b e) by (conclude lemma_congruencesymmetric).
assert (Lt b e b F) by (conclude lemma_lessthancongruence2).
let Tf:=fresh in assert (Tf:exists q, (BetS b q F /\\ Cong b q b e)) by (conclude_def Lt );destruct Tf as [q];spliter.
assert (neq b q) by (forward_using lemma_betweennotequal).
assert (neq b F) by (forward_using lemma_betweennotequal).
assert (Out b F q) by (conclude lemma_ray4).
assert (Out b F e) by (conclude lemma_ray4).

*****
H35 : Out b F e
H34 : Out b F q
H33 : neq b F
H32 : neq b q
H31 : Cong b q b e
H30 : BetS b q F
q : Point
H29 : Lt b e b F
H28 : Cong D F b e
H27 : Cong b e D F
H26 : Lt D F b F
H25 : Cong F D D F
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq q e) by (conclude lemma_layoffunique).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong F D D F) by (conclude cn_equalityreverse).
assert (Lt D F b F) by (conclude lemma_lessthancongruence2).
assert (Cong b e D F) by (conclude lemma_congruencetransitive).
assert (Cong D F b e) by (conclude lemma_congruencesymmetric).
assert (Lt b e b F) by (conclude lemma_lessthancongruence2).
let Tf:=fresh in assert (Tf:exists q, (BetS b q F /\\ Cong b q b e)) by (conclude_def Lt );destruct Tf as [q];spliter.
assert (neq b q) by (forward_using lemma_betweennotequal).
assert (neq b F) by (forward_using lemma_betweennotequal).
assert (Out b F q) by (conclude lemma_ray4).
assert (Out b F e) by (conclude lemma_ray4).
assert (eq q e) by (conclude lemma_layoffunique).

*****
H36 : eq q e
H35 : Out b F e
H34 : Out b F q
H33 : neq b F
H32 : neq b q
H31 : Cong b q b e
H30 : BetS b q F
q : Point
H29 : Lt b e b F
H28 : Cong D F b e
H27 : Cong b e D F
H26 : Lt D F b F
H25 : Cong F D D F
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS b e F) by (conclude cn_equalitysub).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong F D D F) by (conclude cn_equalityreverse).
assert (Lt D F b F) by (conclude lemma_lessthancongruence2).
assert (Cong b e D F) by (conclude lemma_congruencetransitive).
assert (Cong D F b e) by (conclude lemma_congruencesymmetric).
assert (Lt b e b F) by (conclude lemma_lessthancongruence2).
let Tf:=fresh in assert (Tf:exists q, (BetS b q F /\\ Cong b q b e)) by (conclude_def Lt );destruct Tf as [q];spliter.
assert (neq b q) by (forward_using lemma_betweennotequal).
assert (neq b F) by (forward_using lemma_betweennotequal).
assert (Out b F q) by (conclude lemma_ray4).
assert (Out b F e) by (conclude lemma_ray4).
assert (eq q e) by (conclude lemma_layoffunique).
assert (BetS b e F) by (conclude cn_equalitysub).

*****
H37 : BetS b e F
H36 : eq q e
H35 : Out b F e
H34 : Out b F q
H33 : neq b F
H32 : neq b q
H31 : Cong b q b e
H30 : BetS b q F
q : Point
H29 : Lt b e b F
H28 : Cong D F b e
H27 : Cong b e D F
H26 : Lt D F b F
H25 : Cong F D D F
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS F e F) by (conclude lemma_3_6a).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong F D D F) by (conclude cn_equalityreverse).
assert (Lt D F b F) by (conclude lemma_lessthancongruence2).
assert (Cong b e D F) by (conclude lemma_congruencetransitive).
assert (Cong D F b e) by (conclude lemma_congruencesymmetric).
assert (Lt b e b F) by (conclude lemma_lessthancongruence2).
let Tf:=fresh in assert (Tf:exists q, (BetS b q F /\\ Cong b q b e)) by (conclude_def Lt );destruct Tf as [q];spliter.
assert (neq b q) by (forward_using lemma_betweennotequal).
assert (neq b F) by (forward_using lemma_betweennotequal).
assert (Out b F q) by (conclude lemma_ray4).
assert (Out b F e) by (conclude lemma_ray4).
assert (eq q e) by (conclude lemma_layoffunique).
assert (BetS b e F) by (conclude cn_equalitysub).
assert (BetS F e F) by (conclude lemma_3_6a).

*****
H38 : BetS F e F
H37 : BetS b e F
H36 : eq q e
H35 : Out b F e
H34 : Out b F q
H33 : neq b F
H32 : neq b q
H31 : Cong b q b e
H30 : BetS b q F
q : Point
H29 : Lt b e b F
H28 : Cong D F b e
H27 : Cong b e D F
H26 : Lt D F b F
H25 : Cong F D D F
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ BetS F e F) by (conclude axiom_betweennessidentity).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
intro.
assert (Cong b F b F) by (conclude cn_congruencereflexive).
assert (Lt b F b e) by (conclude_def Lt ).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong F D D F) by (conclude cn_equalityreverse).
assert (Lt D F b F) by (conclude lemma_lessthancongruence2).
assert (Cong b e D F) by (conclude lemma_congruencetransitive).
assert (Cong D F b e) by (conclude lemma_congruencesymmetric).
assert (Lt b e b F) by (conclude lemma_lessthancongruence2).
let Tf:=fresh in assert (Tf:exists q, (BetS b q F /\\ Cong b q b e)) by (conclude_def Lt );destruct Tf as [q];spliter.
assert (neq b q) by (forward_using lemma_betweennotequal).
assert (neq b F) by (forward_using lemma_betweennotequal).
assert (Out b F q) by (conclude lemma_ray4).
assert (Out b F e) by (conclude lemma_ray4).
assert (eq q e) by (conclude lemma_layoffunique).
assert (BetS b e F) by (conclude cn_equalitysub).
assert (BetS F e F) by (conclude lemma_3_6a).
assert (~ BetS F e F) by (conclude axiom_betweennessidentity).

*****
H39 : not (BetS F e F)
H38 : BetS F e F
H37 : BetS b e F
H36 : eq q e
H35 : Out b F e
H34 : Out b F q
H33 : neq b F
H32 : neq b q
H31 : Cong b q b e
H30 : BetS b q F
q : Point
H29 : Lt b e b F
H28 : Cong D F b e
H27 : Cong b e D F
H26 : Lt D F b F
H25 : Cong F D D F
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : BetS F D b
H20 : BetS b D F
H19 : Cong F D F D
H18 : Lt b F b e
H17 : Cong b F b F
H16 : BetS b F e
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).

*****
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
assert (~ eq F e).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).

*****
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (eq F e)
+++++
intro.
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
intro.

*****
H17 : eq F e
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong b F B E) by (conclude cn_equalitysub).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
intro.
assert (Cong b F B E) by (conclude cn_equalitysub).

*****
H18 : Cong b F B E
H17 : eq F e
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS b D F) by (conclude lemma_3_6a).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
intro.
assert (Cong b F B E) by (conclude cn_equalitysub).
assert (BetS b D F) by (conclude lemma_3_6a).

*****
H19 : BetS b D F
H18 : Cong b F B E
H17 : eq F e
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
intro.
assert (Cong b F B E) by (conclude cn_equalitysub).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).

*****
H20 : BetS F D b
H19 : BetS b D F
H18 : Cong b F B E
H17 : eq F e
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong F D F D) by (conclude cn_congruencereflexive).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
intro.
assert (Cong b F B E) by (conclude cn_equalitysub).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Cong F D F D) by (conclude cn_congruencereflexive).

*****
H21 : Cong F D F D
H20 : BetS F D b
H19 : BetS b D F
H18 : Cong b F B E
H17 : eq F e
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Lt F D F b) by (conclude_def Lt ).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
intro.
assert (Cong b F B E) by (conclude cn_equalitysub).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (Lt F D F b) by (conclude_def Lt ).

*****
H22 : Lt F D F b
H21 : Cong F D F D
H20 : BetS F D b
H19 : BetS b D F
H18 : Cong b F B E
H17 : eq F e
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong F b b F) by (conclude cn_equalityreverse).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
intro.
assert (Cong b F B E) by (conclude cn_equalitysub).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).

*****
H23 : Cong F b b F
H22 : Lt F D F b
H21 : Cong F D F D
H20 : BetS F D b
H19 : BetS b D F
H18 : Cong b F B E
H17 : eq F e
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
intro.
assert (Cong b F B E) by (conclude cn_equalitysub).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).

*****
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : Cong F D F D
H20 : BetS F D b
H19 : BetS b D F
H18 : Cong b F B E
H17 : eq F e
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong D F B E) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
intro.
assert (Cong b F B E) by (conclude cn_equalitysub).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong D F B E) by (conclude lemma_congruencesymmetric).

*****
H25 : Cong D F B E
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : Cong F D F D
H20 : BetS F D b
H19 : BetS b D F
H18 : Cong b F B E
H17 : eq F e
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong F D B E) by (forward_using lemma_congruenceflip).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
intro.
assert (Cong b F B E) by (conclude cn_equalitysub).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong D F B E) by (conclude lemma_congruencesymmetric).
assert (Cong F D B E) by (forward_using lemma_congruenceflip).

*****
H26 : Cong F D B E
H25 : Cong D F B E
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : Cong F D F D
H20 : BetS F D b
H19 : BetS b D F
H18 : Cong b F B E
H17 : eq F e
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Lt B E b F) by (conclude lemma_lessthancongruence2).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
intro.
assert (Cong b F B E) by (conclude cn_equalitysub).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong D F B E) by (conclude lemma_congruencesymmetric).
assert (Cong F D B E) by (forward_using lemma_congruenceflip).
assert (Lt B E b F) by (conclude lemma_lessthancongruence2).

*****
H27 : Lt B E b F
H26 : Cong F D B E
H25 : Cong D F B E
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : Cong F D F D
H20 : BetS F D b
H19 : BetS b D F
H18 : Cong b F B E
H17 : eq F e
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Cong b F b e) by (conclude lemma_congruencetransitive).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
intro.
assert (Cong b F B E) by (conclude cn_equalitysub).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong D F B E) by (conclude lemma_congruencesymmetric).
assert (Cong F D B E) by (forward_using lemma_congruenceflip).
assert (Lt B E b F) by (conclude lemma_lessthancongruence2).
assert (Cong b F b e) by (conclude lemma_congruencetransitive).

*****
H28 : Cong b F b e
H27 : Lt B E b F
H26 : Cong F D B E
H25 : Cong D F B E
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : Cong F D F D
H20 : BetS F D b
H19 : BetS b D F
H18 : Cong b F B E
H17 : eq F e
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Lt B E b e) by (conclude lemma_lessthancongruence).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
intro.
assert (Cong b F B E) by (conclude cn_equalitysub).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong D F B E) by (conclude lemma_congruencesymmetric).
assert (Cong F D B E) by (forward_using lemma_congruenceflip).
assert (Lt B E b F) by (conclude lemma_lessthancongruence2).
assert (Cong b F b e) by (conclude lemma_congruencetransitive).
assert (Lt B E b e) by (conclude lemma_lessthancongruence).

*****
H29 : Lt B E b e
H28 : Cong b F b e
H27 : Lt B E b F
H26 : Cong F D B E
H25 : Cong D F B E
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : Cong F D F D
H20 : BetS F D b
H19 : BetS b D F
H18 : Cong b F B E
H17 : eq F e
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (Lt B E B E) by (conclude lemma_lessthancongruence).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
intro.
assert (Cong b F B E) by (conclude cn_equalitysub).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong D F B E) by (conclude lemma_congruencesymmetric).
assert (Cong F D B E) by (forward_using lemma_congruenceflip).
assert (Lt B E b F) by (conclude lemma_lessthancongruence2).
assert (Cong b F b e) by (conclude lemma_congruencetransitive).
assert (Lt B E b e) by (conclude lemma_lessthancongruence).
assert (Lt B E B E) by (conclude lemma_lessthancongruence).

*****
H30 : Lt B E B E
H29 : Lt B E b e
H28 : Cong b F b e
H27 : Lt B E b F
H26 : Cong F D B E
H25 : Cong D F B E
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : Cong F D F D
H20 : BetS F D b
H19 : BetS b D F
H18 : Cong b F B E
H17 : eq F e
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (~ Lt B E B E) by (conclude lemma_trichotomy2).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
intro.
assert (Cong b F B E) by (conclude cn_equalitysub).
assert (BetS b D F) by (conclude lemma_3_6a).
assert (BetS F D b) by (conclude axiom_betweennesssymmetry).
assert (Cong F D F D) by (conclude cn_congruencereflexive).
assert (Lt F D F b) by (conclude_def Lt ).
assert (Cong F b b F) by (conclude cn_equalityreverse).
assert (Lt F D b F) by (conclude lemma_lessthancongruence).
assert (Cong D F B E) by (conclude lemma_congruencesymmetric).
assert (Cong F D B E) by (forward_using lemma_congruenceflip).
assert (Lt B E b F) by (conclude lemma_lessthancongruence2).
assert (Cong b F b e) by (conclude lemma_congruencetransitive).
assert (Lt B E b e) by (conclude lemma_lessthancongruence).
assert (Lt B E B E) by (conclude lemma_lessthancongruence).
assert (~ Lt B E B E) by (conclude lemma_trichotomy2).

*****
H31 : not (Lt B E B E)
H30 : Lt B E B E
H29 : Lt B E b e
H28 : Cong b F b e
H27 : Lt B E b F
H26 : Cong F D B E
H25 : Cong D F B E
H24 : Lt F D b F
H23 : Cong F b b F
H22 : Lt F D F b
H21 : Cong F D F D
H20 : BetS F D b
H19 : BetS b D F
H18 : Cong b F B E
H17 : eq F e
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).

*****
H17 : not (eq F e)
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
assert (~ ~ BetS b e F).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
assert (~ ~ BetS b e F).

*****
H17 : not (eq F e)
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
not (not (BetS b e F))
+++++
intro.
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
assert (~ ~ BetS b e F).
intro.

*****
H18 : not (BetS b e F)
H17 : not (eq F e)
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
assert (eq F e) by (conclude lemma_outerconnectivity).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
assert (~ ~ BetS b e F).
intro.
assert (eq F e) by (conclude lemma_outerconnectivity).

*****
H19 : eq F e
H18 : not (BetS b e F)
H17 : not (eq F e)
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
False
+++++
contradict.
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
assert (~ ~ BetS b e F).

*****
H18 : not (not (BetS b e F))
H17 : not (eq F e)
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
assert (BetS C e F) by (conclude lemma_3_7a).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
assert (~ ~ BetS b e F).
assert (BetS C e F) by (conclude lemma_3_7a).

*****
H19 : BetS C e F
H18 : not (not (BetS b e F))
H17 : not (eq F e)
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
assert (Cong A E C e) by (conclude cn_sumofparts).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
assert (~ ~ BetS b e F).
assert (BetS C e F) by (conclude lemma_3_7a).
assert (Cong A E C e) by (conclude cn_sumofparts).

*****
H20 : Cong A E C e
H19 : BetS C e F
H18 : not (not (BetS b e F))
H17 : not (eq F e)
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
assert (Cong C e A E) by (conclude lemma_congruencesymmetric).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
assert (~ ~ BetS b e F).
assert (BetS C e F) by (conclude lemma_3_7a).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong C e A E) by (conclude lemma_congruencesymmetric).

*****
H21 : Cong C e A E
H20 : Cong A E C e
H19 : BetS C e F
H18 : not (not (BetS b e F))
H17 : not (eq F e)
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
assert (Lt A E C F) by (conclude_def Lt ).
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
assert (~ ~ BetS b e F).
assert (BetS C e F) by (conclude lemma_3_7a).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong C e A E) by (conclude lemma_congruencesymmetric).
assert (Lt A E C F) by (conclude_def Lt ).

*****
H22 : Lt A E C F
H21 : Cong C e A E
H20 : Cong A E C e
H19 : BetS C e F
H18 : not (not (BetS b e F))
H17 : not (eq F e)
H16 : not (BetS b F e)
H15 : BetS C b F
H14 : BetS e b C
H13 : Cong e D e D
H12 : Cong A E C e
H11 : Cong B E b e
H10 : Cong b e B E
H9 : BetS C b e
e : Point
H8 : neq B E
H7 : neq b C
H6 : neq C b
H5 : Cong A B C b
H4 : Cong C b A B
H3 : BetS C b D
b : Point
H2 : Cong B E D F
H1 : BetS C D F
H0 : BetS A B E
H : Lt A B C D
A,B,C,D,E,F : Point
Ax : euclidean_neutral_ruler_compass Ax0
Ax0 : euclidean_neutral
*****
Lt A E C F
+++++
close.
-----
Lemma lemma_lessthanadditive : forall A B C D E F, Lt A B C D -> BetS A B E -> BetS C D F -> Cong B E D F -> Lt A E C F.
Proof.
intros.
let Tf:=fresh in assert (Tf:exists b, (BetS C b D /\\ Cong C b A B)) by (conclude_def Lt );destruct Tf as [b];spliter.
assert (Cong A B C b) by (conclude lemma_congruencesymmetric).
assert (neq C b) by (forward_using lemma_betweennotequal).
assert (neq b C) by (conclude lemma_inequalitysymmetric).
assert (neq B E) by (forward_using lemma_betweennotequal).
let Tf:=fresh in assert (Tf:exists e, (BetS C b e /\\ Cong b e B E)) by (conclude lemma_extension);destruct Tf as [e];spliter.
assert (Cong B E b e) by (conclude lemma_congruencesymmetric).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong e D e D) by (conclude cn_congruencereflexive).
assert (BetS e b C) by (conclude axiom_betweennesssymmetry).
assert (BetS C b F) by (conclude lemma_3_6b).
assert (~ BetS b F e).
assert (~ eq F e).
assert (~ ~ BetS b e F).
assert (BetS C e F) by (conclude lemma_3_7a).
assert (Cong A E C e) by (conclude cn_sumofparts).
assert (Cong C e A E) by (conclude lemma_congruencesymmetric).
assert (Lt A E C F) by (conclude_def Lt ).
close.

*****

*****

+++++
Qed.
-----
End Euclid.
-----
