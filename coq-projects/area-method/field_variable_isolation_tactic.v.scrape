Require Export field.
-----
Require Export general_tactics.
-----
Ltac NormalizeRing H :=\n  match goal with\n  | i:(?X1 = ?X2) |- _ =>\n      match constr:(i) with\n      | H => generalize H; ring_simplify X1 X2; clear H; intro H\n      | _ => fail\n      end\n  end.
-----
Lemma Lc : forall a b : F, a = b -> a - b = 0.
-----
Lemma Lc : forall a b : F, a = b -> a - b = 0.

*****

*****
forall (a b : F) (_ : eq a b), eq (Fminus a b) F0
+++++
intros.
-----
Lemma Lc : forall a b : F, a = b -> a - b = 0.
intros.

*****
H : eq a b
a,b : F
*****
eq (Fminus a b) F0
+++++
rewrite H.
-----
Lemma Lc : forall a b : F, a = b -> a - b = 0.
intros.
rewrite H.

*****
H : eq a b
a,b : F
*****
eq (Fminus b b) F0
+++++
ring.
-----
Lemma Lc : forall a b : F, a = b -> a - b = 0.
intros.
rewrite H.
ring.

*****

*****

+++++
Qed.
-----
Lemma Lcinv : forall a b : F, a - b = 0 -> a = b.
-----
Lemma Lcinv : forall a b : F, a - b = 0 -> a = b.

*****

*****
forall (a b : F) (_ : eq (Fminus a b) F0), eq a b
+++++
intros.
-----
Lemma Lcinv : forall a b : F, a - b = 0 -> a = b.
intros.

*****
H : eq (Fminus a b) F0
a,b : F
*****
eq a b
+++++
assert (a - b + b = 0 + b).
-----
Lemma Lcinv : forall a b : F, a - b = 0 -> a = b.
intros.
assert (a - b + b = 0 + b).

*****
H : eq (Fminus a b) F0
a,b : F
*****
eq (Fplus (Fminus a b) b) (Fplus F0 b)
+++++
rewrite H.
-----
Lemma Lcinv : forall a b : F, a - b = 0 -> a = b.
intros.
assert (a - b + b = 0 + b).
rewrite H.

*****
H : eq (Fminus a b) F0
a,b : F
*****
eq (Fplus F0 b) (Fplus F0 b)
+++++
auto.
-----
Lemma Lcinv : forall a b : F, a - b = 0 -> a = b.
intros.
assert (a - b + b = 0 + b).

*****
H0 : eq (Fplus (Fminus a b) b) (Fplus F0 b)
H : eq (Fminus a b) F0
a,b : F
*****
eq a b
+++++
NormalizeRing H0.
-----
Lemma Lcinv : forall a b : F, a - b = 0 -> a = b.
intros.
assert (a - b + b = 0 + b).
NormalizeRing H0.

*****
H0 : eq a b
H : eq (Fminus a b) F0
a,b : F
*****
eq a b
+++++
auto.
-----
Lemma Lcinv : forall a b : F, a - b = 0 -> a = b.
intros.
assert (a - b + b = 0 + b).

*****

*****

+++++
Qed.
-----
Lemma Lcp1 : forall a b c : F, a + b = c -> a = c - b.
-----
Lemma Lcp1 : forall a b c : F, a + b = c -> a = c - b.

*****

*****
forall (a b c : F) (_ : eq (Fplus a b) c), eq a (Fminus c b)
+++++
intros.
-----
Lemma Lcp1 : forall a b c : F, a + b = c -> a = c - b.
intros.

*****
H : eq (Fplus a b) c
a,b,c : F
*****
eq a (Fminus c b)
+++++
rewrite <- H.
-----
Lemma Lcp1 : forall a b c : F, a + b = c -> a = c - b.
intros.
rewrite <- H.

*****
H : eq (Fplus a b) c
a,b,c : F
*****
eq a (Fminus (Fplus a b) b)
+++++
ring.
-----
Lemma Lcp1 : forall a b c : F, a + b = c -> a = c - b.
intros.
rewrite <- H.
ring.

*****

*****

+++++
Qed.
-----
Lemma Lcp2 : forall a b c : F, a + b = c -> b = c - a.
-----
Lemma Lcp2 : forall a b c : F, a + b = c -> b = c - a.

*****

*****
forall (a b c : F) (_ : eq (Fplus a b) c), eq b (Fminus c a)
+++++
intros.
-----
Lemma Lcp2 : forall a b c : F, a + b = c -> b = c - a.
intros.

*****
H : eq (Fplus a b) c
a,b,c : F
*****
eq b (Fminus c a)
+++++
rewrite <- H.
-----
Lemma Lcp2 : forall a b c : F, a + b = c -> b = c - a.
intros.
rewrite <- H.

*****
H : eq (Fplus a b) c
a,b,c : F
*****
eq b (Fminus (Fplus a b) a)
+++++
ring.
-----
Lemma Lcp2 : forall a b c : F, a + b = c -> b = c - a.
intros.
rewrite <- H.
ring.

*****

*****

+++++
Qed.
-----
Lemma Lcm1 : forall a b c : F, a - b = c -> a = c + b.
-----
Lemma Lcm1 : forall a b c : F, a - b = c -> a = c + b.

*****

*****
forall (a b c : F) (_ : eq (Fminus a b) c), eq a (Fplus c b)
+++++
intros.
-----
Lemma Lcm1 : forall a b c : F, a - b = c -> a = c + b.
intros.

*****
H : eq (Fminus a b) c
a,b,c : F
*****
eq a (Fplus c b)
+++++
rewrite <- H.
-----
Lemma Lcm1 : forall a b c : F, a - b = c -> a = c + b.
intros.
rewrite <- H.

*****
H : eq (Fminus a b) c
a,b,c : F
*****
eq a (Fplus (Fminus a b) b)
+++++
ring.
-----
Lemma Lcm1 : forall a b c : F, a - b = c -> a = c + b.
intros.
rewrite <- H.
ring.

*****

*****

+++++
Qed.
-----
Lemma Lcm2 : forall a b c : F, a - b = c -> b = a - c.
-----
Lemma Lcm2 : forall a b c : F, a - b = c -> b = a - c.

*****

*****
forall (a b c : F) (_ : eq (Fminus a b) c), eq b (Fminus a c)
+++++
intros.
-----
Lemma Lcm2 : forall a b c : F, a - b = c -> b = a - c.
intros.

*****
H : eq (Fminus a b) c
a,b,c : F
*****
eq b (Fminus a c)
+++++
rewrite <- H.
-----
Lemma Lcm2 : forall a b c : F, a - b = c -> b = a - c.
intros.
rewrite <- H.

*****
H : eq (Fminus a b) c
a,b,c : F
*****
eq b (Fminus a (Fminus a b))
+++++
ring.
-----
Lemma Lcm2 : forall a b c : F, a - b = c -> b = a - c.
intros.
rewrite <- H.
ring.

*****

*****

+++++
Qed.
-----
Lemma Lcop1 : forall a b : F, - a = b -> a = - b.
-----
Lemma Lcop1 : forall a b : F, - a = b -> a = - b.

*****

*****
forall (a b : F) (_ : eq (Fopp a) b), eq a (Fopp b)
+++++
intros.
-----
Lemma Lcop1 : forall a b : F, - a = b -> a = - b.
intros.

*****
H : eq (Fopp a) b
a,b : F
*****
eq a (Fopp b)
+++++
rewrite <- H.
-----
Lemma Lcop1 : forall a b : F, - a = b -> a = - b.
intros.
rewrite <- H.

*****
H : eq (Fopp a) b
a,b : F
*****
eq a (Fopp (Fopp a))
+++++
ring.
-----
Lemma Lcop1 : forall a b : F, - a = b -> a = - b.
intros.
rewrite <- H.
ring.

*****

*****

+++++
Qed.
-----
Lemma Lcmult1 : forall a b c : F, b <> 0 -> a * b = c -> a = c / b.
-----
Lemma Lcmult1 : forall a b c : F, b <> 0 -> a * b = c -> a = c / b.

*****

*****
forall (a b c : F) (_ : not (eq b F0)) (_ : eq (Fmult a b) c), eq a (Fdiv c b)
+++++
intros.
-----
Lemma Lcmult1 : forall a b c : F, b <> 0 -> a * b = c -> a = c / b.
intros.

*****
H0 : eq (Fmult a b) c
H : not (eq b F0)
a,b,c : F
*****
eq a (Fdiv c b)
+++++
field_simplify_eq.
-----
Lemma Lcmult1 : forall a b c : F, b <> 0 -> a * b = c -> a = c / b.
intros.
field_simplify_eq.

*****
H0 : eq (Fmult a b) c
H : not (eq b F0)
a,b,c : F
*****
eq (Fmult a b) c
+++++
auto.
-----
Lemma Lcmult1 : forall a b c : F, b <> 0 -> a * b = c -> a = c / b.
intros.
field_simplify_eq.

*****
H0 : eq (Fmult a b) c
H : not (eq b F0)
a,b,c : F
*****
not (eq b F0)
+++++
auto.
-----
Lemma Lcmult1 : forall a b c : F, b <> 0 -> a * b = c -> a = c / b.
intros.
field_simplify_eq.

*****

*****

+++++
Qed.
-----
Lemma Lcmult2 : forall a b c : F, a <> 0 -> a * b = c -> b = c / a.
-----
Lemma Lcmult2 : forall a b c : F, a <> 0 -> a * b = c -> b = c / a.

*****

*****
forall (a b c : F) (_ : not (eq a F0)) (_ : eq (Fmult a b) c), eq b (Fdiv c a)
+++++
intros.
-----
Lemma Lcmult2 : forall a b c : F, a <> 0 -> a * b = c -> b = c / a.
intros.

*****
H0 : eq (Fmult a b) c
H : not (eq a F0)
a,b,c : F
*****
eq b (Fdiv c a)
+++++
rewrite <- H0.
-----
Lemma Lcmult2 : forall a b c : F, a <> 0 -> a * b = c -> b = c / a.
intros.
rewrite <- H0.

*****
H0 : eq (Fmult a b) c
H : not (eq a F0)
a,b,c : F
*****
eq b (Fdiv (Fmult a b) a)
+++++
field_simplify_eq.
-----
Lemma Lcmult2 : forall a b c : F, a <> 0 -> a * b = c -> b = c / a.
intros.
rewrite <- H0.
field_simplify_eq.

*****
H0 : eq (Fmult a b) c
H : not (eq a F0)
a,b,c : F
*****
eq b b
+++++
trivial.
-----
Lemma Lcmult2 : forall a b c : F, a <> 0 -> a * b = c -> b = c / a.
intros.
rewrite <- H0.
field_simplify_eq.

*****
H0 : eq (Fmult a b) c
H : not (eq a F0)
a,b,c : F
*****
not (eq a F0)
+++++
trivial.
-----
Lemma Lcmult2 : forall a b c : F, a <> 0 -> a * b = c -> b = c / a.
intros.
rewrite <- H0.
field_simplify_eq.

*****

*****

+++++
Qed.
-----
Lemma Lcdiv1 : forall a b c : F, b <> 0 -> a / b = c -> a = b * c.
-----
Lemma Lcdiv1 : forall a b c : F, b <> 0 -> a / b = c -> a = b * c.

*****

*****
forall (a b c : F) (_ : not (eq b F0)) (_ : eq (Fdiv a b) c), eq a (Fmult b c)
+++++
intros.
-----
Lemma Lcdiv1 : forall a b c : F, b <> 0 -> a / b = c -> a = b * c.
intros.

*****
H0 : eq (Fdiv a b) c
H : not (eq b F0)
a,b,c : F
*****
eq a (Fmult b c)
+++++
rewrite <- H0.
-----
Lemma Lcdiv1 : forall a b c : F, b <> 0 -> a / b = c -> a = b * c.
intros.
rewrite <- H0.

*****
H0 : eq (Fdiv a b) c
H : not (eq b F0)
a,b,c : F
*****
eq a (Fmult b (Fdiv a b))
+++++
field.
-----
Lemma Lcdiv1 : forall a b c : F, b <> 0 -> a / b = c -> a = b * c.
intros.
rewrite <- H0.
field.

*****
H0 : eq (Fdiv a b) c
H : not (eq b F0)
a,b,c : F
*****
not (eq b F0)
+++++
trivial.
-----
Lemma Lcdiv1 : forall a b c : F, b <> 0 -> a / b = c -> a = b * c.
intros.
rewrite <- H0.
field.
trivial.

*****

*****

+++++
Qed.
-----
Lemma Lcdiv2 : forall a b c : F, b <> 0 -> c <> 0 -> a / b = c -> b = a / c.
-----
Lemma Lcdiv2 : forall a b c : F, b <> 0 -> c <> 0 -> a / b = c -> b = a / c.

*****

*****
forall (a b c : F) (_ : not (eq b F0)) (_ : not (eq c F0)) (_ : eq (Fdiv a b) c), eq b (Fdiv a c)
+++++
intros.
-----
Lemma Lcdiv2 : forall a b c : F, b <> 0 -> c <> 0 -> a / b = c -> b = a / c.
intros.

*****
H1 : eq (Fdiv a b) c
H0 : not (eq c F0)
H : not (eq b F0)
a,b,c : F
*****
eq b (Fdiv a c)
+++++
rewrite <- H1.
-----
Lemma Lcdiv2 : forall a b c : F, b <> 0 -> c <> 0 -> a / b = c -> b = a / c.
intros.
rewrite <- H1.

*****
H1 : eq (Fdiv a b) c
H0 : not (eq c F0)
H : not (eq b F0)
a,b,c : F
*****
eq b (Fdiv a (Fdiv a b))
+++++
field.
-----
Lemma Lcdiv2 : forall a b c : F, b <> 0 -> c <> 0 -> a / b = c -> b = a / c.
intros.
rewrite <- H1.
field.

*****
H1 : eq (Fdiv a b) c
H0 : not (eq c F0)
H : not (eq b F0)
a,b,c : F
*****
and (not (eq b F0)) (not (eq a F0))
+++++
split.
-----
Lemma Lcdiv2 : forall a b c : F, b <> 0 -> c <> 0 -> a / b = c -> b = a / c.
intros.
rewrite <- H1.
field.
split.

*****
H1 : eq (Fdiv a b) c
H0 : not (eq c F0)
H : not (eq b F0)
a,b,c : F
*****
not (eq b F0)
+++++
trivial.
-----
Lemma Lcdiv2 : forall a b c : F, b <> 0 -> c <> 0 -> a / b = c -> b = a / c.
intros.
rewrite <- H1.
field.
split.

*****
H1 : eq (Fdiv a b) c
H0 : not (eq c F0)
H : not (eq b F0)
a,b,c : F
*****
not (eq a F0)
+++++
trivial.
-----
Lemma Lcdiv2 : forall a b c : F, b <> 0 -> c <> 0 -> a / b = c -> b = a / c.
intros.
rewrite <- H1.
field.
split.
trivial.

*****
H1 : eq (Fdiv a b) c
H0 : not (eq c F0)
H : not (eq b F0)
a,b,c : F
*****
not (eq a F0)
+++++
intuition.
-----
Lemma Lcdiv2 : forall a b c : F, b <> 0 -> c <> 0 -> a / b = c -> b = a / c.
intros.
rewrite <- H1.
field.
split.
trivial.
intuition.

*****
H2 : eq a F0
H1 : eq (Fdiv a b) c
H0 : forall _ : eq c F0, False
H : forall _ : eq b F0, False
a,b,c : F
*****
False
+++++
apply H0.
-----
Lemma Lcdiv2 : forall a b c : F, b <> 0 -> c <> 0 -> a / b = c -> b = a / c.
intros.
rewrite <- H1.
field.
split.
trivial.
intuition.
apply H0.

*****
H2 : eq a F0
H1 : eq (Fdiv a b) c
H0 : forall _ : eq c F0, False
H : forall _ : eq b F0, False
a,b,c : F
*****
eq c F0
+++++
rewrite <- H1 in |- *.
-----
Lemma Lcdiv2 : forall a b c : F, b <> 0 -> c <> 0 -> a / b = c -> b = a / c.
intros.
rewrite <- H1.
field.
split.
trivial.
intuition.
apply H0.
rewrite <- H1 in |- *.

*****
H2 : eq a F0
H1 : eq (Fdiv a b) c
H0 : forall _ : eq c F0, False
H : forall _ : eq b F0, False
a,b,c : F
*****
eq (Fdiv a b) F0
+++++
rewrite H2 in |- *.
-----
Lemma Lcdiv2 : forall a b c : F, b <> 0 -> c <> 0 -> a / b = c -> b = a / c.
intros.
rewrite <- H1.
field.
split.
trivial.
intuition.
apply H0.
rewrite <- H1 in |- *.
rewrite H2 in |- *.

*****
H2 : eq a F0
H1 : eq (Fdiv a b) c
H0 : forall _ : eq c F0, False
H : forall _ : eq b F0, False
a,b,c : F
*****
eq (Fdiv F0 b) F0
+++++
unfold Fdiv in |- *.
-----
Lemma Lcdiv2 : forall a b c : F, b <> 0 -> c <> 0 -> a / b = c -> b = a / c.
intros.
rewrite <- H1.
field.
split.
trivial.
intuition.
apply H0.
rewrite <- H1 in |- *.
rewrite H2 in |- *.
unfold Fdiv in |- *.

*****
H2 : eq a F0
H1 : eq (Fdiv a b) c
H0 : forall _ : eq c F0, False
H : forall _ : eq b F0, False
a,b,c : F
*****
eq (Fmult F0 (Finv b)) F0
+++++
ring.
-----
Lemma Lcdiv2 : forall a b c : F, b <> 0 -> c <> 0 -> a / b = c -> b = a / c.
intros.
rewrite <- H1.
field.
split.

*****

*****

+++++
Qed.
-----
Ltac IsoleVarAux1 var H T Hyp :=\n  match constr:(T) with\n  | (var = ?X2 :>?X1) =>\n      assert (Hypazerty : T);\n       [ exact H | clear Hyp; rename Hypazerty into Hyp ]\n  | (?X1 + ?X2 = ?X3 :>?X4) =>\n      IsoleVarAux1 var (Lcp1 X1 X2 X3 H) (X1 = X3 - X2 :>X4) Hyp ||\n        IsoleVarAux1 var (Lcp2 X1 X2 X3 H) (X2 = X3 - X1 :>X4) Hyp\n  | (?X1 - ?X2 = ?X3 :>?X4) =>\n      IsoleVarAux1 var (Lcm1 X1 X2 X3 H) (X1 = X3 + X2 :>X4) Hyp ||\n        IsoleVarAux1 var (Lcm2 X1 X2 X3 H) (X2 = X1 - X3 :>X4) Hyp\n  | (?X1 / ?X2 = ?X3 :>?X4) =>\n      match goal with\n      | Hop:(?X2 <> 0) |- _ =>\n          IsoleVarAux1 var (Lcdiv1 X1 X2 X3 Hop H) (X1 = X2 * X3 :>X4) Hyp\n      | _ =>\n          cut (X2 <> 0);\n           [ intro;\n              match goal with\n              | Hop:(?X2 <> 0) |- _ =>\n                  IsoleVarAux1 var (Lcdiv1 X1 X2 X3 Hop H)\n                   (X1 = X2 * X3 :>X4) Hyp\n              end\n           | idtac ]\n      end ||\n        match goal with\n        | Hop1:(?X2 <> 0),Hop2:(?X3 <> 0) |- _ =>\n            IsoleVarAux1 var (Lcdiv2 X1 X2 X3 Hop1 Hop2 H)\n             (X2 = X1 / X3 :>X4) Hyp\n        | Hop1:(?X2 <> 0) |- _ =>\n            cut (X3 <> 0);\n             [ intro;\n                match goal with\n                | Hop2:(?X3 <> 0) |- _ =>\n                    IsoleVarAux1 var (Lcdiv2 X1 X2 X3 Hop1 Hop2 H)\n                     (X2 = X1 / X3 :>X4) Hyp\n                end\n             | idtac ]\n        | Hop2:(?X3 <> 0) |- _ =>\n            cut (X2 <> 0);\n             [ intro;\n                match goal with\n                | Hop1:(?X2 <> 0) |- _ =>\n                    IsoleVarAux1 var (Lcdiv2 X1 X2 X3 Hop1 Hop2 H)\n                     (X2 = X1 / X3 :>X4) Hyp\n                end\n             | idtac ]\n        | _ =>\n            cut (X2 <> 0);\n             [ intro; cut (X3 <> 0);\n                [ intro;\n                   match goal with\n                   | Hop1:(?X2 <> 0),Hop2:(?X3 <> 0) |- _ =>\n                       IsoleVarAux1 var (Lcdiv2 X1 X2 X3 Hop1 Hop2 H)\n                        (X2 = X1 / X3 :>X4) Hyp\n                   end\n                | trivial ]\n             | trivial ]\n        end\n  | (?X1 * ?X2 = ?X3 :>?X4) =>\n      match goal with\n      | Hop:(?X2 <> 0) |- _ =>\n          IsoleVarAux1 var (Lcmult1 X1 X2 X3 Hop H) (X1 = X3 / X2 :>X4) Hyp\n      | _ =>\n          cut (X2 <> 0);\n           [ intro;\n              match goal with\n              | Hop:(?X2 <> 0) |- _ =>\n                  IsoleVarAux1 var (Lcmult1 X1 X2 X3 Hop H)\n                   (X1 = X3 / X2 :>X4) Hyp\n              end\n           | idtac ]\n      end ||\n        match goal with\n        | Hop:(?X1 <> 0) |- _ =>\n            IsoleVarAux1 var (Lcmult2 X1 X2 X3 Hop H) (X2 = X3 / X1 :>X4) Hyp\n        | _ =>\n            cut (X1 <> 0);\n             [ intro;\n                match goal with\n                | Hop:(?X1 <> 0) |- _ =>\n                    IsoleVarAux1 var (Lcmult2 X1 X2 X3 Hop H)\n                     (X2 = X3 / X1 :>X4) Hyp\n                end\n             | idtac ]\n        end\n  | (- ?X1 = ?X3 :>?X4) =>\n      IsoleVarAux1 var (Lcop1 X1 X3 H) (X1 = - X3 :>X4) Hyp\n  | _ => fail\n  end.
-----
Ltac IsoleVarAux var H T Hyp :=\n  match constr:(T) with\n  | (?X2 = ?X3 :>?X1) =>\n      IsoleVarAux1 var H T Hyp ||\n        IsoleVarAux1 var (sym_eq H) (X3 = X2 :>X1) Hyp\n  end.
-----
Ltac TypeOf H :=\n  match goal with\n  | id:?X1 |- _ => match constr:(id) with\n                   | H => constr:(X1)\n                   | _ => fail\n                   end\n  end.
-----
Ltac IsoleVar var H := let T := TypeOf H in\n                       IsoleVarAux var H T H.
-----
Ltac IsoleVarRing var H := IsoleVar var H; NormalizeRing H.
-----
Ltac RewriteVar var H := IsoleVarRing var H; try rewrite H in *.
-----
