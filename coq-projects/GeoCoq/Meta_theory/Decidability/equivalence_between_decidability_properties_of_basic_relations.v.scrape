Require Export GeoCoq.Tarski_dev.Ch04_col.
-----
Require Import GeoCoq.Utils.all_equiv.
-----
Section Equivalence_between_decidability_properties_of_basic_relations.
-----
Context `{Tn:Tarski_neutral_dimensionless}.
-----
Lemma cong_dec_eq_dec :\n  (forall A B C D, Cong A B C D \/ ~ Cong A B C D) ->\n  (forall A B:Tpoint, A=B \/ A<>B).
-----
Lemma cong_dec_eq_dec : (forall A B C D, Cong A B C D \\/ ~ Cong A B C D) -> (forall A B:Tpoint, A=B \\/ A<>B).

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D))) (A B : Tpoint), or (eq A B) (not (eq A B))
+++++
Proof.
-----
Lemma cong_dec_eq_dec : (forall A B C D, Cong A B C D \\/ ~ Cong A B C D) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D))) (A B : Tpoint), or (eq A B) (not (eq A B))
+++++
intros H A B.
-----
Lemma cong_dec_eq_dec : (forall A B C D, Cong A B C D \\/ ~ Cong A B C D) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros H A B.

*****
A,B : Tpoint
H : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D))
Tn : Tarski_neutral_dimensionless
*****
or (eq A B) (not (eq A B))
+++++
elim (H A B A A).
-----
Lemma cong_dec_eq_dec : (forall A B C D, Cong A B C D \\/ ~ Cong A B C D) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros H A B.
elim (H A B A A).

*****
A,B : Tpoint
H : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D))
Tn : Tarski_neutral_dimensionless
*****
forall _ : Cong A B A A, or (eq A B) (not (eq A B))
+++++
intro HCong.
-----
Lemma cong_dec_eq_dec : (forall A B C D, Cong A B C D \\/ ~ Cong A B C D) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros H A B.
elim (H A B A A).
intro HCong.

*****
HCong : Cong A B A A
A,B : Tpoint
H : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D))
Tn : Tarski_neutral_dimensionless
*****
or (eq A B) (not (eq A B))
+++++
left.
-----
Lemma cong_dec_eq_dec : (forall A B C D, Cong A B C D \\/ ~ Cong A B C D) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros H A B.
elim (H A B A A).
intro HCong.
left.

*****
HCong : Cong A B A A
A,B : Tpoint
H : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D))
Tn : Tarski_neutral_dimensionless
*****
eq A B
+++++
apply cong_identity with A.
-----
Lemma cong_dec_eq_dec : (forall A B C D, Cong A B C D \\/ ~ Cong A B C D) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros H A B.
elim (H A B A A).
intro HCong.
left.
apply cong_identity with A.

*****
HCong : Cong A B A A
A,B : Tpoint
H : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D))
Tn : Tarski_neutral_dimensionless
*****
Cong A B A A
+++++
assumption.
-----
Lemma cong_dec_eq_dec : (forall A B C D, Cong A B C D \\/ ~ Cong A B C D) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros H A B.
elim (H A B A A).

*****
A,B : Tpoint
H : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D))
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Cong A B A A), or (eq A B) (not (eq A B))
+++++
intro HCong.
-----
Lemma cong_dec_eq_dec : (forall A B C D, Cong A B C D \\/ ~ Cong A B C D) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros H A B.
elim (H A B A A).
intro HCong.

*****
HCong : not (Cong A B A A)
A,B : Tpoint
H : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D))
Tn : Tarski_neutral_dimensionless
*****
or (eq A B) (not (eq A B))
+++++
right.
-----
Lemma cong_dec_eq_dec : (forall A B C D, Cong A B C D \\/ ~ Cong A B C D) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros H A B.
elim (H A B A A).
intro HCong.
right.

*****
HCong : not (Cong A B A A)
A,B : Tpoint
H : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D))
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
intro.
-----
Lemma cong_dec_eq_dec : (forall A B C D, Cong A B C D \\/ ~ Cong A B C D) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros H A B.
elim (H A B A A).
intro HCong.
right.
intro.

*****
H0 : eq A B
HCong : not (Cong A B A A)
A,B : Tpoint
H : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma cong_dec_eq_dec : (forall A B C D, Cong A B C D \\/ ~ Cong A B C D) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros H A B.
elim (H A B A A).
intro HCong.
right.
intro.
subst.

*****
HCong : not (Cong B B B B)
B : Tpoint
H : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply HCong.
-----
Lemma cong_dec_eq_dec : (forall A B C D, Cong A B C D \\/ ~ Cong A B C D) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros H A B.
elim (H A B A A).
intro HCong.
right.
intro.
subst.
apply HCong.

*****
HCong : not (Cong B B B B)
B : Tpoint
H : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D))
Tn : Tarski_neutral_dimensionless
*****
Cong B B B B
+++++
apply cong_pseudo_reflexivity.
-----
Lemma cong_dec_eq_dec : (forall A B C D, Cong A B C D \\/ ~ Cong A B C D) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros H A B.
elim (H A B A A).

*****

*****

+++++
Qed.
-----
Lemma eq_dec_implies_l2_11 :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  forall A B C A' B' C',\n  Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C A' B' C' : Tpoint) (_ : Bet A B C) (_ : Bet A' B' C') (_ : Cong A B A' B') (_ : Cong B C B' C'), Cong A C A' C'
+++++
Proof.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C A' B' C' : Tpoint) (_ : Bet A B C) (_ : Bet A' B' C') (_ : Cong A B A' B') (_ : Cong B C B' C'), Cong A C A' C'
+++++
intro eq_dec.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.

*****
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall (A B C A' B' C' : Tpoint) (_ : Bet A B C) (_ : Bet A' B' C') (_ : Cong A B A' B') (_ : Cong B C B' C'), Cong A C A' C'
+++++
intros.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.

*****
H2 : Cong B C B' C'
H1 : Cong A B A' B'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A C A' C'
+++++
induction (eq_dec A B).
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).

*****
H3 : eq A B
H2 : Cong B C B' C'
H1 : Cong A B A' B'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A C A' C'
+++++
subst B.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).
subst B.

*****
H1 : Cong A A A' B'
H2 : Cong A C B' C'
H0 : Bet A' B' C'
H : Bet A A C
A,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A C A' C'
+++++
assert (A' = B').
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).
subst B.
assert (A' = B').

*****
H1 : Cong A A A' B'
H2 : Cong A C B' C'
H0 : Bet A' B' C'
H : Bet A A C
A,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq A' B'
+++++
apply (cong_identity A' B' A).
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).
subst B.
assert (A' = B').
apply (cong_identity A' B' A).

*****
H1 : Cong A A A' B'
H2 : Cong A C B' C'
H0 : Bet A' B' C'
H : Bet A A C
A,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A' B' A A
+++++
Cong.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).
subst B.
assert (A' = B').

*****
H3 : eq A' B'
H1 : Cong A A A' B'
H2 : Cong A C B' C'
H0 : Bet A' B' C'
H : Bet A A C
A,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A C A' C'
+++++
idtac.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).
subst B.
assert (A' = B').
idtac.

*****
H3 : eq A' B'
H1 : Cong A A A' B'
H2 : Cong A C B' C'
H0 : Bet A' B' C'
H : Bet A A C
A,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A C A' C'
+++++
subst.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).
subst B.
assert (A' = B').
idtac.
subst.

*****
H1 : Cong A A B' B'
H2 : Cong A C B' C'
H0 : Bet B' B' C'
H : Bet A A C
A,C,B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A C B' C'
+++++
Cong.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).

*****
H3 : not (eq A B)
H2 : Cong B C B' C'
H1 : Cong A B A' B'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A C A' C'
+++++
apply cong_commutativity.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).
apply cong_commutativity.

*****
H3 : not (eq A B)
H2 : Cong B C B' C'
H1 : Cong A B A' B'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C A C' A'
+++++
apply (five_segment A A' B B' C C' A A').
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).
apply cong_commutativity.
apply (five_segment A A' B B' C C' A A').

*****
H3 : not (eq A B)
H2 : Cong B C B' C'
H1 : Cong A B A' B'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A B A' B'
+++++
Cong.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).
apply cong_commutativity.
apply (five_segment A A' B B' C C' A A').

*****
H3 : not (eq A B)
H2 : Cong B C B' C'
H1 : Cong A B A' B'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B C B' C'
+++++
Cong.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).
apply cong_commutativity.
apply (five_segment A A' B B' C C' A A').

*****
H3 : not (eq A B)
H2 : Cong B C B' C'
H1 : Cong A B A' B'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A A A' A'
+++++
Cong.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).
apply cong_commutativity.
apply (five_segment A A' B B' C C' A A').

*****
H3 : not (eq A B)
H2 : Cong B C B' C'
H1 : Cong A B A' B'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B A B' A'
+++++
Cong.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).
apply cong_commutativity.
apply (five_segment A A' B B' C C' A A').

*****
H3 : not (eq A B)
H2 : Cong B C B' C'
H1 : Cong A B A' B'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
Cong.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).
apply cong_commutativity.
apply (five_segment A A' B B' C C' A A').

*****
H3 : not (eq A B)
H2 : Cong B C B' C'
H1 : Cong A B A' B'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
Cong.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).
apply cong_commutativity.
apply (five_segment A A' B B' C C' A A').

*****
H3 : not (eq A B)
H2 : Cong B C B' C'
H1 : Cong A B A' B'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
Cong.
-----
Lemma eq_dec_implies_l2_11 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Bet A' B' C' -> Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof.
intro eq_dec.
intros.
induction (eq_dec A B).

*****

*****

+++++
Qed.
-----
Lemma eq_dec_implies_construction_uniqueness :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  forall Q A B C X Y,\n  Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (Q A B C X Y : Tpoint) (_ : not (eq Q A)) (_ : Bet Q A X) (_ : Cong A X B C) (_ : Bet Q A Y) (_ : Cong A Y B C), eq X Y
+++++
Proof.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (Q A B C X Y : Tpoint) (_ : not (eq Q A)) (_ : Bet Q A X) (_ : Cong A X B C) (_ : Bet Q A Y) (_ : Cong A Y B C), eq X Y
+++++
intro eq_dec.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.

*****
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall (Q A B C X Y : Tpoint) (_ : not (eq Q A)) (_ : Bet Q A X) (_ : Cong A X B C) (_ : Bet Q A Y) (_ : Cong A Y B C), eq X Y
+++++
intros.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.

*****
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq X Y
+++++
assert (Cong A X A Y).
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).

*****
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A X A Y
+++++
eCong.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).

*****
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq X Y
+++++
idtac.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.

*****
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq X Y
+++++
assert (Cong Q X Q Y).
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).

*****
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong Q X Q Y
+++++
apply (eq_dec_implies_l2_11 eq_dec Q A X Q A Y).
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
apply (eq_dec_implies_l2_11 eq_dec Q A X Q A Y).

*****
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet Q A X
+++++
Cong.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
apply (eq_dec_implies_l2_11 eq_dec Q A X Q A Y).

*****
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet Q A Y
+++++
Cong.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
apply (eq_dec_implies_l2_11 eq_dec Q A X Q A Y).

*****
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong Q A Q A
+++++
Cong.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
apply (eq_dec_implies_l2_11 eq_dec Q A X Q A Y).

*****
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A X A Y
+++++
Cong.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).

*****
H5 : Cong Q X Q Y
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq X Y
+++++
idtac.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
idtac.

*****
H5 : Cong Q X Q Y
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq X Y
+++++
assert(OFSC Q A X Y Q A X X).
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
idtac.
assert(OFSC Q A X Y Q A X X).

*****
H5 : Cong Q X Q Y
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
OFSC Q A X Y Q A X X
+++++
unfold OFSC.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
idtac.
assert(OFSC Q A X Y Q A X X).
unfold OFSC.

*****
H5 : Cong Q X Q Y
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Bet Q A X) (and (Bet Q A X) (and (Cong Q A Q A) (and (Cong A X A X) (and (Cong Q Y Q X) (Cong A Y A X)))))
+++++
repeat split.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
idtac.
assert(OFSC Q A X Y Q A X X).
unfold OFSC.
repeat split.

*****
H5 : Cong Q X Q Y
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet Q A X
+++++
Cong.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
idtac.
assert(OFSC Q A X Y Q A X X).
unfold OFSC.
repeat split.

*****
H5 : Cong Q X Q Y
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet Q A X
+++++
Cong.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
idtac.
assert(OFSC Q A X Y Q A X X).
unfold OFSC.
repeat split.

*****
H5 : Cong Q X Q Y
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong Q A Q A
+++++
Cong.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
idtac.
assert(OFSC Q A X Y Q A X X).
unfold OFSC.
repeat split.

*****
H5 : Cong Q X Q Y
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A X A X
+++++
Cong.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
idtac.
assert(OFSC Q A X Y Q A X X).
unfold OFSC.
repeat split.

*****
H5 : Cong Q X Q Y
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong Q Y Q X
+++++
Cong.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
idtac.
assert(OFSC Q A X Y Q A X X).
unfold OFSC.
repeat split.

*****
H5 : Cong Q X Q Y
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A Y A X
+++++
Cong.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
idtac.
assert(OFSC Q A X Y Q A X X).

*****
H6 : OFSC Q A X Y Q A X X
H5 : Cong Q X Q Y
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq X Y
+++++
idtac.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
idtac.
assert(OFSC Q A X Y Q A X X).
idtac.

*****
H6 : OFSC Q A X Y Q A X X
H5 : Cong Q X Q Y
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq X Y
+++++
apply five_segment_with_def in H6.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
idtac.
assert(OFSC Q A X Y Q A X X).
idtac.
apply five_segment_with_def in H6.

*****
H6 : Cong X Y X X
H5 : Cong Q X Q Y
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq X Y
+++++
try assumption.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
idtac.
assert(OFSC Q A X Y Q A X X).
idtac.
apply five_segment_with_def in H6.
try assumption.

*****
H6 : Cong X Y X X
H5 : Cong Q X Q Y
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq X Y
+++++
apply cong_identity with X.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
idtac.
assert(OFSC Q A X Y Q A X X).
idtac.
apply five_segment_with_def in H6.
try assumption.
apply cong_identity with X.

*****
H6 : Cong X Y X X
H5 : Cong Q X Q Y
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong X Y X X
+++++
Cong.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).
idtac.
assert (Cong Q X Q Y).
idtac.
assert(OFSC Q A X Y Q A X X).
idtac.
apply five_segment_with_def in H6.

*****
H6 : OFSC Q A X Y Q A X X
H5 : Cong Q X Q Y
H4 : Cong A X A Y
H3 : Cong A Y B C
H2 : Bet Q A Y
H1 : Cong A X B C
H0 : Bet Q A X
H : not (eq Q A)
Q,A,B,C,X,Y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq Q A)
+++++
try assumption.
-----
Lemma eq_dec_implies_construction_uniqueness : (forall A B:Tpoint, A=B \\/ A<>B) -> forall Q A B C X Y, Q <> A -> Bet Q A X -> Cong A X B C -> Bet Q A Y -> Cong A Y B C -> X=Y.
Proof.
intro eq_dec.
intros.
assert (Cong A X A Y).

*****

*****

+++++
Qed.
-----
Lemma eq_dec_implies_outer_transitivity_between2 :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D : Tpoint) (_ : Bet A B C) (_ : Bet B C D) (_ : not (eq B C)), Bet A C D
+++++
Proof.
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D : Tpoint) (_ : Bet A B C) (_ : Bet B C D) (_ : not (eq B C)), Bet A C D
+++++
intro eq_dec.
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.

*****
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Bet A B C) (_ : Bet B C D) (_ : not (eq B C)), Bet A C D
+++++
intros.
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.

*****
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A C D
+++++
prolong A C x C D.
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.

*****
H3 : Cong C x C D
H2 : Bet A C x
x : Tpoint
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A C D
+++++
assert (x = D).
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.
assert (x = D).

*****
H3 : Cong C x C D
H2 : Bet A C x
x : Tpoint
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq x D
+++++
apply (eq_dec_implies_construction_uniqueness eq_dec B C C D).
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.
assert (x = D).
apply (eq_dec_implies_construction_uniqueness eq_dec B C C D).

*****
H3 : Cong C x C D
H2 : Bet A C x
x : Tpoint
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
try apply (between_exchange3 A B C x).
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.
assert (x = D).
apply (eq_dec_implies_construction_uniqueness eq_dec B C C D).
try apply (between_exchange3 A B C x).

*****
H3 : Cong C x C D
H2 : Bet A C x
x : Tpoint
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
Cong.
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.
assert (x = D).
apply (eq_dec_implies_construction_uniqueness eq_dec B C C D).

*****
H3 : Cong C x C D
H2 : Bet A C x
x : Tpoint
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B C x
+++++
try apply (between_exchange3 A B C x).
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.
assert (x = D).
apply (eq_dec_implies_construction_uniqueness eq_dec B C C D).
try apply (between_exchange3 A B C x).

*****
H3 : Cong C x C D
H2 : Bet A C x
x : Tpoint
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
Cong.
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.
assert (x = D).
apply (eq_dec_implies_construction_uniqueness eq_dec B C C D).
try apply (between_exchange3 A B C x).

*****
H3 : Cong C x C D
H2 : Bet A C x
x : Tpoint
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A C x
+++++
Cong.
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.
assert (x = D).
apply (eq_dec_implies_construction_uniqueness eq_dec B C C D).

*****
H3 : Cong C x C D
H2 : Bet A C x
x : Tpoint
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C x C D
+++++
try apply (between_exchange3 A B C x).
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.
assert (x = D).
apply (eq_dec_implies_construction_uniqueness eq_dec B C C D).
try apply (between_exchange3 A B C x).

*****
H3 : Cong C x C D
H2 : Bet A C x
x : Tpoint
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C x C D
+++++
Cong.
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.
assert (x = D).
apply (eq_dec_implies_construction_uniqueness eq_dec B C C D).

*****
H3 : Cong C x C D
H2 : Bet A C x
x : Tpoint
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B C D
+++++
try apply (between_exchange3 A B C x).
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.
assert (x = D).
apply (eq_dec_implies_construction_uniqueness eq_dec B C C D).
try apply (between_exchange3 A B C x).

*****
H3 : Cong C x C D
H2 : Bet A C x
x : Tpoint
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B C D
+++++
Cong.
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.
assert (x = D).
apply (eq_dec_implies_construction_uniqueness eq_dec B C C D).

*****
H3 : Cong C x C D
H2 : Bet A C x
x : Tpoint
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C D
+++++
try apply (between_exchange3 A B C x).
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.
assert (x = D).
apply (eq_dec_implies_construction_uniqueness eq_dec B C C D).
try apply (between_exchange3 A B C x).

*****
H3 : Cong C x C D
H2 : Bet A C x
x : Tpoint
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C D
+++++
Cong.
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.
assert (x = D).

*****
H4 : eq x D
H3 : Cong C x C D
H2 : Bet A C x
x : Tpoint
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A C D
+++++
idtac.
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.
assert (x = D).
idtac.

*****
H4 : eq x D
H3 : Cong C x C D
H2 : Bet A C x
x : Tpoint
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A C D
+++++
subst x.
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.
assert (x = D).
idtac.
subst x.

*****
H2 : Bet A C D
H3 : Cong C D C D
H1 : not (eq B C)
H0 : Bet B C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A C D
+++++
assumption.
-----
Lemma eq_dec_implies_outer_transitivity_between2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet B C D -> B<>C -> Bet A C D.
Proof.
intro eq_dec.
intros.
prolong A C x C D.
assert (x = D).

*****

*****

+++++
Qed.
-----
Lemma eq_dec_implies_between_exchange4 :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.
-----
Lemma eq_dec_implies_between_exchange4 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D : Tpoint) (_ : Bet A B C) (_ : Bet A C D), Bet A B D
+++++
Proof.
-----
Lemma eq_dec_implies_between_exchange4 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D : Tpoint) (_ : Bet A B C) (_ : Bet A C D), Bet A B D
+++++
intro eq_dec.
-----
Lemma eq_dec_implies_between_exchange4 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.
Proof.
intro eq_dec.

*****
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : Bet A B C) (_ : Bet A C D), Bet A B D
+++++
intros.
-----
Lemma eq_dec_implies_between_exchange4 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.
Proof.
intro eq_dec.
intros.

*****
H0 : Bet A C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B D
+++++
induction (eq_dec B C).
-----
Lemma eq_dec_implies_between_exchange4 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.
Proof.
intro eq_dec.
intros.
induction (eq_dec B C).

*****
H1 : eq B C
H0 : Bet A C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B D
+++++
subst.
-----
Lemma eq_dec_implies_between_exchange4 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.
Proof.
intro eq_dec.
intros.
induction (eq_dec B C).
subst.

*****
H0 : Bet A C D
H : Bet A C C
A,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A C D
+++++
auto.
-----
Lemma eq_dec_implies_between_exchange4 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.
Proof.
intro eq_dec.
intros.
induction (eq_dec B C).

*****
H1 : not (eq B C)
H0 : Bet A C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B D
+++++
idtac.
-----
Lemma eq_dec_implies_between_exchange4 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.
Proof.
intro eq_dec.
intros.
induction (eq_dec B C).
idtac.

*****
H1 : not (eq B C)
H0 : Bet A C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B D
+++++
apply between_symmetry.
-----
Lemma eq_dec_implies_between_exchange4 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.
Proof.
intro eq_dec.
intros.
induction (eq_dec B C).
idtac.
apply between_symmetry.

*****
H1 : not (eq B C)
H0 : Bet A C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet D B A
+++++
apply eq_dec_implies_outer_transitivity_between2 with C.
-----
Lemma eq_dec_implies_between_exchange4 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.
Proof.
intro eq_dec.
intros.
induction (eq_dec B C).
idtac.
apply between_symmetry.
apply eq_dec_implies_outer_transitivity_between2 with C.

*****
H1 : not (eq B C)
H0 : Bet A C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
eBetween.
-----
Lemma eq_dec_implies_between_exchange4 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.
Proof.
intro eq_dec.
intros.
induction (eq_dec B C).
idtac.
apply between_symmetry.
apply eq_dec_implies_outer_transitivity_between2 with C.

*****
H1 : not (eq B C)
H0 : Bet A C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet D C B
+++++
eBetween.
-----
Lemma eq_dec_implies_between_exchange4 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.
Proof.
intro eq_dec.
intros.
induction (eq_dec B C).
idtac.
apply between_symmetry.
apply eq_dec_implies_outer_transitivity_between2 with C.

*****
H1 : not (eq B C)
H0 : Bet A C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet C B A
+++++
eBetween.
-----
Lemma eq_dec_implies_between_exchange4 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.
Proof.
intro eq_dec.
intros.
induction (eq_dec B C).
idtac.
apply between_symmetry.
apply eq_dec_implies_outer_transitivity_between2 with C.

*****
H1 : not (eq B C)
H0 : Bet A C D
H : Bet A B C
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq C B)
+++++
eBetween.
-----
Lemma eq_dec_implies_between_exchange4 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, Bet A B C -> Bet A C D -> Bet A B D.
Proof.
intro eq_dec.
intros.
induction (eq_dec B C).

*****

*****

+++++
Qed.
-----
Lemma eq_dec_implies_two_distinct_points :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  exists X, exists Y: Tpoint, X <> Y.
-----
Lemma eq_dec_implies_two_distinct_points : (forall A B:Tpoint, A=B \\/ A<>B) -> exists X, exists Y: Tpoint, X <> Y.

*****
Tn : Tarski_neutral_dimensionless
*****
forall _ : forall A B : Tpoint, or (eq A B) (not (eq A B)), ex (fun X : Tpoint => ex (fun Y : Tpoint => not (eq X Y)))
+++++
Proof.
-----
Lemma eq_dec_implies_two_distinct_points : (forall A B:Tpoint, A=B \\/ A<>B) -> exists X, exists Y: Tpoint, X <> Y.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall _ : forall A B : Tpoint, or (eq A B) (not (eq A B)), ex (fun X : Tpoint => ex (fun Y : Tpoint => not (eq X Y)))
+++++
intro eq_dec.
-----
Lemma eq_dec_implies_two_distinct_points : (forall A B:Tpoint, A=B \\/ A<>B) -> exists X, exists Y: Tpoint, X <> Y.
Proof.
intro eq_dec.

*****
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => not (eq X Y)))
+++++
assert (ld:=lower_dim_ex).
-----
Lemma eq_dec_implies_two_distinct_points : (forall A B:Tpoint, A=B \\/ A<>B) -> exists X, exists Y: Tpoint, X <> Y.
Proof.
intro eq_dec.
assert (ld:=lower_dim_ex).

*****
ld : ex\n (fun A : Tpoint =>\n ex\n (fun B : Tpoint =>\n ex\n (fun C : Tpoint =>\n not (or (Bet A B C) (or (Bet B C A) (Bet C A B))))))
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => not (eq X Y)))
+++++
ex_elim ld A.
-----
Lemma eq_dec_implies_two_distinct_points : (forall A B:Tpoint, A=B \\/ A<>B) -> exists X, exists Y: Tpoint, X <> Y.
Proof.
intro eq_dec.
assert (ld:=lower_dim_ex).
ex_elim ld A.

*****
H : ex\n (fun B : Tpoint =>\n ex\n (fun C : Tpoint =>\n not (or (Bet A B C) (or (Bet B C A) (Bet C A B)))))
A : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => not (eq X Y)))
+++++
ex_elim H B.
-----
Lemma eq_dec_implies_two_distinct_points : (forall A B:Tpoint, A=B \\/ A<>B) -> exists X, exists Y: Tpoint, X <> Y.
Proof.
intro eq_dec.
assert (ld:=lower_dim_ex).
ex_elim ld A.
ex_elim H B.

*****
H0 : ex\n (fun C : Tpoint => not (or (Bet A B C) (or (Bet B C A) (Bet C A B))))
A,B : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => not (eq X Y)))
+++++
ex_elim H0 C.
-----
Lemma eq_dec_implies_two_distinct_points : (forall A B:Tpoint, A=B \\/ A<>B) -> exists X, exists Y: Tpoint, X <> Y.
Proof.
intro eq_dec.
assert (ld:=lower_dim_ex).
ex_elim ld A.
ex_elim H B.
ex_elim H0 C.

*****
H : not (or (Bet A B C) (or (Bet B C A) (Bet C A B)))
A,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => not (eq X Y)))
+++++
induction (eq_dec A B).
-----
Lemma eq_dec_implies_two_distinct_points : (forall A B:Tpoint, A=B \\/ A<>B) -> exists X, exists Y: Tpoint, X <> Y.
Proof.
intro eq_dec.
assert (ld:=lower_dim_ex).
ex_elim ld A.
ex_elim H B.
ex_elim H0 C.
induction (eq_dec A B).

*****
H0 : eq A B
H : not (or (Bet A B C) (or (Bet B C A) (Bet C A B)))
A,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => not (eq X Y)))
+++++
subst A.
-----
Lemma eq_dec_implies_two_distinct_points : (forall A B:Tpoint, A=B \\/ A<>B) -> exists X, exists Y: Tpoint, X <> Y.
Proof.
intro eq_dec.
assert (ld:=lower_dim_ex).
ex_elim ld A.
ex_elim H B.
ex_elim H0 C.
induction (eq_dec A B).
subst A.

*****
H : not (or (Bet B B C) (or (Bet B C B) (Bet C B B)))
B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => not (eq X Y)))
+++++
exists B.
-----
Lemma eq_dec_implies_two_distinct_points : (forall A B:Tpoint, A=B \\/ A<>B) -> exists X, exists Y: Tpoint, X <> Y.
Proof.
intro eq_dec.
assert (ld:=lower_dim_ex).
ex_elim ld A.
ex_elim H B.
ex_elim H0 C.
induction (eq_dec A B).
subst A.
exists B.

*****
H : not (or (Bet B B C) (or (Bet B C B) (Bet C B B)))
B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => not (eq B Y))
+++++
exists C.
-----
Lemma eq_dec_implies_two_distinct_points : (forall A B:Tpoint, A=B \\/ A<>B) -> exists X, exists Y: Tpoint, X <> Y.
Proof.
intro eq_dec.
assert (ld:=lower_dim_ex).
ex_elim ld A.
ex_elim H B.
ex_elim H0 C.
induction (eq_dec A B).
subst A.
exists B.
exists C.

*****
H : not (or (Bet B B C) (or (Bet B C B) (Bet C B B)))
B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
Between.
-----
Lemma eq_dec_implies_two_distinct_points : (forall A B:Tpoint, A=B \\/ A<>B) -> exists X, exists Y: Tpoint, X <> Y.
Proof.
intro eq_dec.
assert (ld:=lower_dim_ex).
ex_elim ld A.
ex_elim H B.
ex_elim H0 C.
induction (eq_dec A B).

*****
H0 : not (eq A B)
H : not (or (Bet A B C) (or (Bet B C A) (Bet C A B)))
A,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => ex (fun Y : Tpoint => not (eq X Y)))
+++++
exists A.
-----
Lemma eq_dec_implies_two_distinct_points : (forall A B:Tpoint, A=B \\/ A<>B) -> exists X, exists Y: Tpoint, X <> Y.
Proof.
intro eq_dec.
assert (ld:=lower_dim_ex).
ex_elim ld A.
ex_elim H B.
ex_elim H0 C.
induction (eq_dec A B).
exists A.

*****
H0 : not (eq A B)
H : not (or (Bet A B C) (or (Bet B C A) (Bet C A B)))
A,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun Y : Tpoint => not (eq A Y))
+++++
exists B.
-----
Lemma eq_dec_implies_two_distinct_points : (forall A B:Tpoint, A=B \\/ A<>B) -> exists X, exists Y: Tpoint, X <> Y.
Proof.
intro eq_dec.
assert (ld:=lower_dim_ex).
ex_elim ld A.
ex_elim H B.
ex_elim H0 C.
induction (eq_dec A B).
exists A.
exists B.

*****
H0 : not (eq A B)
H : not (or (Bet A B C) (or (Bet B C A) (Bet C A B)))
A,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
assumption.
-----
Lemma eq_dec_implies_two_distinct_points : (forall A B:Tpoint, A=B \\/ A<>B) -> exists X, exists Y: Tpoint, X <> Y.
Proof.
intro eq_dec.
assert (ld:=lower_dim_ex).
ex_elim ld A.
ex_elim H B.
ex_elim H0 C.
induction (eq_dec A B).

*****

*****

+++++
Qed.
-----
Lemma eq_dec_implies_point_construction_different :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  forall A B, exists C, Bet A B C /\ B <> C.
-----
Lemma eq_dec_implies_point_construction_different : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B, exists C, Bet A B C /\\ B <> C.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B : Tpoint), ex (fun C : Tpoint => and (Bet A B C) (not (eq B C)))
+++++
Proof.
-----
Lemma eq_dec_implies_point_construction_different : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B, exists C, Bet A B C /\\ B <> C.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B : Tpoint), ex (fun C : Tpoint => and (Bet A B C) (not (eq B C)))
+++++
intro eq_dec.
-----
Lemma eq_dec_implies_point_construction_different : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B, exists C, Bet A B C /\\ B <> C.
Proof.
intro eq_dec.

*****
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, ex (fun C : Tpoint => and (Bet A B C) (not (eq B C)))
+++++
intros.
-----
Lemma eq_dec_implies_point_construction_different : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B, exists C, Bet A B C /\\ B <> C.
Proof.
intro eq_dec.
intros.

*****
A,B : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Bet A B C) (not (eq B C)))
+++++
assert (tdp := eq_dec_implies_two_distinct_points eq_dec).
-----
Lemma eq_dec_implies_point_construction_different : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B, exists C, Bet A B C /\\ B <> C.
Proof.
intro eq_dec.
intros.
assert (tdp := eq_dec_implies_two_distinct_points eq_dec).

*****
tdp : ex (fun X : Tpoint => ex (fun Y : Tpoint => not (eq X Y)))
A,B : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Bet A B C) (not (eq B C)))
+++++
ex_elim tdp x.
-----
Lemma eq_dec_implies_point_construction_different : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B, exists C, Bet A B C /\\ B <> C.
Proof.
intro eq_dec.
intros.
assert (tdp := eq_dec_implies_two_distinct_points eq_dec).
ex_elim tdp x.

*****
H : ex (fun Y : Tpoint => not (eq x Y))
A,B,x : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Bet A B C) (not (eq B C)))
+++++
ex_elim H y.
-----
Lemma eq_dec_implies_point_construction_different : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B, exists C, Bet A B C /\\ B <> C.
Proof.
intro eq_dec.
intros.
assert (tdp := eq_dec_implies_two_distinct_points eq_dec).
ex_elim tdp x.
ex_elim H y.

*****
H0 : not (eq x y)
A,B,x,y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Bet A B C) (not (eq B C)))
+++++
prolong A B F x y.
-----
Lemma eq_dec_implies_point_construction_different : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B, exists C, Bet A B C /\\ B <> C.
Proof.
intro eq_dec.
intros.
assert (tdp := eq_dec_implies_two_distinct_points eq_dec).
ex_elim tdp x.
ex_elim H y.
prolong A B F x y.

*****
H1 : Cong B F x y
H : Bet A B F
F : Tpoint
H0 : not (eq x y)
A,B,x,y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun C : Tpoint => and (Bet A B C) (not (eq B C)))
+++++
exists F.
-----
Lemma eq_dec_implies_point_construction_different : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B, exists C, Bet A B C /\\ B <> C.
Proof.
intro eq_dec.
intros.
assert (tdp := eq_dec_implies_two_distinct_points eq_dec).
ex_elim tdp x.
ex_elim H y.
prolong A B F x y.
exists F.

*****
H1 : Cong B F x y
H : Bet A B F
F : Tpoint
H0 : not (eq x y)
A,B,x,y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B F) (not (eq B F))
+++++
show_distinct B F.
-----
Lemma eq_dec_implies_point_construction_different : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B, exists C, Bet A B C /\\ B <> C.
Proof.
intro eq_dec.
intros.
assert (tdp := eq_dec_implies_two_distinct_points eq_dec).
ex_elim tdp x.
ex_elim H y.
prolong A B F x y.
exists F.
show_distinct B F.

*****
H0 : not (eq x x)
x : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
intuition.
-----
Lemma eq_dec_implies_point_construction_different : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B, exists C, Bet A B C /\\ B <> C.
Proof.
intro eq_dec.
intros.
assert (tdp := eq_dec_implies_two_distinct_points eq_dec).
ex_elim tdp x.
ex_elim H y.
prolong A B F x y.
exists F.
show_distinct B F.

*****
H2 : not (eq B F)
H1 : Cong B F x y
H : Bet A B F
F : Tpoint
H0 : not (eq x y)
A,B,x,y : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B F) (not (eq B F))
+++++
intuition.
-----
Lemma eq_dec_implies_point_construction_different : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B, exists C, Bet A B C /\\ B <> C.
Proof.
intro eq_dec.
intros.
assert (tdp := eq_dec_implies_two_distinct_points eq_dec).
ex_elim tdp x.
ex_elim H y.
prolong A B F x y.
exists F.
show_distinct B F.

*****

*****

+++++
Qed.
-----
Lemma eq_dec_implies_l4_2 :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D A' B' C' D' : Tpoint) (_ : IFSC A B C D A' B' C' D'), Cong B D B' D'
+++++
Proof.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D A' B' C' D' : Tpoint) (_ : IFSC A B C D A' B' C' D'), Cong B D B' D'
+++++
unfold IFSC.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D A' B' C' D' : Tpoint) (_ : and (Bet A B C) (and (Bet A' B' C') (and (Cong A C A' C') (and (Cong B C B' C') (and (Cong A D A' D') (Cong C D C' D')))))), Cong B D B' D'
+++++
intro eq_dec.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.

*****
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D A' B' C' D' : Tpoint) (_ : and (Bet A B C) (and (Bet A' B' C') (and (Cong A C A' C') (and (Cong B C B' C') (and (Cong A D A' D') (Cong C D C' D')))))), Cong B D B' D'
+++++
intros.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.

*****
H : and (Bet A B C)\n (and (Bet A' B' C')\n (and (Cong A C A' C')\n (and (Cong B C B' C') (and (Cong A D A' D') (Cong C D C' D')))))
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D B' D'
+++++
spliter.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.

*****
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D B' D'
+++++
induction (eq_dec A C).
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).

*****
H5 : eq A C
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D B' D'
+++++
treat_equalities.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
treat_equalities.

*****
H3 : Cong B D A' D'
B,D,A',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D A' D'
+++++
assumption.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).

*****
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D B' D'
+++++
assert (exists E, Bet A C E /\ C <> E).
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).

*****
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun E : Tpoint => and (Bet A C E) (not (eq C E)))
+++++
apply eq_dec_implies_point_construction_different.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
apply eq_dec_implies_point_construction_different.

*****
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
auto.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).

*****
H6 : ex (fun E : Tpoint => and (Bet A C E) (not (eq C E)))
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D B' D'
+++++
idtac.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.

*****
H6 : ex (fun E : Tpoint => and (Bet A C E) (not (eq C E)))
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D B' D'
+++++
ex_and H6 E.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.

*****
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D B' D'
+++++
prolong A' C' E' C E.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.

*****
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D B' D'
+++++
assert (Cong E D E' D').
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').

*****
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong E D E' D'
+++++
apply (five_segment_with_def A C E D A' C' E' D').
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
apply (five_segment_with_def A C E D A' C' E' D').

*****
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
OFSC A C E D A' C' E' D'
+++++
unfold OFSC.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
apply (five_segment_with_def A C E D A' C' E' D').
unfold OFSC.

*****
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Bet A C E) (and (Bet A' C' E') (and (Cong A C A' C') (and (Cong C E C' E') (and (Cong A D A' D') (Cong C D C' D')))))
+++++
repeat split.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
apply (five_segment_with_def A C E D A' C' E' D').
unfold OFSC.
repeat split.

*****
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A C E
+++++
Cong.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
apply (five_segment_with_def A C E D A' C' E' D').
unfold OFSC.
repeat split.

*****
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' C' E'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
apply (five_segment_with_def A C E D A' C' E' D').
unfold OFSC.
repeat split.

*****
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A C A' C'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
apply (five_segment_with_def A C E D A' C' E' D').
unfold OFSC.
repeat split.

*****
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C E C' E'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
apply (five_segment_with_def A C E D A' C' E' D').
unfold OFSC.
repeat split.

*****
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A D A' D'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
apply (five_segment_with_def A C E D A' C' E' D').
unfold OFSC.
repeat split.

*****
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
apply (five_segment_with_def A C E D A' C' E' D').

*****
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq A C)
+++++
assumption.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').

*****
H10 : Cong E D E' D'
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D B' D'
+++++
idtac.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
idtac.

*****
H10 : Cong E D E' D'
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D B' D'
+++++
apply (five_segment_with_def E C B D E' C' B' D').
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
idtac.
apply (five_segment_with_def E C B D E' C' B' D').

*****
H10 : Cong E D E' D'
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
OFSC E C B D E' C' B' D'
+++++
unfold OFSC.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
idtac.
apply (five_segment_with_def E C B D E' C' B' D').
unfold OFSC.

*****
H10 : Cong E D E' D'
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Bet E C B) (and (Bet E' C' B') (and (Cong E C E' C') (and (Cong C B C' B') (and (Cong E D E' D') (Cong C D C' D')))))
+++++
repeat split.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
idtac.
apply (five_segment_with_def E C B D E' C' B' D').
unfold OFSC.
repeat split.

*****
H10 : Cong E D E' D'
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet E C B
+++++
try solve [eBetween| Cong ].
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
idtac.
apply (five_segment_with_def E C B D E' C' B' D').
unfold OFSC.
repeat split.

*****
H10 : Cong E D E' D'
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet E' C' B'
+++++
try solve [eBetween| Cong ].
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
idtac.
apply (five_segment_with_def E C B D E' C' B' D').
unfold OFSC.
repeat split.

*****
H10 : Cong E D E' D'
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong E C E' C'
+++++
try solve [eBetween| Cong ].
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
idtac.
apply (five_segment_with_def E C B D E' C' B' D').
unfold OFSC.
repeat split.

*****
H10 : Cong E D E' D'
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C B C' B'
+++++
try solve [eBetween| Cong ].
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
idtac.
apply (five_segment_with_def E C B D E' C' B' D').
unfold OFSC.
repeat split.

*****
H10 : Cong E D E' D'
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong E D E' D'
+++++
try solve [eBetween| Cong ].
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
idtac.
apply (five_segment_with_def E C B D E' C' B' D').
unfold OFSC.
repeat split.

*****
H10 : Cong E D E' D'
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
try solve [eBetween| Cong ].
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).
assert (exists E, Bet A C E /\\ C <> E).
idtac.
ex_and H6 E.
prolong A' C' E' C E.
assert (Cong E D E' D').
idtac.
apply (five_segment_with_def E C B D E' C' B' D').

*****
H10 : Cong E D E' D'
H9 : Cong C' E' C E
H8 : Bet A' C' E'
E' : Tpoint
H7 : not (eq C E)
H6 : Bet A C E
E : Tpoint
H5 : not (eq A C)
H4 : Cong C D C' D'
H3 : Cong A D A' D'
H2 : Cong B C B' C'
H1 : Cong A C A' C'
H0 : Bet A' B' C'
H : Bet A B C
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq E C)
+++++
auto.
-----
Lemma eq_dec_implies_l4_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', IFSC A B C D A' B' C' D' -> Cong B D B' D'.
Proof.
unfold IFSC.
intro eq_dec.
intros.
spliter.
induction (eq_dec A C).

*****

*****

+++++
Qed.
-----
Lemma eq_dec_implies_l4_5 :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  forall A B C A' C',\n  Bet A B C -> Cong A C A' C' ->\n  exists B', Bet A' B' C' /\ Cong_3 A B C A' B' C'.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C A' C' : Tpoint) (_ : Bet A B C) (_ : Cong A C A' C'), ex (fun B' : Tpoint => and (Bet A' B' C') (Cong_3 A B C A' B' C'))
+++++
Proof.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C A' C' : Tpoint) (_ : Bet A B C) (_ : Cong A C A' C'), ex (fun B' : Tpoint => and (Bet A' B' C') (Cong_3 A B C A' B' C'))
+++++
intro eq_dec.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.

*****
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall (A B C A' C' : Tpoint) (_ : Bet A B C) (_ : Cong A C A' C'), ex (fun B' : Tpoint => and (Bet A' B' C') (Cong_3 A B C A' B' C'))
+++++
intros.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.

*****
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun B' : Tpoint => and (Bet A' B' C') (Cong_3 A B C A' B' C'))
+++++
unfold Cong_3.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.

*****
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun B' : Tpoint => and (Bet A' B' C') (and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))))
+++++
assert (exists D', Bet C' A' D' /\ A' <> D').
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').

*****
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun D' : Tpoint => and (Bet C' A' D') (not (eq A' D')))
+++++
apply eq_dec_implies_point_construction_different.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
apply eq_dec_implies_point_construction_different.

*****
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
auto.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').

*****
H1 : ex (fun D' : Tpoint => and (Bet C' A' D') (not (eq A' D')))
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun B' : Tpoint => and (Bet A' B' C') (and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))))
+++++
idtac.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.

*****
H1 : ex (fun D' : Tpoint => and (Bet C' A' D') (not (eq A' D')))
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun B' : Tpoint => and (Bet A' B' C') (and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))))
+++++
ex_and H1 x'.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.

*****
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun B' : Tpoint => and (Bet A' B' C') (and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))))
+++++
prolong x' A' B' A B.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.

*****
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun B' : Tpoint => and (Bet A' B' C') (and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))))
+++++
prolong x' B' C'' B C.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.

*****
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun B' : Tpoint => and (Bet A' B' C') (and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))))
+++++
assert (Bet A' B' C'').
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').

*****
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C''
+++++
eBetween.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').

*****
H7 : Bet A' B' C''
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun B' : Tpoint => and (Bet A' B' C') (and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))))
+++++
idtac.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.

*****
H7 : Bet A' B' C''
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun B' : Tpoint => and (Bet A' B' C') (and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))))
+++++
assert (C'' = C').
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').

*****
H7 : Bet A' B' C''
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq C'' C'
+++++
eapply (eq_dec_implies_construction_uniqueness eq_dec x' A' ).
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
eapply (eq_dec_implies_construction_uniqueness eq_dec x' A' ).

*****
H7 : Bet A' B' C''
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq x' A')
+++++
auto.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
eapply (eq_dec_implies_construction_uniqueness eq_dec x' A' ).

*****
H7 : Bet A' B' C''
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet x' A' C''
+++++
apply eq_dec_implies_between_exchange4 with B'.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
eapply (eq_dec_implies_construction_uniqueness eq_dec x' A' ).
apply eq_dec_implies_between_exchange4 with B'.

*****
H7 : Bet A' B' C''
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
auto.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
eapply (eq_dec_implies_construction_uniqueness eq_dec x' A' ).
apply eq_dec_implies_between_exchange4 with B'.

*****
H7 : Bet A' B' C''
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet x' A' B'
+++++
auto.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
eapply (eq_dec_implies_construction_uniqueness eq_dec x' A' ).
apply eq_dec_implies_between_exchange4 with B'.

*****
H7 : Bet A' B' C''
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet x' B' C''
+++++
auto.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
eapply (eq_dec_implies_construction_uniqueness eq_dec x' A' ).

*****
H7 : Bet A' B' C''
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A' C'' ?B ?C
+++++
apply (eq_dec_implies_l2_11 eq_dec A' B' C'' A B C).
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
eapply (eq_dec_implies_construction_uniqueness eq_dec x' A' ).
apply (eq_dec_implies_l2_11 eq_dec A' B' C'' A B C).

*****
H7 : Bet A' B' C''
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C''
+++++
Between.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
eapply (eq_dec_implies_construction_uniqueness eq_dec x' A' ).
apply (eq_dec_implies_l2_11 eq_dec A' B' C'' A B C).

*****
H7 : Bet A' B' C''
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
Between.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
eapply (eq_dec_implies_construction_uniqueness eq_dec x' A' ).
apply (eq_dec_implies_l2_11 eq_dec A' B' C'' A B C).

*****
H7 : Bet A' B' C''
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A' B' A B
+++++
Between.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
eapply (eq_dec_implies_construction_uniqueness eq_dec x' A' ).
apply (eq_dec_implies_l2_11 eq_dec A' B' C'' A B C).

*****
H7 : Bet A' B' C''
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B' C'' B C
+++++
Between.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
eapply (eq_dec_implies_construction_uniqueness eq_dec x' A' ).

*****
H7 : Bet A' B' C''
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet x' A' C'
+++++
eBetween.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
eapply (eq_dec_implies_construction_uniqueness eq_dec x' A' ).

*****
H7 : Bet A' B' C''
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A' C' A C
+++++
Cong.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').

*****
H8 : eq C'' C'
H7 : Bet A' B' C''
H6 : Cong B' C'' B C
H5 : Bet x' B' C''
C'' : Tpoint
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun B' : Tpoint => and (Bet A' B' C') (and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))))
+++++
subst C''.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
subst C''.

*****
H5 : Bet x' B' C'
H6 : Cong B' C' B C
H7 : Bet A' B' C'
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun B' : Tpoint => and (Bet A' B' C') (and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))))
+++++
exists B'.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
subst C''.
exists B'.

*****
H5 : Bet x' B' C'
H6 : Cong B' C' B C
H7 : Bet A' B' C'
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Bet A' B' C') (and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C')))
+++++
repeat split.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
subst C''.
exists B'.
repeat split.

*****
H5 : Bet x' B' C'
H6 : Cong B' C' B C
H7 : Bet A' B' C'
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
subst C''.
exists B'.
repeat split.

*****
H5 : Bet x' B' C'
H6 : Cong B' C' B C
H7 : Bet A' B' C'
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A B A' B'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
subst C''.
exists B'.
repeat split.

*****
H5 : Bet x' B' C'
H6 : Cong B' C' B C
H7 : Bet A' B' C'
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A C A' C'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').
idtac.
ex_and H1 x'.
prolong x' A' B' A B.
prolong x' B' C'' B C.
assert (Bet A' B' C'').
idtac.
assert (C'' = C').
subst C''.
exists B'.
repeat split.

*****
H5 : Bet x' B' C'
H6 : Cong B' C' B C
H7 : Bet A' B' C'
H4 : Cong A' B' A B
H3 : Bet x' A' B'
B' : Tpoint
H2 : not (eq A' x')
H1 : Bet C' A' x'
x' : Tpoint
H0 : Cong A C A' C'
H : Bet A B C
A,B,C,A',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B C B' C'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_5 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' C', Bet A B C -> Cong A C A' C' -> exists B', Bet A' B' C' /\\ Cong_3 A B C A' B' C'.
Proof.
intro eq_dec.
intros.
unfold Cong_3.
assert (exists D', Bet C' A' D' /\\ A' <> D').

*****

*****

+++++
Qed.
-----
Lemma eq_dec_implies_l4_6 :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C A' B' C' : Tpoint) (_ : Bet A B C) (_ : Cong_3 A B C A' B' C'), Bet A' B' C'
+++++
Proof.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C A' B' C' : Tpoint) (_ : Bet A B C) (_ : Cong_3 A B C A' B' C'), Bet A' B' C'
+++++
unfold Cong_3.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C A' B' C' : Tpoint) (_ : Bet A B C) (_ : and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))), Bet A' B' C'
+++++
intro eq_dec.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.

*****
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall (A B C A' B' C' : Tpoint) (_ : Bet A B C) (_ : and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))), Bet A' B' C'
+++++
intros.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.

*****
H0 : and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
assert (exists B'', Bet A' B'' C' /\ Cong_3 A B C A' B'' C').
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').

*****
H0 : and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun B'' : Tpoint => and (Bet A' B'' C') (Cong_3 A B C A' B'' C'))
+++++
eapply eq_dec_implies_l4_5.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
eapply eq_dec_implies_l4_5.

*****
H0 : and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
intuition.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
eapply eq_dec_implies_l4_5.

*****
H0 : and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
intuition.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
eapply eq_dec_implies_l4_5.

*****
H0 : and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A C A' C'
+++++
intuition.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').

*****
H1 : ex (fun B'' : Tpoint => and (Bet A' B'' C') (Cong_3 A B C A' B'' C'))
H0 : and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
idtac.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.

*****
H1 : ex (fun B'' : Tpoint => and (Bet A' B'' C') (Cong_3 A B C A' B'' C'))
H0 : and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
ex_and H1 x.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.

*****
H2 : Cong_3 A B C A' x C'
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
unfold Cong_3 in *.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.

*****
H2 : and (Cong A B A' x) (and (Cong A C A' C') (Cong B C x C'))
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
spliter.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.

*****
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
assert (Cong_3 A' x C' A' B' C').
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').

*****
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong_3 A' x C' A' B' C'
+++++
unfold Cong_3.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
unfold Cong_3.

*****
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Cong A' x A' B') (and (Cong A' C' A' C') (Cong x C' B' C'))
+++++
repeat split.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
unfold Cong_3.
repeat split.

*****
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A' x A' B'
+++++
eCong.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
unfold Cong_3.
repeat split.

*****
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A' C' A' C'
+++++
eCong.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
unfold Cong_3.
repeat split.

*****
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong x C' B' C'
+++++
eCong.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').

*****
H7 : Cong_3 A' x C' A' B' C'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
idtac.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.

*****
H7 : Cong_3 A' x C' A' B' C'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
unfold Cong_3 in H7.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.

*****
H7 : and (Cong A' x A' B') (and (Cong A' C' A' C') (Cong x C' B' C'))
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
spliter.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.

*****
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
assert (IFSC A' x C' x A' x C' B').
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.
assert (IFSC A' x C' x A' x C' B').

*****
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
IFSC A' x C' x A' x C' B'
+++++
unfold IFSC.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.
assert (IFSC A' x C' x A' x C' B').
unfold IFSC.

*****
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Bet A' x C') (and (Bet A' x C') (and (Cong A' C' A' C') (and (Cong x C' x C') (and (Cong A' x A' B') (Cong C' x C' B')))))
+++++
repeat split.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.
assert (IFSC A' x C' x A' x C' B').
unfold IFSC.
repeat split.

*****
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' x C'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.
assert (IFSC A' x C' x A' x C' B').
unfold IFSC.
repeat split.

*****
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' x C'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.
assert (IFSC A' x C' x A' x C' B').
unfold IFSC.
repeat split.

*****
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A' C' A' C'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.
assert (IFSC A' x C' x A' x C' B').
unfold IFSC.
repeat split.

*****
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong x C' x C'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.
assert (IFSC A' x C' x A' x C' B').
unfold IFSC.
repeat split.

*****
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A' x A' B'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.
assert (IFSC A' x C' x A' x C' B').
unfold IFSC.
repeat split.

*****
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C' x C' B'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.
assert (IFSC A' x C' x A' x C' B').

*****
H10 : IFSC A' x C' x A' x C' B'
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
idtac.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.
assert (IFSC A' x C' x A' x C' B').
idtac.

*****
H10 : IFSC A' x C' x A' x C' B'
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
assert (Cong x x x B').
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.
assert (IFSC A' x C' x A' x C' B').
idtac.
assert (Cong x x x B').

*****
H10 : IFSC A' x C' x A' x C' B'
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong x x x B'
+++++
eapply eq_dec_implies_l4_2.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.
assert (IFSC A' x C' x A' x C' B').
idtac.
assert (Cong x x x B').
eapply eq_dec_implies_l4_2.

*****
H10 : IFSC A' x C' x A' x C' B'
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
try apply H10.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.
assert (IFSC A' x C' x A' x C' B').
idtac.
assert (Cong x x x B').
eapply eq_dec_implies_l4_2.
try apply H10.

*****
H10 : IFSC A' x C' x A' x C' B'
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
auto.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.
assert (IFSC A' x C' x A' x C' B').
idtac.
assert (Cong x x x B').
eapply eq_dec_implies_l4_2.

*****
H10 : IFSC A' x C' x A' x C' B'
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
IFSC ?A x ?C x ?A' x ?C' B'
+++++
try apply H10.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.
assert (IFSC A' x C' x A' x C' B').
idtac.
assert (Cong x x x B').

*****
H11 : Cong x x x B'
H10 : IFSC A' x C' x A' x C' B'
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
idtac.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').
idtac.
ex_and H1 x.
unfold Cong_3 in *.
spliter.
assert (Cong_3 A' x C' A' B' C').
idtac.
unfold Cong_3 in H7.
spliter.
assert (IFSC A' x C' x A' x C' B').
idtac.
assert (Cong x x x B').
idtac.

*****
H11 : Cong x x x B'
H10 : IFSC A' x C' x A' x C' B'
H9 : Cong x C' B' C'
H8 : Cong A' C' A' C'
H7 : Cong A' x A' B'
H6 : Cong B C x C'
H5 : Cong A C A' C'
H2 : Cong A B A' x
H1 : Bet A' x C'
x : Tpoint
H4 : Cong B C B' C'
H3 : Cong A C A' C'
H0 : Cong A B A' B'
H : Bet A B C
A,B,C,A',B',C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
Between.
-----
Lemma eq_dec_implies_l4_6 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C A' B' C', Bet A B C -> Cong_3 A B C A' B' C' -> Bet A' B' C'.
Proof.
unfold Cong_3.
intro eq_dec.
intros.
assert (exists B'', Bet A' B'' C' /\\ Cong_3 A B C A' B'' C').

*****

*****

+++++
Qed.
-----
Lemma eq_dec_implies_l4_16 :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  forall A B C D A' B' C' D',\n  FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D A' B' C' D' : Tpoint) (_ : FSC A B C D A' B' C' D') (_ : not (eq A B)), Cong C D C' D'
+++++
Proof.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D A' B' C' D' : Tpoint) (_ : FSC A B C D A' B' C' D') (_ : not (eq A B)), Cong C D C' D'
+++++
unfold FSC.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D A' B' C' D' : Tpoint) (_ : and (Col A B C) (and (Cong_3 A B C A' B' C') (and (Cong A D A' D') (Cong B D B' D')))) (_ : not (eq A B)), Cong C D C' D'
+++++
unfold Col.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D A' B' C' D' : Tpoint) (_ : and (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (and (Cong_3 A B C A' B' C') (and (Cong A D A' D') (Cong B D B' D')))) (_ : not (eq A B)), Cong C D C' D'
+++++
intro eq_dec.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.

*****
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D A' B' C' D' : Tpoint) (_ : and (or (Bet A B C) (or (Bet B C A) (Bet C A B))) (and (Cong_3 A B C A' B' C') (and (Cong A D A' D') (Cong B D B' D')))) (_ : not (eq A B)), Cong C D C' D'
+++++
intros.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.

*****
H0 : not (eq A B)
H : and (or (Bet A B C) (or (Bet B C A) (Bet C A B)))\n (and (Cong_3 A B C A' B' C') (and (Cong A D A' D') (Cong B D B' D')))
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
decompose [or and] H.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H1 : Cong_3 A B C A' B' C'
H3 : Bet A B C
H0 : not (eq A B)
H : and (or (Bet A B C) (or (Bet B C A) (Bet C A B)))\n (and (Cong_3 A B C A' B' C') (and (Cong A D A' D') (Cong B D B' D')))
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
clear H.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H1 : Cong_3 A B C A' B' C'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
assert (Bet A' B' C').
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H1 : Cong_3 A B C A' B' C'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
eapply eq_dec_implies_l4_6.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
eapply eq_dec_implies_l4_6.

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H1 : Cong_3 A B C A' B' C'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
eauto.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
eapply eq_dec_implies_l4_6.

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H1 : Cong_3 A B C A' B' C'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet ?A ?B ?C
+++++
eauto.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
eapply eq_dec_implies_l4_6.

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H1 : Cong_3 A B C A' B' C'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong_3 A B C A' B' C'
+++++
eauto.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').

*****
H : Bet A' B' C'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H1 : Cong_3 A B C A' B' C'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
idtac.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
idtac.

*****
H : Bet A' B' C'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H1 : Cong_3 A B C A' B' C'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
unfold Cong_3 in *.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
idtac.
unfold Cong_3 in *.

*****
H : Bet A' B' C'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H1 : and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
spliter.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
idtac.
unfold Cong_3 in *.
spliter.

*****
H : Bet A' B' C'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H1 : Cong A B A' B'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
assert(OFSC A B C D A' B' C' D').
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
idtac.
unfold Cong_3 in *.
spliter.
assert(OFSC A B C D A' B' C' D').

*****
H : Bet A' B' C'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H1 : Cong A B A' B'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
OFSC A B C D A' B' C' D'
+++++
unfold OFSC.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
idtac.
unfold Cong_3 in *.
spliter.
assert(OFSC A B C D A' B' C' D').
unfold OFSC.

*****
H : Bet A' B' C'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H1 : Cong A B A' B'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Bet A B C) (and (Bet A' B' C') (and (Cong A B A' B') (and (Cong B C B' C') (and (Cong A D A' D') (Cong B D B' D')))))
+++++
repeat split.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
idtac.
unfold Cong_3 in *.
spliter.
assert(OFSC A B C D A' B' C' D').
unfold OFSC.
repeat split.

*****
H : Bet A' B' C'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H1 : Cong A B A' B'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
assumption.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
idtac.
unfold Cong_3 in *.
spliter.
assert(OFSC A B C D A' B' C' D').
unfold OFSC.
repeat split.

*****
H : Bet A' B' C'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H1 : Cong A B A' B'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' B' C'
+++++
assumption.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
idtac.
unfold Cong_3 in *.
spliter.
assert(OFSC A B C D A' B' C' D').
unfold OFSC.
repeat split.

*****
H : Bet A' B' C'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H1 : Cong A B A' B'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A B A' B'
+++++
assumption.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
idtac.
unfold Cong_3 in *.
spliter.
assert(OFSC A B C D A' B' C' D').
unfold OFSC.
repeat split.

*****
H : Bet A' B' C'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H1 : Cong A B A' B'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B C B' C'
+++++
assumption.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
idtac.
unfold Cong_3 in *.
spliter.
assert(OFSC A B C D A' B' C' D').
unfold OFSC.
repeat split.

*****
H : Bet A' B' C'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H1 : Cong A B A' B'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A D A' D'
+++++
assumption.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
idtac.
unfold Cong_3 in *.
spliter.
assert(OFSC A B C D A' B' C' D').
unfold OFSC.
repeat split.

*****
H : Bet A' B' C'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H1 : Cong A B A' B'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D B' D'
+++++
assumption.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
idtac.
unfold Cong_3 in *.
spliter.
assert(OFSC A B C D A' B' C' D').

*****
H7 : OFSC A B C D A' B' C' D'
H : Bet A' B' C'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H1 : Cong A B A' B'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
idtac.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
idtac.
unfold Cong_3 in *.
spliter.
assert(OFSC A B C D A' B' C' D').
idtac.

*****
H7 : OFSC A B C D A' B' C' D'
H : Bet A' B' C'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H1 : Cong A B A' B'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
eapply five_segment_with_def.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
idtac.
unfold Cong_3 in *.
spliter.
assert(OFSC A B C D A' B' C' D').
idtac.
eapply five_segment_with_def.

*****
H7 : OFSC A B C D A' B' C' D'
H : Bet A' B' C'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H1 : Cong A B A' B'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
OFSC ?A ?B C D ?A' ?B' C' D'
+++++
eauto.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet A' B' C').
idtac.
unfold Cong_3 in *.
spliter.
assert(OFSC A B C D A' B' C' D').
idtac.
eapply five_segment_with_def.

*****
H7 : OFSC A B C D A' B' C' D'
H : Bet A' B' C'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H1 : Cong A B A' B'
H3 : Bet A B C
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
eauto.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet B C A
H0 : not (eq A B)
H : and (or (Bet A B C) (or (Bet B C A) (Bet C A B)))\n (and (Cong_3 A B C A' B' C') (and (Cong A D A' D') (Cong B D B' D')))
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
clear H.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
assert(Bet B' C' A').
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B' C' A'
+++++
apply (eq_dec_implies_l4_6 eq_dec B C A B' C' A').
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').
apply (eq_dec_implies_l4_6 eq_dec B C A B' C' A').

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B C A
+++++
Cong.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').
apply (eq_dec_implies_l4_6 eq_dec B C A B' C' A').

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong_3 B C A B' C' A'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').
apply (eq_dec_implies_l4_6 eq_dec B C A B' C' A').
Cong.

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong_3 B C A B' C' A'
+++++
auto with cong3.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').

*****
H : Bet B' C' A'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
idtac.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').
idtac.

*****
H : Bet B' C' A'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
apply (eq_dec_implies_l4_2 eq_dec B C A D B' C' A' D').
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').
idtac.
apply (eq_dec_implies_l4_2 eq_dec B C A D B' C' A' D').

*****
H : Bet B' C' A'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
IFSC B C A D B' C' A' D'
+++++
unfold IFSC.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').
idtac.
apply (eq_dec_implies_l4_2 eq_dec B C A D B' C' A' D').
unfold IFSC.

*****
H : Bet B' C' A'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Bet B C A) (and (Bet B' C' A') (and (Cong B A B' A') (and (Cong C A C' A') (and (Cong B D B' D') (Cong A D A' D')))))
+++++
unfold Cong_3 in *.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').
idtac.
apply (eq_dec_implies_l4_2 eq_dec B C A D B' C' A' D').
unfold IFSC.
unfold Cong_3 in *.

*****
H : Bet B' C' A'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Bet B C A) (and (Bet B' C' A') (and (Cong B A B' A') (and (Cong C A C' A') (and (Cong B D B' D') (Cong A D A' D')))))
+++++
spliter.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').
idtac.
apply (eq_dec_implies_l4_2 eq_dec B C A D B' C' A' D').
unfold IFSC.
unfold Cong_3 in *.
spliter.

*****
H : Bet B' C' A'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Bet B C A) (and (Bet B' C' A') (and (Cong B A B' A') (and (Cong C A C' A') (and (Cong B D B' D') (Cong A D A' D')))))
+++++
repeat split.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').
idtac.
apply (eq_dec_implies_l4_2 eq_dec B C A D B' C' A' D').
unfold IFSC.
unfold Cong_3 in *.
spliter.
repeat split.

*****
H : Bet B' C' A'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B C A
+++++
Between.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').
idtac.
apply (eq_dec_implies_l4_2 eq_dec B C A D B' C' A' D').
unfold IFSC.
unfold Cong_3 in *.
spliter.
repeat split.

*****
H : Bet B' C' A'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B' C' A'
+++++
Between.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').
idtac.
apply (eq_dec_implies_l4_2 eq_dec B C A D B' C' A' D').
unfold IFSC.
unfold Cong_3 in *.
spliter.
repeat split.

*****
H : Bet B' C' A'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B A B' A'
+++++
Between.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').
idtac.
apply (eq_dec_implies_l4_2 eq_dec B C A D B' C' A' D').
unfold IFSC.
unfold Cong_3 in *.
spliter.
repeat split.
Between.

*****
H : Bet B' C' A'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B A B' A'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').
idtac.
apply (eq_dec_implies_l4_2 eq_dec B C A D B' C' A' D').
unfold IFSC.
unfold Cong_3 in *.
spliter.
repeat split.

*****
H : Bet B' C' A'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C A C' A'
+++++
Between.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').
idtac.
apply (eq_dec_implies_l4_2 eq_dec B C A D B' C' A' D').
unfold IFSC.
unfold Cong_3 in *.
spliter.
repeat split.
Between.

*****
H : Bet B' C' A'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C A C' A'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').
idtac.
apply (eq_dec_implies_l4_2 eq_dec B C A D B' C' A' D').
unfold IFSC.
unfold Cong_3 in *.
spliter.
repeat split.

*****
H : Bet B' C' A'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D B' D'
+++++
Between.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert(Bet B' C' A').
idtac.
apply (eq_dec_implies_l4_2 eq_dec B C A D B' C' A' D').
unfold IFSC.
unfold Cong_3 in *.
spliter.
repeat split.

*****
H : Bet B' C' A'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet B C A
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A D A' D'
+++++
Between.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet C A B
H0 : not (eq A B)
H : and (or (Bet A B C) (or (Bet B C A) (Bet C A B)))\n (and (Cong_3 A B C A' B' C') (and (Cong A D A' D') (Cong B D B' D')))
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
clear H.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
assert (Bet C' A' B').
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet C' A' B'
+++++
eapply (eq_dec_implies_l4_6 eq_dec C A B C' A' B').
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
eapply (eq_dec_implies_l4_6 eq_dec C A B C' A' B').

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet C A B
+++++
auto with cong3.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
eapply (eq_dec_implies_l4_6 eq_dec C A B C' A' B').

*****
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong_3 C A B C' A' B'
+++++
auto with cong3.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
idtac.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
eapply (five_segment_with_def B A C D B' A').
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.
eapply (five_segment_with_def B A C D B' A').

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
OFSC B A C D B' A' C' D'
+++++
unfold OFSC.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.
eapply (five_segment_with_def B A C D B' A').
unfold OFSC.

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Bet B A C) (and (Bet B' A' C') (and (Cong B A B' A') (and (Cong A C A' C') (and (Cong B D B' D') (Cong A D A' D')))))
+++++
unfold Cong_3 in *.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.
eapply (five_segment_with_def B A C D B' A').
unfold OFSC.
unfold Cong_3 in *.

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Bet B A C) (and (Bet B' A' C') (and (Cong B A B' A') (and (Cong A C A' C') (and (Cong B D B' D') (Cong A D A' D')))))
+++++
spliter.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.
eapply (five_segment_with_def B A C D B' A').
unfold OFSC.
unfold Cong_3 in *.
spliter.

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Bet B A C) (and (Bet B' A' C') (and (Cong B A B' A') (and (Cong A C A' C') (and (Cong B D B' D') (Cong A D A' D')))))
+++++
repeat split.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.
eapply (five_segment_with_def B A C D B' A').
unfold OFSC.
unfold Cong_3 in *.
spliter.
repeat split.

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B A C
+++++
Between.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.
eapply (five_segment_with_def B A C D B' A').
unfold OFSC.
unfold Cong_3 in *.
spliter.
repeat split.

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B' A' C'
+++++
Between.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.
eapply (five_segment_with_def B A C D B' A').
unfold OFSC.
unfold Cong_3 in *.
spliter.
repeat split.

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B A B' A'
+++++
Between.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.
eapply (five_segment_with_def B A C D B' A').
unfold OFSC.
unfold Cong_3 in *.
spliter.
repeat split.
Between.

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B A B' A'
+++++
Cong.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.
eapply (five_segment_with_def B A C D B' A').
unfold OFSC.
unfold Cong_3 in *.
spliter.
repeat split.

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A C A' C'
+++++
Between.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.
eapply (five_segment_with_def B A C D B' A').
unfold OFSC.
unfold Cong_3 in *.
spliter.
repeat split.

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D B' D'
+++++
Between.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.
eapply (five_segment_with_def B A C D B' A').
unfold OFSC.
unfold Cong_3 in *.
spliter.
repeat split.

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A D A' D'
+++++
Between.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.
eapply (five_segment_with_def B A C D B' A').

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
unfold OFSC.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.
eapply (five_segment_with_def B A C D B' A').
unfold OFSC.

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : Cong_3 A B C A' B' C'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
unfold Cong_3 in *.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.
eapply (five_segment_with_def B A C D B' A').
unfold OFSC.
unfold Cong_3 in *.

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H3 : and (Cong A B A' B') (and (Cong A C A' C') (Cong B C B' C'))
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
spliter.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.
eapply (five_segment_with_def B A C D B' A').
unfold OFSC.
unfold Cong_3 in *.
spliter.

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
repeat split.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.
clear H.
assert (Bet C' A' B').
idtac.
eapply (five_segment_with_def B A C D B' A').
unfold OFSC.
unfold Cong_3 in *.
spliter.
repeat split.

*****
H : Bet C' A' B'
H5 : Cong B D B' D'
H2 : Cong A D A' D'
H6 : Cong B C B' C'
H4 : Cong A C A' C'
H3 : Cong A B A' B'
H1 : Bet C A B
H0 : not (eq A B)
A,B,C,D,A',B',C',D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
Between.
-----
Lemma eq_dec_implies_l4_16 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D A' B' C' D', FSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold FSC.
unfold Col.
intro eq_dec.
intros.
decompose [or and] H.

*****

*****

+++++
Qed.
-----
Lemma eq_dec_implies_l4_17 :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  forall A B C P Q,\n  A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C P Q : Tpoint) (_ : not (eq A B)) (_ : Col A B C) (_ : Cong A P A Q) (_ : Cong B P B Q), Cong C P C Q
+++++
Proof.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C P Q : Tpoint) (_ : not (eq A B)) (_ : Col A B C) (_ : Cong A P A Q) (_ : Cong B P B Q), Cong C P C Q
+++++
intros.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.
intros.

*****
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : Col A B C
H0 : not (eq A B)
A,B,C,P,Q : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
assert (FSC A B C P A B C Q).
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.
intros.
assert (FSC A B C P A B C Q).

*****
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : Col A B C
H0 : not (eq A B)
A,B,C,P,Q : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
FSC A B C P A B C Q
+++++
unfold FSC.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.
intros.
assert (FSC A B C P A B C Q).
unfold FSC.

*****
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : Col A B C
H0 : not (eq A B)
A,B,C,P,Q : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Col A B C) (and (Cong_3 A B C A B C) (and (Cong A P A Q) (Cong B P B Q)))
+++++
unfold Cong_3.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.
intros.
assert (FSC A B C P A B C Q).
unfold FSC.
unfold Cong_3.

*****
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : Col A B C
H0 : not (eq A B)
A,B,C,P,Q : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Col A B C) (and (and (Cong A B A B) (and (Cong A C A C) (Cong B C B C))) (and (Cong A P A Q) (Cong B P B Q)))
+++++
repeat split.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.
intros.
assert (FSC A B C P A B C Q).
unfold FSC.
unfold Cong_3.
repeat split.

*****
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : Col A B C
H0 : not (eq A B)
A,B,C,P,Q : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Col A B C
+++++
Cong.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.
intros.
assert (FSC A B C P A B C Q).
unfold FSC.
unfold Cong_3.
repeat split.

*****
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : Col A B C
H0 : not (eq A B)
A,B,C,P,Q : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A B A B
+++++
Cong.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.
intros.
assert (FSC A B C P A B C Q).
unfold FSC.
unfold Cong_3.
repeat split.

*****
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : Col A B C
H0 : not (eq A B)
A,B,C,P,Q : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A C A C
+++++
Cong.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.
intros.
assert (FSC A B C P A B C Q).
unfold FSC.
unfold Cong_3.
repeat split.

*****
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : Col A B C
H0 : not (eq A B)
A,B,C,P,Q : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B C B C
+++++
Cong.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.
intros.
assert (FSC A B C P A B C Q).
unfold FSC.
unfold Cong_3.
repeat split.

*****
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : Col A B C
H0 : not (eq A B)
A,B,C,P,Q : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A P A Q
+++++
Cong.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.
intros.
assert (FSC A B C P A B C Q).
unfold FSC.
unfold Cong_3.
repeat split.

*****
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : Col A B C
H0 : not (eq A B)
A,B,C,P,Q : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B P B Q
+++++
Cong.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.
intros.
assert (FSC A B C P A B C Q).

*****
H4 : FSC A B C P A B C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : Col A B C
H0 : not (eq A B)
A,B,C,P,Q : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
idtac.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.
intros.
assert (FSC A B C P A B C Q).
idtac.

*****
H4 : FSC A B C P A B C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : Col A B C
H0 : not (eq A B)
A,B,C,P,Q : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
eapply eq_dec_implies_l4_16.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.
intros.
assert (FSC A B C P A B C Q).
idtac.
eapply eq_dec_implies_l4_16.

*****
H4 : FSC A B C P A B C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : Col A B C
H0 : not (eq A B)
A,B,C,P,Q : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
eauto.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.
intros.
assert (FSC A B C P A B C Q).
idtac.
eapply eq_dec_implies_l4_16.

*****
H4 : FSC A B C P A B C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : Col A B C
H0 : not (eq A B)
A,B,C,P,Q : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
FSC ?A ?B C P ?A' ?B' C Q
+++++
eauto.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.
intros.
assert (FSC A B C P A B C Q).
idtac.
eapply eq_dec_implies_l4_16.

*****
H4 : FSC A B C P A B C Q
H3 : Cong B P B Q
H2 : Cong A P A Q
H1 : Col A B C
H0 : not (eq A B)
A,B,C,P,Q : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
eauto.
-----
Lemma eq_dec_implies_l4_17 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C P Q, A<>B -> Col A B C -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q.
Proof.
intros.
assert (FSC A B C P A B C Q).

*****

*****

+++++
Qed.
-----
Lemma eq_dec_implies_l5_1 :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  forall A B C D,\n  A<>B -> Bet A B C -> Bet A B D -> Bet A C D \/ Bet A D C.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D : Tpoint) (_ : not (eq A B)) (_ : Bet A B C) (_ : Bet A B D), or (Bet A C D) (Bet A D C)
+++++
Proof.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D : Tpoint) (_ : not (eq A B)) (_ : Bet A B C) (_ : Bet A B D), or (Bet A C D) (Bet A D C)
+++++
intro eq_dec.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.

*****
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall (A B C D : Tpoint) (_ : not (eq A B)) (_ : Bet A B C) (_ : Bet A B D), or (Bet A C D) (Bet A D C)
+++++
intros.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.

*****
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
prolong A D C' C D.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.

*****
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
prolong A C D' C D.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.

*****
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
prolong A C' B' C B.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.

*****
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
prolong A D' B'' D B.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.

*****
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (Cong B C' B'' C).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).

*****
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B C' B'' C
+++++
apply (eq_dec_implies_l2_11 eq_dec B D C' B'' D' C).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
apply (eq_dec_implies_l2_11 eq_dec B D C' B'' D' C).

*****
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B D C'
+++++
apply between_exchange3 with A.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
apply (eq_dec_implies_l2_11 eq_dec B D C' B'' D' C).
apply between_exchange3 with A.

*****
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B D
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
apply (eq_dec_implies_l2_11 eq_dec B D C' B'' D' C).
apply between_exchange3 with A.

*****
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A D C'
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
apply (eq_dec_implies_l2_11 eq_dec B D C' B'' D' C).

*****
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B'' D' C
+++++
apply between_inner_transitivity with A.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
apply (eq_dec_implies_l2_11 eq_dec B D C' B'' D' C).
apply between_inner_transitivity with A.

*****
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B'' D' A
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
apply (eq_dec_implies_l2_11 eq_dec B D C' B'' D' C).
apply between_inner_transitivity with A.

*****
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet D' C A
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
apply (eq_dec_implies_l2_11 eq_dec B D C' B'' D' C).

*****
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D B'' D'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
apply (eq_dec_implies_l2_11 eq_dec B D C' B'' D' C).

*****
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong D C' D' C
+++++
apply cong_transitivity with C D.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
apply (eq_dec_implies_l2_11 eq_dec B D C' B'' D' C).
apply cong_transitivity with C D.

*****
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong D C' C D
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
apply (eq_dec_implies_l2_11 eq_dec B D C' B'' D' C).
apply cong_transitivity with C D.

*****
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D D' C
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).

*****
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (Cong B B' B'' B).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).

*****
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B B' B'' B
+++++
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).

*****
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B C' B'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.

*****
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B C' B'
+++++
assert (Bet A B C').
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
assert (Bet A B C').

*****
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C'
+++++
idtac.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
assert (Bet A B C').
idtac.

*****
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C'
+++++
induction (eq_dec B D).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
assert (Bet A B C').
idtac.
induction (eq_dec B D).

*****
H11 : eq B D
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C'
+++++
treat_equalities.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
assert (Bet A B C').
idtac.
induction (eq_dec B D).
treat_equalities.

*****
H10 : Cong B C' D' C
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C B
H4 : Bet A C D'
D' : Tpoint
H2 : Bet A B C'
H3 : Cong B C' C B
C' : Tpoint
H0 : Bet A B C
H : not (eq A B)
A,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C'
+++++
auto.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
assert (Bet A B C').
idtac.
induction (eq_dec B D).

*****
H11 : not (eq B D)
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C'
+++++
idtac.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
assert (Bet A B C').
idtac.
induction (eq_dec B D).
idtac.

*****
H11 : not (eq B D)
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C'
+++++
apply between_symmetry.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
assert (Bet A B C').
idtac.
induction (eq_dec B D).
idtac.
apply between_symmetry.

*****
H11 : not (eq B D)
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet C' B A
+++++
apply eq_dec_implies_outer_transitivity_between2 with D.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
assert (Bet A B C').
idtac.
induction (eq_dec B D).
idtac.
apply between_symmetry.
apply eq_dec_implies_outer_transitivity_between2 with D.

*****
H11 : not (eq B D)
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
eBetween.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
assert (Bet A B C').
idtac.
induction (eq_dec B D).
idtac.
apply between_symmetry.
apply eq_dec_implies_outer_transitivity_between2 with D.

*****
H11 : not (eq B D)
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet C' D B
+++++
eBetween.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
assert (Bet A B C').
idtac.
induction (eq_dec B D).
idtac.
apply between_symmetry.
apply eq_dec_implies_outer_transitivity_between2 with D.

*****
H11 : not (eq B D)
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet D B A
+++++
eBetween.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
assert (Bet A B C').
idtac.
induction (eq_dec B D).
idtac.
apply between_symmetry.
apply eq_dec_implies_outer_transitivity_between2 with D.

*****
H11 : not (eq B D)
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq D B)
+++++
eBetween.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
assert (Bet A B C').

*****
H11 : Bet A B C'
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B C' B'
+++++
eBetween.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).

*****
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B'' C B
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.

*****
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B'' C B
+++++
induction (eq_dec C D').
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
induction (eq_dec C D').

*****
H11 : eq C D'
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B'' C B
+++++
treat_equalities.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
induction (eq_dec C D').
treat_equalities.

*****
H8 : Bet A C B''
H9 : Cong C B'' C B
B'' : Tpoint
H6 : Bet A C B'
H7 : Cong C B' C B
B' : Tpoint
H0 : Bet A B C
H : not (eq A B)
A,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B'' C B
+++++
eBetween.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
induction (eq_dec C D').

*****
H11 : not (eq C D')
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B'' C B
+++++
idtac.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
induction (eq_dec C D').
idtac.

*****
H11 : not (eq C D')
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B'' C B
+++++
apply eq_dec_implies_outer_transitivity_between2 with D'.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
induction (eq_dec C D').
idtac.
apply eq_dec_implies_outer_transitivity_between2 with D'.

*****
H11 : not (eq C D')
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
eBetween.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
induction (eq_dec C D').
idtac.
apply eq_dec_implies_outer_transitivity_between2 with D'.

*****
H11 : not (eq C D')
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B'' D' C
+++++
eBetween.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
induction (eq_dec C D').
idtac.
apply eq_dec_implies_outer_transitivity_between2 with D'.

*****
H11 : not (eq C D')
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet D' C B
+++++
eBetween.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).
Cong.
induction (eq_dec C D').
idtac.
apply eq_dec_implies_outer_transitivity_between2 with D'.

*****
H11 : not (eq C D')
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq D' C)
+++++
eBetween.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).

*****
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B C' B'' C
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
apply (eq_dec_implies_l2_11 eq_dec B C' B' B'' C B).

*****
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C' B' C B
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert(B'' = B').
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq B'' B'
+++++
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
try Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B B''
+++++
try Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
try Cong.

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B B''
+++++
apply eq_dec_implies_between_exchange4 with D'.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
try Cong.
apply eq_dec_implies_between_exchange4 with D'.

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
try Cong.
apply eq_dec_implies_between_exchange4 with D'.

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B D'
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
try Cong.
apply eq_dec_implies_between_exchange4 with D'.
Between.

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B D'
+++++
apply eq_dec_implies_between_exchange4 with C.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
try Cong.
apply eq_dec_implies_between_exchange4 with D'.
Between.
apply eq_dec_implies_between_exchange4 with C.

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
try Cong.
apply eq_dec_implies_between_exchange4 with D'.
Between.
apply eq_dec_implies_between_exchange4 with C.

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
try Cong.
apply eq_dec_implies_between_exchange4 with D'.
Between.
apply eq_dec_implies_between_exchange4 with C.

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A C D'
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
try Cong.
apply eq_dec_implies_between_exchange4 with D'.

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A D' B''
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B B'' B B''
+++++
try Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B B'
+++++
try Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
try Cong.

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B B'
+++++
apply eq_dec_implies_between_exchange4 with C'.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
try Cong.
apply eq_dec_implies_between_exchange4 with C'.

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
try Cong.
apply eq_dec_implies_between_exchange4 with C'.

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C'
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
try Cong.
apply eq_dec_implies_between_exchange4 with C'.
Between.

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C'
+++++
apply eq_dec_implies_between_exchange4 with D.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
try Cong.
apply eq_dec_implies_between_exchange4 with C'.
Between.
apply eq_dec_implies_between_exchange4 with D.

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
try Cong.
apply eq_dec_implies_between_exchange4 with C'.
Between.
apply eq_dec_implies_between_exchange4 with D.

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B D
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
try Cong.
apply eq_dec_implies_between_exchange4 with C'.
Between.
apply eq_dec_implies_between_exchange4 with D.

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A D C'
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').
try Cong.
apply eq_dec_implies_between_exchange4 with C'.

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A C' B'
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
apply (eq_dec_implies_construction_uniqueness eq_dec A B B B'').

*****
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B B' B B''
+++++
try Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').

*****
H12 : eq B'' B'
H11 : Cong B B' B'' B
H10 : Cong B C' B'' C
H9 : Cong D' B'' D B
H8 : Bet A D' B''
B'' : Tpoint
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
subst B''.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (FSC B C D' C' B' C' D C).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
FSC B C D' C' B' C' D C
+++++
unfold FSC.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Col B C D') (and (Cong_3 B C D' B' C' D) (and (Cong B C' B' C) (Cong C C' C' C)))
+++++
repeat split.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Col B C D'
+++++
unfold Col.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet B C D') (or (Bet C D' B) (Bet D' B C))
+++++
try Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet B C D') (or (Bet C D' B) (Bet D' B C))
+++++
left.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
left.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B C D'
+++++
apply between_exchange3 with A.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
left.
apply between_exchange3 with A.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
left.
apply between_exchange3 with A.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A C D'
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B C B' C'
+++++
unfold Col.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B C B' C'
+++++
try Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D' B' D
+++++
unfold Col.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D' B' D
+++++
try Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D' B' D
+++++
apply (eq_dec_implies_l2_11 eq_dec B C D' B' C' D).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
apply (eq_dec_implies_l2_11 eq_dec B C D' B' C' D).

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B C D'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
apply (eq_dec_implies_l2_11 eq_dec B C D' B' C' D).
Cong.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B C D'
+++++
apply between_exchange3 with A.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
apply (eq_dec_implies_l2_11 eq_dec B C D' B' C' D).
Cong.
apply between_exchange3 with A.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
apply (eq_dec_implies_l2_11 eq_dec B C D' B' C' D).
Cong.
apply between_exchange3 with A.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A C D'
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
apply (eq_dec_implies_l2_11 eq_dec B C D' B' C' D).

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B' C' D
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
apply (eq_dec_implies_l2_11 eq_dec B C D' B' C' D).
Cong.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B' C' D
+++++
apply between_symmetry.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
apply (eq_dec_implies_l2_11 eq_dec B C D' B' C' D).
Cong.
apply between_symmetry.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet D C' B'
+++++
apply between_exchange3 with A.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
apply (eq_dec_implies_l2_11 eq_dec B C D' B' C' D).
Cong.
apply between_symmetry.
apply between_exchange3 with A.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A D C'
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
apply (eq_dec_implies_l2_11 eq_dec B C D' B' C' D).
Cong.
apply between_symmetry.
apply between_exchange3 with A.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A C' B'
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
apply (eq_dec_implies_l2_11 eq_dec B C D' B' C' D).

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B C B' C'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
apply (eq_dec_implies_l2_11 eq_dec B C D' B' C' D).

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D' C' D
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
apply (eq_dec_implies_l2_11 eq_dec B C D' B' C' D).
Cong.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D' C' D
+++++
apply cong_transitivity with C D.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
apply (eq_dec_implies_l2_11 eq_dec B C D' B' C' D).
Cong.
apply cong_transitivity with C D.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D' C D
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
apply (eq_dec_implies_l2_11 eq_dec B C D' B' C' D).
Cong.
apply cong_transitivity with C D.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D' C' D
+++++
unfold Col.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D' C' D
+++++
try Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D' C' D
+++++
apply cong_transitivity with C D.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
apply cong_transitivity with C D.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D' C D
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.
try Cong.
apply cong_transitivity with C D.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B C' B' C
+++++
unfold Col.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B C' B' C
+++++
try Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C C' C' C
+++++
unfold Col.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
unfold FSC.
repeat split.
unfold Col.

*****
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C C' C' C
+++++
try Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).

*****
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
induction (eq_dec B C).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).

*****
H13 : eq B C
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
subst C.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
subst C.

*****
H12 : FSC B B D' C' B' C' D B
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' B
H11 : Cong B B' B' B
H7 : Cong C' B' B B
H6 : Bet A C' B'
B' : Tpoint
H4 : Bet A B D'
H5 : Cong B D' B D
D' : Tpoint
H3 : Cong D C' B D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B B
H : not (eq A B)
A,B,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B D) (Bet A D B)
+++++
auto.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).

*****
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (Cong D' C' D C).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).

*****
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong D' C' D C
+++++
eapply eq_dec_implies_l4_16.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
eapply eq_dec_implies_l4_16.

*****
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
try apply H12.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
eapply eq_dec_implies_l4_16.
try apply H12.

*****
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
eapply eq_dec_implies_l4_16.

*****
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
FSC ?A ?B D' C' ?A' ?B' D C
+++++
try apply H12.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
eapply eq_dec_implies_l4_16.

*****
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
try apply H12.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
eapply eq_dec_implies_l4_16.
try apply H12.

*****
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq B C)
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).

*****
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
idtac.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.

*****
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (exists E, Bet C E C' /\ Bet D E D').
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').

*****
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun E : Tpoint => and (Bet C E C') (Bet D E D'))
+++++
apply inner_pasch with A.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
apply inner_pasch with A.

*****
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet D' C A
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
apply inner_pasch with A.

*****
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet C' D A
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').

*****
H15 : ex (fun E : Tpoint => and (Bet C E C') (Bet D E D'))
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
idtac.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.

*****
H15 : ex (fun E : Tpoint => and (Bet C E C') (Bet D E D'))
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
ex_and H15 E.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.

*****
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (IFSC D E D' C D E D' C').
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').

*****
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
IFSC D E D' C D E D' C'
+++++
unfold IFSC.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
unfold IFSC.

*****
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Bet D E D') (and (Bet D E D') (and (Cong D D' D D') (and (Cong E D' E D') (and (Cong D C D C') (Cong D' C D' C')))))
+++++
repeat split.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
unfold IFSC.
repeat split.

*****
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet D E D'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
unfold IFSC.
repeat split.

*****
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet D E D'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
unfold IFSC.
repeat split.

*****
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong D D' D D'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
unfold IFSC.
repeat split.

*****
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong E D' E D'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
unfold IFSC.
repeat split.

*****
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong D C D C'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
unfold IFSC.
repeat split.

*****
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong D' C D' C'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
unfold IFSC.
repeat split.
Cong.

*****
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong D' C D' C'
+++++
apply cong_transitivity with C D.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
unfold IFSC.
repeat split.
Cong.
apply cong_transitivity with C D.

*****
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong D' C C D
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
unfold IFSC.
repeat split.
Cong.
apply cong_transitivity with C D.

*****
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D D' C'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').

*****
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
idtac.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.

*****
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (IFSC C E C' D C E C' D').
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').

*****
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
IFSC C E C' D C E C' D'
+++++
unfold IFSC.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
unfold IFSC.

*****
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Bet C E C') (and (Bet C E C') (and (Cong C C' C C') (and (Cong E C' E C') (and (Cong C D C D') (Cong C' D C' D')))))
+++++
repeat split.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
unfold IFSC.
repeat split.

*****
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet C E C'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
unfold IFSC.
repeat split.

*****
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet C E C'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
unfold IFSC.
repeat split.

*****
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C C' C C'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
unfold IFSC.
repeat split.

*****
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong E C' E C'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
unfold IFSC.
repeat split.

*****
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C D'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
unfold IFSC.
repeat split.

*****
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C' D C' D'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
unfold IFSC.
repeat split.
Cong.

*****
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C' D C' D'
+++++
apply cong_transitivity with C D.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
unfold IFSC.
repeat split.
Cong.
apply cong_transitivity with C D.

*****
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C' D C D
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
unfold IFSC.
repeat split.
Cong.
apply cong_transitivity with C D.

*****
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D C' D'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').

*****
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
idtac.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.

*****
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (Cong E C E C').
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').

*****
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong E C E C'
+++++
eapply eq_dec_implies_l4_2.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
eapply eq_dec_implies_l4_2.

*****
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
try apply H17.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
eapply eq_dec_implies_l4_2.
try apply H17.

*****
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
auto.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
eapply eq_dec_implies_l4_2.

*****
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
IFSC ?A E ?C C ?A' E ?C' C'
+++++
try apply H17.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').

*****
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
idtac.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.

*****
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (Cong E D E D').
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').

*****
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong E D E D'
+++++
eapply eq_dec_implies_l4_2.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
eapply eq_dec_implies_l4_2.

*****
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
try apply H18.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
eapply eq_dec_implies_l4_2.
try apply H18.

*****
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
auto.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
eapply eq_dec_implies_l4_2.

*****
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
IFSC ?A E ?C D ?A' E ?C' D'
+++++
try apply H18.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').

*****
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
idtac.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.

*****
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
induction (eq_dec C C').
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').

*****
H21 : eq C C'
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
subst C'.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
subst C'.

*****
H20 : Cong E D E D'
H17 : IFSC D E D' C D E D' C
H18 : IFSC C E C D C E C D'
H19 : Cong E C E C
H16 : Bet D E D'
H15 : Bet C E C
E : Tpoint
H14 : Cong D' C D C
H13 : not (eq B C)
H12 : FSC B C D' C B' C D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C B' C
H11 : Cong B B' B' B
H6 : Bet A C B'
H7 : Cong C B' C B
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H2 : Bet A D C
H3 : Cong D C C D
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
right.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
subst C'.
right.

*****
H20 : Cong E D E D'
H17 : IFSC D E D' C D E D' C
H18 : IFSC C E C D C E C D'
H19 : Cong E C E C
H16 : Bet D E D'
H15 : Bet C E C
E : Tpoint
H14 : Cong D' C D C
H13 : not (eq B C)
H12 : FSC B C D' C B' C D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C B' C
H11 : Cong B B' B' B
H6 : Bet A C B'
H7 : Cong C B' C B
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H2 : Bet A D C
H3 : Cong D C C D
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A D C
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').

*****
H21 : not (eq C C')
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
show_distinct C D'.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.

*****
H18 : IFSC C C C C C C C C
H21 : not (eq C C)
H13 : not (eq B C)
H6 : Bet A C B'
H10 : Cong B C B' C
H12 : FSC B C C C B' C C C
B' : Tpoint
H0 : Bet A B C
H : not (eq A B)
A,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
intuition.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.

*****
H22 : not (eq C D')
H21 : not (eq C C')
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : not (eq B C)
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
intuition.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.

*****
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
prolong C' C P C D'.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.

*****
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
prolong D' C R C E.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.

*****
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
prolong P R Q R P.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.

*****
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (FSC D' C R P P C E D').
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').

*****
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
FSC D' C R P P C E D'
+++++
unfold FSC.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.

*****
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
and (Col D' C R) (and (Cong_3 D' C R P C E) (and (Cong D' P P D') (Cong C P C D')))
+++++
unfold Cong_3.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.

*****
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
and (Col D' C R) (and (and (Cong D' C P C) (and (Cong D' R P E) (Cong C R C E))) (and (Cong D' P P D') (Cong C P C D')))
+++++
assert_cols.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.
assert_cols.

*****
H39 : Col A B C
H38 : Col A B D
H37 : Col A D C'
H36 : Col A C D'
H35 : Col A C' B'
H34 : Col A D' B'
H33 : Col C E C'
H32 : Col D E D'
H31 : Col C' C P
H30 : Col D' C R
H29 : Col P R Q
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
and (Col D' C R) (and (and (Cong D' C P C) (and (Cong D' R P E) (Cong C R C E))) (and (Cong D' P P D') (Cong C P C D')))
+++++
repeat split.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.
assert_cols.
repeat split.

*****
H39 : Col A B C
H38 : Col A B D
H37 : Col A D C'
H36 : Col A C D'
H35 : Col A C' B'
H34 : Col A D' B'
H33 : Col C E C'
H32 : Col D E D'
H31 : Col C' C P
H30 : Col D' C R
H29 : Col P R Q
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Col D' C R
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.
assert_cols.
repeat split.

*****
H39 : Col A B C
H38 : Col A B D
H37 : Col A D C'
H36 : Col A C D'
H35 : Col A C' B'
H34 : Col A D' B'
H33 : Col C E C'
H32 : Col D E D'
H31 : Col C' C P
H30 : Col D' C R
H29 : Col P R Q
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D' C P C
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.
assert_cols.
repeat split.

*****
H39 : Col A B C
H38 : Col A B D
H37 : Col A D C'
H36 : Col A C D'
H35 : Col A C' B'
H34 : Col A D' B'
H33 : Col C E C'
H32 : Col D E D'
H31 : Col C' C P
H30 : Col D' C R
H29 : Col P R Q
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D' R P E
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.
assert_cols.
repeat split.
Cong.

*****
H39 : Col A B C
H38 : Col A B D
H37 : Col A D C'
H36 : Col A C D'
H35 : Col A C' B'
H34 : Col A D' B'
H33 : Col C E C'
H32 : Col D E D'
H31 : Col C' C P
H30 : Col D' C R
H29 : Col P R Q
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D' R P E
+++++
apply eq_dec_implies_l2_11 with C C.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.
assert_cols.
repeat split.
Cong.
apply eq_dec_implies_l2_11 with C C.

*****
H39 : Col A B C
H38 : Col A B D
H37 : Col A D C'
H36 : Col A C D'
H35 : Col A C' B'
H34 : Col A D' B'
H33 : Col C E C'
H32 : Col D E D'
H31 : Col C' C P
H30 : Col D' C R
H29 : Col P R Q
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.
assert_cols.
repeat split.
Cong.
apply eq_dec_implies_l2_11 with C C.

*****
H39 : Col A B C
H38 : Col A B D
H37 : Col A D C'
H36 : Col A C D'
H35 : Col A C' B'
H34 : Col A D' B'
H33 : Col C E C'
H32 : Col D E D'
H31 : Col C' C P
H30 : Col D' C R
H29 : Col P R Q
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet D' C R
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.
assert_cols.
repeat split.
Cong.
apply eq_dec_implies_l2_11 with C C.

*****
H39 : Col A B C
H38 : Col A B D
H37 : Col A D C'
H36 : Col A C D'
H35 : Col A C' B'
H34 : Col A D' B'
H33 : Col C E C'
H32 : Col D E D'
H31 : Col C' C P
H30 : Col D' C R
H29 : Col P R Q
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet P C E
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.
assert_cols.
repeat split.
Cong.
apply eq_dec_implies_l2_11 with C C.
Cong.

*****
H39 : Col A B C
H38 : Col A B D
H37 : Col A D C'
H36 : Col A C D'
H35 : Col A C' B'
H34 : Col A D' B'
H33 : Col C E C'
H32 : Col D E D'
H31 : Col C' C P
H30 : Col D' C R
H29 : Col P R Q
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet P C E
+++++
apply between_inner_transitivity with C'.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.
assert_cols.
repeat split.
Cong.
apply eq_dec_implies_l2_11 with C C.
Cong.
apply between_inner_transitivity with C'.

*****
H39 : Col A B C
H38 : Col A B D
H37 : Col A D C'
H36 : Col A C D'
H35 : Col A C' B'
H34 : Col A D' B'
H33 : Col C E C'
H32 : Col D E D'
H31 : Col C' C P
H30 : Col D' C R
H29 : Col P R Q
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet P C C'
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.
assert_cols.
repeat split.
Cong.
apply eq_dec_implies_l2_11 with C C.
Cong.
apply between_inner_transitivity with C'.

*****
H39 : Col A B C
H38 : Col A B D
H37 : Col A D C'
H36 : Col A C D'
H35 : Col A C' B'
H34 : Col A D' B'
H33 : Col C E C'
H32 : Col D E D'
H31 : Col C' C P
H30 : Col D' C R
H29 : Col P R Q
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet C E C'
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.
assert_cols.
repeat split.
Cong.
apply eq_dec_implies_l2_11 with C C.

*****
H39 : Col A B C
H38 : Col A B D
H37 : Col A D C'
H36 : Col A C D'
H35 : Col A C' B'
H34 : Col A D' B'
H33 : Col C E C'
H32 : Col D E D'
H31 : Col C' C P
H30 : Col D' C R
H29 : Col P R Q
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D' C P C
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.
assert_cols.
repeat split.
Cong.
apply eq_dec_implies_l2_11 with C C.

*****
H39 : Col A B C
H38 : Col A B D
H37 : Col A D C'
H36 : Col A C D'
H35 : Col A C' B'
H34 : Col A D' B'
H33 : Col C E C'
H32 : Col D E D'
H31 : Col C' C P
H30 : Col D' C R
H29 : Col P R Q
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C R C E
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.
assert_cols.
repeat split.

*****
H39 : Col A B C
H38 : Col A B D
H37 : Col A D C'
H36 : Col A C D'
H35 : Col A C' B'
H34 : Col A D' B'
H33 : Col C E C'
H32 : Col D E D'
H31 : Col C' C P
H30 : Col D' C R
H29 : Col P R Q
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C R C E
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.
assert_cols.
repeat split.

*****
H39 : Col A B C
H38 : Col A B D
H37 : Col A D C'
H36 : Col A C D'
H35 : Col A C' B'
H34 : Col A D' B'
H33 : Col C E C'
H32 : Col D E D'
H31 : Col C' C P
H30 : Col D' C R
H29 : Col P R Q
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D' P P D'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
unfold FSC.
unfold Cong_3.
assert_cols.
repeat split.

*****
H39 : Col A B C
H38 : Col A B D
H37 : Col A D C'
H36 : Col A C D'
H35 : Col A C' B'
H34 : Col A D' B'
H33 : Col C E C'
H32 : Col D E D'
H31 : Col C' C P
H30 : Col D' C R
H29 : Col P R Q
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C P C D'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').

*****
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (Cong R P E D').
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').

*****
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong R P E D'
+++++
eauto using eq_dec_implies_l4_16.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').

*****
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
idtac.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.

*****
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (Cong R Q E D).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).

*****
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong R Q E D
+++++
eapply cong_transitivity.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
eapply cong_transitivity.

*****
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong R Q ?C ?D
+++++
apply cong_transitivity with R P.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
eapply cong_transitivity.
apply cong_transitivity with R P.

*****
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong R Q R P
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
eapply cong_transitivity.
apply cong_transitivity with R P.

*****
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong R P ?C ?D
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
eapply cong_transitivity.

*****
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong R P E D
+++++
apply cong_transitivity with E D'.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
eapply cong_transitivity.
apply cong_transitivity with E D'.

*****
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong R P E D'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
eapply cong_transitivity.
apply cong_transitivity with E D'.

*****
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong E D' E D
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (FSC D' E D C P R Q C).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
FSC D' E D C P R Q C
+++++
unfold FSC.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
unfold FSC.

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
and (Col D' E D) (and (Cong_3 D' E D P R Q) (and (Cong D' C P C) (Cong E C R C)))
+++++
repeat split.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
unfold FSC.
repeat split.

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Col D' E D
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
unfold FSC.
repeat split.
Cong.

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Col D' E D
+++++
unfold Col.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
unfold FSC.
repeat split.
Cong.
unfold Col.

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet D' E D) (or (Bet E D D') (Bet D D' E))
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
unfold FSC.
repeat split.

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D' E P R
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
unfold FSC.
repeat split.

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D' D P Q
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
unfold FSC.
repeat split.
Cong.

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D' D P Q
+++++
eapply (eq_dec_implies_l2_11 eq_dec D' E D P R Q).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
unfold FSC.
repeat split.
Cong.
eapply (eq_dec_implies_l2_11 eq_dec D' E D P R Q).

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet D' E D
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
unfold FSC.
repeat split.
Cong.
eapply (eq_dec_implies_l2_11 eq_dec D' E D P R Q).

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet P R Q
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
unfold FSC.
repeat split.
Cong.
eapply (eq_dec_implies_l2_11 eq_dec D' E D P R Q).

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D' E P R
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
unfold FSC.
repeat split.
Cong.
eapply (eq_dec_implies_l2_11 eq_dec D' E D P R Q).
Between.

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D' E P R
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
unfold FSC.
repeat split.
Cong.
eapply (eq_dec_implies_l2_11 eq_dec D' E D P R Q).

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong E D R Q
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
unfold FSC.
repeat split.
Cong.
eapply (eq_dec_implies_l2_11 eq_dec D' E D P R Q).
Between.

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong E D R Q
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
unfold FSC.
repeat split.

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong E D R Q
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
unfold FSC.
repeat split.

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D' C P C
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
unfold FSC.
repeat split.

*****
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong E C R C
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).

*****
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (Cong D C Q C).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).

*****
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D C Q C
+++++
induction (eq_dec D' E).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
induction (eq_dec D' E).

*****
H33 : eq D' E
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D C Q C
+++++
unfold FSC in *.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
induction (eq_dec D' E).
unfold FSC in *.

*****
H33 : eq D' E
H32 : and (Col D' E D)\n (and (Cong_3 D' E D P R Q) (and (Cong D' C P C) (Cong E C R C)))
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : and (Col D' C R)\n (and (Cong_3 D' C R P C E) (and (Cong D' P P D') (Cong C P C D')))
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : and (Col B C D')\n (and (Cong_3 B C D' B' C' D) (and (Cong B C' B' C) (Cong C C' C' C)))
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D C Q C
+++++
unfold IFSC in *.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
induction (eq_dec D' E).
unfold FSC in *.
unfold IFSC in *.

*****
H33 : eq D' E
H32 : and (Col D' E D)\n (and (Cong_3 D' E D P R Q) (and (Cong D' C P C) (Cong E C R C)))
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : and (Col D' C R)\n (and (Cong_3 D' C R P C E) (and (Cong D' P P D') (Cong C P C D')))
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : and (Bet C E C')\n (and (Bet C E C')\n (and (Cong C C' C C')\n (and (Cong E C' E C') (and (Cong C D C D') (Cong C' D C' D')))))
H17 : and (Bet D E D')\n (and (Bet D E D')\n (and (Cong D D' D D')\n (and (Cong E D' E D') (and (Cong D C D C') (Cong D' C D' C')))))
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : and (Col B C D')\n (and (Cong_3 B C D' B' C' D) (and (Cong B C' B' C) (Cong C C' C' C)))
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D C Q C
+++++
unfold Cong_3 in *.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
induction (eq_dec D' E).
unfold FSC in *.
unfold IFSC in *.
unfold Cong_3 in *.

*****
H33 : eq D' E
H32 : and (Col D' E D)\n (and (and (Cong D' E P R) (and (Cong D' D P Q) (Cong E D R Q)))\n (and (Cong D' C P C) (Cong E C R C)))
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : and (Col D' C R)\n (and (and (Cong D' C P C) (and (Cong D' R P E) (Cong C R C E)))\n (and (Cong D' P P D') (Cong C P C D')))
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : and (Bet C E C')\n (and (Bet C E C')\n (and (Cong C C' C C')\n (and (Cong E C' E C') (and (Cong C D C D') (Cong C' D C' D')))))
H17 : and (Bet D E D')\n (and (Bet D E D')\n (and (Cong D D' D D')\n (and (Cong E D' E D') (and (Cong D C D C') (Cong D' C D' C')))))
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : and (Col B C D')\n (and (and (Cong B C B' C') (and (Cong B D' B' D) (Cong C D' C' D)))\n (and (Cong B C' B' C) (Cong C C' C' C)))
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D C Q C
+++++
spliter.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
induction (eq_dec D' E).
unfold FSC in *.
unfold IFSC in *.
unfold Cong_3 in *.
spliter.

*****
H33 : eq D' E
H36 : Cong E C R C
H35 : Cong D' C P C
H38 : Cong E D R Q
H37 : Cong D' D P Q
H34 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H41 : Cong C P C D'
H40 : Cong D' P P D'
H43 : Cong C R C E
H42 : Cong D' R P E
H39 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H48 : Cong C' D C' D'
H47 : Cong C D C D'
H46 : Cong E C' E C'
H45 : Cong C C' C C'
H18,H44 : Bet C E C'
H53 : Cong D' C D' C'
H52 : Cong D C D C'
H51 : Cong E D' E D'
H50 : Cong D D' D D'
H16,H17,H49 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H56 : Cong C C' C' C
H55 : Cong B C' B' C
H58 : Cong C D' C' D
H57 : Cong B D' B' D
H54 : Cong B C B' C'
H12 : Col B C D'
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D C Q C
+++++
treat_equalities.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
induction (eq_dec D' E).
unfold FSC in *.
unfold IFSC in *.
unfold Cong_3 in *.
spliter.
treat_equalities.

*****
H29 : Col D' C R
H25 : Bet D' C R
H23 : Bet C' C R
H24 : Cong C R C D'
R : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H15 : Bet C D' C'
H13 : forall _ : eq B C, False
H58 : Cong C D' C' D'
H12 : Col B C D'
H8 : Bet A D' B'
H9 : Cong D' B' D' B
H10 : Cong B C' B' C
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H4 : Bet A C D'
H2 : Bet A D' C'
C' : Tpoint
H1 : Bet A B D'
D' : Tpoint
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D' C R C
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
induction (eq_dec D' E).

*****
H33 : forall _ : eq D' E, False
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D C Q C
+++++
apply eq_dec_implies_l4_16 with D' E P R.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
induction (eq_dec D' E).
apply eq_dec_implies_l4_16 with D' E P R.

*****
H33 : forall _ : eq D' E, False
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
induction (eq_dec D' E).
apply eq_dec_implies_l4_16 with D' E P R.

*****
H33 : forall _ : eq D' E, False
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
FSC D' E D C P R Q C
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
induction (eq_dec D' E).
apply eq_dec_implies_l4_16 with D' E P R.

*****
H33 : forall _ : eq D' E, False
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
not (eq D' E)
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).

*****
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (Cong C P C Q).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).

*****
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
unfold FSC in *.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
unfold FSC in *.

*****
H33 : Cong D C Q C
H32 : and (Col D' E D)\n (and (Cong_3 D' E D P R Q) (and (Cong D' C P C) (Cong E C R C)))
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : and (Col D' C R)\n (and (Cong_3 D' C R P C E) (and (Cong D' P P D') (Cong C P C D')))
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : and (Col B C D')\n (and (Cong_3 B C D' B' C' D) (and (Cong B C' B' C) (Cong C C' C' C)))
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
unfold Cong_3 in *.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
unfold FSC in *.
unfold Cong_3 in *.

*****
H33 : Cong D C Q C
H32 : and (Col D' E D)\n (and (and (Cong D' E P R) (and (Cong D' D P Q) (Cong E D R Q)))\n (and (Cong D' C P C) (Cong E C R C)))
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : and (Col D' C R)\n (and (and (Cong D' C P C) (and (Cong D' R P E) (Cong C R C E)))\n (and (Cong D' P P D') (Cong C P C D')))
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : and (Col B C D')\n (and (and (Cong B C B' C') (and (Cong B D' B' D) (Cong C D' C' D)))\n (and (Cong B C' B' C) (Cong C C' C' C)))
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
spliter.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
unfold FSC in *.
unfold Cong_3 in *.
spliter.

*****
H33 : Cong D C Q C
H36 : Cong E C R C
H35 : Cong D' C P C
H38 : Cong E D R Q
H37 : Cong D' D P Q
H34 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H41 : Cong C P C D'
H40 : Cong D' P P D'
H43 : Cong C R C E
H42 : Cong D' R P E
H39 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H46 : Cong C C' C' C
H45 : Cong B C' B' C
H48 : Cong C D' C' D
H47 : Cong B D' B' D
H44 : Cong B C B' C'
H12 : Col B C D'
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
apply cong_transitivity with C D.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
unfold FSC in *.
unfold Cong_3 in *.
spliter.
apply cong_transitivity with C D.

*****
H33 : Cong D C Q C
H36 : Cong E C R C
H35 : Cong D' C P C
H38 : Cong E D R Q
H37 : Cong D' D P Q
H34 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H41 : Cong C P C D'
H40 : Cong D' P P D'
H43 : Cong C R C E
H42 : Cong D' R P E
H39 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H46 : Cong C C' C' C
H45 : Cong B C' B' C
H48 : Cong C D' C' D
H47 : Cong B D' B' D
H44 : Cong B C B' C'
H12 : Col B C D'
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C P C D
+++++
apply cong_transitivity with C D'.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
unfold FSC in *.
unfold Cong_3 in *.
spliter.
apply cong_transitivity with C D.
apply cong_transitivity with C D'.

*****
H33 : Cong D C Q C
H36 : Cong E C R C
H35 : Cong D' C P C
H38 : Cong E D R Q
H37 : Cong D' D P Q
H34 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H41 : Cong C P C D'
H40 : Cong D' P P D'
H43 : Cong C R C E
H42 : Cong D' R P E
H39 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H46 : Cong C C' C' C
H45 : Cong B C' B' C
H48 : Cong C D' C' D
H47 : Cong B D' B' D
H44 : Cong B C B' C'
H12 : Col B C D'
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C P C D'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
unfold FSC in *.
unfold Cong_3 in *.
spliter.
apply cong_transitivity with C D.
apply cong_transitivity with C D'.

*****
H33 : Cong D C Q C
H36 : Cong E C R C
H35 : Cong D' C P C
H38 : Cong E D R Q
H37 : Cong D' D P Q
H34 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H41 : Cong C P C D'
H40 : Cong D' P P D'
H43 : Cong C R C E
H42 : Cong D' R P E
H39 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H46 : Cong C C' C' C
H45 : Cong B C' B' C
H48 : Cong C D' C' D
H47 : Cong B D' B' D
H44 : Cong B C B' C'
H12 : Col B C D'
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C D' C D
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
unfold FSC in *.
unfold Cong_3 in *.
spliter.
apply cong_transitivity with C D.

*****
H33 : Cong D C Q C
H36 : Cong E C R C
H35 : Cong D' C P C
H38 : Cong E D R Q
H37 : Cong D' D P Q
H34 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H41 : Cong C P C D'
H40 : Cong D' P P D'
H43 : Cong C R C E
H42 : Cong D' R P E
H39 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H46 : Cong C C' C' C
H45 : Cong B C' B' C
H48 : Cong C D' C' D
H47 : Cong B D' B' D
H44 : Cong B C B' C'
H12 : Col B C D'
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C D C Q
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).

*****
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
show_distinct R C.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.

*****
H32 : FSC D' R D R P R Q R
H29 : FSC D' R R P P R R D'
H31 : Cong R Q R D
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H24 : Cong R P R D'
P : Tpoint
H21 : forall _ : eq R R, False
H22 : forall _ : eq R D', False
H16 : Bet D R D'
H12 : FSC B R D' R B' R D R
H17 : IFSC D R D' R D R D' R
H18 : IFSC R R R D R R R D'
H13 : forall _ : eq B R, False
H8 : Bet A D' B'
H9 : Cong D' B' D B
H6 : Bet A R B'
H10 : Cong B R B' R
B' : Tpoint
H4 : Bet A R D'
H5 : Cong R D' R D
H2 : Bet A D R
H1 : Bet A B D
H0 : Bet A B R
R,D' : Tpoint
H : forall _ : eq A B, False
A,B,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
False
+++++
intuition.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.

*****
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (Cong D' P D' Q).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).

*****
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D' P D' Q
+++++
apply (eq_dec_implies_l4_17 eq_dec R C).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
apply (eq_dec_implies_l4_17 eq_dec R C).

*****
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
not (eq R C)
+++++
unfold Col.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
apply (eq_dec_implies_l4_17 eq_dec R C).
unfold Col.

*****
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
not (eq R C)
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
apply (eq_dec_implies_l4_17 eq_dec R C).

*****
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Col R C D'
+++++
unfold Col.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
apply (eq_dec_implies_l4_17 eq_dec R C).
unfold Col.

*****
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet R C D') (or (Bet C D' R) (Bet D' R C))
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
apply (eq_dec_implies_l4_17 eq_dec R C).

*****
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong R P R Q
+++++
unfold Col.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
apply (eq_dec_implies_l4_17 eq_dec R C).
unfold Col.

*****
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong R P R Q
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
apply (eq_dec_implies_l4_17 eq_dec R C).
unfold Col.
Between.

*****
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong R P R Q
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
apply (eq_dec_implies_l4_17 eq_dec R C).

*****
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
unfold Col.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
apply (eq_dec_implies_l4_17 eq_dec R C).
unfold Col.

*****
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).

*****
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
idtac.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.

*****
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (Cong B P B Q).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).

*****
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong B P B Q
+++++
apply eq_dec_implies_l4_17 with C D'.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
apply eq_dec_implies_l4_17 with C D'.

*****
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
apply eq_dec_implies_l4_17 with C D'.

*****
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
not (eq C D')
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
apply eq_dec_implies_l4_17 with C D'.

*****
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Col C D' B
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
apply eq_dec_implies_l4_17 with C D'.
try assumption.

*****
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Col C D' B
+++++
unfold Col.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.

*****
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet C D' B) (or (Bet D' B C) (Bet B C D'))
+++++
right.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.
right.

*****
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet D' B C) (Bet B C D')
+++++
right.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.
right.
right.

*****
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet B C D'
+++++
apply between_exchange3 with A.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.
right.
right.
apply between_exchange3 with A.

*****
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.
right.
right.
apply between_exchange3 with A.

*****
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A C D'
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
apply eq_dec_implies_l4_17 with C D'.

*****
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
apply eq_dec_implies_l4_17 with C D'.

*****
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D' P D' Q
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (Cong B' P B' Q).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong B' P B' Q
+++++
eapply (eq_dec_implies_l4_17 eq_dec C D').
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
eapply (eq_dec_implies_l4_17 eq_dec C D').

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
not (eq C D')
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
eapply (eq_dec_implies_l4_17 eq_dec C D').

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Col C D' B'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
eapply (eq_dec_implies_l4_17 eq_dec C D').
Cong.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Col C D' B'
+++++
unfold Col.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
eapply (eq_dec_implies_l4_17 eq_dec C D').
Cong.
unfold Col.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet C D' B') (or (Bet D' B' C) (Bet B' C D'))
+++++
left.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
eapply (eq_dec_implies_l4_17 eq_dec C D').
Cong.
unfold Col.
left.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet C D' B'
+++++
apply between_exchange3 with A.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
eapply (eq_dec_implies_l4_17 eq_dec C D').
Cong.
unfold Col.
left.
apply between_exchange3 with A.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A C D'
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
eapply (eq_dec_implies_l4_17 eq_dec C D').
Cong.
unfold Col.
left.
apply between_exchange3 with A.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A D' B'
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
eapply (eq_dec_implies_l4_17 eq_dec C D').

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
eapply (eq_dec_implies_l4_17 eq_dec C D').

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D' P D' Q
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).

*****
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (Cong C' P C' Q).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).

*****
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C' P C' Q
+++++
induction(eq_dec B B').
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').

*****
H39 : eq B B'
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C' P C' Q
+++++
subst B'.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.

*****
H37,H38 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H11 : Cong B B B B
H10 : Cong B C' B C
H9 : Cong D' B D B
H8 : Bet A D' B
H12 : FSC B C D' C' B C' D C
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C' P C' Q
+++++
unfold IFSC in *.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.

*****
H37,H38 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : and (Bet C E C')\n (and (Bet C E C')\n (and (Cong C C' C C')\n (and (Cong E C' E C') (and (Cong C D C D') (Cong C' D C' D')))))
H17 : and (Bet D E D')\n (and (Bet D E D')\n (and (Cong D D' D D')\n (and (Cong E D' E D') (and (Cong D C D C') (Cong D' C D' C')))))
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H11 : Cong B B B B
H10 : Cong B C' B C
H9 : Cong D' B D B
H8 : Bet A D' B
H12 : FSC B C D' C' B C' D C
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C' P C' Q
+++++
unfold FSC in *.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.

*****
H37,H38 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : and (Col D' E D)\n (and (Cong_3 D' E D P R Q) (and (Cong D' C P C) (Cong E C R C)))
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : and (Col D' C R)\n (and (Cong_3 D' C R P C E) (and (Cong D' P P D') (Cong C P C D')))
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : and (Bet C E C')\n (and (Bet C E C')\n (and (Cong C C' C C')\n (and (Cong E C' E C') (and (Cong C D C D') (Cong C' D C' D')))))
H17 : and (Bet D E D')\n (and (Bet D E D')\n (and (Cong D D' D D')\n (and (Cong E D' E D') (and (Cong D C D C') (Cong D' C D' C')))))
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H11 : Cong B B B B
H10 : Cong B C' B C
H9 : Cong D' B D B
H8 : Bet A D' B
H12 : and (Col B C D')\n (and (Cong_3 B C D' B C' D) (and (Cong B C' B C) (Cong C C' C' C)))
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C' P C' Q
+++++
unfold Cong_3 in *.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.

*****
H37,H38 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : and (Col D' E D)\n (and (and (Cong D' E P R) (and (Cong D' D P Q) (Cong E D R Q)))\n (and (Cong D' C P C) (Cong E C R C)))
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : and (Col D' C R)\n (and (and (Cong D' C P C) (and (Cong D' R P E) (Cong C R C E)))\n (and (Cong D' P P D') (Cong C P C D')))
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : and (Bet C E C')\n (and (Bet C E C')\n (and (Cong C C' C C')\n (and (Cong E C' E C') (and (Cong C D C D') (Cong C' D C' D')))))
H17 : and (Bet D E D')\n (and (Bet D E D')\n (and (Cong D D' D D')\n (and (Cong E D' E D') (and (Cong D C D C') (Cong D' C D' C')))))
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H11 : Cong B B B B
H10 : Cong B C' B C
H9 : Cong D' B D B
H8 : Bet A D' B
H12 : and (Col B C D')\n (and (and (Cong B C B C') (and (Cong B D' B D) (Cong C D' C' D)))\n (and (Cong B C' B C) (Cong C C' C' C)))
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C' P C' Q
+++++
spliter.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.

*****
H37,H38 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H40 : Cong D' C P C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H46 : Cong C P C D'
H45 : Cong D' P P D'
H48 : Cong C R C E
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H51 : Cong E C' E C'
H50 : Cong C C' C C'
H18,H49 : Bet C E C'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H56 : Cong E D' E D'
H55 : Cong D D' D D'
H16,H17,H54 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H11 : Cong B B B B
H10 : Cong B C' B C
H9 : Cong D' B D B
H8 : Bet A D' B
H61 : Cong C C' C' C
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C' P C' Q
+++++
clean_duplicated_hyps.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H45 : Cong D' P P D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H51 : Cong E C' E C'
H50 : Cong C C' C C'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H56 : Cong E D' E D'
H55 : Cong D D' D D'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H11 : Cong B B B B
H9 : Cong D' B D B
H8 : Bet A D' B
H61 : Cong C C' C' C
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C' P C' Q
+++++
clean_trivial_hyps.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C' P C' Q
+++++
apply eq_dec_implies_l4_17 with C D'.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
not (eq C D')
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Col C D' C'
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.
try assumption.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Col C D' C'
+++++
unfold Col.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet C D' C') (or (Bet D' C' C) (Bet C' C D'))
+++++
left.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.
left.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet C D' C'
+++++
apply between_exchange3 with A.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.
left.
apply between_exchange3 with A.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A C D'
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.
left.
apply between_exchange3 with A.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A D' C'
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.
left.
apply between_exchange3 with A.
try assumption.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A D' C'
+++++
apply eq_dec_implies_between_exchange4 with B.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.
left.
apply between_exchange3 with A.
try assumption.
apply eq_dec_implies_between_exchange4 with B.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.
left.
apply between_exchange3 with A.
try assumption.
apply eq_dec_implies_between_exchange4 with B.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A D' B
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.
left.
apply between_exchange3 with A.
try assumption.
apply eq_dec_implies_between_exchange4 with B.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A B C'
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.
left.
apply between_exchange3 with A.
try assumption.
apply eq_dec_implies_between_exchange4 with B.
try assumption.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A B C'
+++++
apply eq_dec_implies_between_exchange4 with D.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.
left.
apply between_exchange3 with A.
try assumption.
apply eq_dec_implies_between_exchange4 with B.
try assumption.
apply eq_dec_implies_between_exchange4 with D.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.
left.
apply between_exchange3 with A.
try assumption.
apply eq_dec_implies_between_exchange4 with B.
try assumption.
apply eq_dec_implies_between_exchange4 with D.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A B D
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.
try assumption.
unfold Col.
left.
apply between_exchange3 with A.
try assumption.
apply eq_dec_implies_between_exchange4 with B.
try assumption.
apply eq_dec_implies_between_exchange4 with D.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A D C'
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
subst B'.
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
clean_duplicated_hyps.
clean_trivial_hyps.
apply eq_dec_implies_l4_17 with C D'.

*****
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H41 : Cong E C R C
H43 : Cong E D R Q
H42 : Cong D' D P Q
H39 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H47 : Cong D' R P E
H44 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H53 : Cong C' D C' D'
H52 : Cong C D C D'
H58 : Cong D' C D' C'
H57 : Cong D C D C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H6 : Bet A C' B
H7 : Cong C' B C B
H9 : Cong D' B D B
H8 : Bet A D' B
H60 : Cong B C' B C
H63 : Cong C D' C' D
H62 : Cong B D' B D
H59 : Cong B C B C'
H12 : Col B C D'
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong D' P D' Q
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C' P C' Q
+++++
eapply eq_dec_implies_l4_17 with B B'.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
eapply eq_dec_implies_l4_17 with B B'.

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
eapply eq_dec_implies_l4_17 with B B'.

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
not (eq B B')
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
eapply eq_dec_implies_l4_17 with B B'.

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Col B B' C'
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
eapply eq_dec_implies_l4_17 with B B'.
Cong.

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Col B B' C'
+++++
unfold Col.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
eapply eq_dec_implies_l4_17 with B B'.
Cong.
unfold Col.

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet B B' C') (or (Bet B' C' B) (Bet C' B B'))
+++++
right.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
eapply eq_dec_implies_l4_17 with B B'.
Cong.
unfold Col.
right.

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet B' C' B) (Bet C' B B')
+++++
left.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
eapply eq_dec_implies_l4_17 with B B'.
Cong.
unfold Col.
right.
left.

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet B' C' B
+++++
apply between_symmetry.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
eapply eq_dec_implies_l4_17 with B B'.
Cong.
unfold Col.
right.
left.
apply between_symmetry.

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet B C' B'
+++++
apply between_exchange3 with A.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
eapply eq_dec_implies_l4_17 with B B'.
Cong.
unfold Col.
right.
left.
apply between_symmetry.
apply between_exchange3 with A.

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A B C'
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
eapply eq_dec_implies_l4_17 with B B'.
Cong.
unfold Col.
right.
left.
apply between_symmetry.
apply between_exchange3 with A.
try assumption.

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A B C'
+++++
apply eq_dec_implies_between_exchange4 with D.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
eapply eq_dec_implies_l4_17 with B B'.
Cong.
unfold Col.
right.
left.
apply between_symmetry.
apply between_exchange3 with A.
try assumption.
apply eq_dec_implies_between_exchange4 with D.

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
eapply eq_dec_implies_l4_17 with B B'.
Cong.
unfold Col.
right.
left.
apply between_symmetry.
apply between_exchange3 with A.
try assumption.
apply eq_dec_implies_between_exchange4 with D.

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A B D
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
eapply eq_dec_implies_l4_17 with B B'.
Cong.
unfold Col.
right.
left.
apply between_symmetry.
apply between_exchange3 with A.
try assumption.
apply eq_dec_implies_between_exchange4 with D.

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A D C'
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
eapply eq_dec_implies_l4_17 with B B'.
Cong.
unfold Col.
right.
left.
apply between_symmetry.
apply between_exchange3 with A.

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet A C' B'
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
eapply eq_dec_implies_l4_17 with B B'.

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong B P B Q
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
induction(eq_dec B B').
eapply eq_dec_implies_l4_17 with B B'.

*****
H39 : forall _ : eq B B', False
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong B' P B' Q
+++++
Cong.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).

*****
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
assert (Cong P P P Q).
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).

*****
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong P P P Q
+++++
apply eq_dec_implies_l4_17 with C C'.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).
apply eq_dec_implies_l4_17 with C C'.

*****
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).
apply eq_dec_implies_l4_17 with C C'.

*****
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
not (eq C C')
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).
apply eq_dec_implies_l4_17 with C C'.

*****
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Col C C' P
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).
apply eq_dec_implies_l4_17 with C C'.
try assumption.

*****
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Col C C' P
+++++
unfold Col.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).
apply eq_dec_implies_l4_17 with C C'.
try assumption.
unfold Col.

*****
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet C C' P) (or (Bet C' P C) (Bet P C C'))
+++++
right.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).
apply eq_dec_implies_l4_17 with C C'.
try assumption.
unfold Col.
right.

*****
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet C' P C) (Bet P C C')
+++++
right.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).
apply eq_dec_implies_l4_17 with C C'.
try assumption.
unfold Col.
right.
right.

*****
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet P C C'
+++++
apply between_symmetry.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).
apply eq_dec_implies_l4_17 with C C'.
try assumption.
unfold Col.
right.
right.
apply between_symmetry.

*****
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Bet C' C P
+++++
assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).
apply eq_dec_implies_l4_17 with C C'.

*****
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C P C Q
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).
apply eq_dec_implies_l4_17 with C C'.

*****
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
Cong C' P C' Q
+++++
try assumption.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).

*****
H40 : Cong P P P Q
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : IFSC C E C' D C E C' D'
H17 : IFSC D E D' C D E D' C'
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
unfold IFSC in *.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).
unfold IFSC in *.

*****
H40 : Cong P P P Q
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : FSC D' E D C P R Q C
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : FSC D' C R P P C E D'
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : and (Bet C E C')\n (and (Bet C E C')\n (and (Cong C C' C C')\n (and (Cong E C' E C') (and (Cong C D C D') (Cong C' D C' D')))))
H17 : and (Bet D E D')\n (and (Bet D E D')\n (and (Cong D D' D D')\n (and (Cong E D' E D') (and (Cong D C D C') (Cong D' C D' C')))))
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : FSC B C D' C' B' C' D C
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
unfold FSC in *.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).
unfold IFSC in *.
unfold FSC in *.

*****
H40 : Cong P P P Q
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : and (Col D' E D)\n (and (Cong_3 D' E D P R Q) (and (Cong D' C P C) (Cong E C R C)))
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : and (Col D' C R)\n (and (Cong_3 D' C R P C E) (and (Cong D' P P D') (Cong C P C D')))
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : and (Bet C E C')\n (and (Bet C E C')\n (and (Cong C C' C C')\n (and (Cong E C' E C') (and (Cong C D C D') (Cong C' D C' D')))))
H17 : and (Bet D E D')\n (and (Bet D E D')\n (and (Cong D D' D D')\n (and (Cong E D' E D') (and (Cong D C D C') (Cong D' C D' C')))))
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : and (Col B C D')\n (and (Cong_3 B C D' B' C' D) (and (Cong B C' B' C) (Cong C C' C' C)))
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
unfold Cong_3 in *.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.

*****
H40 : Cong P P P Q
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H32 : and (Col D' E D)\n (and (and (Cong D' E P R) (and (Cong D' D P Q) (Cong E D R Q)))\n (and (Cong D' C P C) (Cong E C R C)))
H31 : Cong R Q E D
H30 : Cong R P E D'
H29 : and (Col D' C R)\n (and (and (Cong D' C P C) (and (Cong D' R P E) (Cong C R C E)))\n (and (Cong D' P P D') (Cong C P C D')))
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H18 : and (Bet C E C')\n (and (Bet C E C')\n (and (Cong C C' C C')\n (and (Cong E C' E C') (and (Cong C D C D') (Cong C' D C' D')))))
H17 : and (Bet D E D')\n (and (Bet D E D')\n (and (Cong D D' D D')\n (and (Cong E D' E D') (and (Cong D C D C') (Cong D' C D' C')))))
H16 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H12 : and (Col B C D')\n (and (and (Cong B C B' C') (and (Cong B D' B' D) (Cong C D' C' D)))\n (and (Cong B C' B' C) (Cong C C' C' C)))
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
spliter.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.

*****
H40 : Cong P P P Q
H39 : Cong C' P C' Q
H38 : Cong B' P B' Q
H37 : Cong B P B Q
H36 : Cong D' P D' Q
H35 : not (eq R C)
H34 : Cong C P C Q
H33 : Cong D C Q C
H43 : Cong E C R C
H42 : Cong D' C P C
H45 : Cong E D R Q
H44 : Cong D' D P Q
H41 : Cong D' E P R
H32 : Col D' E D
H31 : Cong R Q E D
H30 : Cong R P E D'
H48 : Cong C P C D'
H47 : Cong D' P P D'
H50 : Cong C R C E
H49 : Cong D' R P E
H46 : Cong D' C P C
H29 : Col D' C R
H28 : Cong R Q R P
H27 : Bet P R Q
Q : Tpoint
H26 : Cong C R C E
H25 : Bet D' C R
R : Tpoint
H24 : Cong C P C D'
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C D', False
H21 : forall _ : eq C C', False
H20 : Cong E D E D'
H19 : Cong E C E C'
H55 : Cong C' D C' D'
H54 : Cong C D C D'
H53 : Cong E C' E C'
H52 : Cong C C' C C'
H18,H51 : Bet C E C'
H60 : Cong D' C D' C'
H59 : Cong D C D C'
H58 : Cong E D' E D'
H57 : Cong D D' D D'
H16,H17,H56 : Bet D E D'
H15 : Bet C E C'
E : Tpoint
H14 : Cong D' C' D C
H13 : forall _ : eq B C, False
H63 : Cong C C' C' C
H62 : Cong B C' B' C
H65 : Cong C D' C' D
H64 : Cong B D' B' D
H61 : Cong B C B' C'
H12 : Col B C D'
H8 : Bet A D' B'
H9 : Cong D' B' D B
H10 : Cong B C' B' C
H11 : Cong B B' B' B
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H5 : Cong C D' C D
H4 : Bet A C D'
D' : Tpoint
H3 : Cong D C' C D
H2 : Bet A D C'
C' : Tpoint
H1 : Bet A B D
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
treat_equalities.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).
assert (Cong B B' B'' B).
assert(B'' = B').
subst B''.
assert (FSC B C D' C' B' C' D C).
induction (eq_dec B C).
assert (Cong D' C' D C).
idtac.
assert (exists E, Bet C E C' /\\ Bet D E D').
idtac.
ex_and H15 E.
assert (IFSC D E D' C D E D' C').
idtac.
assert (IFSC C E C' D C E C' D').
idtac.
assert (Cong E C E C').
idtac.
assert (Cong E D E D').
idtac.
induction (eq_dec C C').
show_distinct C D'.
intuition.
prolong C' C P C D'.
prolong D' C R C E.
prolong P R Q R P.
assert (FSC D' C R P P C E D').
assert (Cong R P E D').
idtac.
assert (Cong R Q E D).
assert (FSC D' E D C P R Q C).
assert (Cong D C Q C).
assert (Cong C P C Q).
show_distinct R C.
assert (Cong D' P D' Q).
idtac.
assert (Cong B P B Q).
assert (Cong B' P B' Q).
assert (Cong C' P C' Q).
assert (Cong P P P Q).
unfold IFSC in *.
unfold FSC in *.
unfold Cong_3 in *.
spliter.
treat_equalities.

*****
H29 : Col E C P
H35 : not (eq P C)
H25 : Bet E C P
H24 : Cong C P C E
H23 : Bet C' C P
P : Tpoint
H22 : forall _ : eq C E, False
H21 : forall _ : eq C C', False
H15 : Bet C E C'
H13 : forall _ : eq B C, False
H9 : Cong E B' E B
H8 : Bet A E B'
H12 : Col B C E
H65 : Cong C E C' E
H10 : Cong B C' B' C
H7 : Cong C' B' C B
H6 : Bet A C' B'
B' : Tpoint
H2 : Bet A E C'
H4 : Bet A C E
C' : Tpoint
H1 : Bet A B E
E : Tpoint
H0 : Bet A B C
H : forall _ : eq A B, False
A,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (forall _ : eq A B, False)
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C E) (Bet A E C)
+++++
Between.
-----
Lemma eq_dec_implies_l5_1 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet A C D \\/ Bet A D C.
Proof.
intro eq_dec.
intros.
prolong A D C' C D.
prolong A C D' C D.
prolong A C' B' C B.
prolong A D' B'' D B.
assert (Cong B C' B'' C).

*****

*****

+++++
Qed.
-----
Lemma eq_dec_implies_l5_2 :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  forall A B C D,\n  A<>B -> Bet A B C -> Bet A B D -> Bet B C D \/ Bet B D C.
-----
Lemma eq_dec_implies_l5_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet B C D \\/ Bet B D C.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D : Tpoint) (_ : not (eq A B)) (_ : Bet A B C) (_ : Bet A B D), or (Bet B C D) (Bet B D C)
+++++
Proof.
-----
Lemma eq_dec_implies_l5_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet B C D \\/ Bet B D C.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D : Tpoint) (_ : not (eq A B)) (_ : Bet A B C) (_ : Bet A B D), or (Bet B C D) (Bet B D C)
+++++
intros.
-----
Lemma eq_dec_implies_l5_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet B C D \\/ Bet B D C.
Proof.
intros.

*****
H2 : Bet A B D
H1 : Bet A B C
H0 : not (eq A B)
A,B,C,D : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet B C D) (Bet B D C)
+++++
assert (Bet A C D \/ Bet A D C).
-----
Lemma eq_dec_implies_l5_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet B C D \\/ Bet B D C.
Proof.
intros.
assert (Bet A C D \\/ Bet A D C).

*****
H2 : Bet A B D
H1 : Bet A B C
H0 : not (eq A B)
A,B,C,D : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A C D) (Bet A D C)
+++++
eapply eq_dec_implies_l5_1.
-----
Lemma eq_dec_implies_l5_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet B C D \\/ Bet B D C.
Proof.
intros.
assert (Bet A C D \\/ Bet A D C).
eapply eq_dec_implies_l5_1.

*****
H2 : Bet A B D
H1 : Bet A B C
H0 : not (eq A B)
A,B,C,D : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
eauto.
-----
Lemma eq_dec_implies_l5_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet B C D \\/ Bet B D C.
Proof.
intros.
assert (Bet A C D \\/ Bet A D C).
eapply eq_dec_implies_l5_1.

*****
H2 : Bet A B D
H1 : Bet A B C
H0 : not (eq A B)
A,B,C,D : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq A ?B)
+++++
eauto.
-----
Lemma eq_dec_implies_l5_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet B C D \\/ Bet B D C.
Proof.
intros.
assert (Bet A C D \\/ Bet A D C).
eapply eq_dec_implies_l5_1.

*****
H2 : Bet A B D
H1 : Bet A B C
H0 : not (eq A B)
A,B,C,D : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
eauto.
-----
Lemma eq_dec_implies_l5_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet B C D \\/ Bet B D C.
Proof.
intros.
assert (Bet A C D \\/ Bet A D C).
eapply eq_dec_implies_l5_1.

*****
H2 : Bet A B D
H1 : Bet A B C
H0 : not (eq A B)
A,B,C,D : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B D
+++++
eauto.
-----
Lemma eq_dec_implies_l5_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet B C D \\/ Bet B D C.
Proof.
intros.
assert (Bet A C D \\/ Bet A D C).

*****
H3 : or (Bet A C D) (Bet A D C)
H2 : Bet A B D
H1 : Bet A B C
H0 : not (eq A B)
A,B,C,D : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet B C D) (Bet B D C)
+++++
idtac.
-----
Lemma eq_dec_implies_l5_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet B C D \\/ Bet B D C.
Proof.
intros.
assert (Bet A C D \\/ Bet A D C).
idtac.

*****
H3 : or (Bet A C D) (Bet A D C)
H2 : Bet A B D
H1 : Bet A B C
H0 : not (eq A B)
A,B,C,D : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet B C D) (Bet B D C)
+++++
induction H3.
-----
Lemma eq_dec_implies_l5_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet B C D \\/ Bet B D C.
Proof.
intros.
assert (Bet A C D \\/ Bet A D C).
idtac.
induction H3.

*****
H3 : Bet A C D
H2 : Bet A B D
H1 : Bet A B C
H0 : not (eq A B)
A,B,C,D : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet B C D) (Bet B D C)
+++++
left.
-----
Lemma eq_dec_implies_l5_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet B C D \\/ Bet B D C.
Proof.
intros.
assert (Bet A C D \\/ Bet A D C).
idtac.
induction H3.
left.

*****
H3 : Bet A C D
H2 : Bet A B D
H1 : Bet A B C
H0 : not (eq A B)
A,B,C,D : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B C D
+++++
eBetween.
-----
Lemma eq_dec_implies_l5_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet B C D \\/ Bet B D C.
Proof.
intros.
assert (Bet A C D \\/ Bet A D C).
idtac.
induction H3.

*****
H3 : Bet A D C
H2 : Bet A B D
H1 : Bet A B C
H0 : not (eq A B)
A,B,C,D : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet B C D) (Bet B D C)
+++++
right.
-----
Lemma eq_dec_implies_l5_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet B C D \\/ Bet B D C.
Proof.
intros.
assert (Bet A C D \\/ Bet A D C).
idtac.
induction H3.
right.

*****
H3 : Bet A D C
H2 : Bet A B D
H1 : Bet A B C
H0 : not (eq A B)
A,B,C,D : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B D C
+++++
eBetween.
-----
Lemma eq_dec_implies_l5_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C D, A<>B -> Bet A B C -> Bet A B D -> Bet B C D \\/ Bet B D C.
Proof.
intros.
assert (Bet A C D \\/ Bet A D C).

*****

*****

+++++
Qed.
-----
Lemma eq_dec_implies_segment_construction_2 :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  forall A Q B C, A<>Q -> exists X, (Bet Q A X \/ Bet Q X A) /\ Cong Q X B C.
-----
Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A Q B C : Tpoint) (_ : not (eq A Q)), ex (fun X : Tpoint => and (or (Bet Q A X) (Bet Q X A)) (Cong Q X B C))
+++++
Proof.
-----
Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A Q B C : Tpoint) (_ : not (eq A Q)), ex (fun X : Tpoint => and (or (Bet Q A X) (Bet Q X A)) (Cong Q X B C))
+++++
intro eq_dec.
-----
Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.
Proof.
intro eq_dec.

*****
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall (A Q B C : Tpoint) (_ : not (eq A Q)), ex (fun X : Tpoint => and (or (Bet Q A X) (Bet Q X A)) (Cong Q X B C))
+++++
intros.
-----
Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.
Proof.
intro eq_dec.
intros.

*****
H : not (eq A Q)
A,Q,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (or (Bet Q A X) (Bet Q X A)) (Cong Q X B C))
+++++
prolong A Q A' A Q.
-----
Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.
Proof.
intro eq_dec.
intros.
prolong A Q A' A Q.

*****
H1 : Cong Q A' A Q
H0 : Bet A Q A'
A' : Tpoint
H : not (eq A Q)
A,Q,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (or (Bet Q A X) (Bet Q X A)) (Cong Q X B C))
+++++
prolong A' Q X B C.
-----
Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.
Proof.
intro eq_dec.
intros.
prolong A Q A' A Q.
prolong A' Q X B C.

*****
H3 : Cong Q X B C
H2 : Bet A' Q X
X : Tpoint
H1 : Cong Q A' A Q
H0 : Bet A Q A'
A' : Tpoint
H : not (eq A Q)
A,Q,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
ex (fun X : Tpoint => and (or (Bet Q A X) (Bet Q X A)) (Cong Q X B C))
+++++
exists X.
-----
Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.
Proof.
intro eq_dec.
intros.
prolong A Q A' A Q.
prolong A' Q X B C.
exists X.

*****
H3 : Cong Q X B C
H2 : Bet A' Q X
X : Tpoint
H1 : Cong Q A' A Q
H0 : Bet A Q A'
A' : Tpoint
H : not (eq A Q)
A,Q,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (or (Bet Q A X) (Bet Q X A)) (Cong Q X B C)
+++++
show_distinct A' Q.
-----
Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.
Proof.
intro eq_dec.
intros.
prolong A Q A' A Q.
prolong A' Q X B C.
exists X.
show_distinct A' Q.

*****
H3 : Cong A X B C
X : Tpoint
H : not (eq A A)
A,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
solve [intuition].
-----
Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.
Proof.
intro eq_dec.
intros.
prolong A Q A' A Q.
prolong A' Q X B C.
exists X.
show_distinct A' Q.

*****
H4 : not (eq A' Q)
H3 : Cong Q X B C
H2 : Bet A' Q X
X : Tpoint
H1 : Cong Q A' A Q
H0 : Bet A Q A'
A' : Tpoint
H : not (eq A Q)
A,Q,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (or (Bet Q A X) (Bet Q X A)) (Cong Q X B C)
+++++
split.
-----
Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.
Proof.
intro eq_dec.
intros.
prolong A Q A' A Q.
prolong A' Q X B C.
exists X.
show_distinct A' Q.
split.

*****
H4 : not (eq A' Q)
H3 : Cong Q X B C
H2 : Bet A' Q X
X : Tpoint
H1 : Cong Q A' A Q
H0 : Bet A Q A'
A' : Tpoint
H : not (eq A Q)
A,Q,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet Q A X) (Bet Q X A)
+++++
try assumption.
-----
Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.
Proof.
intro eq_dec.
intros.
prolong A Q A' A Q.
prolong A' Q X B C.
exists X.
show_distinct A' Q.
split.
try assumption.

*****
H4 : not (eq A' Q)
H3 : Cong Q X B C
H2 : Bet A' Q X
X : Tpoint
H1 : Cong Q A' A Q
H0 : Bet A Q A'
A' : Tpoint
H : not (eq A Q)
A,Q,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet Q A X) (Bet Q X A)
+++++
eapply (eq_dec_implies_l5_2 eq_dec A' Q).
-----
Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.
Proof.
intro eq_dec.
intros.
prolong A Q A' A Q.
prolong A' Q X B C.
exists X.
show_distinct A' Q.
split.
try assumption.
eapply (eq_dec_implies_l5_2 eq_dec A' Q).

*****
H4 : not (eq A' Q)
H3 : Cong Q X B C
H2 : Bet A' Q X
X : Tpoint
H1 : Cong Q A' A Q
H0 : Bet A Q A'
A' : Tpoint
H : not (eq A Q)
A,Q,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq A' Q)
+++++
Between.
-----
Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.
Proof.
intro eq_dec.
intros.
prolong A Q A' A Q.
prolong A' Q X B C.
exists X.
show_distinct A' Q.
split.
try assumption.
eapply (eq_dec_implies_l5_2 eq_dec A' Q).

*****
H4 : not (eq A' Q)
H3 : Cong Q X B C
H2 : Bet A' Q X
X : Tpoint
H1 : Cong Q A' A Q
H0 : Bet A Q A'
A' : Tpoint
H : not (eq A Q)
A,Q,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' Q A
+++++
Between.
-----
Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.
Proof.
intro eq_dec.
intros.
prolong A Q A' A Q.
prolong A' Q X B C.
exists X.
show_distinct A' Q.
split.
try assumption.
eapply (eq_dec_implies_l5_2 eq_dec A' Q).

*****
H4 : not (eq A' Q)
H3 : Cong Q X B C
H2 : Bet A' Q X
X : Tpoint
H1 : Cong Q A' A Q
H0 : Bet A Q A'
A' : Tpoint
H : not (eq A Q)
A,Q,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A' Q X
+++++
Between.
-----
Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.
Proof.
intro eq_dec.
intros.
prolong A Q A' A Q.
prolong A' Q X B C.
exists X.
show_distinct A' Q.
split.

*****
H4 : not (eq A' Q)
H3 : Cong Q X B C
H2 : Bet A' Q X
X : Tpoint
H1 : Cong Q A' A Q
H0 : Bet A Q A'
A' : Tpoint
H : not (eq A Q)
A,Q,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong Q X B C
+++++
try assumption.
-----
Lemma eq_dec_implies_segment_construction_2 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A Q B C, A<>Q -> exists X, (Bet Q A X \\/ Bet Q X A) /\\ Cong Q X B C.
Proof.
intro eq_dec.
intros.
prolong A Q A' A Q.
prolong A' Q X B C.
exists X.
show_distinct A' Q.

*****

*****

+++++
Qed.
-----
Lemma eq_dec_implies_between_cong :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  forall A B C, Bet A C B -> Cong A C A B -> C=B.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C : Tpoint) (_ : Bet A C B) (_ : Cong A C A B), eq C B
+++++
Proof.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C : Tpoint) (_ : Bet A C B) (_ : Cong A C A B), eq C B
+++++
intros.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.

*****
H1 : Cong A C A B
H0 : Bet A C B
A,B,C : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq C B
+++++
assert (Bet A B C).
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.
assert (Bet A B C).

*****
H1 : Cong A C A B
H0 : Bet A C B
A,B,C : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
eapply eq_dec_implies_l4_6 with A C B.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.
assert (Bet A B C).
eapply eq_dec_implies_l4_6 with A C B.

*****
H1 : Cong A C A B
H0 : Bet A C B
A,B,C : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
unfold Cong_3.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.
assert (Bet A B C).
eapply eq_dec_implies_l4_6 with A C B.
unfold Cong_3.

*****
H1 : Cong A C A B
H0 : Bet A C B
A,B,C : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
repeat split.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.
assert (Bet A B C).
eapply eq_dec_implies_l4_6 with A C B.
unfold Cong_3.
repeat split.

*****
H1 : Cong A C A B
H0 : Bet A C B
A,B,C : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
Cong.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.
assert (Bet A B C).
eapply eq_dec_implies_l4_6 with A C B.

*****
H1 : Cong A C A B
H0 : Bet A C B
A,B,C : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A C B
+++++
unfold Cong_3.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.
assert (Bet A B C).
eapply eq_dec_implies_l4_6 with A C B.
unfold Cong_3.

*****
H1 : Cong A C A B
H0 : Bet A C B
A,B,C : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A C B
+++++
repeat split.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.
assert (Bet A B C).
eapply eq_dec_implies_l4_6 with A C B.
unfold Cong_3.
repeat split.

*****
H1 : Cong A C A B
H0 : Bet A C B
A,B,C : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A C B
+++++
Cong.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.
assert (Bet A B C).
eapply eq_dec_implies_l4_6 with A C B.

*****
H1 : Cong A C A B
H0 : Bet A C B
A,B,C : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong_3 A C B A B C
+++++
unfold Cong_3.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.
assert (Bet A B C).
eapply eq_dec_implies_l4_6 with A C B.
unfold Cong_3.

*****
H1 : Cong A C A B
H0 : Bet A C B
A,B,C : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
and (Cong A C A B) (and (Cong A B A C) (Cong C B B C))
+++++
repeat split.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.
assert (Bet A B C).
eapply eq_dec_implies_l4_6 with A C B.
unfold Cong_3.
repeat split.

*****
H1 : Cong A C A B
H0 : Bet A C B
A,B,C : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A C A B
+++++
Cong.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.
assert (Bet A B C).
eapply eq_dec_implies_l4_6 with A C B.
unfold Cong_3.
repeat split.

*****
H1 : Cong A C A B
H0 : Bet A C B
A,B,C : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A B A C
+++++
Cong.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.
assert (Bet A B C).
eapply eq_dec_implies_l4_6 with A C B.
unfold Cong_3.
repeat split.

*****
H1 : Cong A C A B
H0 : Bet A C B
A,B,C : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C B B C
+++++
Cong.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.
assert (Bet A B C).

*****
H2 : Bet A B C
H1 : Cong A C A B
H0 : Bet A C B
A,B,C : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq C B
+++++
eapply between_equality.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.
assert (Bet A B C).
eapply between_equality.

*****
H2 : Bet A B C
H1 : Cong A C A B
H0 : Bet A C B
A,B,C : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet C B ?C
+++++
eBetween.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.
assert (Bet A B C).
eapply between_equality.

*****
H2 : Bet A B C
H1 : Cong A C A B
H0 : Bet A C B
A,B,C : Tpoint
H : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B C A
+++++
eBetween.
-----
Lemma eq_dec_implies_between_cong : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B C, Bet A C B -> Cong A C A B -> C=B.
Proof.
intros.
assert (Bet A B C).

*****

*****

+++++
Qed.
-----
Lemma eq_dec_cong_dec :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  (forall A B C D, Cong A B C D \/ ~ Cong A B C D).
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
+++++
Proof.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
+++++
intro eq_dec.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.

*****
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D))
+++++
intros.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.

*****
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong A B C D) (not (Cong A B C D))
+++++
elim (eq_dec A B).
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).

*****
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A B, or (Cong A B C D) (not (Cong A B C D))
+++++
intro.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.

*****
H : eq A B
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong A B C D) (not (Cong A B C D))
+++++
subst.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.

*****
B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong B B C D) (not (Cong B B C D))
+++++
elim (eq_dec C D).
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).

*****
B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq C D, or (Cong B B C D) (not (Cong B B C D))
+++++
intro.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.

*****
H : eq C D
B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong B B C D) (not (Cong B B C D))
+++++
subst.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.

*****
B,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong B B D D) (not (Cong B B D D))
+++++
left.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
left.

*****
B,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B B D D
+++++
Cong.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).

*****
B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq C D), or (Cong B B C D) (not (Cong B B C D))
+++++
intro.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.

*****
H : not (eq C D)
B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong B B C D) (not (Cong B B C D))
+++++
subst.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.

*****
H : not (eq C D)
B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong B B C D) (not (Cong B B C D))
+++++
right.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
right.

*****
H : not (eq C D)
B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (Cong B B C D)
+++++
intro.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
right.
intro.

*****
H0 : Cong B B C D
H : not (eq C D)
B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
right.
intro.
apply H.

*****
H0 : Cong B B C D
H : not (eq C D)
B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq C D
+++++
apply cong_identity with B.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
right.
intro.
apply H.
apply cong_identity with B.

*****
H0 : Cong B B C D
H : not (eq C D)
B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong C D B B
+++++
Cong.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).

*****
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq A B), or (Cong A B C D) (not (Cong A B C D))
+++++
intro.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.

*****
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong A B C D) (not (Cong A B C D))
+++++
subst.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.

*****
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong A B C D) (not (Cong A B C D))
+++++
elim (eq_dec C D).
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).

*****
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq C D, or (Cong A B C D) (not (Cong A B C D))
+++++
intro.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.

*****
H0 : eq C D
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong A B C D) (not (Cong A B C D))
+++++
subst.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.

*****
H : not (eq A B)
A,B,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong A B D D) (not (Cong A B D D))
+++++
right.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
right.

*****
H : not (eq A B)
A,B,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (Cong A B D D)
+++++
intro.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
right.
intro.

*****
H0 : Cong A B D D
H : not (eq A B)
A,B,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
right.
intro.
apply H.

*****
H0 : Cong A B D D
H : not (eq A B)
A,B,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq A B
+++++
apply cong_identity with D.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
right.
intro.
apply H.
apply cong_identity with D.

*****
H0 : Cong A B D D
H : not (eq A B)
A,B,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A B D D
+++++
Cong.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).

*****
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq C D), or (Cong A B C D) (not (Cong A B C D))
+++++
intro.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.

*****
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong A B C D) (not (Cong A B C D))
+++++
subst.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.

*****
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong A B C D) (not (Cong A B C D))
+++++
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).

*****
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall (x : Tpoint) (_ : and (or (Bet A B x) (Bet A x B)) (Cong A x C D)), or (Cong A B C D) (not (Cong A B C D))
+++++
intros D' HD'.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.

*****
HD' : and (or (Bet A B D') (Bet A D' B)) (Cong A D' C D)
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong A B C D) (not (Cong A B C D))
+++++
spliter.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.

*****
H2 : Cong A D' C D
H1 : or (Bet A B D') (Bet A D' B)
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong A B C D) (not (Cong A B C D))
+++++
elim (eq_dec B D').
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').

*****
H2 : Cong A D' C D
H1 : or (Bet A B D') (Bet A D' B)
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq B D', or (Cong A B C D) (not (Cong A B C D))
+++++
intro.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.

*****
H3 : eq B D'
H2 : Cong A D' C D
H1 : or (Bet A B D') (Bet A D' B)
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong A B C D) (not (Cong A B C D))
+++++
subst.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
subst.

*****
H2 : Cong A D' C D
H0 : not (eq C D)
H : not (eq A D')
H1 : or (Bet A D' D') (Bet A D' D')
A,C,D,D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong A D' C D) (not (Cong A D' C D))
+++++
left.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
subst.
left.

*****
H2 : Cong A D' C D
H0 : not (eq C D)
H : not (eq A D')
H1 : or (Bet A D' D') (Bet A D' D')
A,C,D,D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A D' C D
+++++
assumption.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').

*****
H2 : Cong A D' C D
H1 : or (Bet A B D') (Bet A D' B)
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq B D'), or (Cong A B C D) (not (Cong A B C D))
+++++
intro.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.

*****
H3 : not (eq B D')
H2 : Cong A D' C D
H1 : or (Bet A B D') (Bet A D' B)
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Cong A B C D) (not (Cong A B C D))
+++++
right.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.

*****
H3 : not (eq B D')
H2 : Cong A D' C D
H1 : or (Bet A B D') (Bet A D' B)
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (Cong A B C D)
+++++
intro.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.

*****
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
H1 : or (Bet A B D') (Bet A D' B)
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (Cong A D' A B).
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).

*****
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
H1 : or (Bet A B D') (Bet A D' B)
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A D' A B
+++++
eCong.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).

*****
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
H1 : or (Bet A B D') (Bet A D' B)
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.

*****
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
H1 : or (Bet A B D') (Bet A D' B)
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
elim H1.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.

*****
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
H1 : or (Bet A B D') (Bet A D' B)
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet A B D', False
+++++
intro.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.
intro.

*****
H6 : Bet A B D'
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
H1 : or (Bet A B D') (Bet A D' B)
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
clear H1.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.
intro.
clear H1.

*****
H6 : Bet A B D'
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (B = D').
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.
intro.
clear H1.
assert (B = D').

*****
H6 : Bet A B D'
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq B D'
+++++
apply (eq_dec_implies_between_cong eq_dec A D' B).
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.
intro.
clear H1.
assert (B = D').
apply (eq_dec_implies_between_cong eq_dec A D' B).

*****
H6 : Bet A B D'
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B D'
+++++
Cong.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.
intro.
clear H1.
assert (B = D').
apply (eq_dec_implies_between_cong eq_dec A D' B).

*****
H6 : Bet A B D'
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A B A D'
+++++
Cong.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.
intro.
clear H1.
assert (B = D').

*****
H1 : eq B D'
H6 : Bet A B D'
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.
intro.
clear H1.
assert (B = D').
idtac.

*****
H1 : eq B D'
H6 : Bet A B D'
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.
intro.
clear H1.
assert (B = D').
idtac.
subst.

*****
H3 : not (eq D' D')
H4 : Cong A D' C D
H5 : Cong A D' A D'
H6 : Bet A D' D'
H2 : Cong A D' C D
H0 : not (eq C D)
H : not (eq A D')
A,C,D,D' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
intuition.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.

*****
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
H1 : or (Bet A B D') (Bet A D' B)
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet A D' B, False
+++++
intro.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.
intro.

*****
H6 : Bet A D' B
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
H1 : or (Bet A B D') (Bet A D' B)
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
clear H1.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.
intro.
clear H1.

*****
H6 : Bet A D' B
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
assert (D'=B).
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.
intro.
clear H1.
assert (D'=B).

*****
H6 : Bet A D' B
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq D' B
+++++
apply (eq_dec_implies_between_cong eq_dec A B D').
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.
intro.
clear H1.
assert (D'=B).
apply (eq_dec_implies_between_cong eq_dec A B D').

*****
H6 : Bet A D' B
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A D' B
+++++
assumption.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.
intro.
clear H1.
assert (D'=B).
apply (eq_dec_implies_between_cong eq_dec A B D').

*****
H6 : Bet A D' B
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong A D' A B
+++++
assumption.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.
intro.
clear H1.
assert (D'=B).

*****
H1 : eq D' B
H6 : Bet A D' B
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
idtac.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.
intro.
clear H1.
assert (D'=B).
idtac.

*****
H1 : eq D' B
H6 : Bet A D' B
H5 : Cong A D' A B
H4 : Cong A B C D
H3 : not (eq B D')
H2 : Cong A D' C D
D' : Tpoint
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).
intros D' HD'.
spliter.
elim (eq_dec B D').
intro.
right.
intro.
assert (Cong A D' A B).
idtac.
elim H1.
intro.
clear H1.
assert (D'=B).
idtac.
subst.

*****
H5 : Cong A B A B
H6 : Bet A B B
H2,H4 : Cong A B C D
H3 : not (eq B B)
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
intuition.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).
intro.
subst.
elim (eq_dec C D).
intro.
subst.
elim (eq_dec_implies_segment_construction_2 eq_dec B A C D).

*****
H0 : not (eq C D)
H : not (eq A B)
A,B,C,D : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq B A)
+++++
intuition.
-----
Lemma eq_dec_cong_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C D, Cong A B C D \\/ ~ Cong A B C D).
Proof.
intro eq_dec.
intros.
elim (eq_dec A B).

*****

*****

+++++
Qed.
-----
Lemma bet_dec_eq_dec :\n  (forall A B C, Bet A B C \/ ~ Bet A B C) ->\n  (forall A B:Tpoint, A=B \/ A<>B).
-----
Lemma bet_dec_eq_dec : (forall A B C, Bet A B C \\/ ~ Bet A B C) -> (forall A B:Tpoint, A=B \\/ A<>B).

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C))) (A B : Tpoint), or (eq A B) (not (eq A B))
+++++
Proof.
-----
Lemma bet_dec_eq_dec : (forall A B C, Bet A B C \\/ ~ Bet A B C) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C))) (A B : Tpoint), or (eq A B) (not (eq A B))
+++++
intros.
-----
Lemma bet_dec_eq_dec : (forall A B C, Bet A B C \\/ ~ Bet A B C) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros.

*****
A,B : Tpoint
H : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C))
Tn : Tarski_neutral_dimensionless
*****
or (eq A B) (not (eq A B))
+++++
induction (H A B A).
-----
Lemma bet_dec_eq_dec : (forall A B C, Bet A B C \\/ ~ Bet A B C) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros.
induction (H A B A).

*****
H0 : Bet A B A
A,B : Tpoint
H : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C))
Tn : Tarski_neutral_dimensionless
*****
or (eq A B) (not (eq A B))
+++++
left.
-----
Lemma bet_dec_eq_dec : (forall A B C, Bet A B C \\/ ~ Bet A B C) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros.
induction (H A B A).
left.

*****
H0 : Bet A B A
A,B : Tpoint
H : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C))
Tn : Tarski_neutral_dimensionless
*****
eq A B
+++++
apply between_identity.
-----
Lemma bet_dec_eq_dec : (forall A B C, Bet A B C \\/ ~ Bet A B C) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros.
induction (H A B A).
left.
apply between_identity.

*****
H0 : Bet A B A
A,B : Tpoint
H : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C))
Tn : Tarski_neutral_dimensionless
*****
Bet A B A
+++++
assumption.
-----
Lemma bet_dec_eq_dec : (forall A B C, Bet A B C \\/ ~ Bet A B C) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros.
induction (H A B A).

*****
H0 : not (Bet A B A)
A,B : Tpoint
H : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C))
Tn : Tarski_neutral_dimensionless
*****
or (eq A B) (not (eq A B))
+++++
right.
-----
Lemma bet_dec_eq_dec : (forall A B C, Bet A B C \\/ ~ Bet A B C) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros.
induction (H A B A).
right.

*****
H0 : not (Bet A B A)
A,B : Tpoint
H : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C))
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
intro.
-----
Lemma bet_dec_eq_dec : (forall A B C, Bet A B C \\/ ~ Bet A B C) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros.
induction (H A B A).
right.
intro.

*****
H1 : eq A B
H0 : not (Bet A B A)
A,B : Tpoint
H : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
subst.
-----
Lemma bet_dec_eq_dec : (forall A B C, Bet A B C \\/ ~ Bet A B C) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros.
induction (H A B A).
right.
intro.
subst.

*****
H0 : not (Bet B B B)
B : Tpoint
H : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H0.
-----
Lemma bet_dec_eq_dec : (forall A B C, Bet A B C \\/ ~ Bet A B C) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros.
induction (H A B A).
right.
intro.
subst.
apply H0.

*****
H0 : not (Bet B B B)
B : Tpoint
H : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C))
Tn : Tarski_neutral_dimensionless
*****
Bet B B B
+++++
apply between_trivial.
-----
Lemma bet_dec_eq_dec : (forall A B C, Bet A B C \\/ ~ Bet A B C) -> (forall A B:Tpoint, A=B \\/ A<>B).
Proof.
intros.
induction (H A B A).

*****

*****

+++++
Qed.
-----
Lemma eq_dec_implies_between_cong_3 :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B D E : Tpoint) (_ : not (eq A B)) (_ : Bet A B D) (_ : Bet A B E) (_ : Cong B D B E), eq D E
+++++
Proof.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B D E : Tpoint) (_ : not (eq A B)) (_ : Bet A B D) (_ : Bet A B E) (_ : Cong B D B E), eq D E
+++++
intro eq_dec.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.

*****
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall (A B D E : Tpoint) (_ : not (eq A B)) (_ : Bet A B D) (_ : Bet A B E) (_ : Cong B D B E), eq D E
+++++
intros.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.
intros.

*****
H2 : Cong B D B E
H1 : Bet A B E
H0 : Bet A B D
H : not (eq A B)
A,B,D,E : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq D E
+++++
assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.
intros.
assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).

*****
T : or (Bet B D E) (Bet B E D)
H2 : Cong B D B E
H1 : Bet A B E
H0 : Bet A B D
H : not (eq A B)
A,B,D,E : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq D E
+++++
elim T.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.
intros.
assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).
elim T.

*****
T : or (Bet B D E) (Bet B E D)
H2 : Cong B D B E
H1 : Bet A B E
H0 : Bet A B D
H : not (eq A B)
A,B,D,E : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet B D E, eq D E
+++++
intro.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.
intros.
assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).
elim T.
intro.

*****
H3 : Bet B D E
T : or (Bet B D E) (Bet B E D)
H2 : Cong B D B E
H1 : Bet A B E
H0 : Bet A B D
H : not (eq A B)
A,B,D,E : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq D E
+++++
clear T.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.
intros.
assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).
elim T.
intro.
clear T.

*****
H3 : Bet B D E
H2 : Cong B D B E
H1 : Bet A B E
H0 : Bet A B D
H : not (eq A B)
A,B,D,E : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq D E
+++++
apply eq_dec_implies_between_cong with B.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.
intros.
assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).
elim T.
intro.
clear T.
apply eq_dec_implies_between_cong with B.

*****
H3 : Bet B D E
H2 : Cong B D B E
H1 : Bet A B E
H0 : Bet A B D
H : not (eq A B)
A,B,D,E : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
Cong.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.
intros.
assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).
elim T.
intro.
clear T.
apply eq_dec_implies_between_cong with B.

*****
H3 : Bet B D E
H2 : Cong B D B E
H1 : Bet A B E
H0 : Bet A B D
H : not (eq A B)
A,B,D,E : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B D E
+++++
Cong.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.
intros.
assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).
elim T.
intro.
clear T.
apply eq_dec_implies_between_cong with B.

*****
H3 : Bet B D E
H2 : Cong B D B E
H1 : Bet A B E
H0 : Bet A B D
H : not (eq A B)
A,B,D,E : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B D B E
+++++
Cong.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.
intros.
assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).
elim T.

*****
T : or (Bet B D E) (Bet B E D)
H2 : Cong B D B E
H1 : Bet A B E
H0 : Bet A B D
H : not (eq A B)
A,B,D,E : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall _ : Bet B E D, eq D E
+++++
intro.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.
intros.
assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).
elim T.
intro.

*****
H3 : Bet B E D
T : or (Bet B D E) (Bet B E D)
H2 : Cong B D B E
H1 : Bet A B E
H0 : Bet A B D
H : not (eq A B)
A,B,D,E : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq D E
+++++
clear T.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.
intros.
assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).
elim T.
intro.
clear T.

*****
H3 : Bet B E D
H2 : Cong B D B E
H1 : Bet A B E
H0 : Bet A B D
H : not (eq A B)
A,B,D,E : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq D E
+++++
symmetry.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.
intros.
assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).
elim T.
intro.
clear T.
symmetry.

*****
H3 : Bet B E D
H2 : Cong B D B E
H1 : Bet A B E
H0 : Bet A B D
H : not (eq A B)
A,B,D,E : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq E D
+++++
apply eq_dec_implies_between_cong with B.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.
intros.
assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).
elim T.
intro.
clear T.
symmetry.
apply eq_dec_implies_between_cong with B.

*****
H3 : Bet B E D
H2 : Cong B D B E
H1 : Bet A B E
H0 : Bet A B D
H : not (eq A B)
A,B,D,E : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
Cong.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.
intros.
assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).
elim T.
intro.
clear T.
symmetry.
apply eq_dec_implies_between_cong with B.

*****
H3 : Bet B E D
H2 : Cong B D B E
H1 : Bet A B E
H0 : Bet A B D
H : not (eq A B)
A,B,D,E : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B E D
+++++
Cong.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.
intros.
assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).
elim T.
intro.
clear T.
symmetry.
apply eq_dec_implies_between_cong with B.

*****
H3 : Bet B E D
H2 : Cong B D B E
H1 : Bet A B E
H0 : Bet A B D
H : not (eq A B)
A,B,D,E : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B E B D
+++++
Cong.
-----
Lemma eq_dec_implies_between_cong_3 : (forall A B:Tpoint, A=B \\/ A<>B) -> forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.
Proof.
intro eq_dec.
intros.
assert (T:=eq_dec_implies_l5_2 eq_dec A B D E H H0 H1).
elim T.

*****

*****

+++++
Qed.
-----
Lemma eq_dec_bet_dec :\n  (forall A B:Tpoint, A=B \/ A<>B) ->\n  (forall A B C, Bet A B C \/ ~ Bet A B C).
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
+++++
Proof.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B))) (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
+++++
intro eq_dec.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.

*****
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C))
+++++
intros.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.

*****
A,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (not (Bet A B C))
+++++
elim (segment_construction A B B C).
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).

*****
A,B,C : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall (x : Tpoint) (_ : and (Bet A B x) (Cong B x B C)), or (Bet A B C) (not (Bet A B C))
+++++
intros C' HC'.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.

*****
HC' : and (Bet A B C') (Cong B C' B C)
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (not (Bet A B C))
+++++
spliter.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.

*****
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (not (Bet A B C))
+++++
elim (eq_dec C C').
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').

*****
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq C C', or (Bet A B C) (not (Bet A B C))
+++++
intro.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.

*****
H1 : eq C C'
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (not (Bet A B C))
+++++
subst.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.
subst.

*****
H0 : Cong B C' B C'
H : Bet A B C'
A,B,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C') (not (Bet A B C'))
+++++
tauto.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').

*****
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq C C'), or (Bet A B C) (not (Bet A B C))
+++++
intro.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.

*****
H1 : not (eq C C')
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (not (Bet A B C))
+++++
elim (eq_dec A B).
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.
elim (eq_dec A B).

*****
H1 : not (eq C C')
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq A B, or (Bet A B C) (not (Bet A B C))
+++++
intro.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.
elim (eq_dec A B).
intro.

*****
H2 : eq A B
H1 : not (eq C C')
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (not (Bet A B C))
+++++
left.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.
elim (eq_dec A B).
intro.
left.

*****
H2 : eq A B
H1 : not (eq C C')
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
subst.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.
elim (eq_dec A B).
intro.
left.
subst.

*****
H1 : not (eq C C')
H0 : Cong B C' B C
H : Bet B B C'
B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet B B C
+++++
Between.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.
elim (eq_dec A B).

*****
H1 : not (eq C C')
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq A B), or (Bet A B C) (not (Bet A B C))
+++++
intro.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.
elim (eq_dec A B).
intro.

*****
H2 : not (eq A B)
H1 : not (eq C C')
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
or (Bet A B C) (not (Bet A B C))
+++++
right.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.
elim (eq_dec A B).
intro.
right.

*****
H2 : not (eq A B)
H1 : not (eq C C')
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (Bet A B C)
+++++
intro.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.
elim (eq_dec A B).
intro.
right.
intro.

*****
H3 : Bet A B C
H2 : not (eq A B)
H1 : not (eq C C')
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
False
+++++
apply H1.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.
elim (eq_dec A B).
intro.
right.
intro.
apply H1.

*****
H3 : Bet A B C
H2 : not (eq A B)
H1 : not (eq C C')
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
eq C C'
+++++
apply eq_dec_implies_between_cong_3 with A B.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.
elim (eq_dec A B).
intro.
right.
intro.
apply H1.
apply eq_dec_implies_between_cong_3 with A B.

*****
H3 : Bet A B C
H2 : not (eq A B)
H1 : not (eq C C')
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
forall A B : Tpoint, or (eq A B) (not (eq A B))
+++++
Cong.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.
elim (eq_dec A B).
intro.
right.
intro.
apply H1.
apply eq_dec_implies_between_cong_3 with A B.

*****
H3 : Bet A B C
H2 : not (eq A B)
H1 : not (eq C C')
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
not (eq A B)
+++++
Cong.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.
elim (eq_dec A B).
intro.
right.
intro.
apply H1.
apply eq_dec_implies_between_cong_3 with A B.

*****
H3 : Bet A B C
H2 : not (eq A B)
H1 : not (eq C C')
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C
+++++
Cong.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.
elim (eq_dec A B).
intro.
right.
intro.
apply H1.
apply eq_dec_implies_between_cong_3 with A B.

*****
H3 : Bet A B C
H2 : not (eq A B)
H1 : not (eq C C')
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Bet A B C'
+++++
Cong.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').
intro.
elim (eq_dec A B).
intro.
right.
intro.
apply H1.
apply eq_dec_implies_between_cong_3 with A B.

*****
H3 : Bet A B C
H2 : not (eq A B)
H1 : not (eq C C')
H0 : Cong B C' B C
H : Bet A B C'
A,B,C,C' : Tpoint
eq_dec : forall A B : Tpoint, or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
Cong B C B C'
+++++
Cong.
-----
Lemma eq_dec_bet_dec : (forall A B:Tpoint, A=B \\/ A<>B) -> (forall A B C, Bet A B C \\/ ~ Bet A B C).
Proof.
intro eq_dec.
intros.
elim (segment_construction A B B C).
intros C' HC'.
spliter.
elim (eq_dec C C').

*****

*****

+++++
Qed.
-----
Definition decidability_of_equality_of_points := forall A B:Tpoint, A=B \/ A<>B.
-----
Definition decidability_of_congruence_of_points := forall A B C D:Tpoint,\n  Cong A B C D \/ ~ Cong A B C D.
-----
Definition decidability_of_betweenness_of_points := forall A B C:Tpoint,\n  Bet A B C \/ ~ Bet A B C.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations :\n  all_equiv  (decidability_of_equality_of_points::\n              decidability_of_congruence_of_points::\n              decidability_of_betweenness_of_points::nil).
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).

*****
Tn : Tarski_neutral_dimensionless
*****
all_equiv (cons decidability_of_equality_of_points (cons decidability_of_congruence_of_points (cons decidability_of_betweenness_of_points nil)))
+++++
Proof.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.

*****
Tn : Tarski_neutral_dimensionless
*****
all_equiv (cons decidability_of_equality_of_points (cons decidability_of_congruence_of_points (cons decidability_of_betweenness_of_points nil)))
+++++
unfold all_equiv.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (x y : Prop) (_ : In x (cons decidability_of_equality_of_points (cons decidability_of_congruence_of_points (cons decidability_of_betweenness_of_points nil)))) (_ : In y (cons decidability_of_equality_of_points (cons decidability_of_congruence_of_points (cons decidability_of_betweenness_of_points nil)))), iff x y
+++++
simpl.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.

*****
Tn : Tarski_neutral_dimensionless
*****
forall (x y : Prop) (_ : or (eq decidability_of_equality_of_points x) (or (eq decidability_of_congruence_of_points x) (or (eq decidability_of_betweenness_of_points x) False))) (_ : or (eq decidability_of_equality_of_points y) (or (eq decidability_of_congruence_of_points y) (or (eq decidability_of_betweenness_of_points y) False))), iff x y
+++++
intros.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.

*****
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
H : or (eq decidability_of_equality_of_points x)\n (or (eq decidability_of_congruence_of_points x)\n (or (eq decidability_of_betweenness_of_points x) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
assert (P:=cong_dec_eq_dec).
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).

*****
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
H : or (eq decidability_of_equality_of_points x)\n (or (eq decidability_of_congruence_of_points x)\n (or (eq decidability_of_betweenness_of_points x) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
assert (Q:=eq_dec_cong_dec).
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).

*****
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
H : or (eq decidability_of_equality_of_points x)\n (or (eq decidability_of_congruence_of_points x)\n (or (eq decidability_of_betweenness_of_points x) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
assert (R:=bet_dec_eq_dec).
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).

*****
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
H : or (eq decidability_of_equality_of_points x)\n (or (eq decidability_of_congruence_of_points x)\n (or (eq decidability_of_betweenness_of_points x) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
assert (S:=eq_dec_bet_dec).
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).

*****
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
H : or (eq decidability_of_equality_of_points x)\n (or (eq decidability_of_congruence_of_points x)\n (or (eq decidability_of_betweenness_of_points x) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
decompose [or] H.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.

*****
H1 : eq decidability_of_equality_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
H : or (eq decidability_of_equality_of_points x)\n (or (eq decidability_of_congruence_of_points x)\n (or (eq decidability_of_betweenness_of_points x) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.

*****
H1 : eq decidability_of_equality_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
decompose [or] H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.

*****
H : eq decidability_of_equality_of_points y
H1 : eq decidability_of_equality_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.

*****
H : eq decidability_of_equality_of_points y
H1 : eq decidability_of_equality_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
subst.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.
subst.

*****
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
iff decidability_of_equality_of_points decidability_of_equality_of_points
+++++
tauto.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.

*****
H2 : eq decidability_of_congruence_of_points y
H1 : eq decidability_of_equality_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.

*****
H2 : eq decidability_of_congruence_of_points y
H1 : eq decidability_of_equality_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
subst.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.
subst.

*****
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
iff decidability_of_equality_of_points decidability_of_congruence_of_points
+++++
tauto.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.

*****
H : eq decidability_of_betweenness_of_points y
H1 : eq decidability_of_equality_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.

*****
H : eq decidability_of_betweenness_of_points y
H1 : eq decidability_of_equality_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
subst.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.
subst.

*****
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
iff decidability_of_equality_of_points decidability_of_betweenness_of_points
+++++
tauto.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.

*****
H : False
H1 : eq decidability_of_equality_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.

*****
H : False
H1 : eq decidability_of_equality_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
subst.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.
subst.

*****
H : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff decidability_of_equality_of_points y
+++++
tauto.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.

*****
H2 : eq decidability_of_congruence_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
H : or (eq decidability_of_equality_of_points x)\n (or (eq decidability_of_congruence_of_points x)\n (or (eq decidability_of_betweenness_of_points x) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.

*****
H2 : eq decidability_of_congruence_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
decompose [or] H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.

*****
H : eq decidability_of_equality_of_points y
H2 : eq decidability_of_congruence_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.

*****
H : eq decidability_of_equality_of_points y
H2 : eq decidability_of_congruence_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
subst.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.
subst.

*****
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
iff decidability_of_congruence_of_points decidability_of_equality_of_points
+++++
tauto.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.

*****
H1 : eq decidability_of_congruence_of_points y
H2 : eq decidability_of_congruence_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.

*****
H1 : eq decidability_of_congruence_of_points y
H2 : eq decidability_of_congruence_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
subst.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.
subst.

*****
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
iff decidability_of_congruence_of_points decidability_of_congruence_of_points
+++++
tauto.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.

*****
H : eq decidability_of_betweenness_of_points y
H2 : eq decidability_of_congruence_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.

*****
H : eq decidability_of_betweenness_of_points y
H2 : eq decidability_of_congruence_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
subst.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.
subst.

*****
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
iff decidability_of_congruence_of_points decidability_of_betweenness_of_points
+++++
tauto.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.

*****
H : False
H2 : eq decidability_of_congruence_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.

*****
H : False
H2 : eq decidability_of_congruence_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
subst.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.
subst.

*****
H : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff decidability_of_congruence_of_points y
+++++
tauto.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.

*****
H1 : eq decidability_of_betweenness_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
H : or (eq decidability_of_equality_of_points x)\n (or (eq decidability_of_congruence_of_points x)\n (or (eq decidability_of_betweenness_of_points x) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.

*****
H1 : eq decidability_of_betweenness_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
decompose [or] H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.

*****
H : eq decidability_of_equality_of_points y
H1 : eq decidability_of_betweenness_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.

*****
H : eq decidability_of_equality_of_points y
H1 : eq decidability_of_betweenness_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
subst.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.
subst.

*****
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
iff decidability_of_betweenness_of_points decidability_of_equality_of_points
+++++
tauto.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.

*****
H2 : eq decidability_of_congruence_of_points y
H1 : eq decidability_of_betweenness_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.

*****
H2 : eq decidability_of_congruence_of_points y
H1 : eq decidability_of_betweenness_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
subst.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.
subst.

*****
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
iff decidability_of_betweenness_of_points decidability_of_congruence_of_points
+++++
tauto.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.

*****
H : eq decidability_of_betweenness_of_points y
H1 : eq decidability_of_betweenness_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.

*****
H : eq decidability_of_betweenness_of_points y
H1 : eq decidability_of_betweenness_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
subst.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.
subst.

*****
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Tn : Tarski_neutral_dimensionless
*****
iff decidability_of_betweenness_of_points decidability_of_betweenness_of_points
+++++
tauto.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.

*****
H : False
H1 : eq decidability_of_betweenness_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.

*****
H : False
H1 : eq decidability_of_betweenness_of_points x
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
subst.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.
subst.

*****
H : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff decidability_of_betweenness_of_points y
+++++
tauto.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.

*****
H1 : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
H : or (eq decidability_of_equality_of_points x)\n (or (eq decidability_of_congruence_of_points x)\n (or (eq decidability_of_betweenness_of_points x) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.

*****
H1 : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
decompose [or] H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.

*****
H : eq decidability_of_equality_of_points y
H1 : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.

*****
H : eq decidability_of_equality_of_points y
H1 : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
subst.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.
subst.

*****
H1 : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x decidability_of_equality_of_points
+++++
tauto.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.

*****
H2 : eq decidability_of_congruence_of_points y
H1 : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.

*****
H2 : eq decidability_of_congruence_of_points y
H1 : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
subst.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.
subst.

*****
H1 : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x decidability_of_congruence_of_points
+++++
tauto.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.

*****
H : eq decidability_of_betweenness_of_points y
H1 : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.

*****
H : eq decidability_of_betweenness_of_points y
H1 : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
subst.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.
subst.

*****
H1 : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x decidability_of_betweenness_of_points
+++++
tauto.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.

*****
H1,H : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
H0 : or (eq decidability_of_equality_of_points y)\n (or (eq decidability_of_congruence_of_points y)\n (or (eq decidability_of_betweenness_of_points y) False))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
clear H0.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.

*****
H1,H : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
subst.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.
clear H.
decompose [or] H0.
clear H0.
subst.

*****
H1,H : False
S : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C : Tpoint), or (Bet A B C) (not (Bet A B C))
R : forall (_ : forall A B C : Tpoint, or (Bet A B C) (not (Bet A B C)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
Q : forall (_ : forall A B : Tpoint, or (eq A B) (not (eq A B)))\n (A B C D : Tpoint), or (Cong A B C D) (not (Cong A B C D))
P : forall\n (_ : forall A B C D : Tpoint, or (Cong A B C D) (not (Cong A B C D)))\n (A B : Tpoint), or (eq A B) (not (eq A B))
x,y : Prop
Tn : Tarski_neutral_dimensionless
*****
iff x y
+++++
tauto.
-----
Theorem equivalence_between_decidability_properties_of_basic_relations : all_equiv (decidability_of_equality_of_points:: decidability_of_congruence_of_points:: decidability_of_betweenness_of_points::nil).
Proof.
unfold all_equiv.
simpl.
intros.
assert (P:=cong_dec_eq_dec).
assert (Q:=eq_dec_cong_dec).
assert (R:=bet_dec_eq_dec).
assert (S:=eq_dec_bet_dec).
decompose [or] H.

*****

*****

+++++
Qed.
-----
End Equivalence_between_decidability_properties_of_basic_relations.
-----
