Require Import GeoCoq.Axioms.parallel_postulates.
-----
Require Import GeoCoq.Tarski_dev.Ch10_line_reflexivity_2.
-----
Section par_perp_perp_playfair.
-----
Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
-----
Lemma par_perp_perp_implies_playfair :\n  perpendicular_transversal_postulate ->\n  playfair_s_postulate.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : perpendicular_transversal_postulate, playfair_s_postulate
+++++
Proof.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.

*****
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : perpendicular_transversal_postulate, playfair_s_postulate
+++++
intro HPTP.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.

*****
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
playfair_s_postulate
+++++
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.

*****
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
elim (col_dec A1 A2 P).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).

*****
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Col A1 A2 P, and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
intro HCol.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.

*****
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
elim HPar1.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.

*****
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Par_strict A1 A2 B1 B2, and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
clear HPar1.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.

*****
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Par_strict A1 A2 B1 B2, and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
intro HPar1.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.
intro HPar1.

*****
HPar1 : Par_strict A1 A2 B1 B2
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
try (exfalso; apply HPar1; exists P; Col).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.

*****
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : and (not (eq A1 A2)) (and (not (eq B1 B2)) (and (Col A1 B1 B2) (Col A2 B1 B2))), and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
clear HPar1.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.

*****
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : and (not (eq A1 A2)) (and (not (eq B1 B2)) (and (Col A1 B1 B2) (Col A2 B1 B2))), and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
intro HPar1.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.
intro HPar1.

*****
HPar1 : and (not (eq A1 A2))\n (and (not (eq B1 B2)) (and (Col A1 B1 B2) (Col A2 B1 B2)))
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
try (exfalso; apply HPar1; exists P; Col).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.
intro HPar1.
try (exfalso; apply HPar1; exists P; Col).

*****
HPar1 : and (not (eq A1 A2))\n (and (not (eq B1 B2)) (and (Col A1 B1 B2) (Col A2 B1 B2)))
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
elim HPar2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.
intro HPar1.
try (exfalso; apply HPar1; exists P; Col).
elim HPar2.

*****
HPar1 : and (not (eq A1 A2))\n (and (not (eq B1 B2)) (and (Col A1 B1 B2) (Col A2 B1 B2)))
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Par_strict A1 A2 C1 C2, and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
clear HPar2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.
intro HPar1.
try (exfalso; apply HPar1; exists P; Col).
elim HPar2.
clear HPar2.

*****
HPar1 : and (not (eq A1 A2))\n (and (not (eq B1 B2)) (and (Col A1 B1 B2) (Col A2 B1 B2)))
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : Par_strict A1 A2 C1 C2, and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
intro HPar2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.
intro HPar1.
try (exfalso; apply HPar1; exists P; Col).
elim HPar2.
clear HPar2.
intro HPar2.

*****
HPar2 : Par_strict A1 A2 C1 C2
HPar1 : and (not (eq A1 A2))\n (and (not (eq B1 B2)) (and (Col A1 B1 B2) (Col A2 B1 B2)))
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
try (exfalso; apply HPar2; exists P; Col).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.
intro HPar1.
try (exfalso; apply HPar1; exists P; Col).
elim HPar2.

*****
HPar1 : and (not (eq A1 A2))\n (and (not (eq B1 B2)) (and (Col A1 B1 B2) (Col A2 B1 B2)))
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : and (not (eq A1 A2)) (and (not (eq C1 C2)) (and (Col A1 C1 C2) (Col A2 C1 C2))), and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
clear HPar2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.
intro HPar1.
try (exfalso; apply HPar1; exists P; Col).
elim HPar2.
clear HPar2.

*****
HPar1 : and (not (eq A1 A2))\n (and (not (eq B1 B2)) (and (Col A1 B1 B2) (Col A2 B1 B2)))
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : and (not (eq A1 A2)) (and (not (eq C1 C2)) (and (Col A1 C1 C2) (Col A2 C1 C2))), and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
intro HPar2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.
intro HPar1.
try (exfalso; apply HPar1; exists P; Col).
elim HPar2.
clear HPar2.
intro HPar2.

*****
HPar2 : and (not (eq A1 A2))\n (and (not (eq C1 C2)) (and (Col A1 C1 C2) (Col A2 C1 C2)))
HPar1 : and (not (eq A1 A2))\n (and (not (eq B1 B2)) (and (Col A1 B1 B2) (Col A2 B1 B2)))
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
try (exfalso; apply HPar2; exists P; Col).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.
intro HPar1.
try (exfalso; apply HPar1; exists P; Col).
elim HPar2.
clear HPar2.
intro HPar2.
try (exfalso; apply HPar2; exists P; Col).

*****
HPar2 : and (not (eq A1 A2))\n (and (not (eq C1 C2)) (and (Col A1 C1 C2) (Col A2 C1 C2)))
HPar1 : and (not (eq A1 A2))\n (and (not (eq B1 B2)) (and (Col A1 B1 B2) (Col A2 B1 B2)))
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
destruct HPar1 as [HDiff1 [HDiff2 [HCol3 HCol4]]].
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.
intro HPar1.
try (exfalso; apply HPar1; exists P; Col).
elim HPar2.
clear HPar2.
intro HPar2.
try (exfalso; apply HPar2; exists P; Col).
destruct HPar1 as [HDiff1 [HDiff2 [HCol3 HCol4]]].

*****
HPar2 : and (not (eq A1 A2))\n (and (not (eq C1 C2)) (and (Col A1 C1 C2) (Col A2 C1 C2)))
HCol4 : Col A2 B1 B2
HCol3 : Col A1 B1 B2
HDiff2 : not (eq B1 B2)
HDiff1 : not (eq A1 A2)
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
clear HDiff1.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.
intro HPar1.
try (exfalso; apply HPar1; exists P; Col).
elim HPar2.
clear HPar2.
intro HPar2.
try (exfalso; apply HPar2; exists P; Col).
destruct HPar1 as [HDiff1 [HDiff2 [HCol3 HCol4]]].
clear HDiff1.

*****
HPar2 : and (not (eq A1 A2))\n (and (not (eq C1 C2)) (and (Col A1 C1 C2) (Col A2 C1 C2)))
HCol4 : Col A2 B1 B2
HCol3 : Col A1 B1 B2
HDiff2 : not (eq B1 B2)
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
destruct HPar2 as [HDiff1 [HDiff3 [HCol5 HCol6]]].
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.
intro HPar1.
try (exfalso; apply HPar1; exists P; Col).
elim HPar2.
clear HPar2.
intro HPar2.
try (exfalso; apply HPar2; exists P; Col).
destruct HPar1 as [HDiff1 [HDiff2 [HCol3 HCol4]]].
clear HDiff1.
destruct HPar2 as [HDiff1 [HDiff3 [HCol5 HCol6]]].

*****
HCol6 : Col A2 C1 C2
HCol5 : Col A1 C1 C2
HDiff3 : not (eq C1 C2)
HDiff1 : not (eq A1 A2)
HCol4 : Col A2 B1 B2
HCol3 : Col A1 B1 B2
HDiff2 : not (eq B1 B2)
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
split.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.
intro HPar1.
try (exfalso; apply HPar1; exists P; Col).
elim HPar2.
clear HPar2.
intro HPar2.
try (exfalso; apply HPar2; exists P; Col).
destruct HPar1 as [HDiff1 [HDiff2 [HCol3 HCol4]]].
clear HDiff1.
destruct HPar2 as [HDiff1 [HDiff3 [HCol5 HCol6]]].
split.

*****
HCol6 : Col A2 C1 C2
HCol5 : Col A1 C1 C2
HDiff3 : not (eq C1 C2)
HDiff1 : not (eq A1 A2)
HCol4 : Col A2 B1 B2
HCol3 : Col A1 B1 B2
HDiff2 : not (eq B1 B2)
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
ColR.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
elim HPar1.
clear HPar1.
intro HPar1.
try (exfalso; apply HPar1; exists P; Col).
elim HPar2.
clear HPar2.
intro HPar2.
try (exfalso; apply HPar2; exists P; Col).
destruct HPar1 as [HDiff1 [HDiff2 [HCol3 HCol4]]].
clear HDiff1.
destruct HPar2 as [HDiff1 [HDiff3 [HCol5 HCol6]]].
split.

*****
HCol6 : Col A2 C1 C2
HCol5 : Col A1 C1 C2
HDiff3 : not (eq C1 C2)
HDiff1 : not (eq A1 A2)
HCol4 : Col A2 B1 B2
HCol3 : Col A1 B1 B2
HDiff2 : not (eq B1 B2)
HCol : Col A1 A2 P
HCol2 : Col P C1 C2
HCol1 : Col P B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C2 B1 B2
+++++
ColR.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).

*****
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (Col A1 A2 P), and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
intro HCol.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.

*****
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert(HI := l8_18_existence A1 A2 P HCol).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).

*****
HI : ex (fun X : Tpoint => and (Col A1 A2 X) (Perp A1 A2 P X))
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
destruct HI as [I [HCol' HPerp]].
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].

*****
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (HCop1 : Coplanar B1 B2 P I).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).

*****
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar B1 B2 P I
+++++
apply col__coplanar.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
apply col__coplanar.

*****
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 P
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).

*****
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
idtac.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.

*****
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (HCop2 : Coplanar C1 C2 P I).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).

*****
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar C1 C2 P I
+++++
apply col__coplanar.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
apply col__coplanar.

*****
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 P
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).

*****
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
idtac.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.

*****
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).

*****
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).

*****
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (HCop3 : Coplanar A1 A2 P B1).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).

*****
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P B1
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P B1
+++++
apply col2_cop__cop with B1 B2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
assert_diffs.
apply col2_cop__cop with B1 B2.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 B1 B2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
assert_diffs.
apply col2_cop__cop with B1 B2.
Col.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 B1 B2
+++++
apply par__coplanar.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
assert_diffs.
apply col2_cop__cop with B1 B2.
Col.
apply par__coplanar.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 B1 B2
+++++
auto...
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
assert_diffs.
apply col2_cop__cop with B1 B2.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B1 B2)
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
assert_diffs.
apply col2_cop__cop with B1 B2.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 P
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
assert_diffs.
apply col2_cop__cop with B1 B2.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 B1
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).

*****
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
idtac.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.

*****
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (HCop4 : Coplanar A1 A2 P B2).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).

*****
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P B2
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P B2
+++++
apply col2_cop__cop with B1 B2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
assert_diffs.
apply col2_cop__cop with B1 B2.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 B1 B2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
assert_diffs.
apply col2_cop__cop with B1 B2.
Col.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 B1 B2
+++++
apply par__coplanar.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
assert_diffs.
apply col2_cop__cop with B1 B2.
Col.
apply par__coplanar.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 B1 B2
+++++
auto...
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
assert_diffs.
apply col2_cop__cop with B1 B2.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq B1 B2)
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
assert_diffs.
apply col2_cop__cop with B1 B2.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 P
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
assert_diffs.
apply col2_cop__cop with B1 B2.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 B2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).

*****
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
idtac.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.

*****
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (HCop5 : Coplanar A1 A2 P C1).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).

*****
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P C1
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P C1
+++++
apply col2_cop__cop with C1 C2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
assert_diffs.
apply col2_cop__cop with C1 C2.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 C1 C2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
assert_diffs.
apply col2_cop__cop with C1 C2.
Col.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 C1 C2
+++++
apply par__coplanar.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
assert_diffs.
apply col2_cop__cop with C1 C2.
Col.
apply par__coplanar.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C2
+++++
auto...
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
assert_diffs.
apply col2_cop__cop with C1 C2.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C1 C2)
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
assert_diffs.
apply col2_cop__cop with C1 C2.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 P
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
assert_diffs.
apply col2_cop__cop with C1 C2.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 C1
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).

*****
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
idtac.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.

*****
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (HCop6 : Coplanar A1 A2 P C2).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).

*****
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P C2
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P C2
+++++
apply col2_cop__cop with C1 C2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
assert_diffs.
apply col2_cop__cop with C1 C2.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 C1 C2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
assert_diffs.
apply col2_cop__cop with C1 C2.
Col.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 C1 C2
+++++
apply par__coplanar.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
assert_diffs.
apply col2_cop__cop with C1 C2.
Col.
apply par__coplanar.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Par A1 A2 C1 C2
+++++
auto...
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
assert_diffs.
apply col2_cop__cop with C1 C2.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq C1 C2)
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
assert_diffs.
apply col2_cop__cop with C1 C2.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 P
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
assert_diffs.
apply col2_cop__cop with C1 C2.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 C2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).

*****
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
idtac.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.

*****
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
assert (HCop7 : Coplanar A1 A2 P I).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).

*****
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar A1 A2 P I
+++++
Cop.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).

*****
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
idtac.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.

*****
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
and (Col C1 B1 B2) (Col C2 B1 B2)
+++++
split.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.

*****
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
elim (eq_dec_points P C1).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).

*****
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq P C1, Col C1 B1 B2
+++++
intro HDiff.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.

*****
HDiff : eq P C1
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
subst.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.

*****
HPerp : Perp A1 A2 C1 I
HCop1 : Coplanar B1 B2 C1 I
HCop2 : Coplanar C1 C2 C1 I
HPerp1 : Perp B1 B2 C1 I
HPerp2 : Perp C1 C2 C1 I
HCop3 : Coplanar A1 A2 C1 B1
HCop4 : Coplanar A1 A2 C1 B2
HCop5 : Coplanar A1 A2 C1 C1
HCop6 : Coplanar A1 A2 C1 C2
HCop7 : Coplanar A1 A2 C1 I
HCol' : Col A1 A2 I
I : Tpoint
HCol2 : Col C1 C1 C2
HCol : not (Col A1 A2 C1)
HPar2 : Par A1 A2 C1 C2
HCol1 : Col C1 B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).

*****
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq P C1), Col C1 B1 B2
+++++
intro HDiff.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.

*****
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
subst.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.

*****
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.

*****
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
assert (Col P C1 B1).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).

*****
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C1 B1
+++++
elim (eq_dec_points P B1).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).

*****
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq P B1, Col P C1 B1
+++++
intro HPB1.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.

*****
HPB1 : eq P B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C1 B1
+++++
subst.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.

*****
HPerp : Perp A1 A2 B1 I
HCop1 : Coplanar B1 B2 B1 I
HCop2 : Coplanar C1 C2 B1 I
HPerp1 : Perp B1 B2 B1 I
HPerp2 : Perp C1 C2 B1 I
HCop3 : Coplanar A1 A2 B1 B1
HCop4 : Coplanar A1 A2 B1 B2
HCop5 : Coplanar A1 A2 B1 C1
HCop6 : Coplanar A1 A2 B1 C2
HCop7 : Coplanar A1 A2 B1 I
HDiff : not (eq B1 C1)
HCol' : Col A1 A2 I
I : Tpoint
HCol2 : Col B1 C1 C2
HCol : not (Col A1 A2 B1)
HPar2 : Par A1 A2 C1 C2
HCol1 : Col B1 B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 C1 B1
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).

*****
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq P B1), Col P C1 B1
+++++
intro HPB1.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C1 B1
+++++
subst.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C1 B1
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C1 B1
+++++
apply cop_perp2__col with P I.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P I C1 B1
+++++
CopR.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P C1 P I
+++++
apply perp_sym.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P I P C1
+++++
apply perp_col0 with C1 C2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C1 C2 P I
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C1 C2 P I
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P C1)
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P C1)
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 P
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 P
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 C1
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 C1
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P B1 P I
+++++
apply perp_sym.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P I P B1
+++++
apply perp_col0 with B1 B2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B1 B2 P I
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B1 B2 P I
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P B1)
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P B1)
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 P
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 P
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 B1
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPB1 : not (eq P B1)
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 B1
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).

*****
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
assert (Col P C1 B2).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).

*****
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C1 B2
+++++
elim (eq_dec_points P B2).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).

*****
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq P B2, Col P C1 B2
+++++
intro HPB2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.

*****
HPB2 : eq P B2
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C1 B2
+++++
subst.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.

*****
HPerp : Perp A1 A2 B2 I
HCop1 : Coplanar B1 B2 B2 I
HCop2 : Coplanar C1 C2 B2 I
HPerp1 : Perp B1 B2 B2 I
HPerp2 : Perp C1 C2 B2 I
HCop3 : Coplanar A1 A2 B2 B1
HCop4 : Coplanar A1 A2 B2 B2
HCop5 : Coplanar A1 A2 B2 C1
HCop6 : Coplanar A1 A2 B2 C2
HCop7 : Coplanar A1 A2 B2 I
HDiff : not (eq B2 C1)
H : Col B2 C1 B1
HCol' : Col A1 A2 I
I : Tpoint
HCol2 : Col B2 C1 C2
HCol : not (Col A1 A2 B2)
HPar2 : Par A1 A2 C1 C2
HCol1 : Col B2 B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B2 C1 B2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).

*****
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq P B2), Col P C1 B2
+++++
intro HPB2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.

*****
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C1 B2
+++++
subst.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.

*****
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C1 B2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.

*****
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C1 B2
+++++
apply cop_perp2__col with P I.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.

*****
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P I C1 B2
+++++
CopR.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.

*****
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P C1 P I
+++++
apply perp_sym.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.

*****
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P I P C1
+++++
apply perp_col0 with C1 C2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.

*****
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C1 C2 P I
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.
assert_diffs.

*****
H6 : not (eq B1 B2)
H4 : not (eq P I)
H1 : not (eq C1 C2)
H5 : not (eq A1 P)
H2 : not (eq A2 P)
H3 : not (eq A1 A2)
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C1 C2 P I
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.

*****
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P C1)
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.
assert_diffs.

*****
H6 : not (eq B1 B2)
H4 : not (eq P I)
H1 : not (eq C1 C2)
H5 : not (eq A1 P)
H2 : not (eq A2 P)
H3 : not (eq A1 A2)
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P C1)
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.

*****
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 P
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.
assert_diffs.

*****
H6 : not (eq B1 B2)
H4 : not (eq P I)
H1 : not (eq C1 C2)
H5 : not (eq A1 P)
H2 : not (eq A2 P)
H3 : not (eq A1 A2)
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 P
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.

*****
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 C1
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.
assert_diffs.

*****
H6 : not (eq B1 B2)
H4 : not (eq P I)
H1 : not (eq C1 C2)
H5 : not (eq A1 P)
H2 : not (eq A2 P)
H3 : not (eq A1 A2)
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 C1
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.

*****
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P B2 P I
+++++
apply perp_sym.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.

*****
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P I P B2
+++++
apply perp_col0 with B1 B2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.

*****
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B1 B2 P I
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.
assert_diffs.

*****
H6 : not (eq B1 B2)
H4 : not (eq P I)
H1 : not (eq C1 C2)
H5 : not (eq A1 P)
H2 : not (eq A2 P)
H3 : not (eq A1 A2)
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B1 B2 P I
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.

*****
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P B2)
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.
assert_diffs.

*****
H6 : not (eq B1 B2)
H4 : not (eq P I)
H1 : not (eq C1 C2)
H5 : not (eq A1 P)
H2 : not (eq A2 P)
H3 : not (eq A1 A2)
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P B2)
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.

*****
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 P
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.
assert_diffs.

*****
H6 : not (eq B1 B2)
H4 : not (eq P I)
H1 : not (eq C1 C2)
H5 : not (eq A1 P)
H2 : not (eq A2 P)
H3 : not (eq A1 A2)
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 P
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.

*****
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 B2
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.
assert_diffs.

*****
H6 : not (eq B1 B2)
H4 : not (eq P I)
H1 : not (eq C1 C2)
H5 : not (eq A1 P)
H2 : not (eq A2 P)
H3 : not (eq A1 A2)
HPB2 : not (eq P B2)
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 B2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C1).
intro HDiff.
subst.
Col.
assert (Col P C1 B1).
assert (Col P C1 B2).

*****
H0 : Col P C1 B2
H : Col P C1 B1
HDiff : not (eq P C1)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 B1 B2
+++++
ColR.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.

*****
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C2 B1 B2
+++++
elim (eq_dec_points P C2).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).

*****
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq P C2, Col C2 B1 B2
+++++
intro HDiff.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.

*****
HDiff : eq P C2
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C2 B1 B2
+++++
subst.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.

*****
HPerp : Perp A1 A2 C2 I
HCop1 : Coplanar B1 B2 C2 I
HCop2 : Coplanar C1 C2 C2 I
HPerp1 : Perp B1 B2 C2 I
HPerp2 : Perp C1 C2 C2 I
HCop3 : Coplanar A1 A2 C2 B1
HCop4 : Coplanar A1 A2 C2 B2
HCop5 : Coplanar A1 A2 C2 C1
HCop6 : Coplanar A1 A2 C2 C2
HCop7 : Coplanar A1 A2 C2 I
HCol' : Col A1 A2 I
I : Tpoint
HCol2 : Col C2 C1 C2
HCol : not (Col A1 A2 C2)
HPar2 : Par A1 A2 C1 C2
HCol1 : Col C2 B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C2 B1 B2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).

*****
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq P C2), Col C2 B1 B2
+++++
intro HDiff.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.

*****
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C2 B1 B2
+++++
subst.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.

*****
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C2 B1 B2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.

*****
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C2 B1 B2
+++++
assert (Col P C2 B1).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).

*****
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C2 B1
+++++
elim (eq_dec_points P B1).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).

*****
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq P B1, Col P C2 B1
+++++
intro HPB1.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.

*****
HPB1 : eq P B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C2 B1
+++++
subst.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.

*****
HPerp : Perp A1 A2 B1 I
HCop1 : Coplanar B1 B2 B1 I
HCop2 : Coplanar C1 C2 B1 I
HPerp1 : Perp B1 B2 B1 I
HPerp2 : Perp C1 C2 B1 I
HCop3 : Coplanar A1 A2 B1 B1
HCop4 : Coplanar A1 A2 B1 B2
HCop5 : Coplanar A1 A2 B1 C1
HCop6 : Coplanar A1 A2 B1 C2
HCop7 : Coplanar A1 A2 B1 I
HDiff : not (eq B1 C2)
HCol' : Col A1 A2 I
I : Tpoint
HCol2 : Col B1 C1 C2
HCol : not (Col A1 A2 B1)
HPar2 : Par A1 A2 C1 C2
HCol1 : Col B1 B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 C2 B1
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).

*****
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq P B1), Col P C2 B1
+++++
intro HPB1.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C2 B1
+++++
subst.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C2 B1
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C2 B1
+++++
apply cop_perp2__col with P I.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P I C2 B1
+++++
CopR.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P C2 P I
+++++
apply perp_sym.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P I P C2
+++++
apply perp_col0 with C1 C2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C1 C2 P I
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C1 C2 P I
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P C2)
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P C2)
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 P
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 P
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 C2
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 C2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P B1 P I
+++++
apply perp_sym.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P I P B1
+++++
apply perp_col0 with B1 B2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B1 B2 P I
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B1 B2 P I
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P B1)
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P B1)
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 P
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 P
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.

*****
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 B1
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
elim (eq_dec_points P B1).
intro HPB1.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.
assert_diffs.

*****
H5 : not (eq B1 B2)
H3 : not (eq P I)
H0 : not (eq C1 C2)
H4 : not (eq A1 P)
H1 : not (eq A2 P)
H2 : not (eq A1 A2)
HPB1 : not (eq P B1)
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 B1
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).

*****
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C2 B1 B2
+++++
assert (Col P C2 B2).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).

*****
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C2 B2
+++++
elim (eq_dec_points P B2).
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).

*****
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : eq P B2, Col P C2 B2
+++++
intro HPB2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.

*****
HPB2 : eq P B2
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C2 B2
+++++
subst.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.

*****
HPerp : Perp A1 A2 B2 I
HCop1 : Coplanar B1 B2 B2 I
HCop2 : Coplanar C1 C2 B2 I
HPerp1 : Perp B1 B2 B2 I
HPerp2 : Perp C1 C2 B2 I
HCop3 : Coplanar A1 A2 B2 B1
HCop4 : Coplanar A1 A2 B2 B2
HCop5 : Coplanar A1 A2 B2 C1
HCop6 : Coplanar A1 A2 B2 C2
HCop7 : Coplanar A1 A2 B2 I
HDiff : not (eq B2 C2)
H : Col B2 C2 B1
HCol' : Col A1 A2 I
I : Tpoint
HCol2 : Col B2 C1 C2
HCol : not (Col A1 A2 B2)
HPar2 : Par A1 A2 C1 C2
HCol1 : Col B2 B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2 : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B2 C2 B2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).

*****
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
forall _ : not (eq P B2), Col P C2 B2
+++++
intro HPB2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.

*****
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C2 B2
+++++
subst.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.

*****
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C2 B2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.

*****
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col P C2 B2
+++++
apply cop_perp2__col with P I.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.

*****
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Coplanar P I C2 B2
+++++
CopR.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.

*****
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P C2 P I
+++++
apply perp_sym.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.

*****
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P I P C2
+++++
apply perp_col0 with C1 C2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.

*****
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C1 C2 P I
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.
assert_diffs.

*****
H6 : not (eq B1 B2)
H4 : not (eq P I)
H1 : not (eq C1 C2)
H5 : not (eq A1 P)
H2 : not (eq A2 P)
H3 : not (eq A1 A2)
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp C1 C2 P I
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.

*****
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P C2)
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.
assert_diffs.

*****
H6 : not (eq B1 B2)
H4 : not (eq P I)
H1 : not (eq C1 C2)
H5 : not (eq A1 P)
H2 : not (eq A2 P)
H3 : not (eq A1 A2)
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P C2)
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.

*****
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 P
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.
assert_diffs.

*****
H6 : not (eq B1 B2)
H4 : not (eq P I)
H1 : not (eq C1 C2)
H5 : not (eq A1 P)
H2 : not (eq A2 P)
H3 : not (eq A1 A2)
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 P
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.

*****
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 C2
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with C1 C2.
assert_diffs.

*****
H6 : not (eq B1 B2)
H4 : not (eq P I)
H1 : not (eq C1 C2)
H5 : not (eq A1 P)
H2 : not (eq A2 P)
H3 : not (eq A1 A2)
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C1 C2 C2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.

*****
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P B2 P I
+++++
apply perp_sym.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.

*****
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp P I P B2
+++++
apply perp_col0 with B1 B2.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.

*****
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B1 B2 P I
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.
assert_diffs.

*****
H6 : not (eq B1 B2)
H4 : not (eq P I)
H1 : not (eq C1 C2)
H5 : not (eq A1 P)
H2 : not (eq A2 P)
H3 : not (eq A1 A2)
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Perp B1 B2 P I
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.

*****
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P B2)
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.
assert_diffs.

*****
H6 : not (eq B1 B2)
H4 : not (eq P I)
H1 : not (eq C1 C2)
H5 : not (eq A1 P)
H2 : not (eq A2 P)
H3 : not (eq A1 A2)
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
not (eq P B2)
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.

*****
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 P
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.
assert_diffs.

*****
H6 : not (eq B1 B2)
H4 : not (eq P I)
H1 : not (eq C1 C2)
H5 : not (eq A1 P)
H2 : not (eq A2 P)
H3 : not (eq A1 A2)
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 P
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.

*****
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 B2
+++++
assert_diffs.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).
elim (eq_dec_points P B2).
intro HPB2.
subst.
Col.
apply cop_perp2__col with P I.
apply perp_sym.
apply perp_col0 with B1 B2.
assert_diffs.

*****
H6 : not (eq B1 B2)
H4 : not (eq P I)
H1 : not (eq C1 C2)
H5 : not (eq A1 P)
H2 : not (eq A2 P)
H3 : not (eq A1 A2)
HPB2 : not (eq P B2)
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col B1 B2 B2
+++++
Col.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).
intro HCol.
assert(HI := l8_18_existence A1 A2 P HCol).
destruct HI as [I [HCol' HPerp]].
assert (HCop1 : Coplanar B1 B2 P I).
idtac.
assert (HCop2 : Coplanar C1 C2 P I).
idtac.
assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).
assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).
assert (HCop3 : Coplanar A1 A2 P B1).
idtac.
assert (HCop4 : Coplanar A1 A2 P B2).
idtac.
assert (HCop5 : Coplanar A1 A2 P C1).
idtac.
assert (HCop6 : Coplanar A1 A2 P C2).
idtac.
assert (HCop7 : Coplanar A1 A2 P I).
idtac.
split.
elim (eq_dec_points P C2).
intro HDiff.
subst.
Col.
assert (Col P C2 B1).
assert (Col P C2 B2).

*****
H0 : Col P C2 B2
H : Col P C2 B1
HDiff : not (eq P C2)
HCop7 : Coplanar A1 A2 P I
HCop6 : Coplanar A1 A2 P C2
HCop5 : Coplanar A1 A2 P C1
HCop4 : Coplanar A1 A2 P B2
HCop3 : Coplanar A1 A2 P B1
HPerp2 : Perp C1 C2 P I
HPerp1 : Perp B1 B2 P I
HCop2 : Coplanar C1 C2 P I
HCop1 : Coplanar B1 B2 P I
HPerp : Perp A1 A2 P I
HCol' : Col A1 A2 I
I : Tpoint
HCol : not (Col A1 A2 P)
HCol2 : Col P C1 C2
HPar2 : Par A1 A2 C1 C2
HCol1 : Col P B1 B2
HPar1 : Par A1 A2 B1 B2
A1,A2,B1,B2,C1,C2,P : Tpoint
HPTP : perpendicular_transversal_postulate
TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality Tn
Tn : Tarski_neutral_dimensionless
*****
Col C2 B1 B2
+++++
ColR.
-----
Lemma par_perp_perp_implies_playfair : perpendicular_transversal_postulate -> playfair_s_postulate.
Proof.
intro HPTP.
intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.
elim (col_dec A1 A2 P).

*****

*****

+++++
Qed.
-----
End par_perp_perp_playfair.
-----
