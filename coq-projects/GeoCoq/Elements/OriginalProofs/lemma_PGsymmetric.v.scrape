Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelsymmetric.
-----
Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelflip.
-----
Section Euclid.
-----
Context `{Ax1:euclidean_neutral}.
-----
Lemma lemma_PGsymmetric : \n   forall A B C D, \n   PG A B C D ->\n   PG C D A B.
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.

*****
Ax1 : euclidean_neutral
*****
forall (A B C D : Point) (_ : PG A B C D), PG C D A B
+++++
Proof.
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.

*****
Ax1 : euclidean_neutral
*****
forall (A B C D : Point) (_ : PG A B C D), PG C D A B
+++++
intros.
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.

*****
H : PG A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
PG C D A B
+++++
assert ((Par A B C D /\ Par A D B C)).
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.
assert ((Par A B C D /\\ Par A D B C)).

*****
H : PG A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
and (Par A B C D) (Par A D B C)
+++++
conclude_def PG .
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.
assert ((Par A B C D /\\ Par A D B C)).

*****
H0 : and (Par A B C D) (Par A D B C)
H : PG A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
PG C D A B
+++++
idtac.
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.
assert ((Par A B C D /\\ Par A D B C)).
idtac.

*****
H0 : and (Par A B C D) (Par A D B C)
H : PG A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
PG C D A B
+++++
assert (Par C D A B).
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.
assert ((Par A B C D /\\ Par A D B C)).
idtac.
assert (Par C D A B).

*****
H0 : and (Par A B C D) (Par A D B C)
H : PG A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
Par C D A B
+++++
conclude lemma_parallelsymmetric.
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.
assert ((Par A B C D /\\ Par A D B C)).
idtac.
assert (Par C D A B).

*****
H1 : Par C D A B
H0 : and (Par A B C D) (Par A D B C)
H : PG A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
PG C D A B
+++++
idtac.
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.
assert ((Par A B C D /\\ Par A D B C)).
idtac.
assert (Par C D A B).
idtac.

*****
H1 : Par C D A B
H0 : and (Par A B C D) (Par A D B C)
H : PG A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
PG C D A B
+++++
assert (Par B C A D).
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.
assert ((Par A B C D /\\ Par A D B C)).
idtac.
assert (Par C D A B).
idtac.
assert (Par B C A D).

*****
H1 : Par C D A B
H0 : and (Par A B C D) (Par A D B C)
H : PG A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
Par B C A D
+++++
conclude lemma_parallelsymmetric.
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.
assert ((Par A B C D /\\ Par A D B C)).
idtac.
assert (Par C D A B).
idtac.
assert (Par B C A D).

*****
H2 : Par B C A D
H1 : Par C D A B
H0 : and (Par A B C D) (Par A D B C)
H : PG A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
PG C D A B
+++++
idtac.
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.
assert ((Par A B C D /\\ Par A D B C)).
idtac.
assert (Par C D A B).
idtac.
assert (Par B C A D).
idtac.

*****
H2 : Par B C A D
H1 : Par C D A B
H0 : and (Par A B C D) (Par A D B C)
H : PG A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
PG C D A B
+++++
assert (Par C B D A).
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.
assert ((Par A B C D /\\ Par A D B C)).
idtac.
assert (Par C D A B).
idtac.
assert (Par B C A D).
idtac.
assert (Par C B D A).

*****
H2 : Par B C A D
H1 : Par C D A B
H0 : and (Par A B C D) (Par A D B C)
H : PG A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
Par C B D A
+++++
forward_using lemma_parallelflip.
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.
assert ((Par A B C D /\\ Par A D B C)).
idtac.
assert (Par C D A B).
idtac.
assert (Par B C A D).
idtac.
assert (Par C B D A).

*****
H3 : Par C B D A
H2 : Par B C A D
H1 : Par C D A B
H0 : and (Par A B C D) (Par A D B C)
H : PG A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
PG C D A B
+++++
idtac.
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.
assert ((Par A B C D /\\ Par A D B C)).
idtac.
assert (Par C D A B).
idtac.
assert (Par B C A D).
idtac.
assert (Par C B D A).
idtac.

*****
H3 : Par C B D A
H2 : Par B C A D
H1 : Par C D A B
H0 : and (Par A B C D) (Par A D B C)
H : PG A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
PG C D A B
+++++
assert (PG C D A B).
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.
assert ((Par A B C D /\\ Par A D B C)).
idtac.
assert (Par C D A B).
idtac.
assert (Par B C A D).
idtac.
assert (Par C B D A).
idtac.
assert (PG C D A B).

*****
H3 : Par C B D A
H2 : Par B C A D
H1 : Par C D A B
H0 : and (Par A B C D) (Par A D B C)
H : PG A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
PG C D A B
+++++
conclude_def PG .
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.
assert ((Par A B C D /\\ Par A D B C)).
idtac.
assert (Par C D A B).
idtac.
assert (Par B C A D).
idtac.
assert (Par C B D A).
idtac.
assert (PG C D A B).

*****
H4 : PG C D A B
H3 : Par C B D A
H2 : Par B C A D
H1 : Par C D A B
H0 : and (Par A B C D) (Par A D B C)
H : PG A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
PG C D A B
+++++
idtac.
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.
assert ((Par A B C D /\\ Par A D B C)).
idtac.
assert (Par C D A B).
idtac.
assert (Par B C A D).
idtac.
assert (Par C B D A).
idtac.
assert (PG C D A B).
idtac.

*****
H4 : PG C D A B
H3 : Par C B D A
H2 : Par B C A D
H1 : Par C D A B
H0 : and (Par A B C D) (Par A D B C)
H : PG A B C D
A,B,C,D : Point
Ax1 : euclidean_neutral
*****
PG C D A B
+++++
close.
-----
Lemma lemma_PGsymmetric : forall A B C D, PG A B C D -> PG C D A B.
Proof.
intros.
assert ((Par A B C D /\\ Par A D B C)).

*****

*****

+++++
Qed.
-----
End Euclid.
-----
